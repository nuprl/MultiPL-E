name: HumanEval_10_make_palindrome
language: lua
results:
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = ''\n    local length = 0\n  \
    \  while true do\n        length = length + 1\n        postfix = postfix .. string\n\
    \        reverse = reverse .. string\n        if string.find(postfix, reverse,\
    \ 1) then\n            palindrome = palindrome .. string\n            postfix\
    \ = postfix .. string\n            reverse = reverse .. string\n        end\n\
    \        if string.find(postfix, reverse, -1) then\n            palindrome = palindrome\
    \ .. string\n            postfix = postfix .. string\n            reverse = reverse\
    \ .. string\n        end\n        if string.find(postfix, reverse, -2) then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. string\n            reverse = reverse .. string\n        end\n        if\
    \ string.find(postfix, reverse, -3) then\n            palindrome = palindrome\
    \ .. string\n            postfix = postfix .. string\n            reverse = reverse\
    \ .. string\n        end\n        if string.find(postfix, reverse, -4) then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. string\n            reverse = reverse .. string\n        end\n        if\
    \ string.find(postfix, reverse, -5) then\n            palindrome = palindrome\
    \ .. string\n            postfix = postfix .. string\n            reverse = reverse\
    \ .. string\n        end\n        if string.find(postfix, reverse, -6) then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. string\n            reverse = reverse .. string\n        end\n        if\
    \ string.find(postfix, reverse, -7) then\n            palindrome = palindrome\
    \ .. string\n            postfix = postfix .. string\n            reverse = reverse\
    \ .. string\n        end\n        if string.find(postfix, reverse, -8) then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. string\n            reverse = reverse .. string\n        end\n        if\
    \ string.find(postfix, reverse, -9) then\n            palindrome = palindrome\
    \ .. string\n            postfix = postfix .. string\n            reverse = reverse\
    \ .. string\n        end\n        if string.find(postfix, reverse, -10) then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. string\n            reverse = reverse .. string\n        end\n        if\
    \ string.find(postfix, reverse, -11) then\n            palindro\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7e6q49uj.lua:77: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix = string.sub(postfix, 1, string.len(postfix) - 1)\n        reverse\
    \ = reverse .. postfix\n        if string.sub(postfix, 1, string.len(postfix))\
    \ == reverse then\n            palindrome = string.sub(postfix, 1, string.len(postfix)\
    \ - 1) .. palindrome\n            break\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm6h4a_k.lua:30:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprm6h4a_k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest_postfix_length = 0\n  while true do\n  \
    \  local postfix_length = #palindrome + #suffix\n    if postfix_length == 0 then\n\
    \      break\n    end\n    local postfix = palindrome:sub(1, postfix_length)\n\
    \    local reversed_postfix = reverse(palindrome:sub(postfix_length))\n    if\
    \ postfix ~= reversed_postfix then\n      longest_postfix_length = postfix_length\n\
    \      palindrome = palindrome .. reversed_postfix\n      suffix = suffix .. postfix\n\
    \    else\n      palindrome = palindrome .. postfix\n      suffix = suffix ..\
    \ postfix\n    end\n  end\n  return palindrome .. suffix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphosj5u80.lua:21:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmphosj5u80.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix = string\n    local longest_postfix_length = string\n\
    \    local longest_prefix_length = string\n    local longest_prefix_postfix =\
    \ string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_length = string\n    local longest_prefix_postfix_length\
    \ = string\n    local longest_prefix_postfix_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ujtbu46.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    for i = #string, 1, -1 do\n\
    \        local char = string[i]\n        reverse = reverse .. char\n        if\
    \ char == reverse then\n            longest = i\n        end\n    end\n    postfix\
    \ = postfix .. reverse\n    return postfix\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqgfrc7t.lua:17:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmplqgfrc7t.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local i = #string\n  while\
    \ i ~= 0 do\n    local c = string.sub(palindrome, i, i)\n    if c ~= string.sub(reverse,\
    \ #reverse, #reverse) then\n      postfix = string.sub(palindrome, i, #palindrome)\
    \ + reverse\n      reverse = string.sub(reverse, #reverse, #reverse) + c\n   \
    \ else\n      postfix = string.sub(palindrome, i, #palindrome)\n      reverse\
    \ = string.sub(reverse, #reverse, #reverse) + c\n    end\n    i = i - 1\n  end\n\
    \  return palindrome .. reverse .. postfix\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzczh2xdb.lua:23:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpzczh2xdb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = -1\n    local longest_postfix_index = -1\n  \
    \  local longest_postfix_length_index = 0\n    local longest_postfix_index_length\
    \ = 0\n    local longest_postfix_index_length_index = 0\n    local longest_postfix_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index = 0\n    local\
    \ longest_postfix_index_length_index_length_index_length = 0\n    local longest_postfix_index_length_index_length_index_length_index\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0\n    local longest_postfix_index_length_index_length_index_length_index_length_index_length_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp044__loa.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string.sub(palindrome, 1, string.len(palindrome) - 1)\n \
    \   local reversed_postfix = string.sub(postfix, 1, string.len(postfix) - 1) ..\
    \ string.reverse(postfix)\n    palindrome = string.sub(palindrome, 1, string.len(palindrome)\
    \ - 1) .. reversed_postfix\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i25pdws.lua:23:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8i25pdws.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local postfix_len = #string\n    local prefix_len\
    \ = #string\n    while postfix_len > 0 and prefix_len > 0 do\n        postfix\
    \ = string\n        postfix_len = #string\n        prefix_len = #string\n    \
    \    local reversed_postfix = reverse(postfix)\n        if reversed_postfix ~=\
    \ postfix then\n            postfix = reversed_postfix\n            postfix_len\
    \ = #reversed_postfix\n        end\n        local reversed_prefix = reverse(prefix)\n\
    \        if reversed_prefix ~= prefix then\n            prefix = reversed_prefix\n\
    \            prefix_len = #reversed_prefix\n        end\n        if postfix_len\
    \ > prefix_len then\n            postfix = postfix .. reversed_postfix\n     \
    \       postfix_len = #postfix\n        end\n        if postfix_len > 0 then\n\
    \            prefix = prefix .. reversed_prefix\n            prefix_len = #prefix\n\
    \        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wibhnt5.lua:20:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmp9wibhnt5.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix\n    local\
    \ palindrome\n    local suffixLength\n    local suffixLength2\n    local suffixLength3\n\
    \    local suffixLength4\n    local suffixLength5\n    local suffixLength6\n \
    \   local suffixLength7\n    local suffixLength8\n    local suffixLength9\n  \
    \  local suffixLength10\n    local suffixLength11\n    local suffixLength12\n\
    \    local suffixLength13\n    local suffixLength14\n    local suffixLength15\n\
    \    local suffixLength16\n    local suffixLength17\n    local suffixLength18\n\
    \    local suffixLength19\n    local suffixLength20\n    local suffixLength21\n\
    \    local suffixLength22\n    local suffixLength23\n    local suffixLength24\n\
    \    local suffixLength25\n    local suffixLength26\n    local suffixLength27\n\
    \    local suffixLength28\n    local suffixLength29\n    local suffixLength30\n\
    \    local suffixLength31\n    local suffixLength32\n    local suffixLength33\n\
    \    local suffixLength34\n    local suffixLength35\n    local suffixLength36\n\
    \    local suffixLength37\n    local suffixLength38\n    local suffixLength39\n\
    \    local suffixLength40\n    local suffixLength41\n    local suffixLength42\n\
    \    local suffixLength43\n    local suffixLength44\n    local suffixLength45\n\
    \    local suffixLength46\n    local suffixLength47\n    local suffixLength48\n\
    \    local suffixLength49\n    local suffixLength50\n    local suffixLength51\n\
    \    local suffixLength52\n    local suffixLength53\n    local suffixLength54\n\
    \    local suffixLength55\n    local suffixLength56\n    local suffixLength57\n\
    \    local suffixLength58\n    local suffixLength59\n    local suffixLength60\n\
    \    local suffixLength61\n    local suffixLength62\n    local suffixLength63\n\
    \    local suffixLength64\n    local suffixLength65\n    local suffixLength66\n\
    \    local suffixLength67\n    local suffixLength68\n    local suffixLength69\n\
    \    local suffixLength70\n    local suffixLength71\n    local suffixLength72\n\
    \    local suffixLength73\n    local suffixLength74\n    local suffixLength75\n\
    \    local suffixLength76\n    local suffixLength77\n    local suffixLength78\n\
    \    local suffixLength79\n    local suffixLength80\n    local suffixLength81\n\
    \    local suffixLength82\n    local suffixLength83\n    local suffixLength\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnvd2ucds.lua:109: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  while palindrome_length > 1 do\n    palindrome_postfix\
    \ = string\n    palindrome_prefix_length = #string\n    for i = 1, palindrome_length\
    \ do\n      local char = string.sub(palindrome, i, i)\n      local reversed_char\
    \ = string.sub(palindrome, i, #palindrome)\n      palindrome = palindrome .. reversed_char\n\
    \      palindrome_length = palindrome_length - 1\n      palindrome_postfix = palindrome_postfix\
    \ .. char\n      palindrome_prefix_length = palindrome_prefix_length - 1\n   \
    \ end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u8ie_o7.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyzxyzyzxyzzxyzyzxyz\"\nstack traceback:\n\t\
    /tmp/tmp2u8ie_o7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reversed_postfix = string\n    local suffix_length\
    \ = #string\n    local longest_postfix = string\n    local longest_postfix_length\
    \ = #string\n    local longest_postfix_suffix_length = #string\n    local longest_postfix_suffix_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_length = #string\n\
    \    local longest_postfix_suffix_reversed_reversed_reversed_length = #string\n\
    \    local longest_postfix_suffix_reversed_reversed_reversed_reversed_length =\
    \ #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptv7fk1ag.lua:40: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        longest\
    \ = longest + 1\n        local postfix = postfix .. string\n        local reverse\
    \ = reverse .. string\n        local palindrome = string.sub(postfix, 1, longest)\n\
    \        if palindrome == reverse then\n            return palindrome\n      \
    \  end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1ljw05r.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpk1ljw05r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local max_len = string.len(string)\n  local max_postfix = max_len\n  local\
    \ max_postfix_len = max_len\n  local max_postfix_postfix = max_len\n  local max_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix = max_len\n  local max_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_len = max_len\n  local max_postfix_postfix_postfix_postfix\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_len = max_len\n  local\
    \ max_postfix_postfix_postfix_postfix_len = max_len\n  local max_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_len = max_len\n\
    \  local max_postfix_postfix_postfix_postfix_postfix_len = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = max_len\n  local max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0sd8rcj2.lua:51: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 0\n  local suffix_length = 0\n  local suffix_start =\
    \ string\n  local suffix_end = string\n  while suffix_start ~= '' do\n    suffix_start\
    \ = suffix_start:sub(1, -2)\n    suffix_length = suffix_start + suffix_length\
    \ + 1\n    suffix_end = suffix_start:sub(1, -2)\n    if suffix_start ~= suffix_end\
    \ then\n      palindrome = palindrome .. suffix_start:sub(1, -2)\n    end\n  end\n\
    \  local prefix_start = string\n  local prefix_end = string\n  while prefix_start\
    \ ~= '' do\n    prefix_start = prefix_start:sub(1, -2)\n    prefix_length = prefix_start\
    \ + prefix_length + 1\n    prefix_end = prefix_start:sub(1, -2)\n    if prefix_start\
    \ ~= prefix_end then\n      palindrome = palindrome .. prefix_start:sub(1, -2)\n\
    \    end\n  end\n  if palindrome ~= string then\n    palindrome = palindrome ..\
    \ string\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jgjtc1f.lua:19:\
    \ attempt to perform arithmetic on local 'suffix_start' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmp_jgjtc1f.lua:45: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if palindrome == postfix then\n      return\
    \ palindrome\n    end\n    local reverse = reverse .. postfix\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is a palindrome\
    \ return it.\n  if string == string.gsub(string, '^%s*(.-)%s*$', '') then\n  \
    \  return string\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpov3uls4f.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest, longestLength, longestPrefix, longestSuffix\n\
    \  for i = 1, #string do\n    local prefix = string:sub(1, i)\n    local suffix\
    \ = string:sub(i + 1, #string)\n    local reversedPrefix = reverse(string:sub(1,\
    \ i - 1))\n    local reversedSuffix = reverse(string:sub(i + 1, #string - 1))\n\
    \    local palindrome = prefix .. reversedSuffix .. suffix\n    if palindrome\
    \ == longest\n      and #palindrome > longestLength\n      and #palindrome > longestPrefix\n\
    \      and #palindrome > longestSuffix\n    then\n      longest = palindrome\n\
    \      longestLength = #palindrome\n      longestPrefix = prefix\n      longestSuffix\
    \ = suffix\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsujewrop.lua:37:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsujewrop.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with supplied string.\n  local longest_palindrome = string\n  local\
    \ longest_palindrome_length = #string\n  local longest_palindrome_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palindrome_postfix_postfix_postfix_length = 0\n  local longest_palindrome_postfix_postfix_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_postfix_postfix_length = 0\n  local\
    \ longest_palin\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfbpw0_1n.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function find_longest_postfix(string, postfix,\
    \ longest)\n    local postfix_length = #postfix\n    local postfix_reverse = string.sub(postfix,\
    \ 1, postfix_length)\n    local postfix_reverse_reverse = string.sub(postfix_reverse,\
    \ #postfix_reverse)\n    if postfix_length == 0 or postfix_length == #string then\n\
    \      return postfix_reverse\n    end\n    if postfix_reverse ~= postfix_reverse_reverse\
    \ then\n      return postfix_reverse\n    end\n    -- Find the longest postfix\
    \ that is a palindrome.\n    local postfix_length = #postfix\n    local postfix_reverse\
    \ = string.sub(postfix, 1, postfix_length)\n    local postfix_reverse_reverse\
    \ = string.sub(postfix_reverse, #postfix_reverse)\n    if postfix_length == 0\
    \ or postfix_length == #string then\n      return postfix_reverse\n    end\n \
    \   if postfix_reverse ~= postfix_reverse_reverse then\n      return postfix_reverse\n\
    \    end\n    -- Find the longest postfix that is a palindrome.\n    local postfix_length\
    \ = #postfix\n    local postfix_reverse = string.sub(postfix, 1, postfix_length)\n\
    \    local postfix_reverse_reverse = string.sub(postfix_reverse, #postfix_reverse)\n\
    \    if postfix_length == 0 or postfix_length == #string then\n      return postfix_reverse\n\
    \    end\n    if postfix_reverse ~= postfix_reverse_reverse then\n      return\
    \ postfix_reverse\n    end\n    -- Find the longest postfix that is a palindrome.\n\
    \    local postfix_length = #postfix\n    local postfix_reverse = string.sub(postfix,\
    \ 1, postfix_length)\n    local postfix_reverse_reverse = string.sub(postfix_reverse,\
    \ #postfix_reverse)\n    if postfix_length == 0 or postfix_length == #string then\n\
    \      return postfix_reverse\n    end\n    if postfix_reverse ~= postfix_reverse_reverse\
    \ then\n      return postfix_reverse\n    end\n    -- Find the longest postfix\
    \ that is a palindrome.\n    local postfix_length = #postfix\n    local postfix_reverse\
    \ = string.sub(postfix, 1, postfix_length)\n    local postfix_reverse_reverse\
    \ = string.sub(postfix_reverse, #postfix_reverse)\n    if postfix_length == 0\
    \ or postfix_length == #string then\n      return postfix_reverse\n    end\n \
    \   if postfix_reverse ~= postfix_reverse_reverse then\n      return postfix_reverse\n\
    \    end\n    -- Find the longest postfix \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppya5u5px.lua:75: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    longest = longest + 1\n    local postfix =\
    \ string.sub(postfix, 1, longest - 1)\n    if postfix ~= string.sub(postfix, 1,\
    \ longest - 1) then\n      break\n    end\n  end\n  -- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local reverse = string\n  for i = 1, longest do\n    reverse = reverse .. string.sub(string,\
    \ 1, i)\n  end\n  return reverse .. postfix\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reverse = string\n\
    \    local longest = string.len(string)\n    for i = 1, string.len(string) do\n\
    \        local char = string.sub(string,i,i)\n        if char == reverse then\n\
    \            longest = i\n        end\n    end\n    local postfix = string.sub(string,longest,longest)\n\
    \    local reversePostfix = string.sub(reverse,1,longest)\n    return string..reversePostfix..postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rly2klr.lua:29:\
    \ expected: \"x\"\nactual: \"xxx\"\nstack traceback:\n\t/tmp/tmp9rly2klr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reversed_postfix = string\n    local longest_postfix\
    \ = string\n    local longest_postfix_length = string\n    local longest_postfix_length_length\
    \ = string\n    local longest_postfix_length_length_length = string\n    local\
    \ longest_postfix_length_length_length_length = string\n    local longest_postfix_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw113zhew.lua:42: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local longest = 0\n  while\
    \ true do\n    longest = longest + 1\n    postfix = string\n    reverse = string\n\
    \    for i = 1, longest do\n      postfix = string\n      reverse = string\n \
    \     for j = 1, i do\n        postfix = string\n        reverse = string\n  \
    \      for k = 1, j do\n          postfix = string\n          reverse = string\n\
    \          for l = 1, k do\n            postfix = string\n            reverse\
    \ = string\n          end\n        end\n      end\n    end\n    if palindrome\
    \ == reverse then\n      return palindrome\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl8w4hz2.lua:47:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpsl8w4hz2.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if string.find(palindrome, postfix, 1, true)\
    \ then\n      palindrome = palindrome .. postfix .. reverse\n      break\n   \
    \ end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_prefix_length = #string\n    while palindrome_length > 1\
    \ do\n        local palindrome_prefix_length = palindrome_prefix_length - 1\n\
    \        local palindrome_postfix = string\n        local palindrome_prefix_length\
    \ = palindrome_prefix_length - 1\n        local palindrome_length = palindrome_length\
    \ - 1\n        local palindrome = string\n        local palindrome_length = palindrome_length\
    \ - 1\n    end\n    local palindrome = string\n    local palindrome_length = #string\n\
    \    while palindrome_length > 1 do\n        local palindrome_prefix_length =\
    \ palindrome_prefix_length - 1\n        local palindrome_postfix = string\n  \
    \      local palindrome_prefix_length = palindrome_prefix_length - 1\n       \
    \ local palindrome_length = palindrome_length - 1\n        local palindrome =\
    \ string\n        local palindrome_length = palindrome_length - 1\n    end\n \
    \   return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    local reverse = reverse .. string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix)\
    \ - 1) ~= string.sub(reverse, 1, string.len(reverse) - 1) then\n      break\n\
    \    end\n  end\n  return string .. reverse\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = 0\n\
    \    while true do\n        length = length + 1\n        postfix = postfix ..\
    \ string\n        reverse = reverse .. string\n        local postfix_length =\
    \ #postfix\n        if postfix_length == 0 then\n            break\n        end\n\
    \        local palindrome_length = #palindrome\n        if palindrome_length ==\
    \ 0 then\n            break\n        end\n        local postfix_index = postfix_length\
    \ - 1\n        local palindrome_index = palindrome_length - 1\n        local palindrome_suffix\
    \ = postfix:sub(1, postfix_index)\n        local palindrome_prefix = palindrome:sub(1,\
    \ palindrome_index)\n        local palindrome_prefix_reverse = palindrome_prefix:reverse()\n\
    \        local palindrome_suffix_reverse = palindrome_suffix:reverse()\n     \
    \   if palindrome_prefix_reverse == palindrome_suffix_reverse then\n         \
    \   palindrome = palindrome .. palindrome_prefix_reverse .. palindrome_suffix\n\
    \        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = #string\n\
    \    for i = 1, length do\n        postfix = string.sub(postfix, 1, i-1..-1)\n\
    \        reverse = string.sub(reverse, #reverse, i-1..-1)\n        if postfix\
    \ ~= reverse then\n            palindrome = palindrome .. reverse .. postfix\n\
    \        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph_orateq.lua:17: malformed number near '1..'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function find_longest_palindrome(string, start,\
    \ end)\n    if start > end then\n      return string\n    end\n    local palindrome\
    \ = string\n    local i = start\n    local j = end\n    while i < j do\n     \
    \ palindrome = palindrome .. string[i]\n      i = i + 1\n      j = j - 1\n   \
    \ end\n    return palindrome\n  end\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome = find_longest_palindrome(string, 1, #string - 1)\n\
    \  -- Find the shortest postfix that is a palindrome.\n  local shortest_palindrome\
    \ = find_longest_palindrome(string, 1, #string - 2)\n  -- Find the shortest postfix\
    \ that is a palindrome.\n  local shortest_palindrome_length = #shortest_palindrome\n\
    \  -- Find the longest postfix that is a palindrome.\n  local longest_palindrome_length\
    \ = #longest_palindrome\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome = longest_palindrome .. string[#string - 1]\n  --\
    \ Find the shortest postfix that is a palindrome.\n  local shortest_palindrome\
    \ = shortest_palindrome .. string[1]\n  -- Find the shortest postfix that is a\
    \ palindrome.\n  local shortest_palindrome_length = #shortest_palindrome\n  --\
    \ Find the longest postfix that is a palindrome.\n  local longest_palindrome_length\
    \ = #longest_palindrome\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome = longest_palindrome .. string[#string - 1]\n  --\
    \ Find the shortest postfix that is a palindrome.\n  local shortest_palindrome\
    \ = shortest_palindrome .. string[1]\n  -- Find the shortest postfix that is a\
    \ palindrome.\n  local shortest_palindrome_length = #shortest_palindrome\n  --\
    \ Find the longest postfix that is a palindrome.\n  local longest_palindrome_length\
    \ = #longest_palindrome\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome = longest_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9y2d3bik.lua:13: <name> or '...' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local suffix = ''\n  local length = 1\n  while true\
    \ do\n    local reversed = reverse(string)\n    if reversed == string then\n \
    \     break\n    end\n    postfix = postfix .. reversed\n    length = length +\
    \ 1\n  end\n  local prefix = string\n  while true do\n    local reversed = reverse(prefix)\n\
    \    if reversed == prefix then\n      break\n    end\n    prefix = prefix ..\
    \ reversed\n    length = length + 1\n  end\n  local palindrome = postfix .. suffix\n\
    \  local reversed = reverse(string)\n  if reversed == string then\n    palindrome\
    \ = palindrome .. reversed\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag90ad20.lua:17:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpag90ad20.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local longest = 0\n  local longestPostfix = ''\n  local longestPrefix = ''\n\
    \  while true do\n    longest = longest+1\n    longestPostfix = longestPostfix..string\n\
    \    longestPrefix = string..longestPrefix\n    local reverse = string.gsub(longestPostfix,\
    \ '(.)', '%2$1')\n    if reverse == longestPostfix then\n      break\n    end\n\
    \  end\n  longest = longest-1\n  longestPostfix = longestPostfix..string\n  longestPrefix\
    \ = string..longestPrefix\n  local reverse = string.gsub(longestPostfix, '(.)',\
    \ '%2$1')\n  if reverse == longestPostfix then\n    return string\n  end\n  return\
    \ longestPrefix..reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uf0mub1.lua:20:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp0uf0mub1.lua:20: in function\
    \ 'candidate'\n\t/tmp/tmp0uf0mub1.lua:39: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local length = #string\n  while length > 1 do\n \
    \   postfix = string.sub(postfix, 1, length-1)\n    local reverse = string.reverse(postfix)\n\
    \    if reverse == palindrome then\n      palindrome = string.sub(palindrome,\
    \ 1, length-1)\n      length = length - 1\n    else\n      length = length - 1\n\
    \    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpc8coak.lua:33:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmphpc8coak.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix = postfix .. reverse\n        local length = #postfix\n     \
    \   if length > 0 then\n            local palindrome = postfix .. string\n   \
    \         if palindrome == reverse then\n                return palindrome\n \
    \           end\n        end\n        reverse = reverse:reverse()\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  while true do\n    local\
    \ postfix = string.sub(postfix, 1, string.len(postfix)-1)\n    if string.sub(postfix,\
    \ 1, string.len(postfix)) == string.sub(postfix, string.len(postfix)-1, string.len(postfix))\
    \ then\n      break\n    end\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local reversed_prefix\
    \ = string.sub(postfix, 1, string.len(postfix)-1)\n  local reversed_suffix = string.sub(postfix,\
    \ string.len(postfix)+1)\n  local reversed_palindrome = reversed_prefix .. reversed_suffix\n\
    \  return reversed_palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya5247vw.lua:31:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpya5247vw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_postfix_reverse = ''\n\
    \  local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n  local\
    \ palindrome_postfix_reverse_suffix = ''\n  local palindrome_postfix_reverse_suffix_length\
    \ = #palindrome_postfix_reverse_suffix\n  local palindrome_postfix_reverse_suffix_reverse\
    \ = ''\n  local palindrome_postfix_reverse_suffix_reverse_length = #palindrome_postfix_reverse_suffix_reverse\n\
    \  while palindrome_length > 1 do\n    -- Find the longest postfix of supplied\
    \ string that is a palindrome.\n    palindrome_postfix = string\n    palindrome_postfix_length\
    \ = #string\n    for i = 1, palindrome_length do\n      palindrome_postfix = palindrome_postfix..string\n\
    \      palindrome_postfix_length = palindrome_postfix_length + 1\n      palindrome_postfix\
    \ = palindrome_postfix..string\n      palindrome_postfix_length = palindrome_postfix_length\
    \ + 1\n    end\n    -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    palindrome_postfix = palindrome_postfix..string\n\
    \    palindrome_postfix_length = palindrome_postfix_length + 1\n    palindrome_postfix\
    \ = palindrome_postfix..string\n    palindrome_postfix_length = palindrome_postfix_length\
    \ + 1\n    palindrome_postfix_reverse = palindrome_postfix..string\n    palindrome_postfix_reverse_length\
    \ = palindrome_postfix_length + 1\n    palindrome_postfix_reverse = palindrome_postfix..string\n\
    \    palindrome_postfix_reverse_length = palindrome_postfix_length + 1\n    palindrome_postfix_reverse_suffix\
    \ = string\n    palindrome_postfix_reverse_suffix_length = #string\n    palindrome_postfix_reverse_suffix_reverse\
    \ = ''\n    palindrome_postfix_reverse_suffix_reverse_length = #palindrome_postfix_reverse_suffix_reverse\n\
    \    while palindrome_postfix_reverse_length > 1 do\n      -- Find the longest\
    \ postfix of supplied string that is a palindro\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgi7j9bvi.lua:58: 'end' expected (to close 'while' at line\
    \ 45) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_prefix_length = #string\n    local palindrome_prefix_postfix\
    \ = string\n    local palindrome_prefix_postfix_length = #string\n    local palindrome_prefix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_length = #string\n   \
    \ local palindrome_prefix_postfix_postfix_postfix = string\n    local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length =\
    \ #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp90wbq2qo.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = #string\n\
    \    for i = 1, length / 2 do\n        postfix = string.sub(postfix, 1, i-1) +\
    \ string.sub(postfix, i+1)\n        reverse = reverse .. string.sub(palindrome,\
    \ 1, i-1) + string.sub(palindrome, i+1)\n    end\n    if string.sub(palindrome,\
    \ length / 2, length) == reverse then\n        palindrome = string.sub(palindrome,\
    \ 1, length / 2)\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr33kmp5_.lua:30:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpr33kmp5_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is empty,\
    \ return an empty string.\n  if string == '' then\n    return ''\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp696oxecw.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local i = 1\n  while true\
    \ do\n    local length = #postfix\n    if length == 0 then\n      break\n    end\n\
    \    local postfix_i = i - 1\n    local postfix_j = i + 1\n    while postfix_i\
    \ <= postfix_j do\n      postfix = postfix .. postfix:sub(postfix_i, postfix_j)\
    \ .. postfix_i\n      postfix_i = postfix_i + 1\n      postfix_j = postfix_j -\
    \ 1\n    end\n    postfix = postfix .. postfix:sub(i, i - 1) .. i\n    i = i +\
    \ 1\n    if postfix ~= reverse then\n      palindrome = palindrome .. postfix\
    \ .. reverse\n      reverse = reverse:sub(i, i - 1) .. i\n    end\n  end\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil or string == '' then\n    return\
    \ ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprdxjlxk1.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local function find_longest_palindrome(string)\n\
    \    local longest = string\n    local longest_index = 1\n    for i = 1, #string\
    \ do\n      local substring = string\n      substring = string.sub(string,i,i)\n\
    \      local reversed_substring = string.gsub(substring, \"[\" .. string.char(255)\
    \ .. \"]\", \"\")\n      if string.len(reversed_substring) == 0 then\n       \
    \ return substring\n      elseif string.len(reversed_substring) > string.len(substring)\
    \ then\n        return substring\n      elseif string.len(reversed_substring)\
    \ < string.len(substring) then\n        longest = substring\n        longest_index\
    \ = i\n      end\n    end\n    return longest\n  end\n  -- Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local function append_to_palindrome_suffix(string)\n    local reversed_substring\
    \ = string.gsub(string.sub(string,1,string.len(string) - 1), \"[\" .. string.char(255)\
    \ .. \"]\", \"\")\n    return string .. reversed_substring\n  end\n  -- Find the\
    \ shortest palindrome that begins with a supplied string.\n  local function find_shortest_palindrome(string)\n\
    \    local longest = find_longest_palindrome(string)\n    local longest_index\
    \ = longest_index\n    for i = 1, #string do\n      local substring = string\n\
    \      substring = string.sub(string,i,i)\n      local reversed_substring = string.gsub(substring,\
    \ \"[\" .. string.char(255) .. \"]\", \"\")\n      if string.len(reversed_substring)\
    \ == 0 then\n        return substring\n      elseif string.len(reversed_substring)\
    \ < string.len(substring) then\n        return substring\n      elseif string.len(reversed_substring)\
    \ > string.len(substring) then\n        longest = substring\n        longest_index\
    \ = i\n      end\n    end\n    return longest\n  end\n  -- Return the shortest\
    \ palindrome that begins with a supplied string.\n  return find_shortest_palindrome(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppantjrw6.lua:64:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmppantjrw6.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local suffix = ''\n    while postfix ~= '' do\n \
    \       local postfix_length = #postfix\n        local reversed_postfix = reverse(reverse(postfix))\n\
    \        if postfix_length == #reversed_postfix then\n            postfix = postfix:sub(1,\
    \ postfix_length)\n        else\n            postfix = postfix:sub(1, postfix_length-1)\n\
    \        end\n        reverse = reverse .. reversed_postfix\n    end\n    local\
    \ prefix_length = #string\n    if prefix_length == 0 then\n        return string\n\
    \    else\n        local reversed_string = reverse(string)\n        local prefix_string\
    \ = string:sub(1, prefix_length)\n        return prefix_string .. reversed_string\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdfeh2w3.lua:17:\
    \ attempt to call local 'reverse' (a string value)\nstack traceback:\n\t/tmp/tmpbdfeh2w3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local length = 0\n    while true do\n        local\
    \ index = string.find(postfix, reverse)\n        if index == nil then\n      \
    \      break\n        end\n        length = length + 1\n        reverse = string.sub(postfix,\
    \ 1, index - 1) + 'c'\n        postfix = string.sub(postfix, index + 1)\n    end\n\
    \    return string.reverse(string.sub(postfix, 1, length - 1)) + string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqocxjwx.lua:21:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpmqocxjwx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local prefix_length = 0\n    local suffix_length = 0\n    local palindrome_length\
    \ = 0\n    local palindrome_prefix = string\n    local palindrome_suffix = string\n\
    \    local palindrome_prefix_length = string\n    local palindrome_suffix_length\
    \ = string\n    local palindrome_prefix_reverse = string\n    local palindrome_suffix_reverse\
    \ = string\n    local palindrome_prefix_reverse_index = 0\n    local palindrome_suffix_reverse_index\
    \ = 0\n    local palindrome_prefix_reverse_index2 = 0\n    local palindrome_suffix_reverse_index2\
    \ = 0\n    local palindrome_prefix_reverse_index3 = 0\n    local palindrome_suffix_reverse_index3\
    \ = 0\n    local palindrome_prefix_reverse_index4 = 0\n    local palindrome_suffix_reverse_index4\
    \ = 0\n    local palindrome_prefix_reverse_index5 = 0\n    local palindrome_suffix_reverse_index5\
    \ = 0\n    local palindrome_prefix_reverse_index6 = 0\n    local palindrome_suffix_reverse_index6\
    \ = 0\n    local palindrome_prefix_reverse_index7 = 0\n    local palindrome_suffix_reverse_index7\
    \ = 0\n    local palindrome_prefix_reverse_index8 = 0\n    local palindrome_suffix_reverse_index8\
    \ = 0\n    local palindrome_prefix_reverse_index9 = 0\n    local palindrome_suffix_reverse_index9\
    \ = 0\n    local palindrome_prefix_reverse_index10 = 0\n    local palindrome_suffix_reverse_index10\
    \ = 0\n    local palindrome_prefix_reverse_index11 = 0\n    local palindrome_suffix_reverse_index11\
    \ = 0\n    local palindrome_prefix_reverse_index12 = 0\n    local palindrome_suffix_reverse_index12\
    \ = 0\n    local palindrome_prefix_reverse_index13 = 0\n    local palindrome_suffix_reverse_index13\
    \ = 0\n    local palindrome_prefix_reverse_index14 = 0\n    local palindrome_suffix_reverse_index14\
    \ = 0\n    local palindrome_prefix_reverse_index15 = 0\n    local palindrome_suffix_reverse_index15\
    \ = 0\n    local palindrome_prefix_reverse_index16 = 0\n    local palindrome_suffix_reverse_index16\
    \ = 0\n    local palindrome_prefix_reverse_index17 = 0\n    local palindrome_suffix_reverse\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5dqxuvkt.lua:67: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while string.sub(palindrome, prefix_length, prefix_length\
    \ + 1) ~= string.sub(palindrome, prefix_length, prefix_length + 1) do\n    prefix_length\
    \ = prefix_length + 1\n  end\n  local postfix_length = string.len(palindrome)\
    \ - prefix_length\n  local reversed_postfix_length = string.len(palindrome) -\
    \ postfix_length\n  local reversed_postfix = string.sub(palindrome, prefix_length,\
    \ prefix_length + reversed_postfix_length)\n  local postfix = string.sub(palindrome,\
    \ prefix_length + reversed_postfix_length, prefix_length + reversed_postfix_length\
    \ + postfix_length)\n  local reversed_postfix_with_prefix = reversed_postfix ..\
    \ string.sub(postfix, 1, prefix_length)\n  return reversed_postfix_with_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb66o4ls.lua:30:\
    \ expected: \"xyzyx\"\nactual: \"xyy\"\nstack traceback:\n\t/tmp/tmpgb66o4ls.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local postfix_length = #string\n  local postfix_reverse\
    \ = string\n  local postfix_reverse_length = #string\n  while postfix_length >\
    \ 1 do\n    local postfix_reverse = postfix_reverse..string[postfix_length]\n\
    \    local postfix_reverse_length = postfix_reverse_length + 1\n    local postfix_length\
    \ = postfix_length - 1\n    local postfix = string..postfix_reverse\n  end\n \
    \ local postfix_reverse = postfix_reverse..string[postfix_length]\n  local postfix_reverse_length\
    \ = postfix_reverse_length + 1\n  local postfix = string..postfix_reverse\n  local\
    \ palindrome = string..postfix_reverse\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmq8v3q1.lua:23:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvmq8v3q1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), string.find(string, \"^(.-)$\"\
    ), string.find(string, \"^(.-)$\")\n  while true do\n    local longestPalindrome\
    \ = string.sub(string, longest, longestPrefix + 1)\n    local longestPalindromeSuffix\
    \ = string.sub(string, longestPrefix + 1, longestSuffix)\n    local longestPalindromeReverse\
    \ = string.sub(string, longestSuffix + 1, longest)\n    if longestPalindrome ==\
    \ longestPalindromeReverse then\n      return string\n    end\n    longest, longestPrefix,\
    \ longestSuffix = longestPrefix + 1, string.find(string, longestPalindromeSuffix\
    \ + 1), string.find(string, longestPalindromeSuffix + 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hrzxnxk.lua:20:\
    \ attempt to perform arithmetic on local 'longestPalindromeSuffix' (a string value)\n\
    stack traceback:\n\t/tmp/tmp5hrzxnxk.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest_palindrome = string\n  local longest_palindrome_length\
    \ = #string\n  local longest_palindrome_postfix_length = 0\n  local longest_palindrome_postfix_string\
    \ = ''\n  local longest_palindrome_postfix_string_length = 0\n  local longest_palindrome_postfix_string_postfix_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string = ''\n  local\
    \ longest_palindrome_postfix_string_postfix_string_length = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_length\
    \ = 0\n  local longest_palindrome_postfix_string_postfix_string_reverse_string_reverse\
    \ = ''\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph2v4mpkp.lua:52: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  while true do\n    local reversed = reverse(string)\n\
    \    if reversed == string then\n      break\n    end\n    postfix = postfix ..\
    \ reversed\n    suffix = suffix .. reversed\n  end\n  return postfix .. suffix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7weg_kw.lua:15:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpr7weg_kw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    local reverse = reverse .. string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix))\
    \ == reverse then\n      return string\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = string.len(string)\n  local prefix = string\n  local suffix\
    \ = ''\n  while string.len(palindrome) > 1 do\n    longest = longest - 1\n   \
    \ suffix = string.sub(string, 1, longest)\n    local reverse = string.sub(suffix,\
    \ 1, string.len(suffix))\n    prefix = prefix .. reverse\n    palindrome = string.sub(prefix,\
    \ 1, string.len(prefix)) .. palindrome .. suffix\n  end\n  return prefix\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  while\
    \ true do\n    longest = longest + 1\n    local postfix = string.sub(string, 1,\
    \ longest)\n    if postfix ~= string.sub(string, longest, longest) then\n    \
    \  break\n    end\n  end\n  -- Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n  local reverse = string\n\
    \  for i = 1, longest do\n    reverse = string.sub(reverse, longest, i)\n  end\n\
    \  return reverse .. postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix = string\n  local\
    \ longest_postfix_length = string\n  local longest_postfix_length_index = 0\n\
    \  local longest_postfix_length_reverse = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_length_reverse_count = 0\n  local longest_postfix_length_reverse_count\
    \ = 0\n  local longest_postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu7rd15gv.lua:71: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix_length = #postfix\n        local reversed_length = #reverse\n\
    \        local palindrome_length = #palindrome\n        if postfix_length == 0\
    \ or reversed_length == 0 or palindrome_length == 0 then\n            break\n\
    \        end\n        local postfix_start = #postfix - postfix_length + 1\n  \
    \      local postfix_end = #postfix - 1\n        local reversed_start = #reverse\
    \ - reversed_length + 1\n        local reversed_end = #reverse - 1\n        local\
    \ palindrome_start = #palindrome - palindrome_length + 1\n        local palindrome_end\
    \ = #palindrome - 1\n        local postfix_postfix = postfix:sub(1, postfix_end)\n\
    \        local reversed_postfix = reverse:sub(1, reversed_end)\n        local\
    \ palindrome_postfix = palindrome:sub(1, palindrome_end)\n        if postfix_postfix\
    \ ~= reversed_postfix then\n            postfix = postfix:sub(postfix_start, postfix_end)\n\
    \            reverse = reverse:sub(reversed_start, reversed_end)\n           \
    \ palindrome = palindrome:sub(palindrome_start, palindrome_end)\n        else\n\
    \            postfix = postfix:sub(postfix_start, postfix_end)\n            reverse\
    \ = reverse:sub(reversed_start, reversed_end)\n            palindrome = palindrome:sub(palindrome_start,\
    \ palindrome_end)\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad8hqbmt.lua:48:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpad8hqbmt.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix = string\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_length = string\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpui19ukxo.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        local\
    \ postfix = postfix .. reverse\n        local length = #postfix\n        if length\
    \ > longest then\n            longest = length\n        end\n        if postfix\
    \ ~= reverse then\n            reverse = postfix .. reverse\n        end\n   \
    \     if postfix ~= reverse then\n            postfix = postfix .. reverse\n \
    \       end\n        if postfix ~= reverse then\n            postfix = postfix\
    \ .. reverse\n        end\n        if postfix ~= reverse then\n            postfix\
    \ = postfix .. reverse\n        end\n        if postfix ~= reverse then\n    \
    \        postfix = postfix .. reverse\n        end\n        if postfix ~= reverse\
    \ then\n            postfix = postfix .. reverse\n        end\n        if postfix\
    \ ~= reverse then\n            postfix = postfix .. reverse\n        end\n   \
    \     if postfix ~= reverse then\n            postfix = postfix .. reverse\n \
    \       end\n        if postfix ~= reverse then\n            postfix = postfix\
    \ .. reverse\n        end\n        if postfix ~= reverse then\n            postfix\
    \ = postfix .. reverse\n        end\n        if postfix ~= reverse then\n    \
    \        postfix = postfix .. reverse\n        end\n        if postfix ~= reverse\
    \ then\n            postfix = postfix .. reverse\n        end\n        if postfix\
    \ ~= reverse then\n            postfix = postfix .. reverse\n        end\n   \
    \     if postfix ~= reverse then\n            postfix = postfix .. reverse\n \
    \       end\n        if postfix ~= reverse then\n            postfix = postfix\
    \ .. reverse\n        end\n        if postfix ~= reverse then\n            postfix\
    \ = postfix .. reverse\n        end\n        if postfix ~= reverse then\n    \
    \        postfix = postfix .. reverse\n        end\n        if postfix ~= reverse\
    \ then\n            postfix = postfix .. reverse\n        end\n        if postfix\
    \ ~= reverse then\n            postfix = postfix .. reverse\n        end\n   \
    \     if postfix ~= reverse then\n            postfix = postfix .. reverse\n \
    \       end\n        if postfix ~= reverse then\n            postfix = postfix\
    \ .. reverse\n        end\n        if postfix ~= reverse then\n            postfix\
    \ = postfix .. reverse\n        end\n        if postfix ~= reverse then\n    \
    \        postfix = postfix .. reverse\n        end\n        if postfix ~= reverse\
    \ then\n            postfix = postfix .. reverse\n        end\n        if postfix\
    \ ~= reverse then\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoe5v5d9e.lua:105: 'end' expected (to close 'if' at line 93)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while postfix ~= '' do\n\
    \        reverse = reverse .. postfix\n        postfix = postfix..string\n   \
    \ end\n    postfix = reverse\n    while postfix ~= '' do\n        local index\
    \ = string.find(postfix, reverse)\n        if index == nil then\n            palindrome\
    \ = palindrome .. postfix\n            postfix = postfix..string\n        else\n\
    \            palindrome = palindrome .. string.sub(postfix, index, index + 1)\n\
    \            postfix = postfix..string\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = postfix..string\n\
    \    if string.len(postfix) == 0 then\n      break\n    end\n    local reverse\
    \ = reverse..string.sub(postfix, 1, string.len(postfix)-1)\n    if string.sub(postfix,\
    \ string.len(postfix)-1, string.len(postfix)) == reverse then\n      break\n \
    \   end\n  end\n  return string..reverse\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local palindrome = ''\n  while true do\n    local postfix_len\
    \ = #postfix\n    local suffix_len = #suffix\n    if postfix_len > suffix_len\
    \ then\n      palindrome = palindrome .. suffix\n      postfix = postfix .. suffix:reverse()\n\
    \      suffix = ''\n    elseif postfix_len < suffix_len then\n      palindrome\
    \ = palindrome .. suffix:reverse()\n      postfix = postfix .. suffix\n      suffix\
    \ = ''\n    else\n      palindrome = palindrome .. suffix:reverse()\n      postfix\
    \ = postfix .. suffix\n      suffix = ''\n    end\n    if #postfix <= 1 then\n\
    \      break\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza5riura.lua:42:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpza5riura.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindromic\
    \ suffix that begins with string.\n  local suffix = ''\n  local suffixlen = 0\n\
    \  for i = 1, #string do\n    local char = string.sub(string,i,i)\n    local reverse\
    \ = string.gsub(string.gsub(char,'%W','%W%W'),'%W','%W%W')\n    if suffixlen <\
    \ #reverse then\n      suffix = reverse\n      suffixlen = #reverse\n    end\n\
    \  end\n  -- Append reverse of longest palindromic suffix to string.\n  local\
    \ result = string\n  for i = 1, suffixlen do\n    result = string.sub(result,1,#result-1)..suffix:sub(i,i)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ovhcttl.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyx\"\nstack traceback:\n\t/tmp/tmp9ovhcttl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 0\n  local suffix_length = 0\n  local suffix_start =\
    \ 0\n  local suffix_end = 0\n  local suffix_reversed = ''\n  local suffix_reversed_length\
    \ = 0\n  while true do\n    local postfix = string\n    prefix_length = prefix_length\
    \ + 1\n    if prefix_length == #string then\n      break\n    end\n    local postfix_length\
    \ = #postfix + 1\n    if postfix_length == postfix_length then\n      break\n\
    \    end\n    local postfix_reversed = postfix.reverse()\n    suffix_length =\
    \ suffix_length + 1\n    if suffix_length == #string then\n      break\n    end\n\
    \    suffix_start = suffix_length\n    suffix_end = suffix_start + postfix_length\n\
    \    suffix_reversed_length = suffix_reversed_length + 1\n    if suffix_reversed_length\
    \ == #suffix_reversed then\n      break\n    end\n    suffix_reversed = suffix_reversed\
    \ .. postfix_reversed\n  end\n  local postfix_reversed_length = #suffix_reversed\
    \ + 1\n  if suffix_start > 0 then\n    local postfix_reversed_start = suffix_start\
    \ - 1\n    local postfix_reversed_end = suffix_end - 1\n    local postfix_reversed_reversed\
    \ = suffix_reversed[postfix_reversed_start:postfix_reversed_end]\n    local postfix_reversed_reversed_length\
    \ = #postfix_reversed_reversed + 1\n    if postfix_reversed_reversed_length ==\
    \ postfix_reversed_length then\n      palindrome = palindrome .. postfix_reversed\n\
    \    else\n      palindrome = palindrome .. postfix_reversed\n      palindrome\
    \ = palindrome .. suffix_reversed[postfix_reversed_start:postfix_reversed_end]\n\
    \    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpohnv7ti4.lua:46: function arguments expected near ']'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    local longestLength = 0\n\
    \    while postfix ~= '' do\n        longestLength = 0\n        for i = 1, #postfix\
    \ do\n            local char = postfix[i]\n            longestLength = longestLength\
    \ + #char\n            if #char > longestLength then\n                longest\
    \ = i\n                longestLength = #char\n            end\n        end\n \
    \       reverse = reverse .. postfix:sub(longest, longestLength)\n        postfix\
    \ = postfix:sub((longest + 1), #postfix)\n    end\n    return reverse .. string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfemee_rj.lua:20:\
    \ attempt to get length of local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpfemee_rj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local palindromeLength = 0\n  local palindromePrefix\
    \ = string\n  local palindromeSuffix = ''\n  local palindromePostfix = ''\n  local\
    \ palindromePostfixLength = 0\n  local palindromePostfixLengthRemainder = 0\n\
    \  local palindromePostfixLengthRemainderLength = 0\n  local palindromePostfixLengthRemainderLengthRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainder = 0\n\
    \  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainder = 0\n\
    \  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainderRemainderRemainderRemainder\
    \ = 0\n  local palindromePostfixLengthRemainderLengthRemainder\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp51nz0w3c.lua:52: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  for i = 1, #string do\n    local postfix = string.sub(string,i,i)\n\
    \    local reverse = string.sub(postfix,#postfix,#postfix)\n    if reverse ==\
    \ reverse then\n      longest = i\n    end\n  end\n  -- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local palindrome = string\n  for i = 1, longest do\n    palindrome = string.sub(palindrome,i,i)\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplahzr_5d.lua:35:\
    \ expected: \"xyzyx\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplahzr_5d.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = string\n    local suffix = ''\n    local length = 0\n\
    \    while true do\n        local index = string.find(postfix, palindrome)\n \
    \       if index == nil then\n            break\n        end\n        postfix\
    \ = string.sub(postfix, index + 1)\n        length = length + 1\n    end\n   \
    \ local reverse = string.sub(postfix, 1, length)\n    postfix = string.sub(postfix,\
    \ length)\n    local index = string.find(postfix, reverse)\n    if index == nil\
    \ then\n        return string\n    end\n    local prefix = string.sub(postfix,\
    \ 1, index)\n    postfix = string.sub(postfix, index)\n    local index = string.find(postfix,\
    \ reverse)\n    if index == nil then\n        return string\n    end\n    local\
    \ prefix = string.sub(postfix, 1, index)\n    postfix = string.sub(postfix, index)\n\
    \    local index = string.find(postfix, reverse)\n    if index == nil then\n \
    \       return string\n    end\n    local prefix = string.sub(postfix, 1, index)\n\
    \    postfix = string.sub(postfix, index)\n    local index = string.find(postfix,\
    \ reverse)\n    if index == nil then\n        return string\n    end\n    local\
    \ prefix = string.sub(postfix, 1, index)\n    postfix = string.sub(postfix, index)\n\
    \    local index = string.find(postfix, reverse)\n    if index == nil then\n \
    \       return string\n    end\n    local prefix = string.sub(postfix, 1, index)\n\
    \    postfix = string.sub(postfix, index)\n    local index = string.find(postfix,\
    \ reverse)\n    if index == nil then\n        return string\n    end\n    local\
    \ prefix = string.sub(postfix, 1, index)\n    postfix = string.sub(postfix, index)\n\
    \    local index = string.find(postfix, reverse)\n    if index == nil then\n \
    \       return string\n    end\n    local prefix = string.sub(postfix, 1, index)\n\
    \    postfix = string.sub(postfix, index)\n    local index = string.find(postfix,\
    \ reverse)\n    if index == nil then\n        return string\n    end\n    local\
    \ prefix = string.sub(postfix, 1, index)\n    postfix = string.sub(postfix, index)\n\
    \    local index = string.find(postfix, reverse)\n    if index == nil then\n \
    \       return string\n    end\n    local prefix = string.sub(postfix, 1, index)\n\
    \    postfix = string.sub(postfix, index)\n    local index = string.find(postfix,\
    \ reverse)\n    if index == nil then\n        return string\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkf6iu6iv.lua:83: 'end' expected (to close 'if' at line 81)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    while true do\n     \
    \   local postfix = string\n        postfix = postfix .. suffix\n        local\
    \ postfix_length = #postfix\n        local reversed_postfix = reverse(string)\n\
    \        local reversed_postfix_length = #reversed_postfix\n        if postfix_length\
    \ == reversed_postfix_length then\n            -- The postfix is a palindrome\n\
    \            -- Append the reverse of the postfix to the end of the string\n \
    \           postfix = postfix .. reversed_postfix\n            -- Append the postfix\
    \ to the end of the string\n            palindrome = palindrome .. postfix\n \
    \           -- Break out of the loop\n            break\n        elseif postfix_length\
    \ > reversed_postfix_length then\n            -- The postfix is longer than the\
    \ reverse of the postfix.\n            -- Append the postfix to the end of the\
    \ string\n            palindrome = palindrome .. postfix\n            -- Append\
    \ the reverse of the postfix to the end of the string\n            postfix = reversed_postfix\
    \ .. postfix\n            -- Break out of the loop\n            break\n      \
    \  elseif postfix_length < reversed_postfix_length then\n            -- The postfix\
    \ is shorter\n            -- Append the postfix to the end of the string\n   \
    \         palindrome = palindrome .. postfix\n            -- Append the reverse\
    \ of the postfix to the end of the string\n            postfix = reversed_postfix\
    \ .. postfix\n            -- Break out of the loop\n            break\n      \
    \  end\n        -- Append the postfix to the end of the string\n        palindrome\
    \ = palindrome .. postfix\n        -- Append the reverse of the postfix to the\
    \ end of the string\n        postfix = reversed_postfix .. postfix\n        --\
    \ Append the postfix to the end of the string\n        palindrome = palindrome\
    \ .. postfix\n        -- Append the reverse of the postfix to the end of the string\n\
    \        postfix = reversed_postfix .. postfix\n        -- Append the postfix\
    \ to the end of the string\n        palindrome = palindrome .. postfix\n     \
    \   -- Append the reverse of the postfix to the end of the string\n        postfix\
    \ = reversed_postfix .. postfix\n        -- Append the postfix to the end of the\
    \ string\n        palindrome = palindrome .. postfix\n        -- Append the reverse\
    \ of the postfix to the end of the string\n        postfix = reversed_postfix\
    \ .. postfix\n        -- Append the postfix to the end of the string\n       \
    \ palindrome = palindrome .. postfix\n        -- Append the reverse of the postfix\
    \ to the end of the string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpipzg1kyl.lua:76: 'end' expected (to close 'while' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = ''\n    local suffix = ''\n    while true do\n       \
    \ local reversed_postfix = reverse(string)\n        if postfix ~= reversed_postfix\
    \ then\n            postfix = reversed_postfix\n            palindrome = palindrome\
    \ .. postfix .. suffix\n            suffix = ''\n        else\n            suffix\
    \ = suffix .. postfix\n        end\n        if palindrome ~= '' then\n       \
    \     break\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg64o15_8.lua:16:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpg64o15_8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function longest_palindrome(string, i, j)\n \
    \   if i == j then\n      return string\n    end\n    if string[i] == string[j]\
    \ then\n      return longest_palindrome(string, i + 1, j - 1)\n    end\n    return\
    \ longest_palindrome(string, i + 1, j)\n  end\n  local longest_palindrome = longest_palindrome(string)\n\
    \  -- Append the reverse of the longest postfix to the end of the string.\n  local\
    \ function append_reverse(string, i, j)\n    if i == j then\n      return string\n\
    \    end\n    if string[i] == string[j] then\n      return append_reverse(string,\
    \ i + 1, j - 1)\n    end\n    return string .. string[i]:reverse() .. string[j]:reverse()\n\
    \  end\n  local result = append_reverse(longest_palindrome, 1,\n             \
    \                    #longest_palindrome - 1)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_len = #string\n  local palindrome_prefix_len = #string\n\
    \  local palindrome_prefix_postfix = string\n  local palindrome_prefix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix = string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix_len = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_len = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_len = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoap_gk1j.lua:44: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local reversed_string = string\n    local prefix_length = 1\n    while reversed_string\
    \ ~= palindrome do\n        reversed_string = reversed_string..string[prefix_length]\n\
    \        prefix_length = prefix_length + 1\n    end\n    return reversed_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzny1290p.lua:27:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpzny1290p.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_postfix_length = #string\n    local palindrome_postfix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n\
    \    local palindrome_postfix_reverse_length\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \    local palindrome_postfix_reverse_index\n    local palindrome_postfix_reverse_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1xjintfs.lua:70: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  while palindrome_length > 1 do\n    local\
    \ palindrome_postfix_length = #palindrome_postfix\n    local palindrome_prefix_length\
    \ = #palindrome_prefix\n    local palindrome_prefix_postfix = palindrome_prefix:reverse()\n\
    \    local palindrome_prefix_postfix_length = #palindrome_prefix_postfix\n   \
    \ local palindrome_prefix_postfix_postfix = palindrome_prefix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_length = #palindrome_prefix_postfix_postfix\n\
    \    if palindrome_prefix_postfix_postfix_length == palindrome_postfix_length\
    \ then\n      palindrome = palindrome .. palindrome_prefix_postfix_postfix ..\
    \ palindrome_postfix\n      palindrome_length = palindrome_length - palindrome_prefix_postfix_postfix_length\n\
    \      palindrome_postfix = palindrome_postfix .. palindrome_prefix_postfix_postfix\
    \ .. palindrome_postfix\n      palindrome_prefix_length = palindrome_prefix_length\
    \ - palindrome_prefix_postfix_postfix_length\n      palindrome_prefix_postfix\
    \ = palindrome_prefix_postfix .. palindrome_prefix_postfix_postfix .. palindrome_prefix_postfix\n\
    \      palindrome_prefix_postfix_postfix = palindrome_prefix_postfix_postfix ..\
    \ palindrome_prefix_postfix_postfix .. palindrome_prefix_postfix_postfix\n   \
    \   palindrome_prefix_postfix_postfix_length = palindrome_prefix_postfix_postfix_length\
    \ - palindrome_prefix_postfix_postfix_length\n      palindrome_prefix_postfix_postfix_postfix\
    \ = palindrome_prefix_postfix_postfix_postfix .. palindrome_prefix_postfix_postfix_postfix\
    \ .. palindrome_prefix_postfix_postfix_postfix\n      palindrome_prefix_postfix_postfix_postfix_length\
    \ = palindrome_prefix_postfix_postfix_postfix_length - palindrome_prefix_postfix_postfix_postfix_length\n\
    \      palindrome_prefix_postfix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix_postfix\
    \ .. palindrome_prefix_post\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoqonsi0y.lua:45: 'end' expected (to close 'if' at line 23)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local suffix = ''\n  while\
    \ true do\n    local postfix = string.sub(postfix, 1, string.len(postfix)-1)\n\
    \    if string.sub(postfix, 1, string.len(postfix)) == string.sub(postfix, 1,\
    \ string.len(postfix)-1) then\n      break\n    end\n    suffix = string.sub(postfix,\
    \ 1, string.len(postfix)-1)\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local reversed_prefix\
    \ = string.sub(postfix, 1, string.len(postfix)-1)\n  reversed_prefix = reversed_prefix:reverse()\n\
    \  -- Return palindromic suffix + reverse of string prefix that comes before the\
    \ palindromic suffix.\n  return reversed_prefix .. suffix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ge8l2le.lua:33:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0ge8l2le.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  local palindrome_prefix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_length = #string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3da44p6y.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local i = #string\n\
    \  while i do\n    local char = string[i]\n    local reversed_char = string[#string\
    \ - i - 1]\n    if char == reversed_char then\n      postfix = postfix .. char\n\
    \      reversed_postfix = reversed_postfix .. reversed_char\n      i = i - 1\n\
    \    else\n      postfix = postfix .. char\n      reversed_postfix = reversed_postfix\
    \ .. reversed_char\n      break\n    end\n  end\n  postfix = postfix .. reversed_postfix\n\
    \  return palindrome .. postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv87qtak0.lua:20:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpv87qtak0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local max_len = #string\n  local max_len_palindrome = max_len\n  local max_len_palindrome_len\
    \ = max_len\n  local max_len_palindrome_len_palindrome = max_len\n  local max_len_palindrome_len_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome =\
    \ max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\
    \ = max_len\n  local max_len_palindrome_len_palindrome_palindrome_palindrome_palindrome_palindrome_palindrome\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe8vkombk.lua:40: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local length = #string\n  local index = 1\n  while index <= length do\n   \
    \ local substring = string.sub(palindrome, index, index)\n    local reverse =\
    \ reverse(string)\n    if substring == reverse then\n      palindrome = string.sub(palindrome,\
    \ index + #substring)\n      index = index + #substring\n    else\n      index\
    \ = index + 1\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptiqtw2ll.lua:17:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmptiqtw2ll.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string\n    local\
    \ reverse = ''\n    for i = 1, #string do\n      local c = string[i]\n      if\
    \ c ~= string[#string] then\n        postfix = string..c\n        reverse = reverse..c\n\
    \      end\n    end\n    if reverse == postfix then\n      return string\n   \
    \ end\n    string = postfix..reverse\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string.sub(palindrome, 1, string.len(palindrome))\n    local\
    \ reversed_postfix = string.sub(postfix, 1, string.len(postfix))\n    local prefix_length\
    \ = string.len(reversed_postfix)\n    local prefix_reversed_postfix = reversed_postfix:reverse()\n\
    \    local prefix_postfix = string.sub(postfix, prefix_length)\n    local prefix_reversed_postfix_length\
    \ = string.len(prefix_reversed_postfix)\n    local prefix_reversed_postfix_reversed\
    \ = prefix_reversed_postfix:reverse()\n    local prefix_postfix_reversed = string.sub(prefix_postfix,\
    \ prefix_reversed_postfix_length)\n    local prefix_postfix_reversed_length =\
    \ string.len(prefix_postfix_reversed)\n    local prefix_postfix_reversed_reversed\
    \ = prefix_postfix_reversed:reverse()\n    local prefix_postfix_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed)\n    local prefix_postfix_reversed_reversed_reversed\
    \ = prefix_postfix_reversed_reversed:reverse()\n    local prefix_postfix_reversed_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed_reversed)\n    local prefix_postfix_reversed_reversed_reversed_reversed\
    \ = prefix_postfix_reversed_reversed_reversed:reverse()\n    local prefix_postfix_reversed_reversed_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed_reversed_reversed)\n    local\
    \ prefix_postfix_reversed_reversed_reversed_reversed_reversed = prefix_postfix_reversed_reversed_reversed_reversed:reverse()\n\
    \    local prefix_postfix_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed_reversed_reversed_reversed)\n\
    \    local prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed:reverse()\n\
    \    local prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed_reversed:reverse()\n\
    \    local prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(prefix_postfix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local prefix_postfix_reversed_reverse\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps2kxnigz.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty, return\
    \ empty string.\n  if string == '' then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplcx3efq_.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  while true do\n\
    \    local postfix = string.sub(postfix, 1, string.len(postfix) - 2)\n    if string.sub(postfix,\
    \ 1, string.len(postfix) - 2) ~= string.sub(reversed_postfix, 1, string.len(reversed_postfix)\
    \ - 2) then\n      palindrome = palindrome .. string.sub(reversed_postfix, 1,\
    \ string.len(reversed_postfix) - 2)\n      reversed_postfix = reversed_postfix\
    \ .. postfix\n    else\n      break\n    end\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vxcwemd.lua:32:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp_vxcwemd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    for i = #string, 1, -1 do\n\
    \        local char = string[i]\n        if char == reverse then\n           \
    \ longest = i\n        else\n            reverse = reverse .. char\n        end\n\
    \    end\n    postfix = postfix .. reverse .. string[longest]\n    return postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3uw6r1r.lua:23:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpd3uw6r1r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local prefix_length = 0\n    local suffix_length = 0\n    while palindrome\
    \ ~= '' do\n        local postfix = string\n        local postfix_length = 0\n\
    \        while postfix ~= '' do\n            postfix = postfix .. postfix\n  \
    \          postfix_length = postfix_length + 1\n        end\n        postfix =\
    \ postfix .. string\n        postfix_length = postfix_length + 1\n        local\
    \ reversed_postfix = string\n        for i = 1, postfix_length do\n          \
    \  reversed_postfix = reversed_postfix .. postfix:sub(i, i)\n        end\n   \
    \     if reversed_postfix ~= postfix then\n            prefix_length = prefix_length\
    \ + 1\n            palindrome = palindrome .. reversed_postfix\n        end\n\
    \        suffix_length = suffix_length + 1\n        string = string\n    end\n\
    \    if prefix_length > suffix_length then\n        return palindrome\n    else\n\
    \        return palindrome .. string\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local length = 0\n    while true do\n        local\
    \ index = string.find(postfix, reverse)\n        if index == nil then\n      \
    \      return string\n        elseif index == 0 then\n            length = length\
    \ + 1\n            postfix = string.sub(postfix, index + 1)\n        else\n  \
    \          length = length + 1\n            postfix = string.sub(postfix, index\
    \ + 1, index - 1)\n        end\n        reverse = reverse .. postfix.sub(1, string.len(postfix)\
    \ - 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9gfkon3.lua:35:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpm9gfkon3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local max_len = #string\n  for i = 1, max_len do\n    local prefix = string\n\
    \    local suffix = string\n    suffix = suffix:reverse()\n    local palindrome_suffix\
    \ = suffix:sub(1, #suffix)\n    local palindrome_prefix = prefix:sub(1, #prefix)\n\
    \    if palindrome_suffix == palindrome_prefix then\n      palindrome = palindrome\
    \ .. palindrome_suffix\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wbrbwym.lua:31:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp7wbrbwym.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local length = 1\n  while\
    \ true do\n    local postfix = string\n    local reverse = string\n    local length\
    \ = length + 1\n    for i = 1, length do\n      postfix = postfix .. string\n\
    \      reverse = reverse .. string\n    end\n    if postfix ~= reverse then\n\
    \      palindrome = palindrome .. reverse .. postfix\n      break\n    end\n \
    \ end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest_palindrome = string\n  local longest_palindrome_length\
    \ = 1\n  for i = 1, #string do\n    local substring = string\n    substring =\
    \ string.sub(string,i,i)\n    substring = string.sub(substring,1,#substring)\n\
    \    local reversed_substring = string.sub(substring,#substring,#substring)\n\
    \    local palindrome = string.sub(reversed_substring,1,#reversed_substring)\n\
    \    if palindrome == reversed_substring then\n      longest_palindrome_length\
    \ = i\n      longest_palindrome = palindrome\n    end\n  end\n  -- Append longest\
    \ palindrome to string.\n  local new_string = string\n  new_string = string.sub(new_string,1,longest_palindrome_length-1)\n\
    \  new_string = string.sub(new_string,1,#new_string)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_string,1,#new_string-1)\n\
    \  new_string = string.sub(new_string,1,#new_string-1)\n  new_string = string.sub(new_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3cmlzsiu.lua:55: ')' expected (to close '(' at line 54) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is a palindrome\
    \ then return it.\n  if string == string.gsub(string, '^%s*([^%s]+)$', '') then\n\
    \    return string\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplr7xq7_g.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_prefix_length = #string\n    local palindrome_prefix_postfix\
    \ = string\n    local palindrome_prefix_postfix_length = #string\n    local palindrome_prefix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_length = #string\n   \
    \ local palindrome_prefix_postfix_postfix_postfix = string\n    local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length =\
    \ #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0rtwt8ei.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest_postfix = 1\n  while true do\n    local\
    \ postfix = string\n    for i = 1, longest_postfix do\n      postfix = postfix\
    \ .. suffix\n    end\n    local reversed_postfix = reverse(string)\n    if postfix\
    \ ~= reversed_postfix then\n      palindrome = palindrome .. reversed_postfix\n\
    \      longest_postfix = longest_postfix + 1\n    end\n    if longest_postfix\
    \ > 1 then\n      suffix = string\n    else\n      break\n    end\n  end\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9re_e5sb.lua:20:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmp9re_e5sb.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while postfix ~= '' do\n\
    \        local index = #postfix - 1\n        local char = postfix[index]\n   \
    \     local reversed = reverse\n        reverse = reverse .. char\n        if\
    \ char == reverse then\n            palindrome = palindrome .. char\n        else\n\
    \            postfix = postfix .. reverse\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpysrbyf.lua:19:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpwpysrbyf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local palindrome = string\n    local\
    \ longest_postfix_length = 0\n    local longest_postfix_index = 0\n    local longest_postfix_index2\
    \ = 0\n    local longest_postfix_index3 = 0\n    local longest_postfix_index4\
    \ = 0\n    local longest_postfix_index5 = 0\n    local longest_postfix_index6\
    \ = 0\n    local longest_postfix_index7 = 0\n    local longest_postfix_index8\
    \ = 0\n    local longest_postfix_index9 = 0\n    local longest_postfix_index10\
    \ = 0\n    local longest_postfix_index11 = 0\n    local longest_postfix_index12\
    \ = 0\n    local longest_postfix_index13 = 0\n    local longest_postfix_index14\
    \ = 0\n    local longest_postfix_index15 = 0\n    local longest_postfix_index16\
    \ = 0\n    local longest_postfix_index17 = 0\n    local longest_postfix_index18\
    \ = 0\n    local longest_postfix_index19 = 0\n    local longest_postfix_index20\
    \ = 0\n    local longest_postfix_index21 = 0\n    local longest_postfix_index22\
    \ = 0\n    local longest_postfix_index23 = 0\n    local longest_postfix_index24\
    \ = 0\n    local longest_postfix_index25 = 0\n    local longest_postfix_index26\
    \ = 0\n    local longest_postfix_index27 = 0\n    local longest_postfix_index28\
    \ = 0\n    local longest_postfix_index29 = 0\n    local longest_postfix_index30\
    \ = 0\n    local longest_postfix_index31 = 0\n    local longest_postfix_index32\
    \ = 0\n    local longest_postfix_index33 = 0\n    local longest_postfix_index34\
    \ = 0\n    local longest_postfix_index35 = 0\n    local longest_postfix_index36\
    \ = 0\n    local longest_postfix_index37 = 0\n    local longest_postfix_index38\
    \ = 0\n    local longest_postfix_index39 = 0\n    local longest_postfix_index40\
    \ = 0\n    local longest_postfix_index41 = 0\n    local longest_postfix_index42\
    \ = 0\n    local longest_postfix_index43 = 0\n    local longest_postfix_index44\
    \ = 0\n    local longest_postfix_index45 = 0\n    local longest_postfix_index46\
    \ = 0\n    local longest_postfix_index47 = 0\n    local longest_postfix_index48\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq6an0kqv.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = string.len(string)\n  local suffix = ''\n  local i = 1\n  while\
    \ true do\n    local postfix = string.sub(palindrome, i, i + longest)\n    local\
    \ reverse = string.sub(suffix, 1, string.len(suffix) - longest)\n    if reverse\
    \ == postfix then\n      palindrome = palindrome .. suffix\n      break\n    end\n\
    \    suffix = postfix .. reverse\n    i = i + 1\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rznswau.lua:33:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp3rznswau.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reverse = string\n\
    \  local longest = string\n  local longestLength = #string\n  local longestPostfix\
    \ = ''\n  local longestPostfixLength = 0\n  for i = 1, #string do\n    local postfix\
    \ = string\n    postfix = string.sub(postfix, 1, i)\n    postfix = string.reverse(postfix)\n\
    \    if postfix ~= reverse then\n      longest = postfix\n      longestLength\
    \ = #postfix\n      longestPostfix = postfix\n      longestPostfixLength = #postfix\n\
    \    end\n  end\n  longest = string.sub(longest, 1, longestLength)\n  longestPostfix\
    \ = string.sub(longestPostfix, 1, longestPostfixLength)\n  return longest .. longestPostfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchp0o5ay.lua:38:\
    \ expected: \"xyzyx\"\nactual: \"zyxzyx\"\nstack traceback:\n\t/tmp/tmpchp0o5ay.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  while true do\n    local\
    \ postfix = string.sub(string, 1, string.len(string) - string.len(postfix))\n\
    \    if string.sub(postfix, 1, string.len(postfix)) ~= string.sub(postfix, string.len(postfix)\
    \ - 1, string.len(postfix)) then\n      break\n    end\n  end\n  -- Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  local reversed_prefix = string.sub(postfix, 1, string.len(postfix)\
    \ - string.len(reversed_prefix))\n  return reversed_prefix .. string.sub(postfix,\
    \ string.len(postfix) - string.len(reversed_prefix))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local prefix_len = #string\n  while palindrome_len\
    \ > 0 do\n    local postfix = string\n    local postfix_len = #string\n    while\
    \ postfix_len > 0 do\n      local reversed_postfix = string\n      local reversed_postfix_len\
    \ = #string\n      while reversed_postfix_len > 0 do\n        reversed_postfix\
    \ = reversed_postfix:reverse()\n        reversed_postfix_len = #reversed_postfix\n\
    \      end\n      postfix = postfix .. reversed_postfix\n      postfix_len = #postfix\n\
    \    end\n    palindrome = palindrome .. postfix\n    palindrome_len = #palindrome\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = string\n    local length = #string\n    for i = 1, length\
    \ do\n        local char = string.sub(string, i, i)\n        if char == char then\n\
    \            postfix = string.sub(postfix, 1, i - 1)\n            palindrome =\
    \ string.sub(palindrome, 1, i - 1)\n        end\n    end\n    return palindrome\
    \ .. string.sub(postfix, 1, length)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z4qmbi1.lua:29:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9z4qmbi1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    local postfix = string.sub(string, 1, string.len(string)\
    \ - longest)\n    local reverse = string.sub(postfix, 1, string.len(postfix) -\
    \ longest)\n    if reverse == reverse then\n      break\n    end\n    longest\
    \ = string.len(postfix) + 1\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local result\
    \ = string\n  local start = string.len(string) - longest\n  for i = start, 1,\
    \ -1 do\n    local char = string.sub(string, 1, i)\n    local reverse = string.sub(char,\
    \ 1, string.len(char) - longest)\n    result = result .. reverse .. char\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pzk_r50.lua:38:\
    \ expected: \"x\"\nactual: \"xxx\"\nstack traceback:\n\t/tmp/tmp2pzk_r50.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  while palindrome_length > 1 do\n    -- Find the longest postfix that is a palindrome.\n\
    \    palindrome_postfix = string\n    for i = 1, palindrome_length do\n      palindrome_postfix\
    \ = palindrome_postfix..string[i]\n    end\n    palindrome_postfix = palindrome_postfix..string[palindrome_length]\n\
    \    -- Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    palindrome_prefix_postfix = string\n   \
    \ for i = 1, palindrome_prefix_length do\n      palindrome_prefix_postfix = palindrome_prefix_postfix..string[i]\n\
    \    end\n    palindrome_prefix_postfix = palindrome_prefix_postfix..string[palindrome_prefix_length]\n\
    \    palindrome = palindrome..palindrome_prefix_postfix..palindrome_postfix\n\
    \    palindrome_length = palindrome_length - 1\n    palindrome_prefix_length =\
    \ palindrome_prefix_length - 1\n    palindrome_prefix_postfix = palindrome_prefix_postfix..string[palindrome_prefix_length]\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfwpwx9z.lua:21:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmphfwpwx9z.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local index = #postfix\n    if index\
    \ == 0 then\n      break\n    end\n    local char = postfix:sub(1, index)\n  \
    \  local reversed = reverse:sub(1, #reverse)\n    reversed = reversed:sub(1, #reverse)\n\
    \    if char == reversed then\n      postfix = postfix:sub(2)\n      reverse =\
    \ reverse .. char\n    else\n      postfix = postfix .. char\n      reverse =\
    \ reverse .. char\n    end\n  end\n  return postfix .. reverse\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while palindrome ~= string.sub(string, 1, prefix_length)\
    \ do\n    prefix_length = prefix_length + 1\n  end\n  local suffix_length = #string\n\
    \  while suffix_length ~= 0 do\n    local reversed_suffix = string.sub(string,\
    \ prefix_length, suffix_length)\n    if palindrome == reversed_suffix then\n \
    \     palindrome = string.sub(string, 1, prefix_length) .. reversed_suffix\n \
    \     break\n    end\n    suffix_length = suffix_length - 1\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gubtqk9.lua:33:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp7gubtqk9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while palindrome ~= string.reverse do\n    prefix_length\
    \ = prefix_length + 1\n    palindrome = palindrome .. string.reverse .. string.sub(palindrome,\
    \ prefix_length)\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bqlz138.lua:16:\
    \ attempt to concatenate field 'reverse' (a function value)\nstack traceback:\n\
    \t/tmp/tmp8bqlz138.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_len = #string\n  while palindrome_len > 1 do\n    local palindrome_postfix_len\
    \ = #palindrome_postfix\n    local palindrome_prefix_len = #palindrome_prefix\n\
    \    local palindrome_prefix_postfix = palindrome_prefix:reverse()\n    local\
    \ palindrome_prefix_postfix_len = #palindrome_prefix_postfix\n    local palindrome_prefix_postfix_postfix\
    \ = palindrome_prefix_postfix:reverse()\n    if palindrome_prefix_postfix_len\
    \ == palindrome_prefix_len then\n      palindrome = palindrome .. palindrome_prefix_postfix_postfix\n\
    \      palindrome_len = palindrome_len - 1\n      palindrome_postfix = palindrome_postfix\
    \ .. palindrome_prefix_postfix_postfix\n      palindrome_prefix_len = palindrome_prefix_len\
    \ - 1\n      palindrome_prefix_postfix = palindrome_prefix_postfix .. palindrome_prefix_postfix_postfix\n\
    \      palindrome_prefix_postfix_len = palindrome_prefix_postfix_len - 1\n   \
    \   palindrome_prefix_postfix_postfix = palindrome_prefix_postfix_postfix .. palindrome_prefix_postfix_postfix\n\
    \      palindrome_prefix_postfix_postfix_len = palindrome_prefix_postfix_postfix_len\
    \ - 1\n    else\n      palindrome = palindrome .. palindrome_prefix_postfix_postfix\
    \ .. palindrome_postfix\n      palindrome_len = palindrome_len - 1\n      palindrome_postfix\
    \ = palindrome_postfix .. palindrome_prefix_postfix_postfix .. palindrome_postfix\n\
    \      palindrome_prefix_len = palindrome_prefix_len - 1\n      palindrome_prefix_postfix\
    \ = palindrome_prefix_postfix .. palindrome_prefix_postfix_postfix .. palindrome_prefix_postfix\n\
    \      palindrome_prefix_postfix_len = palindrome_prefix_postfix_len - 1\n   \
    \   palindrome_prefix_postfix_postfix = palindrome_prefix_postfix_postfix .. palindrome_prefix_postfix_postfix\
    \ .. palindrome_prefix_postfix_postfix\n      palin\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyxbkhcxm.lua:40: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix_length = 0\n  while\
    \ true do\n    local postfix_length = #postfix\n    if postfix_length == 0 then\n\
    \      return reversed_postfix\n    end\n    local longest_postfix_length = math.max(longest_postfix_length,\
    \ postfix_length)\n    postfix = string.sub(postfix, 1, postfix_length - 1)\n\
    \    reversed_postfix = string.sub(reversed_postfix, 1, #reversed_postfix - 1)\n\
    \    if postfix_length == 0 then\n      break\n    end\n  end\n  local postfix_length\
    \ = #postfix\n  local longest_postfix_length = math.max(longest_postfix_length,\
    \ postfix_length)\n  local postfix_suffix = string.sub(postfix, 1, postfix_length)\n\
    \  local reversed_postfix_suffix = string.sub(reversed_postfix, 1, #reversed_postfix\
    \ - 1)\n  local reversed_postfix_suffix_length = #reversed_postfix_suffix\n  local\
    \ reversed_postfix_suffix_length = math.max(reversed_postfix_suffix_length, reversed_postfix_length)\n\
    \  local reversed_postfix_suffix_suffix = string.sub(reversed_postfix_suffix,\
    \ 1, reversed_postfix_suffix_length)\n  return string.format(\n    \"%s%s%s\"\
    ,\n    string.sub(postfix, 1, longest_postfix_length - 1),\n    string.sub(reversed_postfix,\
    \ 1, reversed_postfix_suffix_length - 1),\n    reversed_postfix_suffix_suffix\n\
    \  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_yaqw0z.lua:46:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3_yaqw0z.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local palindrome = ''\n  while postfix ~= '' do\n   \
    \ local postfix_length = #postfix\n    if postfix_length == 1 then\n      palindrome\
    \ = postfix .. reverse\n      break\n    end\n    local postfix_reverse = reverse\n\
    \    for i = 1, postfix_length do\n      postfix_reverse = postfix_reverse ..\
    \ postfix:sub(i, i)\n    end\n    postfix = postfix:sub(1, postfix_length - 1)\n\
    \    reverse = postfix_reverse\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9qgwhyu.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xxyzxy\"\nstack traceback:\n\t/tmp/tmpm9qgwhyu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = ''\n    local longest_postfix_length = 0\n    for i = 1, #string do\n    \
    \    local postfix_length = string.len(string.sub(string,i,i))\n        if postfix_length\
    \ >= longest_postfix_length then\n            longest_postfix_length = postfix_length\n\
    \            reversed_string = string.sub(string,i,i)\n        end\n    end\n\
    \    return reversed_string .. string.sub(string,1,longest_postfix_length)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnebw5nx1.lua:28:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpnebw5nx1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = ''\n  while true do\n    local postfix = string\n    local\
    \ reverse = ''\n    for i = #postfix, 1, -1 do\n      reverse = reverse .. postfix:sub(i,\
    \ i)\n    end\n    if reverse == postfix then\n      palindrome = palindrome ..\
    \ reverse\n      break\n    end\n    postfix = postfix .. reverse\n  end\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ only contains spaces, return empty string.\n  if string == '' or string ~= string.gsub(string,\
    \ '^%s*$', '') then\n    return ''\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph0rqo_a4.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local longest = 0\n  while true do\n    longest = longest + 1\n    local postfix_reverse\
    \ = string.sub(postfix, 1, longest)\n    if postfix_reverse == string.sub(postfix,\
    \ longest, longest) then\n      return string\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3fhus8w.lua:28:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpu3fhus8w.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix_length = 1\n    local longest_postfix_index = 1\n \
    \   local longest_postfix_string = ''\n    while longest_postfix_index <= #string\
    \ do\n        local postfix = string\n        postfix = string.sub(postfix, longest_postfix_index,\
    \ #postfix)\n        postfix = string.gsub(postfix, \"[^\" .. string.char(string.byte(\"\
    ~\")) .. \"]\", \"\")\n        postfix = string.gsub(postfix, \"[\" .. string.char(string.byte(\"\
    ~\")) .. \"]\", \"\")\n        local reversed_postfix = string.reverse(postfix)\n\
    \        if reversed_postfix ~= postfix then\n            longest_postfix_length\
    \ = #postfix\n            longest_postfix_index = #string\n            longest_postfix_string\
    \ = postfix\n        end\n    end\n    local postfix_length = #longest_postfix_string\n\
    \    if longest_postfix_length <= 1 then\n        return string\n    end\n   \
    \ local postfix_string = string.sub(longest_postfix_string, 1, longest_postfix_length\
    \ - 1)\n    local reversed_postfix_string = string.reverse(postfix_string)\n \
    \   local palindrome_suffix = string.reverse(reversed_postfix_string)\n    local\
    \ palindrome_prefix = string.sub(string, 1, longest_postfix_length - 1)\n    return\
    \ palindrome_prefix .. palindrome_suffix .. palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest_palindrome = string\n  local longest_palindrome_length\
    \ = 1\n  local longest_palindrome_prefix = string\n  local longest_palindrome_suffix\
    \ = string\n  local longest_palindrome_prefix_length = 1\n  local longest_palindrome_suffix_length\
    \ = 1\n  local longest_palindrome_prefix_postfix = string\n  local longest_palindrome_suffix_postfix\
    \ = string\n  local longest_palindrome_prefix_postfix_length = 1\n  local longest_palindrome_suffix_postfix_length\
    \ = 1\n  local longest_palindrome_prefix_postfix_postfix = string\n  local longest_palindrome_suffix_postfix_postfix\
    \ = string\n  local longest_palindrome_prefix_postfix_postfix_length = 1\n  local\
    \ longest_palindrome_suffix_postfix_postfix_length = 1\n  local longest_palindrome_prefix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_suffix_postfix_postfix_postfix = string\n\
    \  local longest_palindrome_prefix_postfix_postfix_postfix_length = 1\n  local\
    \ longest_palindrome_suffix_postfix_postfix_postfix_length = 1\n  local longest_palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_suffix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_prefix_postfix_postfix_postfix_postfix_length\
    \ = 1\n  local longest_palindrome_suffix_postfix_postfix_postfix_postfix_length\
    \ = 1\n  local longest_palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_suffix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 1\n  local longest_palindrome_suffix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 1\n  local longest_palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_suffix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_palindrome_prefix_post\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjsfuqjy6.lua:53: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix = string\n    local longest_postfix_length = string\n\
    \    local longest_postfix_reverse = string\n    local longest_postfix_reverse_length\
    \ = string\n    local longest_postfix_reverse_suffix = string\n    local longest_postfix_reverse_suffix_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse = string\n    local\
    \ longest_postfix_reverse_suffix_reverse_length = string\n    local longest_postfix_reverse_suffix_reverse_suffix\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_length = string\n\
    \    local longest_postfix_reverse_suffix_reverse_suffix_reverse = string\n  \
    \  local longest_postfix_reverse_suffix_reverse_suffix_reverse_length = string\n\
    \    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix = string\n\
    \    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n    local longest_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4z26sa1d.lua:52: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_len = #string\n  local palindrome_prefix_postfix = string\n\
    \  while palindrome_len > 0 do\n    local palindrome_postfix_len = #palindrome_postfix\n\
    \    local palindrome_prefix_postfix_len = #palindrome_prefix_postfix\n    if\
    \ palindrome_postfix_len > palindrome_prefix_postfix_len then\n      palindrome_postfix\
    \ = string.reverse(palindrome_postfix)\n      palindrome_prefix_postfix = string.reverse(palindrome_prefix_postfix)\n\
    \      palindrome_len = palindrome_len - palindrome_postfix_len\n      palindrome_postfix\
    \ = palindrome_postfix .. palindrome_postfix\n      palindrome_prefix_postfix\
    \ = palindrome_prefix_postfix .. palindrome_prefix_postfix\n    else\n      palindrome_postfix\
    \ = palindrome_postfix .. string.reverse(palindrome_postfix)\n      palindrome_prefix_postfix\
    \ = palindrome_prefix_postfix .. string.reverse(palindrome_prefix_postfix)\n \
    \     palindrome_len = palindrome_len - palindrome_postfix_len\n    end\n  end\n\
    \  return palindrome_prefix_postfix .. palindrome_postfix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelb0glty.lua:39:\
    \ expected: \"x\"\nactual: \"xxxx\"\nstack traceback:\n\t/tmp/tmpelb0glty.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    for i = #string - 1, 1, -1\
    \ do\n        local char = string.sub(string,i,i)\n        reverse = reverse ..\
    \ char\n        if char == reverse then\n            longest = i\n        end\n\
    \    end\n    postfix = string.sub(string,longest,longest) .. reverse\n    return\
    \ postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnbyskcw.lua:30:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnnbyskcw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = string\n  local longest = 0\n  while true do\n    longest =\
    \ longest + 1\n    local postfix_reverse = postfix.reverse()\n    if postfix_reverse\
    \ == reverse then\n      return string\n    end\n    local postfix = postfix...postfix_reverse\n\
    \    reverse = reverse..postfix_reverse\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfnklgln5.lua:21: unexpected symbol near '...'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix_length = 0\n \
    \   local longest_postfix_index = 0\n    local longest_postfix_string = ''\n \
    \   local longest_postfix_string_index = 0\n    local longest_postfix_string_length\
    \ = 0\n    local longest_postfix_string_reverse = ''\n    local longest_postfix_string_reverse_index\
    \ = 0\n    local longest_postfix_string_reverse_length = 0\n    local longest_postfix_string_reverse_char\n\
    \    local longest_postfix_string_reverse_char_index\n    local longest_postfix_string_reverse_char_length\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local longest_postfix_string_reverse_char_length_index\n\
    \    local longest_postfix_string_reverse_char_length_index\n    local \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpscbs2iqp.lua:66: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local longest_postfix\
    \ = string\n  while true do\n    local postfix_length = #postfix\n    local reversed_postfix_length\
    \ = #reversed_postfix\n    if postfix_length == 0 or reversed_postfix_length ==\
    \ 0 then\n      break\n    end\n    local longest_postfix_length = #longest_postfix\n\
    \    if postfix_length < reversed_postfix_length then\n      postfix = string.sub(postfix,\
    \ 1, postfix_length-1)\n      reversed_postfix = string.sub(reversed_postfix,\
    \ 1, reversed_postfix_length-1)\n      longest_postfix = string.sub(longest_postfix,\
    \ 1, longest_postfix_length-1)\n    else\n      postfix = string.sub(postfix,\
    \ 1, reversed_postfix_length-1)\n      reversed_postfix = string.sub(reversed_postfix,\
    \ 1, postfix_length-1)\n      longest_postfix = string.sub(longest_postfix, 1,\
    \ reversed_postfix_length-1)\n    end\n  end\n  local postfix_length = #postfix\n\
    \  if postfix_length == 0 then\n    return ''\n  end\n  local reversed_postfix_length\
    \ = #reversed_postfix\n  if reversed_postfix_length == 0 then\n    return string\n\
    \  end\n  local longest_postfix_length = #longest_postfix\n  if postfix_length\
    \ < reversed_postfix_length then\n    postfix = string.sub(postfix, 1, postfix_length-1)\n\
    \    reversed_postfix = string.sub(reversed_postfix, 1, reversed_postfix_length-1)\n\
    \    longest_postfix = string.sub(longest_postfix, 1, longest_postfix_length-1)\n\
    \  end\n  local postfix_reversed = string.sub(postfix, 1, reversed_postfix_length-1)\n\
    \  local postfix_longest_postfix = string.sub(longest_postfix, 1, reversed_postfix_length-1)\n\
    \  return postfix_reversed .. postfix_longest_postfix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35_e9ix_.lua:56:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp35_e9ix_.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest =\
    \ 0\n  for i = 1, #string do\n    local length = string.len(string.sub(string,\
    \ 1, i))\n    if length > longest then\n      longest = length\n      postfix\
    \ = string.sub(string, 1, i)\n    end\n  end\n  -- Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  postfix\
    \ = string.sub(postfix, 1, #postfix) .. string.reverse(string.sub(postfix, longest))\n\
    \  return postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlxzhkod.lua:31:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmphlxzhkod.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = string\n \
    \ local longest_postfix_length_index = 0\n  local longest_postfix_length_reversed\
    \ = string\n  local longest_postfix_length_reversed_index = 0\n  local longest_postfix_length_reversed_reversed\
    \ = string\n  local longest_postfix_length_reversed_reversed_index = 0\n  local\
    \ longest_postfix_length_reversed_reversed_reversed_index = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwvlt6j2u.lua:47: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  local palindrome_prefix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_length = #string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjwj80dd_.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local longest_postfix = 1\n  while postfix ~= '' do\n\
    \    longest_postfix = longest_postfix + 1\n    postfix = string.sub(postfix,\
    \ 1, longest_postfix)\n    reverse = reverse .. postfix\n  end\n  reverse = reverse\
    \ .. string\n  while reverse ~= '' do\n    if reverse == string.sub(reverse, 1,\
    \ longest_postfix) then\n      return reverse\n    end\n    reverse = reverse\
    \ .. string.sub(reverse, 1, longest_postfix - 1)\n  end\n  return ''\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local suffix = ''\n  local reverse = ''\n  local\
    \ i = #string\n  while i ~= 0 do\n    suffix = string\n    reverse = reverse..suffix\n\
    \    i = i - 1\n    if suffix:sub(1,1) == suffix:sub(i,i) then\n      postfix\
    \ = postfix..suffix:sub(1,1)\n    end\n  end\n  postfix = postfix..suffix\n  postfix\
    \ = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n\
    \  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix\
    \ = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n\
    \  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix\
    \ = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n\
    \  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix\
    \ = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n\
    \  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix\
    \ = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n\
    \  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix\
    \ = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n\
    \  postfix = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix\
    \ = postfix..suffix:reverse()\n  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n\
    \  postfix = postfix..suffix\n  postfix = postfix..suffix:reverse()\n  postfix\
    \ = postfix..suffix\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdy6fob2q.lua:74: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local prefix_len = 0\n    local suffix_len =\
    \ 0\n    while true do\n        postfix = string\n        prefix_len = #string\n\
    \        suffix_len = #string\n        local reverse = reverse(string)\n     \
    \   if reverse == string then\n            break\n        end\n        postfix\
    \ = postfix .. reverse\n    end\n    palindrome = postfix .. string\n    return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptre4v9gv.lua:20:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmptre4v9gv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  while\
    \ true do\n    local postfix = string\n    local longest = 0\n    for i = 1, #string\
    \ do\n      local char = string.sub(string, i, i)\n      if char == char then\n\
    \        postfix = string.sub(string, 1, i) + char + string.sub(string, i + 1)\n\
    \      else\n        longest = i\n      end\n    end\n    if longest > #string\
    \ then\n      break\n    end\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local reverse\
    \ = string\n  for i = 1, #string do\n    local char = string.sub(string, i, i)\n\
    \    if char == char then\n      reverse = string.sub(string, 1, i) + char + reverse\n\
    \    else\n      break\n    end\n  end\n  return reverse .. postfix\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_len = #string\n    local palindrome_postfix = string\n \
    \   local palindrome_postfix_len = #string\n    local palindrome_prefix_len =\
    \ #string\n    local palindrome_prefix_postfix = string\n    local palindrome_prefix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix = string\n    local palindrome_prefix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix = string\n  \
    \  local palindrome_prefix_postfix_postfix_postfix_len = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_len =\
    \ #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpemadtc8j.lua:44: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ max_len = #string\n  while max_len > 1 do\n    local postfix = string\n    local\
    \ max_len = #string\n    for i = 1, #string do\n      local char = string[i]\n\
    \      local reverse = string[#string]\n      if char == reverse then\n      \
    \  postfix = string\n        break\n      end\n    end\n  end\n  -- Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  local reverse = string\n  for i = #postfix, 1, -1 do\n    local char\
    \ = postfix[i]\n    local reverse = string\n    for j = #reverse, 1, -1 do\n \
    \     local char = reverse[j]\n      reverse = reverse..char\n    end\n    string\
    \ = string..reverse\n  end\n  return string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif0ltmt5.lua:34:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpif0ltmt5.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_postfix_length = #string\n    local palindrome_postfix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n\
    \    local palindrome_postfix_reverse_start = #palindrome_postfix_reverse\n  \
    \  local palindrome_postfix_reverse_end = #palindrome_postfix_reverse\n    local\
    \ palindrome_postfix_reverse_mid = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_length\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_start\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_end\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_length\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_start\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_end\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_mid\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_length\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_start\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_end\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_length\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_start\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_end\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_length\
    \ = #palindrome_postfix_reverse\n    local palindrome_postfix_reverse_mid_mid_start\
    \ = #palindrome_postfix_reverse\n    local palindrome_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbdfftfp3.lua:51: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  for\
    \ i = 1, #string do\n    local char = string.sub(string,i,i)\n    longest = string.len(string.sub(postfix,1,longest))\n\
    \    if string.sub(postfix,longest,longest) == char then\n      longest = string.len(string.sub(postfix,longest,longest))\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local reverse = string\n  for i\
    \ = 1, #string do\n    local char = string.sub(string,i,i)\n    if string.len(string.sub(reverse,1,longest))\
    \ == string.len(string.sub(reverse,longest,longest)) then\n      reverse = string.sub(reverse,1,longest)..char..string.sub(reverse,longest+longest)\n\
    \    end\n  end\n  return reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrygpf80.lua:37:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpcrygpf80.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local length = 0\n    while postfix ~= '' do\n  \
    \      length = length + 1\n        postfix = postfix..postfix..postfix\n    end\n\
    \    length = length - 1\n    for i = 1, length do\n        reverse = reverse\
    \ .. string.sub(string, 1, length - i)\n    end\n    return reverse .. string.sub(string,\
    \ 1, length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local i = #string\n\
    \    while i do\n        postfix = string.sub(string,i,i-1)..postfix\n       \
    \ reverse = reverse..string.sub(string,i-1,i)\n        i = i - 1\n    end\n  \
    \  postfix = string.sub(string,1,#string)..postfix\n    if reverse == postfix\
    \ then\n        palindrome = string\n    else\n        palindrome = string..reverse\n\
    \    end\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil or string == '' then\n    return\
    \ ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4afoxlht.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_start = #palindrome\n\
    \    local palindrome_end = #palindrome - 1\n    local palindrome_suffix = string\n\
    \    local palindrome_suffix_length = #string\n    local palindrome_suffix_start\
    \ = #palindrome_suffix\n    local palindrome_suffix_end = #palindrome_suffix -\
    \ 1\n    local palindrome_suffix_suffix = string\n    local palindrome_suffix_suffix_length\
    \ = #string\n    local palindrome_suffix_suffix_start = #palindrome_suffix_suffix\n\
    \    local palindrome_suffix_suffix_end = #palindrome_suffix_suffix - 1\n    local\
    \ palindrome_suffix_suffix_suffix = string\n    local palindrome_suffix_suffix_suffix_length\
    \ = #string\n    local palindrome_suffix_suffix_suffix_start = #palindrome_suffix_suffix_suffix\n\
    \    local palindrome_suffix_suffix_suffix_end = #palindrome_suffix_suffix_suffix\
    \ - 1\n    local palindrome_suffix_suffix_suffix_suffix = string\n    local palindrome_suffix_suffix_suffix_suffix_length\
    \ = #string\n    local palindrome_suffix_suffix_suffix_suffix_start = #palindrome_suffix_suffix_suffix_suffix\n\
    \    local palindrome_suffix_suffix_suffix_suffix_end = #palindrome_suffix_suffix_suffix_suffix\
    \ - 1\n    local palindrome_suffix_suffix_suffix_suffix_suffix = string\n    local\
    \ palindrome_suffix_suffix_suffix_suffix_suffix_length = #string\n    local palindrome_suffix_suffix_suffix_suffix_suffix_start\
    \ = #palindrome_suffix_suffix_suffix_suffix_suffix\n    local palindrome_suffix_suffix_suffix_suffix_suffix_end\
    \ = #palindrome_suffix_suffix_suffix_suffix_suffix - 1\n    local palindrome_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = string\n    local palindrome_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = #string\n    local palindrome_suffix_suffix_suffix_suffix_suffix_suffix_start\
    \ = #palindrome_suffix_suffix_suffix_suffix_suffix_suffi\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0jtwalpf.lua:50: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix = string\n  local\
    \ longest_postfix_length = -1\n  local longest_postfix_start_index = -1\n  local\
    \ longest_postfix_end_index = -1\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index = 0\n  local longest_postfix_start_index = 0\n  local\
    \ longest_postfix_end_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvooqok4g.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local longest_postfix = string\n  local longest_postfix_length\
    \ = #string\n  while longest_postfix_length > 1 do\n    longest_postfix_length\
    \ = longest_postfix_length - 1\n    longest_postfix = string.sub(longest_postfix,\
    \ 1, longest_postfix_length) .. string.sub(longest_postfix, longest_postfix_length\
    \ + 1, #longest_postfix)\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local reversed_string\
    \ = string\n  local reversed_string_length = #string\n  while reversed_string_length\
    \ > 1 do\n    reversed_string_length = reversed_string_length - 1\n    reversed_string\
    \ = string.sub(reversed_string, 1, reversed_string_length) .. string.sub(reversed_string,\
    \ reversed_string_length + 1, #reversed_string)\n  end\n  return reversed_string\
    \ .. longest_postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvfuac34.lua:33:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpzvfuac34.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local palindrome = ''\n  while true do\n    local postfix\
    \ = string.sub(postfix, 1, string.len(postfix) - 1)\n    local reversed_postfix\
    \ = string.sub(string.sub(postfix, 1, string.len(postfix) - 1), 1, string.len(postfix)\
    \ - 1)\n    if postfix ~= reversed_postfix then\n      palindrome = palindrome\
    \ .. reversed_postfix\n      break\n    end\n  end\n  postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n  suffix = suffix .. reversed_postfix\n  return\
    \ string .. suffix .. palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_start = #string\n  local\
    \ palindrome_end = #string\n  while palindrome_length > 1 do\n    local palindrome_length\
    \ = palindrome_length - 1\n    local palindrome_start = palindrome_start + 1\n\
    \    local palindrome_end = palindrome_end - 1\n    local palindrome_suffix =\
    \ string[palindrome_start:palindrome_end]\n    local palindrome_prefix = string[palindrome_end\
    \ - palindrome_length]\n    palindrome = palindrome .. palindrome_suffix .. palindrome_prefix\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcd9ub8ls.lua:20: function arguments expected near ']'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local suffixLength = 0\n  local longestPalindrome = ''\n\
    \  local longestPalindromeLength = 0\n  local longestPalindromeSuffix = ''\n \
    \ local longestPalindromeSuffixLength = 0\n  local longestPalindromeSuffixStart\
    \ = 0\n  local longestPalindromeSuffixEnd = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex = 0\n  local longestPalindromeSuffixStartIndex\
    \ = 0\n  local longestPalindromeSuffixEndIndex\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkgxi6z4i.lua:68: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local longest = 0\n  local longestLength = 0\n  while\
    \ true do\n    longestLength = 0\n    for i = 1, #postfix do\n      local char\
    \ = postfix[i]\n      longestLength = longestLength + #char\n      if longestLength\
    \ > longest then\n        longest = longestLength\n        suffix = char\n   \
    \   end\n    end\n    if longest == longestLength then\n      break\n    end\n\
    \    postfix = suffix .. string.rev(string.sub(postfix, longestLength))\n  end\n\
    \  return postfix .. suffix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyarv_b8u.lua:20:\
    \ attempt to get length of local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpyarv_b8u.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local prefix_length = 0\n    local suffix_length = 0\n    local suffix_index\
    \ = string.len(string) - 1\n    local prefix_index = string.len(string) - 2\n\
    \    while suffix_index >= 0 and prefix_index >= 0 do\n        if string.sub(string,\
    \ suffix_index, suffix_index) == string.sub(string, prefix_index, prefix_index)\
    \ then\n            suffix_index = suffix_index - 1\n            prefix_index\
    \ = prefix_index - 1\n        else\n            suffix_length = suffix_length\
    \ + 1\n            prefix_length = prefix_length + 1\n            suffix_index\
    \ = suffix_index - 1\n            prefix_index = prefix_index - 1\n        end\n\
    \    end\n    if suffix_index >= 0 then\n        suffix_length = suffix_length\
    \ + 1\n    end\n    if prefix_index >= 0 then\n        prefix_length = prefix_length\
    \ + 1\n    end\n    if suffix_length >= prefix_length then\n        palindrome\
    \ = string.sub(string, prefix_length, prefix_length + suffix_length)\n    end\n\
    \    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p5vtd6v.lua:45:\
    \ expected: \"xyzyx\"\nactual: \"yz\"\nstack traceback:\n\t/tmp/tmp5p5vtd6v.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        longest\
    \ = longest + 1\n        local postfix = string\n        for i = 1, longest do\n\
    \            postfix = postfix .. string[#string]\n        end\n        local\
    \ reverse = reverse .. string\n        if postfix ~= reverse then\n          \
    \  return string\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp91uqar.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpnp91uqar.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_prefix = string\n\
    \    local palindrome_suffix = string\n    local palindrome_prefix_length = #string\n\
    \    local palindrome_suffix_length = #string\n    local palindrome_prefix_reversed\
    \ = string\n    local palindrome_suffix_reversed = string\n    local palindrome_prefix_reversed_length\
    \ = #string\n    local palindrome_suffix_reversed_length = #string\n    local\
    \ palindrome_prefix_reversed_reversed = string\n    local palindrome_suffix_reversed_reversed\
    \ = string\n    local palindrome_prefix_reversed_reversed_length = #string\n \
    \   local palindrome_suffix_reversed_reversed_length = #string\n    local palindrome_prefix_reversed_reversed_reversed\
    \ = string\n    local palindrome_suffix_reversed_reversed_reversed = string\n\
    \    local palindrome_prefix_reversed_reversed_reversed_length = #string\n   \
    \ local palindrome_suffix_reversed_reversed_reversed_length = #string\n    local\
    \ palindrome_prefix_reversed_reversed_reversed_reversed = string\n    local palindrome_suffix_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_suffix_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_suffix_reversed_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n    local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n    local palindrome_suffix_reverse\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp74ff3l81.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = string\n    local longest_postfix_length = 1\n    local longest_postfix_index\
    \ = 1\n    local longest_postfix_substring = string\n    while true do\n     \
    \   local postfix_length = #string - longest_postfix_index - 1\n        if postfix_length\
    \ == 0 then\n            return reversed_string\n        end\n        local postfix_substring\
    \ = string\n        postfix_substring = string.sub(string,\n            longest_postfix_index,\n\
    \            longest_postfix_index + postfix_length)\n        local postfix_substring_reversed\
    \ = string.sub(postfix_substring,\n            1,\n            -#postfix_substring)\n\
    \        if postfix_substring_reversed == postfix_substring then\n           \
    \ longest_postfix_length = postfix_length\n            longest_postfix_index =\
    \ longest_postfix_index + postfix_length\n            longest_postfix_substring\
    \ = postfix_substring\n        else\n            longest_postfix_length = postfix_length\n\
    \            longest_postfix_index = longest_postfix_index + 1\n            longest_postfix_substring\
    \ = postfix_substring\n        end\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36hivc9v.lua:45:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp36hivc9v.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local i = #string\n  while i do\n    local j =\
    \ #postfix\n    while j > 0 do\n      if string.sub(palindrome, j, j + 1) ~= string.sub(postfix,\
    \ j, j + 1) then\n        postfix = string.sub(postfix, 1, j - 1..'')\n      \
    \  break\n      end\n      j = j - 1\n    end\n    i = i - 1\n    palindrome =\
    \ string.sub(palindrome, 1, #palindrome)..postfix\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphejfcu6g.lua:19: malformed number near '1..'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_len = #string\n  local palindrome_postfix_reverse = ''\n\
    \  while palindrome_postfix_len > 0 do\n    local palindrome_postfix_reverse =\
    \ palindrome_postfix_reverse .. string[palindrome_postfix_len]\n    palindrome_postfix_len\
    \ = palindrome_postfix_len - 1 -- decrement postfix length\n    palindrome_postfix\
    \ = string[palindrome_postfix_len] .. palindrome_postfix\n  end\n  local palindrome_postfix_reverse\
    \ = palindrome_postfix_reverse .. string[palindrome_len]\n  local palindrome_postfix_reverse\
    \ = palindrome_postfix_reverse .. string[palindrome_len]\n  while palindrome_postfix_len\
    \ > 0 do\n    local palindrome_postfix_reverse = palindrome_postfix_reverse ..\
    \ string[palindrome_postfix_len]\n    palindrome_postfix_len = palindrome_postfix_len\
    \ - 1 -- decrement postfix length\n    palindrome_postfix = string[palindrome_postfix_len]\
    \ .. palindrome_postfix\n  end\n  local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_len]\n  local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_len]\n  while palindrome_postfix_len > 0 do\n    local\
    \ palindrome_postfix_reverse = palindrome_postfix_reverse .. string[palindrome_postfix_len]\n\
    \    palindrome_postfix_len = palindrome_postfix_len - 1 -- decrement postfix\
    \ length\n    palindrome_postfix = string[palindrome_postfix_len] .. palindrome_postfix\n\
    \  end\n  local palindrome_postfix_reverse = palindrome_postfix_reverse .. string[palindrome_len]\n\
    \  local palindrome_postfix_reverse = palindrome_postfix_reverse .. string[palindrome_len]\n\
    \  while palindrome_postfix_len > 0 do\n    local palindrome_postfix_reverse =\
    \ palindrome_postfix_reverse .. string[palindrome_postfix_len]\n    palindrome_postfix_len\
    \ = p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpigp6mghw.lua:52: 'end' expected (to close 'while' at line\
    \ 38) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix = string\n  local\
    \ longest_postfix_length = -1\n  local longest_postfix_postfix = string\n  local\
    \ longest_postfix_postfix_length = -1\n  local longest_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_length = -1\n  local longest_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_length = -1\n  local\
    \ longest_postfix_postfix_postfix_postfix_postfix = string\n  local longest_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix = string\n  local\
    \ longest_postfix_postfix_postfix_postfix_postfix_length = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n  local longest_postfix_postfix_postfix_post\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuzvpqxdz.lua:51: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local prefix_length\
    \ = #string\n    while true do\n        postfix = string.sub(postfix, 1, prefix_length)\n\
    \        reverse = string.sub(reverse, 1, prefix_length)\n        if postfix ~=\
    \ reverse then\n            palindrome = palindrome .. reverse .. postfix\n  \
    \      end\n        if string.len(palindrome) == string.len(string) then\n   \
    \         return palindrome\n        end\n        prefix_length = prefix_length\
    \ - 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_a7klq1.lua:34:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp0_a7klq1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local palindrome = string\n  local i = #string\n\
    \  while i do\n    local char = string[i]\n    local reversed_char = string[#string\
    \ - i - 1]\n    if char == reversed_char then\n      postfix = postfix .. reversed_char\n\
    \      reversed_postfix = reversed_postfix .. char\n      palindrome = palindrome\
    \ .. reversed_char\n      i = i - 1\n    else\n      postfix = postfix .. char\n\
    \      reversed_postfix = reversed_postfix .. reversed_char\n      palindrome\
    \ = palindrome .. char\n      i = i - 1\n    end\n  end\n  return palindrome ..\
    \ reversed_postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr114v2jx.lua:20:\
    \ attempt to concatenate local 'reversed_char' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpr114v2jx.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    local longest_postfix_length\
    \ = 0\n    while true do\n        local postfix = string\n        postfix = postfix..suffix\n\
    \        local postfix_length = #postfix\n        if postfix_length == 0 then\n\
    \            break\n        end\n        local postfix_reverse = string.gsub(postfix,\
    \ \"^.\", \"\"):reverse()\n        local postfix_reverse_length = #postfix_reverse\n\
    \        if postfix_reverse_length == 0 then\n            break\n        end\n\
    \        if postfix_length < longest_postfix_length then\n            longest_postfix_length\
    \ = postfix_length\n        end\n        if postfix_length == longest_postfix_length\
    \ then\n            suffix = postfix_reverse\n            prefix_length = postfix_length\n\
    \        end\n    end\n    if longest_postfix_length == 0 then\n        return\
    \ ''\n    end\n    local postfix = string\n    postfix = postfix..suffix\n   \
    \ local postfix_length = #postfix\n    if postfix_length == 0 then\n        return\
    \ ''\n    end\n    local postfix_reverse = string.gsub(postfix, \"^.\", \"\"):reverse()\n\
    \    local postfix_reverse_length = #postfix_reverse\n    if postfix_reverse_length\
    \ == 0 then\n        return ''\n    end\n    if postfix_length < longest_postfix_length\
    \ then\n        longest_postfix_length = postfix_length\n    end\n    if postfix_length\
    \ == longest_postfix_length then\n        suffix = postfix_reverse\n        prefix_length\
    \ = postfix_length\n    end\n    local postfix_reverse = string.gsub(postfix,\
    \ \"^.\", \"\"):reverse()\n    local postfix_reverse_length = #postfix_reverse\n\
    \    if postfix_reverse_length == 0 then\n        return ''\n    end\n    if postfix_length\
    \ < longest_postfix_length then\n        longest_postfix_length = postfix_length\n\
    \    end\n    if postfix_length == longest_postfix_length then\n        suffix\
    \ = postfix_reverse\n        prefix_length = postfix_length\n    end\n    local\
    \ postfix_reverse = string.gsub(postfix, \"^.\", \"\"):reverse()\n    local postfix_reverse_length\
    \ = #postfix_reverse\n    if postfix_reverse_length == 0 then\n        return\
    \ ''\n    end\n    if postfix_length < longest_postfix_length then\n        longest_postfix_length\
    \ = postfix_length\n    end\n    if postfix_length == longest_postfix_length then\n\
    \        suffix = postfix_reverse\n        prefix_length = postfix_length\n  \
    \  end\n    local postfix_reverse\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp62razqa6.lua:93: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix)-1)\n    if string.sub(postfix, 1, string.len(postfix))\
    \ == reverse then\n      return string\n    end\n    reverse = reverse .. postfix\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc4js7nn.lua:28:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpdc4js7nn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string\n  if string == nil then\n    return ''\n  end\n \
    \ -- If string has length 1, return string\n  if #string == 1 then\n    return\
    \ string\n  end\n  -- If string has length 2, return string\n  if #string == 2\
    \ then\n    return string\n  end\n  -- If string has length 3, return string\n\
    \  if #string == 3 then\n    return string\n  end\n  -- If string has length 4,\
    \ return string\n  if #string == 4 then\n    return string\n  end\n  -- If string\
    \ has length 5, return string\n  if #string == 5 then\n    return string\n  end\n\
    \  -- If string has length 6, return string\n  if #string == 6 then\n    return\
    \ string\n  end\n  -- If string has length 7, return string\n  if #string == 7\
    \ then\n    return string\n  end\n  -- If string has length 8, return string\n\
    \  if #string == 8 then\n    return string\n  end\n  -- If string has length 9,\
    \ return string\n  if #string == 9 then\n    return string\n  end\n  -- If string\
    \ has length 10, return string\n  if #string == 10 then\n    return string\n \
    \ end\n  -- If string has length 11, return string\n  if #string == 11 then\n\
    \    return string\n  end\n  -- If string has length 12, return string\n  if #string\
    \ == 12 then\n    return string\n  end\n  -- If string has length 13, return string\n\
    \  if #string == 13 then\n    return string\n  end\n  -- If string has length\
    \ 14, return string\n  if #string == 14 then\n    return string\n  end\n  -- If\
    \ string has length 15, return string\n  if #string == 15 then\n    return string\n\
    \  end\n  -- If string has length 16, return string\n  if #string == 16 then\n\
    \    return string\n  end\n  -- If string has length 17, return string\n  if #string\
    \ == 17 then\n    return string\n  end\n  -- If string has length 18, return string\n\
    \  if #string == 18 then\n    return string\n  end\n  -- If string has length\
    \ 19, return string\n  if #string == 19 then\n    return string\n  end\n  -- If\
    \ string has length 20, return string\n  if #string == 20 then\n    return string\n\
    \  end\n  -- If string has length 21, return string\n  if #string == 21 then\n\
    \    return string\n  end\n  -- If string has length 22, return string\n  if #string\
    \ == 22 then\n    return string\n  end\n  -- If string has \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpacon6699.lua:116: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  while palindrome_length > 1 do\n    palindrome_postfix\
    \ = string\n    palindrome_postfix_length = #string\n    for i = 1, palindrome_length\
    \ do\n      local char = string.sub(palindrome, i, i)\n      local reversed_char\
    \ = string.sub(string, #string - i, #string - i)\n      if char == reversed_char\
    \ then\n        palindrome_postfix = palindrome_postfix .. reversed_char\n   \
    \     palindrome_postfix_length = palindrome_postfix_length + 1\n      else\n\
    \        palindrome_postfix = palindrome_postfix .. char\n        palindrome_postfix_length\
    \ = palindrome_postfix_length + 1\n        break\n      end\n    end\n    palindrome\
    \ = palindrome .. palindrome_postfix\n    palindrome_length = palindrome_length\
    \ - palindrome_postfix_length + 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte6fi1ir.lua:42:\
    \ expected: \"xyzyx\"\nactual: \"xyzxyzx\"\nstack traceback:\n\t/tmp/tmpte6fi1ir.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_prefix_length = #string\n\
    \  local palindrome_prefix_postfix = string\n  local palindrome_prefix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix = string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_length =\
    \ #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix =\
    \ string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbbdq_tl3.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix = string\n        local reverse = ''\n        for i = 1, #string\
    \ do\n            local char = string.sub(string,i,i)\n            reverse = reverse\
    \ .. char\n            if char == reverse then\n                postfix = string.sub(string,i,i-1)\
    \ .. postfix\n                break\n            end\n        end\n        if\
    \ postfix ~= reverse then\n            palindrome = palindrome .. reverse .. postfix\n\
    \        end\n        if string.len(postfix) == string.len(reverse) then\n   \
    \         break\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_s1j_mx.lua:40:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw_s1j_mx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if palindrome == postfix then\n      break\n\
    \    end\n    reverse = reverse .. postfix\n  end\n  return reverse\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local longest_postfix = string\n  local longest_postfix_length\
    \ = 1\n  local longest_postfix_postfix = string\n  for i = 1, #string do\n   \
    \ local postfix = string\n    postfix = string.sub(postfix, 1, i)\n    postfix\
    \ = string.sub(postfix, i)\n    if string.sub(postfix, 1, #postfix) == postfix\
    \ then\n      longest_postfix_length = i\n      longest_postfix_postfix = postfix\n\
    \    end\n  end\n  longest_postfix = string.sub(longest_postfix, 1, longest_postfix_length)\n\
    \  longest_postfix = longest_postfix .. longest_postfix_postfix\n  -- Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  local palindrome = string\n  local palindrome_length = #string\n\
    \  for i = 1, #longest_postfix do\n    local postfix = longest_postfix\n    postfix\
    \ = string.sub(postfix, 1, i)\n    postfix = string.sub(postfix, i)\n    if string.sub(postfix,\
    \ 1, #postfix) == postfix then\n      palindrome = palindrome .. string.sub(postfix,\
    \ 1, #postfix) .. longest_postfix_postfix .. string.sub(postfix, #postfix)\n \
    \   end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qcxskch.lua:45:\
    \ expected: \"x\"\nactual: \"xxxxxxx\"\nstack traceback:\n\t/tmp/tmp5qcxskch.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  -- Algorithm idea is simple:\n \
    \ -- - Find the longest postfix of supplied string that is a palindrome.\n  --\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  local function longest_palindrome(string, start,\
    \ end)\n    local palindrome = string\n    local i = start\n    local j = end\n\
    \    while i < j do\n      local char = string[i]\n      local reverse = string.reverse()\n\
    \      if char == reverse then\n        -- Append the reverse of the string prefix\
    \ that comes before the palindromic suffix.\n        palindrome = palindrome ..\
    \ reverse\n        i = i + 1\n      else\n        j = j - 1\n      end\n    end\n\
    \    return palindrome\n  end\n  -- Find the shortest palindrome that begins with\
    \ a supplied string.\n  -- Algorithm idea is simple:\n  -- - Find the longest\
    \ postfix of supplied string that is a palindrome.\n  -- - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local function shortest_palindrome(string, start, end)\n    local palindrome\
    \ = string\n    local i = start\n    local j = end\n    while i < j do\n     \
    \ local char = string[i]\n      local reverse = string.reverse()\n      if char\
    \ == reverse then\n        -- Append the reverse of the string prefix that comes\
    \ before the palindromic suffix.\n        palindrome = palindrome .. reverse\n\
    \        i = i + 1\n      else\n        j = j - 1\n      end\n    end\n    return\
    \ palindrome\n  end\n  -- Find the longest postfix of supplied string that is\
    \ a palindrome.\n  -- Algorithm idea is simple:\n  -- - Find the longest postfix\
    \ of supplied string that is a palindrome.\n  -- - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  local\
    \ function longest_palindrome_recursive(string, start, end)\n    if start > end\
    \ then\n      return string\n    end\n    local palindrome = string\n    local\
    \ i = start\n    local j = end\n    while i < j do\n      local char = string[i]\n\
    \      local reverse = string.reverse()\n      if char == reverse then\n     \
    \   -- Append the reverse of the string prefix that comes before the palindromic\
    \ suffix.\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdpqslapj.lua:16: <name> or '...' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty, return\
    \ empty string.\n  if string == '' then return '' end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmy1obuhc.lua:25: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = #string\n  local reverse = string\n  local i = 1\n  while i\
    \ <= #string do\n    local char = string.sub(string,i,i)\n    local reversed =\
    \ string.reverse(char)\n    if reversed == char then\n      palindrome = palindrome\
    \ .. reversed\n      longest = longest\n    else\n      palindrome = palindrome\
    \ .. reversed\n      longest = longest + 1\n    end\n    i = i + 1\n  end\n  return\
    \ palindrome .. string.reverse(string.sub(string,longest))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxv1jkjx.lua:35:\
    \ expected: \"x\"\nactual: \"xxx\"\nstack traceback:\n\t/tmp/tmppxv1jkjx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local suffix = ''\n  while true do\n    local reverse\
    \ = reverse(string)\n    if reverse == string then\n      break\n    end\n   \
    \ postfix = string\n    suffix = string\n    string = reverse\n  end\n  local\
    \ postfix_reverse = reverse(postfix)\n  if postfix_reverse ~= string then\n  \
    \  palindrome = string\n  end\n  return palindrome .. suffix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvg_1t6ed.lua:16:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpvg_1t6ed.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local i = 1\n  while true\
    \ do\n    local length = #postfix\n    if length == 0 then\n      break\n    end\n\
    \    local postfix_i = #postfix\n    local postfix_j = postfix_i - 1\n    while\
    \ postfix_i >= 1 and postfix_j <= #postfix do\n      if postfix[postfix_i] ==\
    \ postfix[postfix_j] then\n        postfix_i = postfix_i - 1\n        postfix_j\
    \ = postfix_j - 1\n      else\n        postfix_i = postfix_i - 1\n        postfix_j\
    \ = postfix_j - 1\n      end\n    end\n    postfix = postfix .. postfix[postfix_i]\
    \ .. postfix[postfix_j]\n    local reverse = reverse .. postfix[postfix_i] ..\
    \ postfix[postfix_j]\n    i = i + 1\n  end\n  return palindrome .. reverse ..\
    \ postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrrz7_hi.lua:32:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpcrrz7_hi.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local i = #string\n  while i do\n    local j =\
    \ #postfix\n    while j > 0 do\n      local c = postfix:sub(j, j)\n      if c\
    \ ~= palindrome:sub(i, i) then\n        palindrome = palindrome .. c\n      end\n\
    \      j = j - 1\n    end\n    postfix = postfix:sub(1, #postfix)\n    i = i -\
    \ 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local suffix =\
    \ ''\n  repeat\n    postfix = postfix .. suffix\n    reversed_postfix = reversed_postfix\
    \ .. suffix\n    suffix = suffix:reverse()\n  until not suffix:sub(1, #postfix)\n\
    \  -- Reverse the postfix to find the palindromic suffix.\n  reversed_postfix\
    \ = reversed_postfix:reverse()\n  -- Append the reverse of the postfix to the\
    \ end of the string.\n  palindrome = palindrome .. reversed_postfix\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reverse = string\n\
    \    local palindrome = string\n    local i = 0\n    while i <= #string do\n \
    \       local char = string[i]\n        local j = #reverse - 1\n        while\
    \ j >= 0 do\n            local char = reverse[j]\n            if char == char\
    \ then\n                reverse = reverse[1:j+1]\n                break\n    \
    \        end\n            j = j - 1\n        end\n        i = i + 1\n    end\n\
    \    return palindrome .. reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpws3jq258.lua:21: ']' expected near ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil or string == '' then\n    return\
    \ ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppe_arq61.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = string\n    local palindrome = string\n    local i = #string\n\
    \    while i do\n        postfix = string\n        reverse = string\n        i\
    \ = i - 1\n        while i > 0 do\n            postfix = string\n            reverse\
    \ = string\n            i = i - 1\n            if string[i] ~= string[#string]\
    \ then\n                break\n            end\n        end\n        if reverse\
    \ == postfix then\n            palindrome = palindrome .. reverse .. string\n\
    \            break\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mym_sip.lua:40:\
    \ expected: \"x\"\nactual: \"xxx\"\nstack traceback:\n\t/tmp/tmp_mym_sip.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  while palindrome_length > 1 do\n    local\
    \ palindrome_postfix_length = palindrome_postfix_length - 1\n    local palindrome_postfix_substring\
    \ = string.sub(palindrome_postfix, 1, palindrome_postfix_length)\n    local palindrome_postfix_substring_reverse\
    \ = string.sub(palindrome_postfix_substring, 1, #palindrome_postfix_substring)\n\
    \    if palindrome_postfix_substring == palindrome_postfix_substring_reverse then\n\
    \      palindrome = palindrome .. palindrome_postfix_substring_reverse\n     \
    \ palindrome_length = palindrome_length - 1\n      palindrome_postfix = palindrome_postfix\
    \ .. palindrome_postfix_substring\n      palindrome_postfix_length = palindrome_postfix_length\
    \ + 1\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsof2t9pl.lua:35:\
    \ expected: \"xyzyx\"\nactual: \"xyzxyxy\"\nstack traceback:\n\t/tmp/tmpsof2t9pl.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ ''\n  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n\
    \  for i = 1, #string do\n    local postfix_length = string:sub(i, i)\n    if\
    \ postfix_length == 0 then\n      break\n    end\n    local postfix_index = #string\
    \ - i - 1\n    if postfix_index > longest_postfix_index then\n      longest_postfix_index\
    \ = postfix_index\n      longest_postfix_length = postfix_length\n    end\n  end\n\
    \  reversed_string = string\n  for i = longest_postfix_index, 1, -1 do\n    local\
    \ postfix_length = string:sub(i, i)\n    if postfix_length == 0 then\n      break\n\
    \    end\n    local postfix_index = #string - i - 1\n    reversed_string = reversed_string\
    \ .. string:sub(postfix_index, postfix_index)\n  end\n  return reversed_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqth4uy0.lua:43:\
    \ expected: \"xyzyx\"\nactual: \"xyzx\"\nstack traceback:\n\t/tmp/tmpjqth4uy0.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_palindrome = string\n    local longest_palindrome_length = string\n\
    \    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local longest_palindrome_length = string\n    local longest_palindrome_length\
    \ = string\n    local lon\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkr0cf9q6.lua:71: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local suffix_length\
    \ = #string\n  while suffix_length > 0 do\n    local postfix_length = #postfix\n\
    \    if postfix_length == 0 then\n      break\n    end\n    local reversed_postfix_length\
    \ = #reversed_postfix\n    if reversed_postfix_length == 0 then\n      break\n\
    \    end\n    local suffix_length = #string\n    if suffix_length == 0 then\n\
    \      break\n    end\n    local postfix = string\n    local reversed_postfix\
    \ = string\n    local suffix_length = #string\n    while suffix_length > 0 do\n\
    \      local postfix_length = #postfix\n      if postfix_length == 0 then\n  \
    \      break\n      end\n      local reversed_postfix_length = #reversed_postfix\n\
    \      if reversed_postfix_length == 0 then\n        break\n      end\n      local\
    \ suffix_length = #string\n      if suffix_length == 0 then\n        break\n \
    \     end\n      local postfix = string\n      local reversed_postfix = string\n\
    \    end\n  end\n  return palindrome .. reversed_postfix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = string\n \
    \ local longest_postfix_suffix_length = string\n  local longest_postfix_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_suffix_reverse_index = string\n  local longest_postfix_suffix_reverse_index\
    \ = string\n  local longest_postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbrbby6qx.lua:67: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest_postfix = 1\n    local longest_palindrome\
    \ = ''\n    while postfix ~= '' do\n        local postfix_length = #postfix\n\
    \        local palindrome = string.sub(postfix, 1, postfix_length)\n        local\
    \ palindrome_length = #palindrome\n        if palindrome_length >= longest_postfix\
    \ then\n            longest_postfix = palindrome_length\n            longest_palindrome\
    \ = palindrome\n        end\n        postfix = string.sub(postfix, postfix_length\
    \ + 1)\n    end\n    local palindrome = string.sub(longest_palindrome, 1, #longest_palindrome)\n\
    \    local palindrome_length = #palindrome\n    if palindrome_length >= longest_postfix\
    \ then\n        longest_postfix = palindrome_length\n        longest_palindrome\
    \ = palindrome\n    end\n    return longest_palindrome .. reverse\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoomualfb.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpoomualfb.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local i = #string\n  while i do\n    local j =\
    \ #postfix\n    while j > 0 do\n      local c = string.sub(postfix, j, j)\n  \
    \    palindrome = palindrome .. c\n      postfix = string.sub(postfix, 1, j -\
    \ 1)\n      j = j - 1\n    end\n    i = i - 1\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix = string\n    local longest_postfix_length = string\n\
    \    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_postfix_start_index = 1\n    local longest_postfix_end_index\
    \ = 1\n    local longest_post\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp44jr7wjq.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #palindrome\n  local palindrome_postfix = string\n \
    \ local palindrome_postfix_len = #palindrome_postfix\n  local palindrome_prefix_len\
    \ = #string\n  while palindrome_len > 0 and palindrome_postfix_len > 0 and palindrome_prefix_len\
    \ > 0 do\n    local palindrome_postfix_sub = palindrome_postfix:sub(1, palindrome_postfix_len\
    \ - 1)\n    local palindrome_prefix_sub = string:sub(1, palindrome_prefix_len\
    \ - 1)\n    local palindrome_sub = palindrome_prefix_sub..palindrome_postfix_sub\n\
    \    local palindrome_sub_reverse = palindrome_sub:reverse()\n    if palindrome_sub\
    \ == palindrome_sub_reverse then\n      palindrome = palindrome..palindrome_sub\n\
    \      palindrome_len = palindrome_len - palindrome_postfix_len + 1\n      palindrome_postfix\
    \ = palindrome_postfix..palindrome_sub_reverse\n      palindrome_postfix_len =\
    \ palindrome_postfix_len - palindrome_prefix_len + 1\n      palindrome_prefix_len\
    \ = palindrome_prefix_len - 1\n    else\n      palindrome_postfix = palindrome_postfix..palindrome_sub_reverse\n\
    \      palindrome_postfix_len = palindrome_postfix_len - palindrome_prefix_len\
    \ + 1\n      palindrome_prefix_len = palindrome_prefix_len - 1\n    end\n  end\n\
    \  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tlomusa.lua:42:\
    \ expected: \"xyzyx\"\nactual: \"xyzx\"\nstack traceback:\n\t/tmp/tmp6tlomusa.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_start = #string\n\
    \    local palindrome_end = #string\n    local palindrome_prefix_length = 0\n\
    \    local palindrome_suffix_length = 0\n    local palindrome_prefix_start = #string\n\
    \    local palindrome_suffix_start = #string\n    while palindrome_length > 1\
    \ do\n        -- Find the longest postfix of supplied string that is a palindrome.\n\
    \        palindrome_prefix_length = palindrome_end - palindrome_start\n      \
    \  palindrome_suffix_length = palindrome_end - palindrome_prefix_length\n    \
    \    palindrome_prefix_start = palindrome_end\n        palindrome_suffix_start\
    \ = palindrome_prefix_start + palindrome_suffix_length\n        palindrome = string.sub(palindrome,\
    \ #palindrome_start, palindrome_prefix_start)\n        palindrome = string.sub(palindrome,\
    \ #palindrome_prefix_start, palindrome_suffix_start)\n        palindrome = string.sub(palindrome,\
    \ #palindrome_suffix_start, palindrome_end)\n        palindrome_length = palindrome_end\
    \ - palindrome_start\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xxuk04s.lua:26:\
    \ attempt to get length of local 'palindrome_start' (a number value)\nstack traceback:\n\
    \t/tmp/tmp5xxuk04s.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local suffixLength = 0\n  local longestPalindrome = ''\n\
    \  local longestPalindromeLength = 0\n  local longestPalindromeSuffix = ''\n \
    \ local longestPalindromeSuffixLength = 0\n  local longestPalindromePrefix = ''\n\
    \  local longestPalindromePrefixLength = 0\n  local longestPalindromeSuffixReverse\
    \ = ''\n  local longestPalindromeSuffixReverseLength = 0\n  local longestPalindromePrefixReverse\
    \ = ''\n  local longestPalindromePrefixReverseLength = 0\n  while palindrome ~=\
    \ '' do\n    suffixLength, suffix = suffixLength + 1, suffix .. palindrome\n \
    \   longestPalindromeLength, longestPalindrome = longestPalindromeLength + 1,\
    \ longestPalindrome .. suffix\n    longestPalindromeSuffixLength, longestPalindromeSuffix\
    \ = longestPalindromeSuffixLength + 1, longestPalindromeSuffix .. suffix\n   \
    \ longestPalindromePrefixLength, longestPalindromePrefix = longestPalindromePrefixLength\
    \ + 1, longestPalindromePrefix .. suffix\n    longestPalindromeSuffixReverseLength,\
    \ longestPalindromeSuffixReverse = longestPalindromeSuffixReverseLength + 1, longestPalindromeSuffixReverse\
    \ .. suffix:reverse()\n    longestPalindromePrefixReverseLength, longestPalindromePrefixReverse\
    \ = longestPalindromePrefixReverseLength + 1, longestPalindromePrefixReverse ..\
    \ suffix:reverse()\n    palindrome = palindrome:reverse()\n  end\n  return longestPalindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string.sub(string, 1, string.len(string))\n    local reversed_postfix\
    \ = string.sub(postfix, 1, string.len(postfix))\n    local prefix_length = string.len(reversed_postfix)\n\
    \    local reversed_prefix_length = string.len(reversed_postfix)\n    while true\
    \ do\n        local palindrome_length = string.len(palindrome)\n        if palindrome_length\
    \ == 0 then\n            break\n        end\n        local palindrome_postfix\
    \ = string.sub(palindrome, 1, palindrome_length)\n        local palindrome_reversed_postfix\
    \ = string.sub(palindrome_postfix, 1, palindrome_length)\n        local palindrome_prefix_length\
    \ = string.len(palindrome_reversed_postfix)\n        local palindrome_reversed_prefix_length\
    \ = string.len(palindrome_reversed_postfix)\n        if palindrome_prefix_length\
    \ == 0 then\n            break\n        end\n        if palindrome_prefix_length\
    \ < reversed_prefix_length then\n            break\n        end\n        if palindrome_prefix_length\
    \ == reversed_prefix_length then\n            if palindrome_postfix ~= reversed_postfix\
    \ then\n                break\n            end\n        end\n        if palindrome_prefix_length\
    \ > reversed_prefix_length then\n            break\n        end\n        palindrome\
    \ = palindrome_reversed_postfix\n        reversed_postfix = palindrome_reversed_postfix\n\
    \        reversed_prefix_length = palindrome_reversed_prefix_length\n        prefix_length\
    \ = palindrome_prefix_length\n    end\n    return palindrome .. reversed_postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string.gsub(string, '^%s*(.-)%s*$', '\\\\2')\n  local reverse\
    \ = string.gsub(postfix, '(.-)%s*$', '\\1')\n  local prefix_length = #string\n\
    \  if reverse ~= postfix then\n    palindrome = palindrome .. reverse\n    prefix_length\
    \ = prefix_length - #reverse\n  end\n  return palindrome .. string.sub(string,\
    \ prefix_length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvv6a1sf.lua:26:\
    \ expected: \"\"\nactual: \"\x01\x01\"\nstack traceback:\n\t/tmp/tmpfvv6a1sf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_suffix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_suffix = string\n\
    \  while palindrome_length > 1 do\n    local palindrome_prefix_length = palindrome_prefix_length\
    \ - 1\n    local palindrome_prefix_suffix = string\n    while palindrome_prefix_length\
    \ > 0 do\n      local palindrome_suffix = string\n      local palindrome_length\
    \ = palindrome_length - 1\n      while palindrome_length > 0 do\n        local\
    \ palindrome = palindrome .. string[palindrome_length]\n        local palindrome_length\
    \ = palindrome_length - 1\n      end\n      palindrome_suffix = palindrome_suffix\
    \ .. string[palindrome_prefix_length]\n      palindrome_prefix_length = palindrome_prefix_length\
    \ - 1\n      palindrome_prefix_suffix = palindrome_prefix_suffix .. string[palindrome_prefix_length]\n\
    \    end\n    palindrome = palindrome .. string[palindrome_length]\n    palindrome_length\
    \ = palindrome_length - 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2ysq92f.lua:24:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpl2ysq92f.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = #string\n\
    \  local longest_postfix_suffix_length = #string\n  local longest_postfix_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_length = #string\n  local longest_postfix_suffix_reverse_suffix_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse = string\n\
    \  local longest_postfix_suffix_reverse_suffix_reverse_length = #string\n  local\
    \ longest_postfix_suffix_reverse_suffix_reverse_suffix_length = #string\n  local\
    \ longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse = string\n  local\
    \ longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_length = #string\n\
    \  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp81hjpo2l.lua:49: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local i = #string\n  while i do\n    local j =\
    \ #postfix\n    while j > 0 do\n      local c = postfix:sub(i, j)\n      if c\
    \ ~= c:reverse() then\n        postfix = postfix:sub(i, j-1)\n        break\n\
    \      end\n      j = j - 1\n    end\n    i = i - 1\n    if postfix ~= palindrome\
    \ then\n      palindrome = palindrome .. string\n    end\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  while true do\n    local\
    \ postfix = postfix .. string\n    if string.find(postfix, string.rev(postfix),\
    \ 1, true) then\n      break\n    end\n  end\n  -- Append the reverse of the postfix\
    \ to the end of the string.\n  local reversed_postfix = string.reverse(postfix)\n\
    \  return reversed_postfix .. string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qpsiihm.lua:16:\
    \ attempt to call field 'rev' (a nil value)\nstack traceback:\n\t/tmp/tmp7qpsiihm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_suffix = string\n  local\
    \ palindrome_prefix_length = #string\n  while palindrome_length > 1 do\n    local\
    \ palindrome_prefix_length = palindrome_prefix_length - 1\n    local palindrome_suffix\
    \ = string\n    local palindrome_length = palindrome_length - 1\n    while palindrome_length\
    \ > 1 do\n      local palindrome_suffix = string\n      local palindrome_length\
    \ = palindrome_length - 1\n      local palindrome = palindrome .. string\n   \
    \ end\n    palindrome = palindrome .. string\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_len = #string\n  local palindrome_postfix_reverse = ''\n\
    \  local palindrome_postfix_reverse_len = #palindrome_postfix_reverse\n  while\
    \ palindrome_len > 0 do\n    local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_postfix_len]\n    local palindrome_postfix_reverse_len\
    \ = #palindrome_postfix_reverse\n    palindrome_postfix_len = palindrome_len -\
    \ 1 -- decrement the length\n    palindrome_postfix = string[palindrome_postfix_len]\
    \ .. palindrome_postfix\n    palindrome_postfix_len = #palindrome_postfix\n  end\n\
    \  return palindrome_postfix .. palindrome_postfix_reverse\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6k6_io6.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpj6k6_io6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil or string == '' then\n    return\
    \ ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_azzoddv.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local length = #string\n\
    \  while length > 0 do\n    local index = length - 1\n    while index > 0 do\n\
    \      postfix = string.sub(postfix, 1, index - 1..-1)\n      reverse = string.sub(reverse,\
    \ 1, index - 1..-1)\n      if postfix ~= reverse then\n        break\n      end\n\
    \      index = index - 1\n    end\n    length = length - 1\n    palindrome = string.sub(palindrome,\
    \ 1, length + 2..-1)\n    palindrome = string.sub(palindrome, length + 2..-1)\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsac7lr1d.lua:19: malformed number near '1..'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil then return '' end\n  -- If string\
    \ has length 1, return string.\n  if #string == 1 then return string end\n  --\
    \ If string has length 2, return string.\n  if #string == 2 then\n    return string\n\
    \  end\n  -- If string has length 3, return string.\n  if #string == 3 then\n\
    \    return string\n  end\n  -- If string has length 4, return string.\n  if #string\
    \ == 4 then\n    return string\n  end\n  -- If string has length 5, return string.\n\
    \  if #string == 5 then\n    return string\n  end\n  -- If string has length 6,\
    \ return string.\n  if #string == 6 then\n    return string\n  end\n  -- If string\
    \ has length 7, return string.\n  if #string == 7 then\n    return string\n  end\n\
    \  -- If string has length 8, return string.\n  if #string == 8 then\n    return\
    \ string\n  end\n  -- If string has length 9, return string.\n  if #string ==\
    \ 9 then\n    return string\n  end\n  -- If string has length 10, return string.\n\
    \  if #string == 10 then\n    return string\n  end\n  -- If string has length\
    \ 11, return string.\n  if #string == 11 then\n    return string\n  end\n  --\
    \ If string has length 12, return string.\n  if #string == 12 then\n    return\
    \ string\n  end\n  -- If string has length 13, return string.\n  if #string ==\
    \ 13 then\n    return string\n  end\n  -- If string has length 14, return string.\n\
    \  if #string == 14 then\n    return string\n  end\n  -- If string has length\
    \ 15, return string.\n  if #string == 15 then\n    return string\n  end\n  --\
    \ If string has length 16, return string.\n  if #string == 16 then\n    return\
    \ string\n  end\n  -- If string has length 17, return string.\n  if #string ==\
    \ 17 then\n    return string\n  end\n  -- If string has length 18, return string.\n\
    \  if #string == 18 then\n    return string\n  end\n  -- If string has length\
    \ 19, return string.\n  if #string == 19 then\n    return string\n  end\n  --\
    \ If string has length 20, return string.\n  if #string == 20 then\n    return\
    \ string\n  end\n  -- If string has length 21, return string.\n  if #string ==\
    \ 21 then\n    return string\n  end\n  -- If string has length 22, return string.\n\
    \  if #string == 22 then\n    return string\n  end\n  -- If string has length\
    \ 23, return string.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpadyc6z4z.lua:112: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function longest_palindrome(string, index, prefix)\n\
    \    local postfix = string\n    local i = index\n    while i do\n      postfix\
    \ = string..postfix..string\n      i = i - 1\n    end\n    local reversed_postfix\
    \ = string..postfix..string\n    local palindrome = prefix..reversed_postfix\n\
    \    return palindrome\n  end\n  -- Find the shortest palindrome that begins with\
    \ a supplied string.\n  local function shortest_palindrome(string, index, prefix)\n\
    \    local postfix = string\n    local i = index\n    while i do\n      postfix\
    \ = string..postfix..string\n      i = i - 1\n    end\n    local reversed_postfix\
    \ = string..postfix..string\n    local palindrome = prefix..reversed_postfix\n\
    \    return palindrome\n  end\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome = longest_palindrome\n  -- Find the shortest palindrome\
    \ that begins with a supplied string.\n  local shortest_palindrome = shortest_palindrome\n\
    \  -- Find the longest postfix that is a palindrome.\n  local function longest_palindrome_reversed(string,\
    \ index, prefix)\n    local postfix = string\n    local i = index\n    while i\
    \ do\n      postfix = string..postfix..string\n      i = i - 1\n    end\n    local\
    \ reversed_postfix = string..postfix..string\n    local palindrome = prefix..reversed_postfix\n\
    \    return palindrome\n  end\n  -- Find the shortest palindrome that begins with\
    \ a supplied string.\n  local function shortest_palindrome_reversed(string, index,\
    \ prefix)\n    local postfix = string\n    local i = index\n    while i do\n \
    \     postfix = string..postfix..string\n      i = i - 1\n    end\n    local reversed_postfix\
    \ = string..postfix..string\n    local palindrome = prefix..reversed_postfix\n\
    \    return palindrome\n  end\n  -- Find the longest postfix that is a palindrome.\n\
    \  local longest_palindrome_reversed = longest_palindrome_reversed\n  -- Find\
    \ the shortest palindrome that begins with a supplied string.\n  local shortest_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp21mcq5fd.lua:79: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = postfix .. reverse\n\
    \    if string.find(postfix, string.reverse(postfix)) then\n      return postfix\n\
    \    end\n    reverse = reverse .. string\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local length = 1\n  while true do\n    local postfix =\
    \ string.sub(postfix, 1, length) .. suffix\n    local reverse = string.sub(postfix,\
    \ 1, length) .. string.sub(postfix, length + 1, #postfix)\n    if reverse == postfix\
    \ then\n      return string\n    end\n    length = length + 1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphovrenyx.lua:30:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmphovrenyx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string.sub(string, 1, string.len(string))\n  local reversed_postfix\
    \ = string.sub(postfix, 1, string.len(postfix))\n  local prefix_length = string.len(reversed_postfix)\n\
    \  while string.len(palindrome) < string.len(postfix) do\n    local postfix_length\
    \ = string.len(postfix)\n    if string.len(palindrome) < postfix_length then\n\
    \      palindrome = palindrome .. reversed_postfix\n    end\n    postfix = string.sub(postfix,\
    \ 1, string.len(postfix))\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypxoz4vk.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpypxoz4vk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix = string\n        local reverse = ''\n        for i = #postfix,\
    \ 1, -1 do\n            reverse = reverse .. postfix:sub(i, i)\n        end\n\
    \        if reverse == postfix then\n            palindrome = palindrome .. reverse\n\
    \            break\n        end\n        postfix = postfix .. reverse\n    end\n\
    \    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  while palindrome_length > 1 do\n    local palindrome_prefix_length = palindrome_prefix_length\
    \ - 1\n    local palindrome_prefix_postfix = palindrome_prefix_postfix + palindrome_postfix:sub(palindrome_prefix_length\
    \ + 1, palindrome_prefix_length)\n    local palindrome_postfix = palindrome_postfix\
    \ + palindrome_postfix:sub(1, palindrome_length)\n    local palindrome = palindrome\
    \ .. palindrome_prefix_postfix .. palindrome_postfix:sub(palindrome_prefix_length\
    \ + 1, #palindrome_postfix)\n    palindrome_length = palindrome_length - 1\n \
    \ end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnro4ov5.lua:19:\
    \ attempt to perform arithmetic on local 'palindrome_prefix_postfix' (a string\
    \ value)\nstack traceback:\n\t/tmp/tmptnro4ov5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest_postfix = 1\n  local longest_postfix_index\
    \ = 1\n  while longest_postfix_index <= #string do\n    local postfix = string\n\
    \    postfix = string.sub(postfix, 1, longest_postfix_index)\n    postfix = string.sub(postfix,\
    \ longest_postfix_index + 1, #postfix)\n    postfix = string.gsub(postfix, '(.)\\\
    \\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix\
    \ = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n  \
    \  postfix = string.gsub(postfix, '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix,\
    \ '(.)\\\\1', '%1')\n    postfix = string.gsub(postfix, '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz_gob348.lua:48: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix_length = 0\n  while\
    \ true do\n    local postfix_length = #postfix\n    if postfix_length == 0 then\n\
    \      break\n    end\n    local reversed_postfix_length = #reversed_postfix\n\
    \    if reversed_postfix_length == 0 then\n      break\n    end\n    local longest_postfix_length\
    \ = math.max(longest_postfix_length, postfix_length, reversed_postfix_length)\n\
    \    postfix = string.sub(postfix, 1, postfix_length - 1)\n    reversed_postfix\
    \ = string.sub(reversed_postfix, 1, reversed_postfix_length - 1)\n  end\n  local\
    \ palindrome = string.sub(postfix, 1, longest_postfix_length)\n  local reversed_palindrome\
    \ = string.sub(reversed_postfix, 1, longest_postfix_length)\n  return reversed_palindrome\
    \ .. palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp356sogst.lua:37:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp356sogst.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = ''\n  local suffix = ''\n  local longest = 0\n  while true\
    \ do\n    longest = longest + 1\n    suffix = string\n    for i = 1, longest do\n\
    \      suffix = suffix .. string[#string - i]\n    end\n    if suffix == suffix\
    \ then\n      palindrome = palindrome .. suffix\n      break\n    end\n  end\n\
    \  local reverse = string\n  for i = 1, longest do\n    reverse = reverse .. string[#string\
    \ - i]\n  end\n  return palindrome .. reverse\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz__alw4j.lua:20:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpz__alw4j.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    local longest_postfix_length\
    \ = 0\n    while true do\n        local postfix = string\n        postfix = string.sub(postfix,\
    \ 1, prefix_length)\n        postfix = string.reverse(postfix)\n        postfix\
    \ = string.sub(postfix, 1, longest_postfix_length)\n        longest_postfix_length\
    \ = math.max(longest_postfix_length, #postfix)\n        local palindrome_suffix\
    \ = string\n        palindrome_suffix = string.sub(palindrome_suffix, 1, longest_postfix_length)\n\
    \        palindrome_suffix = string.reverse(palindrome_suffix)\n        palindrome_suffix\
    \ = string.sub(palindrome_suffix, 1, #string)\n        palindrome = palindrome\
    \ .. palindrome_suffix .. postfix\n        if palindrome == string then\n    \
    \        break\n        end\n        prefix_length = prefix_length + 1\n    end\n\
    \    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04u86_5d.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp04u86_5d.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while #postfix > 0 do\n\
    \        local index = #postfix - 1\n        reverse = reverse .. postfix:sub(1,\
    \ index)\n        postfix = postfix:sub((index + 1), #postfix)\n        if palindrome\
    \ ~= '' then\n            palindrome = palindrome .. reverse\n        end\n  \
    \  end\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = ''\n  \
    \  local suffixLength = 0\n    local longestPalindrome = ''\n    local longestPalindromeLength\
    \ = 0\n    local longestPalindromeSuffix = ''\n    local longestPalindromeSuffixLength\
    \ = 0\n    for i = 1, #string do\n        local char = string[i]\n        suffixLength\
    \ = suffixLength + #char\n        if suffixLength > longestPalindromeLength then\n\
    \            longestPalindromeLength = suffixLength\n            longestPalindromeSuffix\
    \ = suffix\n        end\n        if suffixLength == longestPalindromeLength then\n\
    \            suffix = suffix .. char\n        else\n            suffix = suffix\
    \ .. char\n            suffixLength = suffixLength + #char\n        end\n    end\n\
    \    longestPalindromeLength = longestPalindromeLength + #string\n    if longestPalindromeLength\
    \ > longestPalindromeSuffixLength then\n        longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n    end\n    longestPalindrome = string .. longestPalindromeSuffix\
    \ .. string\n    return longestPalindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_jir6_s.lua:20:\
    \ attempt to get length of local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpd_jir6_s.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
