name: HumanEval_49_modp
language: lua
results:
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprj3zt_fx.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmprj3zt_fx.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaox8mkxs.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpaox8mkxs.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16: in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16: in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16: in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16: in function 'modp'\\n\\t/tmp/tmpaox8mkxs.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.159 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + p end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd15jy0nt.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpd15jy0nt.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15: in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15: in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15: in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15: in function 'modp'\\n\\t/tmp/tmpd15jy0nt.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.160 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then return 1 end\n  return modp(n - nn * p, p)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqxbb6gcg.lua:21:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqxbb6gcg.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn2166cl2.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpn2166cl2.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp46ssabu4.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp46ssabu4.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t == 0 then\n    return 1\n  elseif t < p then\n    return modp(n -\
    \ t, p)\n  else\n    return modp((n - t) / p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpox1v0tkn.lua:26:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpox1v0tkn.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t ~= 0 then\n    return modp(t - 1, p) + p\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2sfe3hg4.lua:23:\
    \ expected: 3, actual: 15\\nstack traceback:\\n\\t/tmp/tmp2sfe3hg4.lua:23: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then\n    return 1\n  else\n    return modp(n - nn * p, p)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_5qnq1y.lua:24:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpn_5qnq1y.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then return nil end\n  if nn >= p then return n end\n  local r =\
    \ n % p\n  if r == 0 then return n end\n  local q = modp(n - r, p)\n  if q ==\
    \ nil then return nil end\n  return r + q\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr6sr9u3h.lua:27:\
    \ expected: 2, actual: 1101\\nstack traceback:\\n\\t/tmp/tmpr6sr9u3h.lua:27: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwkwe7n9z.lua:18:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpwkwe7n9z.lua:18: in function\
    \ 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18: in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18: in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18: in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18: in function 'modp'\\n\\t/tmp/tmpwkwe7n9z.lua:18:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.163 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  if p == n then return\
    \ p end\n  if p == -1 then return modp(n, -p) end\n  if p == 1 then return modp(n,\
    \ p + 1) end\n  local m = n % p\n  return modp(m, p) + modp(n, p)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwxehsez9.lua:19:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpwxehsez9.lua:19: in function\
    \ 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19: in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19: in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19: in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19: in function 'modp'\\n\\t/tmp/tmpwxehsez9.lua:19:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.186 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return 1 end\n  if p == n then return 1 end\n\
    \  if p == -1 then return 0 end\n  if p == -n then return 0 end\n  if p == -2\
    \ then return 1 end\n  if p == -3 then return 2 end\n  if p == -4 then return\
    \ 3 end\n  if p == -5 then return 4 end\n  if p == -6 then return 5 end\n  if\
    \ p == -7 then return 6 end\n  if p == -8 then return 7 end\n  if p == -9 then\
    \ return 8 end\n  if p == -10 then return 9 end\n  if p == -11 then return 10\
    \ end\n  if p == -12 then return 11 end\n  if p == -13 then return 12 end\n  if\
    \ p == -14 then return 13 end\n  if p == -15 then return 14 end\n  if p == -16\
    \ then return 15 end\n  if p == -17 then return 16 end\n  if p == -18 then return\
    \ 17 end\n  if p == -19 then return 18 end\n  if p == -20 then return 19 end\n\
    \  if p == -21 then return 20 end\n  if p == -22 then return 21 end\n  if p ==\
    \ -23 then return 22 end\n  if p == -24 then return 23 end\n  if p == -25 then\
    \ return 24 end\n  if p == -26 then return 25 end\n  if p == -27 then return 26\
    \ end\n  if p == -28 then return 27 end\n  if p == -29 then return 28 end\n  if\
    \ p == -30 then return 29 end\n  if p == -31 then return 30 end\n  if p == -32\
    \ then return 31 end\n  if p == -33 then return 32 end\n  if p == -34 then return\
    \ 33 end\n  if p == -35 then return 34 end\n  if p == -36 then return 35 end\n\
    \  if p == -37 then return 36 end\n  if p == -38 then return 37 end\n  if p ==\
    \ -39 then return 38 end\n  if p == -40 then return 39 end\n  if p == -41 then\
    \ return 40 end\n  if p == -42 then return 41 end\n  if p == -43 then return 42\
    \ end\n  if p == -44 then return 43 end\n  if p == -45 then return 44 end\n  if\
    \ p == -46 then return 45 end\n  if p == -47 then \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_0u7x0ft.lua:77: 'end' expected (to close 'if' at line\
    \ 63) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(math.floor(n/p), p)\n  elseif nn < 0 then\n\
    \    return modp(-math.floor(-n/p), p)\n  else\n    return p\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp85nnein.lua:26:\
    \ expected: 3, actual: 5\\nstack traceback:\\n\\t/tmp/tmpp85nnein.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local n = tonumber(nn)\n  local p = tonumber(pp)\n\
    \  if n == 0 then return 1 end\n  if p == 0 then return 0 end\n  if p == 1 or\
    \ p == -1 then return n end\n  local r = 1\n  while n ~= 0 do\n    r = r * p %\
    \ n\n    n = n / 2\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpublw9q9_.lua:31:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpublw9q9_.lua:31: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then\n    return 1\n  elseif nn > 1 then\n    return modp(nn, p)\
    \ * p + modp(n, n)\n  else\n    return nn\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprjiacj_t.lua:26:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmprjiacj_t.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\n\
    \    return 1\n  elseif n == 1 then\n    return p\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4r_5598g.lua:25:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4r_5598g.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local p = p or 1\n  local r = n % p\n  if r == 0 then\n    return nn\n  else\n\
    \    return modp(nn - 1, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpukub1hm3.lua:26:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpukub1hm3.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4qgz_1jw.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp4qgz_1jw.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22: in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22: in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22: in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22: in function 'modp'\\n\\t/tmp/tmp4qgz_1jw.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.153 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz6dp5lvt.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpz6dp5lvt.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0xjnvg0g.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp0xjnvg0g.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    return modp(n / p, p) + n % p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2k1gy3n0.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp2k1gy3n0.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20: in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20: in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20: in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20: in function 'modp'\\n\\t/tmp/tmp2k1gy3n0.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.158 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53fuln8_.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp53fuln8_.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    end\n    if p == 0 then\n    \
    \  return 0\n    end\n    if n < 0 then\n      n = -n\n      p = -p\n    end\n\
    \    local r = n % p\n    return f(r) + p\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkw28cvkv.lua:25:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpkw28cvkv.lua:25: in function\
    \ 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25: in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25:\
    \ in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25: in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25:\
    \ in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25: in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25:\
    \ in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25: in function 'f'\\n\\t/tmp/tmpkw28cvkv.lua:25:\
    \ in function 'f'\\n\\t...\\n\\nRan 1 tests in 0.150 seconds, 0 successes, 1 error\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(math.abs(nn), p)\n  end\n  if nn == 0 then\n\
    \    return 1\n  end\n  local dp = p - n\n  if dp < 0 then\n    return modp(nn,\
    \ p)\n  end\n  if dp == 0 then\n    return 0\n  end\n  local nn = nn + 1\n  local\
    \ dp = p - nn\n  if dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 then\n\
    \    return 1\n  end\n  local dp = p - nn\n  if dp < 0 then\n    return modp(nn,\
    \ p)\n  end\n  if dp == 0 then\n    return 0\n  end\n  local dp = p - nn\n  if\
    \ dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 then\n    return 1\n\
    \  end\n  local dp = p - nn\n  if dp < 0 then\n    return modp(nn, p)\n  end\n\
    \  if dp == 0 then\n    return 0\n  end\n  local dp = p - nn\n  if dp < 0 then\n\
    \    return modp(nn, p)\n  end\n  if dp == 0 then\n    return 1\n  end\n  local\
    \ dp = p - nn\n  if dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 then\n\
    \    return 0\n  end\n  local dp = p - nn\n  if dp < 0 then\n    return modp(nn,\
    \ p)\n  end\n  if dp == 0 then\n    return 1\n  end\n  local dp = p - nn\n  if\
    \ dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 then\n    return 0\n\
    \  end\n  local dp = p - nn\n  if dp < 0 then\n    return modp(nn, p)\n  end\n\
    \  if dp == 0 then\n    return 1\n  end\n  local dp = p - nn\n  if dp < 0 then\n\
    \    return modp(nn, p)\n  end\n  if dp == 0 then\n    return 0\n  end\n  local\
    \ dp = p - nn\n  if dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 then\n\
    \    return 1\n  end\n  local dp = p - nn\n  if dp < 0 then\n    return modp(nn,\
    \ p)\n  end\n  if dp == 0 then\n    return 0\n  end\n  local dp = p - nn\n  if\
    \ dp < 0 then\n    return modp(nn, p)\n  end\n  if dp == 0 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgffg9s7i.lua:117: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > p do\n    r = r * p % n\n    n = n / p\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqjeotkd3.lua:24:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqjeotkd3.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n, p - 1)\n  end\n  return\
    \ modp(n - p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local dp = p - n\n  if dp\
    \ < 0 then\n    return modp(-n, p)\n  end\n  if dp == 0 then\n    return 1\n \
    \ end\n  local r = 1\n  while nn > 0 do\n    r = r * 2 ^ nn\n    nn = math.floor(nn\
    \ / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe0yr11zh.lua:35:\
    \ expected: 3, actual: 16\\nstack traceback:\\n\\t/tmp/tmpe0yr11zh.lua:35: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    return n % p\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgdglxmmv.lua:28:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpgdglxmmv.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(math.ceil(n), p)\n  end\n  if nn == 0 then\n\
    \    return 1\n  end\n  local r = n % p\n  if r == 0 then\n    return 1\n  end\n\
    \  local q = modp(n - r, p)\n  if q == 1 then\n    return r\n  end\n  return q\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkti5u5fn.lua:35:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpkti5u5fn.lua:35: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < p then\n    return p\n\
    \  else\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n \
    \ local n5 = math.floor(n1 * n4)\n  local n6 = n1 - n5\n  local n7 = math.floor(n3\
    \ * n4)\n  local n8 = n3 - n7\n  return n8\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptbz91yju.lua:27:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmptbz91yju.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = math.floor(n/p)\n\
    \  if n2 ~= n then\n    return modp(n2, p)\n  else\n    return p * math.floor((n\
    \ - n2) / p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0xfblt3x.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0xfblt3x.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp43xb39an.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp43xb39an.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return 1 end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn7e5p6cf.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpn7e5p6cf.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16: in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16: in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16: in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16: in function 'modp'\\n\\t/tmp/tmpn7e5p6cf.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.148 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg7pj5cd0.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpg7pj5cd0.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local m = n % p\n  if m == 0 then\n    return modp(n / p,\
    \ p)\n  else\n    return modp(m, p) * p + modp(n / p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp27m2khcg.lua:24:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp27m2khcg.lua:24: in function\
    \ 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24: in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24: in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24: in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24: in function 'modp'\\n\\t/tmp/tmp27m2khcg.lua:24:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.172 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  if nn == 0 then\n    return\
    \ 1\n  end\n  local d = n - nn\n  local r = modp(d, p)\n  if r == 0 then\n   \
    \ return nn\n  end\n  if r > p then\n    return nn + p - 1\n  end\n  return nn\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppozhxosz.lua:35:\
    \ expected: 2, actual: 1101\\nstack traceback:\\n\\t/tmp/tmppozhxosz.lua:35: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpegazm5ys.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpegazm5ys.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22: in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22: in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22: in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22: in function 'modp'\\n\\t/tmp/tmpegazm5ys.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.146 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  if p < n then return modp(n - p, p) end\n  return modp(n, p / 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuu1ivq3.lua:23:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwuu1ivq3.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + p\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7jt7paq.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpc7jt7paq.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16: in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16: in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16: in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16: in function 'modp'\\n\\t/tmp/tmpc7jt7paq.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.147 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpimunz_sh.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpimunz_sh.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8fo7sccx.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp8fo7sccx.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22: in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22: in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22: in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22: in function 'modp'\\n\\t/tmp/tmp8fo7sccx.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.148 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  if pp ~= pp then return nil end\n  if pp > 0 then\n\
    \    pp = pp + 1\n  else\n    pp = pp - 1\n  end\n  local nn = tostring(pp)\n\
    \  local nn = nn:sub(1, nn:len())\n  local nn = tonumber(nn)\n  if nn ~= nil then\n\
    \    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local\
    \ nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn =\
    \ nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn +\
    \ nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n\
    \    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local\
    \ nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn =\
    \ nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn *\
    \ pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n\
    \    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local\
    \ nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn =\
    \ nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn +\
    \ nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n\
    \    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local\
    \ nn = nn * pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn =\
    \ nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n    local nn = nn *\
    \ pp\n    local nn = nn + nn\n    local nn = nn * pp\n    local nn = nn + nn\n\
    \    local nn = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_u95ebo_.lua:78: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  if nn > p then\n    return modp(nn, p)\n  elseif\
    \ nn == p then\n    return nn\n  else\n    return modp(n - nn + 1, p)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n - p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < 0 then\n    return modp(-t,\
    \ p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplujan16h.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmplujan16h.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmplujan16h.lua:20: in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20: in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20: in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20: in function 'modp'\\n\\t/tmp/tmplujan16h.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  if p == -1 and n ==\
    \ 0 then return 0 end\n  if p == 0 and n == 1 then return 1 end\n  if p == 1 and\
    \ n == 0 then return 0 end\n  if p == -1 and n == -1 then return 1 end\n  if p\
    \ == 1 and n == -1 then return 0 end\n  if p == 0 and n == -1 then return -1 end\n\
    \  if p == 1 and n == 1 then return -1 end\n  if p == -1 and n == 0 then return\
    \ -1 end\n  if p == 0 and n == 1 then return -1 end\n  if p == 1 and n == -1 then\
    \ return -1 end\n  if p == 0 and n == -1 then return 1 end\n  if p == 1 and n\
    \ == 1 then return 1 end\n  if p == -1 and n == -1 then return -1 end\n  if p\
    \ == 1 and n == 0 then return -1 end\n  if p == 0 and n == 1 then return 1 end\n\
    \  if p == 1 and n == -1 then return 1 end\n  if p == 0 and n == -1 then return\
    \ 0 end\n  if p == 1 and n == 1 then return 0 end\n  if p == -1 and n == 0 then\
    \ return 0 end\n  if p == 0 and n == 1 then return 0 end\n  if p == 1 and n ==\
    \ -1 then return 0 end\n  if p == 0 and n == -1 then return -1 end\n  if p ==\
    \ 1 and n == 1 then return -1 end\n  if p == -1 and n == -1 then return -1 end\n\
    \  if p == 1 and n == 0 then return -1 end\n  if p == 0 and n == 1 then return\
    \ 1 end\n  if p == 1 and n == -1 then return 1 end\n  if p == 0 and n == -1 then\
    \ return 0 end\n  if p == 1 and n == 1 then return 0 end\n  if p == -1 and n ==\
    \ -1 then return 0 end\n  if p == 1 and n == 0 then return 0 end\n  if p == 0\
    \ and n == 1 then return 0 end\n  if p == 1 and n == -1 then return 0 end\n  if\
    \ p == 0 and n == -1 then return -1 end\n  if p == 1 and n == 1 then return -1\
    \ end\n  if p == -1 and n == -1 then return -1 end\n  if p == 1 and n == 0 then\
    \ return -1 end\n  if p == 0 and n == 1 then return 1 end\n  if p == 1 and n ==\
    \ -1 then return 1 end\n  if p == 0 and n == -1 then return 0 end\n  if p == 1\
    \ and n == 1 then return 0 end\n  if p == -1 and n == -1 then return 0 end\n \
    \ if p == 1 and n == 0 then return 0 end\n  if p == 0 and n == 1 then return 0\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpp9xf9go8.lua:59: 'end' expected (to close 'if' at line\
    \ 58) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  local t = 1\n  local r = 1\n  while t <= n\
    \ do\n    r = r * p % t\n    t = t + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdvj8mrb6.lua:36:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdvj8mrb6.lua:36: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return 1 end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then\n    return q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpswl43hz9.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpswl43hz9.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15: in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15: in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15: in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15: in function 'modp'\\n\\t/tmp/tmpswl43hz9.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphr8asecj.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmphr8asecj.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvk4tuwly.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpvk4tuwly.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22: in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22: in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22: in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22: in function 'modp'\\n\\t/tmp/tmpvk4tuwly.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.153 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp((n + p), p)\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpamszb3ac.lua:25:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpamszb3ac.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n - p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53w27een.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp53w27een.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmp53w27een.lua:22: in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22: in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22: in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22: in function 'modp'\\n\\t/tmp/tmp53w27een.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t + p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjizdpsch.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpjizdpsch.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20: in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20: in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20: in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20: in function 'modp'\\n\\t/tmp/tmpjizdpsch.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.154 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpocqr7y3_.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpocqr7y3_.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p < 0 then\n\
    \    p, n = n, p\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n  \
    \  return q * p + q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8xxlz14.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp_8xxlz14.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22: in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22: in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22: in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22: in function 'modp'\\n\\t/tmp/tmp_8xxlz14.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.153 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5ogvk8x.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpk5ogvk8x.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= n do\n    local r = n % p\n    if r == 0 then\n      return t\n\
    \    end\n    t = t + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7o_sea6n.lua:27:\
    \ expected: 3, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7o_sea6n.lua:27: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return r\n  else\n    return r + p - r\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfry9_zut.lua:24:\
    \ expected: 3, actual: 5\\nstack traceback:\\n\\t/tmp/tmpfry9_zut.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldl2v6tn.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpldl2v6tn.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- The algorithm\
    \ is based on \"Extended Euclidean algorithm\" by Melissa E. O'Neill\n  -- See\
    \ http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  -- The algorithm\
    \ is guaranteed to terminate if n is 0 and p is 1.\n  -- The algorithm is guaranteed\
    \ to terminate if n is 0 and p is 0.\n  -- The algorithm is guaranteed to terminate\
    \ if n is negative and p is 0.\n  -- The algorithm is guaranteed to terminate\
    \ if n is negative and p is 1.\n  -- The algorithm is guaranteed to terminate\
    \ if n is positive and p is 0.\n  -- The algorithm is guaranteed to terminate\
    \ if n is positive and p is 1.\n  -- The algorithm is guaranteed to terminate\
    \ if n is odd and p is 0.\n  -- The algorithm is guaranteed to terminate if n\
    \ is odd and p is 1.\n  -- The algorithm is guaranteed to terminate if n is even\
    \ and p is 0.\n  -- The algorithm is guaranteed to terminate if n is even and\
    \ p is 1.\n  -- The algorithm is guaranteed to terminate if n is negative and\
    \ p is odd.\n  -- The algorithm is guaranteed to terminate if n is negative and\
    \ p is even.\n  -- The algorithm is guaranteed to terminate if n is positive and\
    \ p is odd.\n  -- The algorithm is guaranteed to terminate if n is positive and\
    \ p is even.\n  -- The algorithm is guaranteed to terminate if n is odd and p\
    \ is odd.\n  -- The algorithm is guaranteed to terminate if n is odd and p is\
    \ even.\n  -- The algorithm is guaranteed to terminate if n is even and p is odd.\n\
    \  -- The algorithm is guaranteed to terminate if n is even and p is even.\n \
    \ -- The algorithm is guaranteed to terminate if n is negative and p is negative.\n\
    \  -- The algorithm is guaranteed to terminate if n is negative and p is positive.\n\
    \  -- The algorithm is guaranteed to terminate if n is positive and p is negative.\n\
    \  -- The algorithm is guaranteed to terminate if n is positive and p is positive.\n\
    \  -- The algorithm is guaranteed to terminate if n is odd and p is negative.\n\
    \  -- The algorithm is guaranteed to terminate if n is odd and p is positive.\n\
    \  -- The algorithm is guaranteed to terminate if n is even and p is negative.\n\
    \  -- The algorithm is guaranteed to terminate if \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpxlqme1vh.lua:54: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3jc_62ka.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3jc_62ka.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8qy4gmyi.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp8qy4gmyi.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15: in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15: in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15: in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15: in function 'modp'\\n\\t/tmp/tmp8qy4gmyi.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.153 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbyrihyvb.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpbyrihyvb.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then return 1 end\n  if nn > 1 then return modp(nn, p) end\n  return\
    \ n % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwil_y788.lua:22:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwil_y788.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  if nn < 0 then\n    nn = 0\n  elseif nn > p then\n\
    \    nn = p\n  end\n  return math.floor(nn / p)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp50ertp_4.lua:26:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmp50ertp_4.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = math.floor(n/p)\n\
    \  if n2 ~= n then return modp(n2, p) end\n  return n2 % p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9i9dmeoi.lua:21:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9i9dmeoi.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpib551ayo.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpib551ayo.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpib551ayo.lua:16: in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16: in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16: in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16: in function 'modp'\\n\\t/tmp/tmpib551ayo.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  if p == 5 then return n end\n  if p == 11 then return n end\n  if p\
    \ == 16 then return n end\n  if p == 100 then return n end\n  if p == 1000 or\
    \ p == 10000 then return n end\n  if p == 1000000 then return n end\n  if p ==\
    \ 1000000000 then return n end\n  if p == 1000000000000 then return n end\n  if\
    \ p == 1000000000000000 then return n end\n  if p == 1000000000000000000 then\
    \ return n end\n  assert(false)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmww247e4.lua:26:\
    \ assertion failed!\\nstack traceback:\\n\\t/tmp/tmpmww247e4.lua:26: in function\
    \ 'candidate'\\n\\t/tmp/tmpmww247e4.lua:33: in function 'test_humaneval'\\n\\\
    nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * q * q\n  else\n\
    \    return q * q\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp23hr8ays.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp23hr8ays.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16: in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16: in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16: in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16: in function 'modp'\\n\\t/tmp/tmp23hr8ays.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.158 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t ~= 0 then\n    return modp(t, p)\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + p\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1wnl3zk.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpw1wnl3zk.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16: in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16: in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16: in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16: in function 'modp'\\n\\t/tmp/tmpw1wnl3zk.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.153 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local m = n % p\n  if m == 0 then\n    return modp(n / p,\
    \ p)\n  else\n    return modp(m, p) * p + modp(n-m, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjv0z5wtk.lua:24:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpjv0z5wtk.lua:24: in function\
    \ 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24: in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24: in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24: in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24: in function 'modp'\\n\\t/tmp/tmpjv0z5wtk.lua:24:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.177 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7pqzdfcf.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp7pqzdfcf.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p > n then\n    return modp(n - p, p)\n  end\n  if\
    \ p < n then\n    return modp(n, p - n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8lpnd_uo.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp8lpnd_uo.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsbjdyaav.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpsbjdyaav.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15: in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15: in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15: in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15: in function 'modp'\\n\\t/tmp/tmpsbjdyaav.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.150 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  local m = math.pow(2, n)\n  -- Return m modulo\
    \ p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  return m % p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi82utsnj.lua:43:\
    \ expected: 2, actual: #NaN\\nstack traceback:\\n\\t/tmp/tmpi82utsnj.lua:43: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpka4cxlam.lua:84: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpytriy1hd.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpytriy1hd.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return 0\n  elseif nn >= p then\n    return 1\n  else\n\
    \    return modp(math.floor((n - nn) / p), p) * p + nn\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy028o1np.lua:13:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpy028o1np.lua:19: in function\
    \ 'modp'\\n\\t/tmp/tmpy028o1np.lua:19: in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19: in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19: in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19: in function 'modp'\\n\\t/tmp/tmpy028o1np.lua:19:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.180 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1hmds3jq.lua:18:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp1hmds3jq.lua:18: in function\
    \ 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18: in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18: in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18: in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18: in function 'modp'\\n\\t/tmp/tmp1hmds3jq.lua:18:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 or p == 2 or p == 3 then\n    return n % p\n\
    \  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q\n  else\n\
    \    return q + p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2uhaa5vl.lua:19:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp2uhaa5vl.lua:19: in function\
    \ 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19: in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19: in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19: in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19:\
    \ in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19: in function 'modp'\\n\\t/tmp/tmp2uhaa5vl.lua:19:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy1ms2dyc.lua:14:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpy1ms2dyc.lua:14: in function\
    \ 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14: in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14:\
    \ in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14: in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14:\
    \ in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14: in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14:\
    \ in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14: in function 'modp'\\n\\t/tmp/tmpy1ms2dyc.lua:14:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.154 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyym2t4nk.lua:18:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpyym2t4nk.lua:18: in function\
    \ 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18: in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18: in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18: in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18: in function 'modp'\\n\\t/tmp/tmpyym2t4nk.lua:18:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqjdy89n3.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpqjdy89n3.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  local m = math.floor(n)\n  if m == n then\n\
    \    return 1\n  elseif m > n then\n    return modp(m - 1, p) * p + modp(n, p)\n\
    \  else\n    return modp(n, p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpymc4di6r.lua:37:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpymc4di6r.lua:37: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpydfhb6_v.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpydfhb6_v.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16: in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16: in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16: in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16: in function 'modp'\\n\\t/tmp/tmpydfhb6_v.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p > n then return modp(n - p, p) end\n  return modp(n - p, p) + p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t * p + n\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptzrm74ux.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmptzrm74ux.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20: in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20: in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20: in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20: in function 'modp'\\n\\t/tmp/tmptzrm74ux.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpar_3dovd.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpar_3dovd.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  if p == 5 then return n end\n  if p == 9 then return n end\n  if p\
    \ == 16 then return n end\n  if p == 25 then return n end\n  if p == 36 then return\
    \ n end\n  if p == 49 then return n end\n  if p == 64 then return n end\n  if\
    \ p == 79 then return n end\n  if p == 128 then return n end\n  if p == 163 then\
    \ return n end\n  if p == 256 then return n end\n  if p == 512 then return n end\n\
    \  if p == 1024 then return n end\n  if p == 2048 then return n end\n  if p ==\
    \ 4096 then return n end\n  if p == 8192 then return n end\n  if p == 16384 then\
    \ return n end\n  if p == 32768 then return n end\n  if p == 65536 then return\
    \ n end\n  if p == 131072 then return n end\n  if p == 262144 then return n end\n\
    \  if p == 524288 then return n end\n  if p == 1048576 then return n end\n  if\
    \ p == 2097152 then return n end\n  if p == 4194304 then return n end\n  if p\
    \ == 8388608 then return n end\n  if p == 16777216 then return n end\n  if p ==\
    \ 33554432 then return n end\n  if p == 67108864 then return n end\n  if p ==\
    \ 134217728 then return n end\n  if p == 268435456 then return n end\n  if p ==\
    \ 536870912 then return n end\n  if p == 1073741824 then return n end\n  if p\
    \ == -2147483648 then return n end\n  if p == -2147483649 then return n end\n\
    \  if p == -2147483650 then return n end\n  if p == -2147483651 then return n\
    \ end\n  if p == -2147483652 then return n end\n  if p == -2147483653 then return\
    \ n end\n  if p == -2147483654 then return n end\n  if p == -2147483655 then return\
    \ n end\n  if p == -2147483656 then return n end\n  if p == -2147483657 then return\
    \ n end\n  if p == -2147483658 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpi950eors.lua:60: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuscm3_l1.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpuscm3_l1.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16: in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16: in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16: in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16: in function 'modp'\\n\\t/tmp/tmpuscm3_l1.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.149 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n    return 1\n  elseif p ==\
    \ 0 then\n    return 0\n  elseif p == 1 then\n    return n\n  elseif p == 2 then\n\
    \    return n / 2\n  elseif p == 3 then\n    return n / 4\n  elseif p == 4 then\n\
    \    return n / 8\n  elseif p == 5 then\n    return n / 16\n  elseif p == 6 then\n\
    \    return n / 32\n  elseif p == 7 then\n    return n / 64\n  elseif p == 8 then\n\
    \    return n / 128\n  elseif p == 9 then\n    return n / 256\n  elseif p == 10\
    \ then\n    return n / 512\n  elseif p == 11 then\n    return n / 1024\n  elseif\
    \ p == 12 then\n    return n / 2048\n  elseif p == 13 then\n    return n / 4096\n\
    \  elseif p == 14 then\n    return n / 8192\n  elseif p == 15 then\n    return\
    \ n / 16384\n  elseif p == 16 then\n    return n / 32768\n  elseif p == 17 then\n\
    \    return n / 65536\n  elseif p == 18 then\n    return n / 131072\n  elseif\
    \ p == 19 then\n    return n / 262144\n  elseif p == 20 then\n    return n / 524288\n\
    \  elseif p == 21 then\n    return n / 1048576\n  elseif p == 22 then\n    return\
    \ n / 2097152\n  elseif p == 23 then\n    return n / 4194304\n  elseif p == 24\
    \ then\n    return n / 8388608\n  elseif p == 25 then\n    return n / 16777216\n\
    \  elseif p == 26 then\n    return n / 33554432\n  elseif p == 27 then\n    return\
    \ n / 67108864\n  elseif p == 28 then\n    return n / 134217728\n  elseif p ==\
    \ 29 then\n    return n / 268435456\n  elseif p == 30 then\n    return n / 536870912\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp01eyc5rm.lua:89: 'end' expected (to close 'if' at line\
    \ 24) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo5n84ghu.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpo5n84ghu.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:len() -- nn is string\n  local pp =\
    \ pp:len() -- pp is string\n  local nn = nn:sub(1, nn-1) -- nn is number\n  local\
    \ pp = pp:sub(1, pp-1) -- pp is number\n  local nn = nn:gsub(\"^0*\", \"\") --\
    \ nn is string\n  local pp = pp:gsub(\"^0*\", \"\") -- pp is string\n  local nn\
    \ = nn:gsub(\"^0*$\", \"\") -- nn is string\n  local pp = pp:gsub(\"^0*$\", \"\
    \") -- pp is string\n  local nn = nn:gsub(\"^0*\", \"\") -- nn is string\n  local\
    \ pp = pp:gsub(\"^0*\", \"\") -- pp is string\n  local nn = nn:gsub(\"^0*$\",\
    \ \"\") -- nn is string\n  local pp = pp:gsub(\"^0*$\", \"\") -- pp is string\n\
    \  local nn = nn:gsub(\"^0*\", \"\") -- nn is string\n  local pp = pp:gsub(\"\
    ^0*\", \"\") -- pp is string\n  local nn = nn:gsub(\"^0*$\", \"\") -- nn is string\n\
    \  local pp = pp:gsub(\"^0*$\", \"\") -- pp is string\n  local nn = nn:gsub(\"\
    ^0*\", \"\") -- nn is string\n  local pp = pp:gsub(\"^0*\", \"\") -- pp is string\n\
    \  local nn = nn:gsub(\"^0*$\", \"\") -- nn is string\n  local pp = pp:gsub(\"\
    ^0*$\", \"\") -- pp is string\n  local nn = nn:gsub(\"^0*\", \"\") -- nn is string\n\
    \  local pp = pp:gsub(\"^0*\", \"\") -- pp is string\n  local nn = nn:gsub(\"\
    ^0*$\", \"\") -- nn is string\n  local pp = pp:gsub(\"^0*$\", \"\") -- pp is string\n\
    \  local nn = nn:gsub(\"^0*\", \"\") -- nn is string\n  local pp = pp:gsub(\"\
    ^0*\", \"\") -- pp is string\n  local nn = nn:gsub(\"^0*$\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b'lua: /tmp/tmp0komyo5t.lua:41: unfinished string near \\'\"^0*$\\'\\n'"
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  if pp > 0 then\n    pp = math.pow(10, pp)\n  else\n\
    \    pp = math.pow(10, -pp)\n  end\n  local nn = math.floor(nn / pp)\n  local\
    \ r = nn % p\n  if r == 0 then\n    return 1\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hampahr.lua:15:\
    \ attempt to compare number with string\\nstack traceback:\\n\\t/tmp/tmp9hampahr.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  -- >>> modp(101, 101)\n  -- 0\n  -- >>> modp(101,\
    \ 0)\n  -- 1\n  -- >>> modp(101, -1)\n  -- 0\n  -- >>> modp(101, -2)\n  -- 1\n\
    \  -- >>> modp(101, -3)\n  -- 2\n  -- >>> modp(101, -4)\n  -- 3\n  -- >>> modp(101,\
    \ -5)\n  -- 4\n  -- >>> modp(101, -6)\n  -- 5\n  -- >>> modp(101, -7)\n  -- 6\n\
    \  -- >>> modp(101, -8)\n  -- 7\n  -- >>> modp(101, -9)\n  -- 8\n  -- >>> modp(101,\
    \ -10)\n  -- 9\n  -- >>> modp(101, -11)\n  -- 10\n  -- >>> modp(101, -12)\n  --\
    \ 11\n  -- >>> modp(101, -13)\n  -- 12\n  -- >>> modp(101, -14)\n  -- 13\n  --\
    \ >>> modp(101, -15)\n  -- 14\n  -- >>> modp(101, -16)\n  -- 15\n  -- >>> modp(101,\
    \ -17)\n  -- 16\n  -- >>> modp(101, -18)\n  -- 17\n  -- >>> modp(101, -19)\n \
    \ -- 18\n  -- >>> modp(101, -20)\n  -- 19\n  -- >>> modp(101, -21)\n  -- 20\n\
    \  -- >>> modp(101, -22)\n  -- 21\n  -- >>> modp(101, -23)\n  -- 22\n  -- >>>\
    \ modp(101, -24)\n  -- 23\n  -- >>> modp(101, -25)\n  -- 24\n  -- >>> modp(101,\
    \ -26)\n  -- 25\n  -- >>> modp(101, -27)\n  -- 26\n  -- >>> modp(101, -28)\n \
    \ -- 27\n  -- >>> modp(101, -29)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7cckuj18.lua:99: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqale1hf5.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpqale1hf5.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return 1\n  else\n    return r + modp(r, p) * p\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9rn8nu1v.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp9rn8nu1v.lua:17: in function\
    \ 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17: in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17: in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17: in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17: in function 'modp'\\n\\t/tmp/tmp9rn8nu1v.lua:17:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.176 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return n end\n\
    \  if p > n then return modp(n - p, p) end\n  if p < 1 then return modp(n, p -\
    \ 1) end\n  local r = 1\n  while n >= p do\n    r = r * p % n\n    n = n / p\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmmsfy0tx.lua:23:\
    \ expected: 3, actual: 15\\nstack traceback:\\n\\t/tmp/tmpmmsfy0tx.lua:23: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    else\n      return n % p\n   \
    \ end\n  end\n  return math.floor(f(n))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfp5qnrof.lua:27:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpfp5qnrof.lua:27: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmparqzp6w3.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmparqzp6w3.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22: in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22: in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22: in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22: in function 'modp'\\n\\t/tmp/tmparqzp6w3.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.150 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    nn = 0\n  elseif nn > p then\n    nn = p\n  end\n  return\
    \ nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe92bqwro.lua:26:\
    \ expected: 2, actual: 101\\nstack traceback:\\n\\t/tmp/tmpe92bqwro.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  local r = n % p\n  if r == 0 then\n    return r\n  end\n\
    \  return modp(r, p) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprtlc2v50.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmprtlc2v50.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20: in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20: in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20: in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20: in function 'modp'\\n\\t/tmp/tmprtlc2v50.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.178 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkxdhqkes.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpkxdhqkes.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15: in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15: in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15: in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15: in function 'modp'\\n\\t/tmp/tmpkxdhqkes.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.150 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  if p == 5 then return n end\n  if p == 9 then return n end\n  if p\
    \ == 16 then return n end\n  if p == 25 then return n end\n  if p == 36 then return\
    \ n end\n  if p == 49 then return n end\n  if p == 64 then return n end\n  if\
    \ p == 79 then return n end\n  if p == 128 then return n end\n  if p == 191 then\
    \ return n end\n  if p == 256 then return n end\n  if p == 320 then return n end\n\
    \  if p == 409 then return n end\n  if p == 512 then return n end\n  if p == 655\
    \ then return n end\n  if p == 768 then return n end\n  if p == 1024 then return\
    \ n end\n  if p == 1280 then return n end\n  if p == 1536 then return n end\n\
    \  if p == 1792 then return n end\n  if p == 2048 then return n end\n  if p ==\
    \ 2416 then return n end\n  if p == 2832 then return n end\n  if p == 3264 then\
    \ return n end\n  if p == 3584 then return n end\n  if p == 4096 then return n\
    \ end\n  if p == 4960 then return n end\n  if p == 5760 then return n end\n  if\
    \ p == 6144 then return n end\n  if p == 6720 then return n end\n  if p == 7680\
    \ then return n end\n  if p == 10240 then return n end\n  if p == 12808 then return\
    \ n end\n  if p == 15360 then return n end\n  if p == 17920 then return n end\n\
    \  if p == 20480 then return n end\n  if p == 24160 then return n end\n  if p\
    \ == 28320 then return n end\n  if p == 32640 then return n end\n  if p == 35840\
    \ then return n end\n  if p == 40960 then return n end\n  if p == 49600 then return\
    \ n end\n  if p == 57600 then return n end\n  if p == 61504 then return n end\n\
    \  if p == 67200 then return n end\n  if p == 76800 then return n end\n  if p\
    \ == 102400 then return n end\n  if p == 128096 then return n end\n  if p == 153600\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4aqu3ii8.lua:65: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = 1\n  while q < n do\n    q = p * q + p\n  end\n\
    \  return q % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbcelxuh5.lua:30:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbcelxuh5.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- If n is negative,\
    \ return 1\n  if n < 0 then\n    return 1\n  end\n  -- If p is negative, return\
    \ 1\n  if p < 0 then\n    return 1\n  end\n  -- If p is zero, return 1\n  if p\
    \ == 0 then\n    return 1\n  end\n  -- If n is zero, return 1\n  if n == 0 then\n\
    \    return 1\n  end\n  -- If p is greater than p, return 1\n  if p > p then\n\
    \    return 1\n  end\n  -- If p is greater than n, return 1\n  if n > p then\n\
    \    return 1\n  end\n  -- If p is less than n, return 1\n  if n < p then\n  \
    \  return 1\n  end\n  -- If n is greater than p, return 1\n  if n > p then\n \
    \   return 1\n  end\n  -- If n is less than p, return 1\n  if n < p then\n   \
    \ return 1\n  end\n  -- If n is equal to p, return 1\n  if n == p then\n    return\
    \ 1\n  end\n  -- If n is less than or equal to p, return 1\n  if n < p then\n\
    \    return 1\n  end\n  -- If n is greater than or equal to p, return 1\n  if\
    \ n > p then\n    return 1\n  end\n  -- If n is equal to or greater than p, return\
    \ 1\n  if n == p then\n    return 1\n  end\n  -- If n is less than or equal to\
    \ or greater than p, return 1\n  if n < p then\n    return 1\n  end\n  -- If n\
    \ is greater than or equal to or greater than p, return 1\n  if n > p then\n \
    \   return 1\n  end\n  -- If n is equal to or less than or equal to p, return\
    \ 1\n  if n == p then\n    return 1\n  end\n  -- If n is greater than or equal\
    \ to or less than p, return 1\n  if n > p then\n    return 1\n  end\n  -- If n\
    \ is equal to or greater than or equal to p, return 1\n  if n == p then\n    return\
    \ 1\n  end\n  -- If n is less than or equal to or less than p, return 1\n  if\
    \ n < p then\n    return 1\n  end\n  -- If n is greater than or equal to or less\
    \ than p, return 1\n  if n > p then\n    return 1\n  end\n  -- If n is equal to\
    \ or less than or equal to p, return 1\n  if n == p then\n    return 1\n  end\n\
    \  -- If n is greater than or equal to or less than p, return 1\n  if n > p then\n\
    \    return 1\n  end\n  -- If n is equal to or greater than or equal to p, return\
    \ 1\n  if n == p then\n    return 1\n  end\n  -- If \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpadama1k4.lua:119: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  if p < 0 then return modp(-n, p) end\n  local t = modp(n / p, p)\n  if n %\
    \ p == 0 then return t end\n  return t + p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5m79i0i1.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp5m79i0i1.lua:17: in function\
    \ 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17: in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17: in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17: in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17: in function 'modp'\\n\\t/tmp/tmp5m79i0i1.lua:17:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n\
    \ = n / p\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3362h8cy.lua:31:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3362h8cy.lua:31: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p == p then return 1 end\n  if p > n then return modp(n - p, p) end\n  if\
    \ p < n then return modp(n, p - 1) end\n  return modp(n - p, p)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7byg3gr.lua:25:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz7byg3gr.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = 1\n  while q < n do\n    q = p * q + p\n  end\n\
    \  return q % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx_mhp94k.lua:30:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx_mhp94k.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= n do\n    local r = n % p\n    if r == 0 then\n      return t\n\
    \    end\n    t = t + 1\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfqqly4dm.lua:27:\
    \ expected: 3, actual: 5\\nstack traceback:\\n\\t/tmp/tmpfqqly4dm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == n then\n    return\
    \ 0\n  else\n    return modp(n - p, p)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe46f0i6g.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe46f0i6g.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local nn = nn + p\n  if nn\
    \ > p then\n    return modp(p - 1, p)\n  end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local r = n % p\n  if r == 0 then return p end\n  if r > 0 then\n\
    \    return modp(r, p) + p\n  else\n    return modp(r - p, p)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3jlcj__s.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp3jlcj__s.lua:17: in function\
    \ 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17: in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17: in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17: in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17: in function 'modp'\\n\\t/tmp/tmp3jlcj__s.lua:17:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.177 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xvz5gxu.lua:23:\
    \ expected: 3, actual: 15\\nstack traceback:\\n\\t/tmp/tmp1xvz5gxu.lua:23: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1lfhuo2.lua:22:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpj1lfhuo2.lua:22: in function\
    \ 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22: in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22: in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22: in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22:\
    \ in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22: in function 'modp'\\n\\t/tmp/tmpj1lfhuo2.lua:22:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.154 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8p66so2j.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp8p66so2j.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16: in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16: in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16: in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16: in function 'modp'\\n\\t/tmp/tmp8p66so2j.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local pp = math.floor(p)\n  if nn < pp then\n    return modp(nn, p)\n  else\n\
    \    return math.mod(nn-pp, p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t == 0 then\n    return 1\n  elseif t < p then\n    return modp(n -\
    \ t, p)\n  else\n    return modp((n - t) / p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9qbe2nvp.lua:26:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9qbe2nvp.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    nn = 0\n  elseif nn > p then\n    nn = p\n  end\n  return\
    \ nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp88gkc2lk.lua:26:\
    \ expected: 2, actual: 101\\nstack traceback:\\n\\t/tmp/tmp88gkc2lk.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7qq3p9vn.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp7qq3p9vn.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p < 0 then\n\
    \    local r = modp(n % p, p)\n    return r * 2 - 1\n  end\n  local r = n % p\n\
    \  if r == 0 then\n    return r\n  end\n  local t = modp(n / p, p)\n  return r\
    \ * 2 - 1 + t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt88e6eed.lua:34:\
    \ expected: 3, actual: -456.5\\nstack traceback:\\n\\t/tmp/tmpt88e6eed.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return\
    \ q * p + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu1jd42zh.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpu1jd42zh.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16: in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16: in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16: in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16: in function 'modp'\\n\\t/tmp/tmpu1jd42zh.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp70xgwza.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpp70xgwza.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    local r = n % p\n    if r == 0 then\n      return modp(n,\
    \ p - 1)\n    else\n      return modp(r, p) + p\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_cy0zcnv.lua:24:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp_cy0zcnv.lua:24: in function\
    \ 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24: in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24: in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24: in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24:\
    \ in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24: in function 'modp'\\n\\t/tmp/tmp_cy0zcnv.lua:24:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.177 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp82z1ctzj.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp82z1ctzj.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local r = 1\n  while n >= p do\n    r = r * p % n\n  \
    \  n = n / p\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf574zosr.lua:33:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf574zosr.lua:33: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return r\n  else\n    return r + p - 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4tglncyw.lua:24:\
    \ expected: 3, actual: 7\\nstack traceback:\\n\\t/tmp/tmp4tglncyw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  if p == 4 then return n end\n  if p == 5 then return n end\n  if p\
    \ == 6 then return n end\n  if p == 7 then return n end\n  if p == 8 then return\
    \ n end\n  if p == 9 then return n end\n  if p == 10 then return n end\n  if p\
    \ == 11 then return n end\n  if p == 12 then return n end\n  if p == 13 then return\
    \ n end\n  if p == 14 then return n end\n  if p == 15 then return n end\n  if\
    \ p == 16 then return n end\n  if p == 17 then return n end\n  if p == 18 then\
    \ return n end\n  if p == 19 then return n end\n  if p == 20 then return n end\n\
    \  if p == 21 then return n end\n  if p == 22 then return n end\n  if p == 23\
    \ then return n end\n  if p == 24 then return n end\n  if p == 25 then return\
    \ n end\n  if p == 26 then return n end\n  if p == 27 then return n end\n  if\
    \ p == 28 then return n end\n  if p == 29 then return n end\n  if p == 30 then\
    \ return n end\n  if p == 31 then return n end\n  if p == 32 then return n end\n\
    \  if p == 33 then return n end\n  if p == 34 then return n end\n  if p == 35\
    \ then return n end\n  if p == 36 then return n end\n  if p == 37 then return\
    \ n end\n  if p == 38 then return n end\n  if p == 39 then return n end\n  if\
    \ p == 40 then return n end\n  if p == 41 then return n end\n  if p == 42 then\
    \ return n end\n  if p == 43 then return n end\n  if p == 44 then return n end\n\
    \  if p == 45 then return n end\n  if p == 46 then return n end\n  if p == 47\
    \ then return n end\n  if p == 48 then return n end\n  if p == 49 then return\
    \ n end\n  if p == 50 then return n end\n  if p == 51 then return n end\n  if\
    \ p == 52 then return n end\n  if p == 53 then return n end\n  if p == 54 then\
    \ return n end\n  if p == 55 then return n end\n  if p == 56 then return n end\n\
    \  if p == \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpecgfhkog.lua:70: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    end\n    if n == 1 then\n    \
    \  return p\n    end\n    return f((n - 1) \xF7 p) + p\n  end\n  return f(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_skfiogm.lua:20: ')' expected near '\\xc3'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdrev89uz.lua:24:\
    \ expected: 3, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdrev89uz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then\n    return q * q\n  else\n    return q * q + p\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz0p4s8jd.lua:15:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpz0p4s8jd.lua:15: in function\
    \ 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15: in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15: in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15: in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15:\
    \ in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15: in function 'modp'\\n\\t/tmp/tmpz0p4s8jd.lua:15:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm7hamnup.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpm7hamnup.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvhzjb3tp.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpvhzjb3tp.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt86g_kp4.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpt86g_kp4.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0ahnp6k.lua:16:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmps0ahnp6k.lua:16: in function\
    \ 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16: in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16: in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16: in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16:\
    \ in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16: in function 'modp'\\n\\t/tmp/tmps0ahnp6k.lua:16:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.149 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p)\n  else\n    return n % p\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptcroh1y1.lua:25:\
    \ expected: 2, actual: 10\\nstack traceback:\\n\\t/tmp/tmptcroh1y1.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdg2oldk.lua:20:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpzdg2oldk.lua:20: in function\
    \ 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20: in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20: in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20: in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20:\
    \ in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20: in function 'modp'\\n\\t/tmp/tmpzdg2oldk.lua:20:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.150 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p)\n  else\n    return n % p\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvcsidwx0.lua:25:\
    \ expected: 2, actual: 10\\nstack traceback:\\n\\t/tmp/tmpvcsidwx0.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then return 1 end\n  if nn > 1 then return modp(nn, p) end\n  return\
    \ n % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpse0b05hl.lua:22:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmpse0b05hl.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local p = math.floor(p)\n  if nn == 0 then\n    return 1\n  elseif nn == p\
    \ then\n    return nn\n  else\n    return modp(n - nn * p, p)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local p = p or 1\n  if nn < p then\n    return modp(n - nn, p)\n  else\n  \
    \  return nn\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbuyxhv8e.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpbuyxhv8e.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then return n end\n  local p = p\n  local q = math.floor(p * math.pow(2,\
    \ nn))\n  if q == p then return q end\n  local r = math.floor((q - p) / math.pow(2,\
    \ nn))\n  if r == q then return r end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcpi4tpd_.lua:27:\
    \ expected: 2, actual: 1101\\nstack traceback:\\n\\t/tmp/tmpcpi4tpd_.lua:27: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7do8oqs.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmpj7do8oqs.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb6feacxo.lua:18:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpb6feacxo.lua:18: in function\
    \ 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18: in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18: in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18: in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18:\
    \ in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18: in function 'modp'\\n\\t/tmp/tmpb6feacxo.lua:18:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.149 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2p3ueje1.lua:26:\
    \ expected: 2, actual: 91\\nstack traceback:\\n\\t/tmp/tmp2p3ueje1.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp97xxcuzu.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp97xxcuzu.lua:17: in function\
    \ 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17: in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17: in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17: in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17:\
    \ in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17: in function 'modp'\\n\\t/tmp/tmp97xxcuzu.lua:17:\
    \ in function 'modp'\\n\\t...\\n\\nRan 1 tests in 0.173 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
