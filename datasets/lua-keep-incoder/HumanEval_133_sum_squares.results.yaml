name: HumanEval_133_sum_squares
language: lua
results:
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpompnhx8p.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpompnhx8p.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kwpvktu.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp4kwpvktu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbi4ds2x.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpvbi4ds2x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz61a9fsp.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpz61a9fsp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnaqvkbe.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpgnaqvkbe.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m8z6xxh.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp6m8z6xxh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27ur78i_.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp27ur78i_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jwc045o.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp8jwc045o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzh7f_dm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpvzh7f_dm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb7jgxba.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqb7jgxba.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplam9mixa.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmplam9mixa.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm5m_rdv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpgm5m_rdv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ite7x5x.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp2ite7x5x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + lst[i]*lst[i]\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb2hqksb.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqb2hqksb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow0ce3yc.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpow0ce3yc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7dl7c5t.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmph7dl7c5t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_svplv4b.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp_svplv4b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixem9fa5.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpixem9fa5.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruo9uppq.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpruo9uppq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2aask_j.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmpb2aask_j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz9ktc6j.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpiz9ktc6j.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1j6hrld.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpn1j6hrld.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi6vz23g.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpmi6vz23g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxasdtzqt.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpxasdtzqt.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v2z20u2.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp0v2z20u2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuez5hzwc.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpuez5hzwc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36r0jrb2.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp36r0jrb2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqkk5646.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmptqkk5646.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf61o3226.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpf61o3226.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rltqahf.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp3rltqahf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fa3h620.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp1fa3h620.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom990mgm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpom990mgm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rpqw__3.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp6rpqw__3.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2vo7jkm.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpz2vo7jkm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfhhlt7o.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpwfhhlt7o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rjg9g8o.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp5rjg9g8o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsf13r2f.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpwsf13r2f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1uxt1s4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpq1uxt1s4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu_qnyz2.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpnu_qnyz2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1r50zxx.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpm1r50zxx.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uvdcs4j.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp_uvdcs4j.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg3td4yk.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpkg3td4yk.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyp4_4v4.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpuyp4_4v4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqm31_ua.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpjqm31_ua.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevw8293k.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpevw8293k.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_rc7q1c.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl_rc7q1c.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2n0rvfh.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpa2n0rvfh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnn3a16a.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqnn3a16a.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb5apme5.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmphb5apme5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxn8n4xp.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpnxn8n4xp.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdd81cul.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmphdd81cul.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0x0qsq8.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpl0x0qsq8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqbkg0oc.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpkqbkg0oc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf6_yhg5.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpnf6_yhg5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70j47525.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp70j47525.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7p3th9j1.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp7p3th9j1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf56sg5hy.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpf56sg5hy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplunqxjjh.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmplunqxjjh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo98bmdg.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpzo98bmdg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u0cdmhw.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp_u0cdmhw.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7y6eiki.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpu7y6eiki.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplerm81m.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpplerm81m.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6wgitbe.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv6wgitbe.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfax39mct.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpfax39mct.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx4kyl7n.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpjx4kyl7n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfq8gd5q.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpqfq8gd5q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky49uox0.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpky49uox0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgg3vyz3.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpkgg3vyz3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8cmu_of.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpz8cmu_of.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_c50l5w.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp1_c50l5w.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4997zqb.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpt4997zqb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hea957q.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp7hea957q.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa0b_2nh.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqa0b_2nh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7_7_nph.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpc7_7_nph.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2c3irkb.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv2c3irkb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + lst[i]*lst[i]\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbhtb86k.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpbbhtb86k.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxlnjoli.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpdxlnjoli.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukwhzosa.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpukwhzosa.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_lunyr4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpq_lunyr4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4w4uug_.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpd4w4uug_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptu0952b.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpptu0952b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurmemwai.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpurmemwai.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yiso4a1.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp3yiso4a1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphw34lfop.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmphw34lfop.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bf729qw.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp2bf729qw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vki1ubz.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp9vki1ubz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2hjrjyo.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpp2hjrjyo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6k_pa86.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmph6k_pa86.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8dk5py6.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpw8dk5py6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcinbm2lf.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpcinbm2lf.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavgb2q_e.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpavgb2q_e.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe701gsi2.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpe701gsi2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb73kafvd.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpb73kafvd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1fvrop.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpbo1fvrop.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0_pgtny.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpa0_pgtny.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yult6xz.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp2yult6xz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun9kf3_a.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpun9kf3_a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsa_a3el.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgsa_a3el.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39aa95ks.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp39aa95ks.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpuvzfac.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmphpuvzfac.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuu7wkmz7.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpuu7wkmz7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1l8745rr.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp1l8745rr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rbso1pt.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp7rbso1pt.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1zu6o0s.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpj1zu6o0s.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm68k56_.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpnm68k56_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvdg0gws.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpjvdg0gws.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d1iazeg.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp_d1iazeg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0uf_ncu.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpz0uf_ncu.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cst3zs_.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp6cst3zs_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcqjcu1l.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpvcqjcu1l.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh44n4w6.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgh44n4w6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpancgh1w6.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpancgh1w6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5aquxz4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpe5aquxz4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_3qhdew.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpt_3qhdew.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtvemaww.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpqtvemaww.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgwlvvpu.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmplgwlvvpu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hnc4qxk.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp_hnc4qxk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobyhjgg_.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpobyhjgg_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0cvcowr.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmph0cvcowr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp_k01t4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpsp_k01t4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88qla5e.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpo88qla5e.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw38mgcn.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpmw38mgcn.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnx6_h9v.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpfnx6_h9v.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39954400.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp39954400.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0_b9s08.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpn0_b9s08.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlext31v.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpnlext31v.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppulopote.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmppulopote.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi854d1_z.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpi854d1_z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8jwwhjq.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpb8jwwhjq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrle_fs2.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpbrle_fs2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dnytpaz.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp0dnytpaz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i] * lst[i]\n\
    \    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bvl0pb3.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp_bvl0pb3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p3w_4f5.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp8p3w_4f5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx8f537h.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmpmx8f537h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc18r4d_2.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpc18r4d_2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcss9ig4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpbcss9ig4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o86ocav.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp7o86ocav.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt59s3nuu.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpt59s3nuu.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + lst[i]*lst[i]\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto7ufe9u.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpto7ufe9u.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlk4hhu9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpdlk4hhu9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf961pevm.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpf961pevm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj9lt7rh.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmptj9lt7rh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi6_gm_i.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpbi6_gm_i.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv38ipmhz.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv38ipmhz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply68k4np.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmply68k4np.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3kd0tyh.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmps3kd0tyh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp942zeiwq.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp942zeiwq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz1vb0ws.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpyz1vb0ws.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_yua6ow.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp9_yua6ow.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj0ozfzl.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpbj0ozfzl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4d4pdwf.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpt4d4pdwf.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdqsn_k6.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpmdqsn_k6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmmry9dl.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmprmmry9dl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u8t9zx1.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp1u8t9zx1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f877ssj.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp4f877ssj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmu9ds7mu.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpmu9ds7mu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet2jfu6x.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpet2jfu6x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6fjwoj.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmppf6fjwoj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqerdhcmj.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqerdhcmj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqd8ankq.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpgqd8ankq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybxzt6hs.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpybxzt6hs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_s0rzru.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp4_s0rzru.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquzmjv70.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpquzmjv70.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mxd1uuv.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp4mxd1uuv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpsvbl4y.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmprpsvbl4y.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xbhbsm1.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp6xbhbsm1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjro12_n.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpnjro12_n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmxsqdah.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpzmxsqdah.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6r9pmng.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpu6r9pmng.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirgomi7o.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpirgomi7o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4m43rwi.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp_4m43rwi.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c2hjco4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp9c2hjco4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdm_4unf.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmphdm_4unf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz17g58_4.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpz17g58_4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvzizj9r.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmptvzizj9r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku7h7877.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpku7h7877.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnscxisb.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmprnscxisb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdljg72q.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpzdljg72q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2imcm75.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpb2imcm75.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1__vnf86.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp1__vnf86.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw2ercdd.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpuw2ercdd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3xsmrf_.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpj3xsmrf_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6irp0kfm.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp6irp0kfm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zyf088j.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp3zyf088j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvpqdfe_.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpwvpqdfe_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppg6b97_r.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmppg6b97_r.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sg67exf.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp9sg67exf.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nb_8u9b.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp4nb_8u9b.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppggvs5vg.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmppggvs5vg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodzbrbd6.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpodzbrbd6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5zxim73.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpz5zxim73.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar439mnd.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpar439mnd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki0p48tu.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpki0p48tu.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg_zb8j0.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpwg_zb8j0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz47u7io.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmppz47u7io.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp3wjwxs.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpqp3wjwxs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbwjls5_.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpgbwjls5_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi90pz86f.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpi90pz86f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc60kfx1.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpxc60kfx1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tyg_vxv.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp7tyg_vxv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
