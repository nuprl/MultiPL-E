name: HumanEval_64_vowels_count
language: lua
results:
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5kday2y_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5kday2y_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqakawt14.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqakawt14.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwfwn_sg1.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwfwn_sg1.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqal4g5c3.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqal4g5c3.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83229n52.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp83229n52.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3k_d728.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_3k_d728.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoz_ccevy.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpoz_ccevy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2yrxu7a.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb2yrxu7a.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8do8vhcz.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8do8vhcz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7_xnaxy.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmps7_xnaxy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd84pna82.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpd84pna82.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplr00fwq8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmplr00fwq8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5fiqqic.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk5fiqqic.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  for i = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n            vowels_count\
    \ = vowels_count + 1\n        end\n    end\n    return vowels_count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc0jy57qu.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpc0jy57qu.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpms8iz2af.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpms8iz2af.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5f_740bh.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5f_740bh.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9h7ginh.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw9h7ginh.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm2tlk9f1.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpm2tlk9f1.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ra4r8pp.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1ra4r8pp.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zwo9eb7.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3zwo9eb7.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsyr12enm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsyr12enm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdpnu3wky.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdpnu3wky.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0qe29jo.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk0qe29jo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9aw1yniv.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9aw1yniv.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt6p75ycm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpt6p75ycm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr2cpck1e.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr2cpck1e.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3xjtf8yw.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3xjtf8yw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4br9oxhm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4br9oxhm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrk622ik.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmphrk622ik.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8dyb8cs6.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8dyb8cs6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3z23ghip.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3z23ghip.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = 0\n   \
    \ for i = 1, #s do\n        if vowels[s[i]] then\n            vowel_count = vowel_count\
    \ + 1\n        end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5e0u5kl.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi5e0u5kl.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcs88n_0x.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcs88n_0x.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9qrrwb_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpt9qrrwb_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkhr95n77.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkhr95n77.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzjush8h.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvzjush8h.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpebzf748_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpebzf748_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwyrku0h.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwwyrku0h.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm326eik8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpm326eik8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw_5tekp.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcw_5tekp.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90v08pbz.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp90v08pbz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpno7f4_v6.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpno7f4_v6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = 0\n   \
    \ for i = 1, #s do\n        if vowels[s[i]] then\n            vowel_count = vowel_count\
    \ + 1\n        end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy835yiro.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy835yiro.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ueqfmja.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_ueqfmja.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsq1j4_zf.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsq1j4_zf.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq4c8m2y9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq4c8m2y9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppj1cnpt5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmppj1cnpt5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph92oqep2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmph92oqep2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfj13abtw.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfj13abtw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6lo3st4p.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6lo3st4p.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppu6s2b3w.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmppu6s2b3w.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz6m8n4wz.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpz6m8n4wz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkg828f3f.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkg828f3f.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0gl0ragb.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0gl0ragb.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu8_ulpyd.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpu8_ulpyd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5gkn2z8z.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5gkn2z8z.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr9e_dzbv.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr9e_dzbv.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0nt2d4n.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi0nt2d4n.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_imftv5p.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_imftv5p.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp08xyt3zd.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp08xyt3zd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmdvqsw26.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmdvqsw26.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90ol47d6.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp90ol47d6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpicva5qy5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpicva5qy5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk9q6nnpo.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk9q6nnpo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzvgyc_fk.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzvgyc_fk.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeg2_wv3c.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpeg2_wv3c.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfqbxgkm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjfqbxgkm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiewb7_0m.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpiewb7_0m.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp62h1vvdu.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp62h1vvdu.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = 0\n   \
    \ for i = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n            vowel_count\
    \ = vowel_count + 1\n        end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9bcksxa.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw9bcksxa.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsm15kz2h.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsm15kz2h.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_ata41u.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmps_ata41u.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpunsx_end.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpunsx_end.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb01xda54.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb01xda54.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9nede6d.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpz9nede6d.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmc22848h.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmc22848h.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnymndjpf.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnymndjpf.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdlcf7brn.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdlcf7brn.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6c2zuxiw.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6c2zuxiw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpur25f5qb.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpur25f5qb.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg3zf26xu.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpg3zf26xu.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hhjduds.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9hhjduds.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy1yk4gt4.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy1yk4gt4.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchhlmcmq.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpchhlmcmq.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gqzibc9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2gqzibc9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0d4nmx4f.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0d4nmx4f.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2uzhcj8l.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2uzhcj8l.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnolq_zp7.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnolq_zp7.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkiu9_ax9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkiu9_ax9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpouw1l7kr.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpouw1l7kr.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7j2xs9t8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7j2xs9t8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7oemaar.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmph7oemaar.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvyvnk7g.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbvyvnk7g.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx1cmm8r2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx1cmm8r2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk9an4cpd.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk9an4cpd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpht9ndp7a.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpht9ndp7a.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpev5211in.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpev5211in.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2xr3ns0.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi2xr3ns0.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmdvl1w20.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmdvl1w20.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53py3lo2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp53py3lo2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl54jgm1z.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl54jgm1z.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb85lsbmi.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb85lsbmi.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69ekywvg.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp69ekywvg.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc62u0r1s.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpc62u0r1s.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxuo6y6z2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxuo6y6z2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6a8bgdub.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6a8bgdub.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ob053lo.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7ob053lo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxub0_ylp.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxub0_ylp.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwc8ligv.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwwc8ligv.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo6_gcmap.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpo6_gcmap.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphqdoki9k.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmphqdoki9k.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_17sx2ev.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_17sx2ev.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps8dansvo.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmps8dansvo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpij40lej5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpij40lej5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkmaqwu_b.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkmaqwu_b.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpod7p4xme.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpod7p4xme.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99ok036r.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp99ok036r.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprd29el4j.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmprd29el4j.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0nok9brf.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0nok9brf.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96hm90x2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp96hm90x2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4sma7w58.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4sma7w58.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprydt1j6y.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmprydt1j6y.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpll2avfx2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpll2avfx2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp50ywydbm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp50ywydbm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq49hfian.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq49hfian.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwspljvsq.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwspljvsq.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr96unspr.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr96unspr.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkg9ll1qy.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkg9ll1qy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqop5hkn5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqop5hkn5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbche3lf8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbche3lf8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8fg0nmc.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_8fg0nmc.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyjqteaee.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyjqteaee.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphv693lbq.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmphv693lbq.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhx4wdu5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjhx4wdu5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb_oqohze.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb_oqohze.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhtbhjkm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjhtbhjkm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_6ffshi8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_6ffshi8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoz0mb402.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpoz0mb402.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps896lskq.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmps896lskq.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7jatfvj.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw7jatfvj.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdi61uhnz.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdi61uhnz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fiv8foe.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5fiv8foe.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4nxk_c1.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpz4nxk_c1.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphf7weag.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpphf7weag.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        if vowels[s[i]] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp13t8w5u1.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp13t8w5u1.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnd9p5k9w.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnd9p5k9w.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7zen0p7.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr7zen0p7.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbzvz7a52.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbzvz7a52.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7vh5dmrk.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7vh5dmrk.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppynjqb94.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmppynjqb94.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiuf07q_5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpiuf07q_5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp61w77gke.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp61w77gke.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp876s0kpp.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp876s0kpp.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmtwcc5e.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmphmtwcc5e.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4dhgt4fd.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4dhgt4fd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4kwxrkx0.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4kwxrkx0.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppap93dd9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmppap93dd9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr647vhg8.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr647vhg8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp41i2c9ry.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp41i2c9ry.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdjx6csw0.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdjx6csw0.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fmzivx7.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9fmzivx7.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpckr66oug.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpckr66oug.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp05wgb7_s.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp05wgb7_s.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp690okuz2.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp690okuz2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7wly2q8z.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7wly2q8z.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_4z_5pn1.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_4z_5pn1.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcdtf88uk.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcdtf88uk.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwx93zdh5.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwx93zdh5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2u0wzvgj.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2u0wzvgj.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnl_hzjw4.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnl_hzjw4.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphs8ulucd.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmphs8ulucd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb10grc86.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb10grc86.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkja4rqr9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkja4rqr9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fet33zg.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_fet33zg.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7ckcqrs.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr7ckcqrs.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrfi_96b.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzrfi_96b.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzcg9jdy.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvzcg9jdy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfb6qvlk.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyfb6qvlk.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptibe0r90.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmptibe0r90.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36hn7pyo.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp36hn7pyo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp6vq6i8_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp6vq6i8_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3sue9oqk.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3sue9oqk.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpclt7wqao.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpclt7wqao.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzkf77db7.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzkf77db7.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4f6okg5q.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4f6okg5q.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu99_em8e.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpu99_em8e.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvwcnrcfa.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvwcnrcfa.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy_os2i6i.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy_os2i6i.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb0q7fie_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb0q7fie_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw6uquspb.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw6uquspb.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph5pt1t0r.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmph5pt1t0r.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = 0\n   \
    \ for i = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n            vowel_count\
    \ = vowel_count + 1\n        end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmzydcp1n.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmzydcp1n.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg46meuf_.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpg46meuf_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp39f9bx1u.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp39f9bx1u.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkkscdw6w.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkkscdw6w.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3s5i7e0.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_3s5i7e0.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp81s6zm9.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp81s6zm9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgt_uz802.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgt_uz802.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvtt05jxj.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvtt05jxj.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51uri0nm.lua:24:\
    \ expected: 2, actual: 0\\nstack traceback:\\n\\t/tmp/tmp51uri0nm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
