name: HumanEval_117_select_words
language: lua
results:
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(words,\
    \ string.sub(s,i+1,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6qsc7qeq.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary\"}\\nstack traceback:\\n\\t/tmp/tmp6qsc7qeq.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmoh2xv_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjmoh2xv_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrh62whi.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphrh62whi.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkwwr9ttc.lua:112: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ == \" \" then\n            table.insert(words, string.sub(s,1,i))\n        else\n\
    \            local consonants = string.sub(s,i,i) + string.sub(s,i+1,i+1)\n  \
    \          if string.find(consonants, \"bcdfghjklmnpqrstvwxyz\") then\n      \
    \          table.insert(words, string.sub(s,1,i))\n            end\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy2n_d36i.lua:18:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpy2n_d36i.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        if string.sub(s,\
    \ i, i+n) == string.sub(s, \"^\", i) then\n            table.insert(words, string.sub(s,\
    \ \"^\", i))\n        end\n        i = i + 1\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4azazntp.lua:16:\
    \ bad argument #2 to 'sub' (number expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp4azazntp.lua:16: in function 'candidate'\\n\\t/tmp/tmp4azazntp.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1h9mmkzs.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp1h9mmkzs.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local count = 0\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == \" \" then\n      count = count + 1\n   \
    \   if count == n then\n        table.insert(words, string.sub(s,1,i))\n     \
    \ end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk8bpvq66.lua:30:\
    \ expected: {\"little\"}\\nactual: {\"Mary had a little \"}\\nstack traceback:\\\
    n\\t/tmp/tmpk8bpvq66.lua:30: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local ret = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(ret,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkovtc8q6.lua:28:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\"\\n}\\nstack traceback:\\n\\t/tmp/tmpkovtc8q6.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmxz_fsw.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpzmxz_fsw.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5dcgck2o.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5dcgck2o.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrft5n98.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpzrft5n98.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    local index = 1\n    while index <= #s do\n \
    \       if string.sub(s,index,index+n) == string.sub(s,1,index) then\n       \
    \     table.insert(result, string.sub(s,1,index))\n        end\n        index\
    \ = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp18ymr0yc.lua:27:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp18ymr0yc.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4qqwesck.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp4qqwesck.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppyaxzp82.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmppyaxzp82.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp814j1oik.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp814j1oik.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp395vm53c.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp395vm53c.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp08r1en3f.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp08r1en3f.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp68bxcskf.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s, i, i+n) ~= \"\" then\n      table.insert(words, string.sub(s,\
    \ i, i+n))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpprz2w3e4.lua:26:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary \",\\n    \"ary h\",\\\
    n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had a\",\\n    \"ad\
    \ a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n    \" litt\",\\\
    n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle l\",\\n    \"le\
    \ la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n    \"amb\",\\n  \
    \  \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpprz2w3e4.lua:26: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n            table.insert(words,\
    \ string.sub(s,i,i+n))\n        end\n        i = i + 1\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmiufmbm.lua:27:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmprmiufmbm.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if word:sub(1, 1) == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjaieqtfh.lua:26:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpjaieqtfh.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5kpib89b.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5kpib89b.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  local i = 1\n  while i <= #s do\n    if string.sub(s,\
    \ i, i+n) == string.sub(s, \"^\", i) then\n      table.insert(result, string.sub(s,\
    \ \"^\", i))\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2x_vvbo.lua:16:\
    \ bad argument #2 to 'sub' (number expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpt2x_vvbo.lua:16: in function 'candidate'\\n\\t/tmp/tmpt2x_vvbo.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    if word == \"\" then\n      break\n    end\n    index\
    \ = index + 1\n    local count = #word\n    if count > n then\n      words[#word+1]\
    \ = word\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2sv_w29.lua:32:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpc2sv_w29.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+n) == string.sub(s, \"^\", i) then\n      table.insert(words, string.sub(s,\
    \ \"^\", i))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8qc8py3l.lua:16:\
    \ bad argument #2 to 'sub' (number expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp8qc8py3l.lua:16: in function 'candidate'\\n\\t/tmp/tmp8qc8py3l.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbzifbs0y.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpbzifbs0y.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        else\n            if n == 0\
    \ then\n                table.insert(words, s)\n            else\n           \
    \     local j = i - 1\n                while j >= 0 and s[j] == c do\n       \
    \             j = j - 1\n                end\n                if j == 0 then\n\
    \                    table.insert(words, s)\n                else\n          \
    \          local k = j + 1\n                    while k < #s and s[k] == c do\n\
    \                        k = k + 1\n                    end\n                \
    \    if k == #s then\n                        table.insert(words, s)\n       \
    \             else\n                        table.insert(words, s, i, k)\n   \
    \                     i = k + 1\n                    end\n                end\n\
    \            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ntysj6d.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5ntysj6d.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+1)\n        if string.find(word,\
    \ \"[^aeiou]\") then\n            table.insert(words, word)\n        end\n   \
    \     index = index + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfneop_vg.lua:28:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Ma\",\\n    \"ar\",\\n    \"\
    ry\",\\n    \"y \",\\n    \" h\",\\n    \"ha\",\\n    \"ad\",\\n    \"d \",\\\
    n    \" a\",\\n    \"a \",\\n    \" l\",\\n    \"li\",\\n    \"it\",\\n    \"\
    tt\",\\n    \"tl\",\\n    \"le\",\\n    \"e \",\\n    \" l\",\\n    \"la\",\\\
    n    \"am\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpfneop_vg.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjhs6yqv.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwjhs6yqv.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in string.gmatch(s, \"[^ ]+\") do\n    \
    \    table.insert(words, w)\n    end\n    table.sort(words)\n    return table.take(words,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_0buz3fg.lua:18:\
    \ attempt to call field 'take' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_0buz3fg.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 0\n  while true do\n    index = index\
    \ + 1\n    if index > #s then\n      break\n    end\n    if string.sub(s,index,index+n)\
    \ == \"\" then\n      break\n    end\n    table.insert(words, string.sub(s,index,index+n))\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgpv0c3or.lua:31:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary \",\\n    \"ary h\",\\\
    n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had a\",\\n    \"ad\
    \ a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n    \" litt\",\\\
    n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle l\",\\n    \"le\
    \ la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n    \"amb\",\\n  \
    \  \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpgpv0c3or.lua:31: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ string.sub(s,index,index+n)\n    if word == \"\" then\n      break\n    end\n\
    \    index = index+n\n    table.insert(words, word)\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7fojxe_.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmpj7fojxe_.lua:29: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnuagz43h.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnuagz43h.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ string.sub(s,index,index+n)\n    if word == \"\" then\n      break\n    end\n\
    \    index = index+n\n    table.insert(words, word)\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb0798fmh.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmpb0798fmh.lua:29: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifw8iwe7.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpifw8iwe7.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp759nzkus.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp759nzkus.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == n then\n                words[#words + 1] = \"\"\n         \
    \   else\n                words[#words + 1] = s[i + 1]\n            end\n    \
    \        i = i + 1\n        elseif c == \"s\" then\n            if i == n then\n\
    \                words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"t\" or c == \"h\" or c == \"r\" or c == \"d\" then\n            i = i + 1\n\
    \        elseif c == \"w\" then\n            if i == n then\n                words[#words\
    \ + 1] = \"\"\n            else\n                words[#words + 1] = s[i + 1]\n\
    \            end\n            i = i + 1\n        elseif c == \"b\" then\n    \
    \        if i == n then\n                words[#words + 1] = \"\"\n          \
    \  else\n                words[#words + 1] = s[i + 1]\n            end\n     \
    \       i = i + 1\n        elseif c == \"c\" then\n            if i == n then\n\
    \                words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"m\" then\n            if i == n then\n                words[#words + 1] =\
    \ \"\"\n            else\n                words[#words + 1] = s[i + 1]\n     \
    \       end\n            i = i + 1\n        elseif c == \"f\" then\n         \
    \   if i == n then\n                words[#words + 1] = \"\"\n            else\n\
    \                words[#words + 1] = s[i + 1]\n            end\n            i\
    \ = i + 1\n        elseif c == \"v\" then\n            if i == n then\n      \
    \          words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"g\" then\n            if i == n then\n                words[#words + 1] =\
    \ \"\"\n            else\n                words[#words + 1] = s[i + 1]\n     \
    \       end\n            i = i + 1\n        elseif c == \"j\" then\n         \
    \   if i == n then\n                words[#words + 1] = \"\"\n            else\n\
    \                words[#words + 1] = s[i + 1]\n            end\n            i\
    \ = i + 1\n        elseif c == \"k\" then\n            if i == n then\n      \
    \          words[#words + 1] = \"\"\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpz232q3bt.lua:108: 'end' expected (to close 'if' at line\
    \ 92) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppbh7017m.lua:28: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_wtkgkzb.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp_wtkgkzb.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphgaobmn.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpphgaobmn.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+1)\
    \ == \" \" then\n      i = i + 1\n    else\n      if string.sub(s,i,i+1) ~= \"\
    \ \" then\n        table.insert(words, string.sub(s,i,i+1))\n      end\n     \
    \ i = i + 1\n    end\n  end\n  if #words == 0 then\n    return {}\n  end\n  local\
    \ j = 0\n  local k = 0\n  local l = 0\n  local m = #words\n  while j < m do\n\
    \    if string.sub(words[j],k,k) == \" \" then\n      k = k + 1\n    else\n  \
    \    if string.sub(words[j],k,k) ~= \" \" then\n        l = l + 1\n      end\n\
    \      k = k + 1\n    end\n    if l == n then\n      table.insert(words, string.sub(words[j],k,k))\n\
    \      j = j + 1\n      l = 0\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk6o4g3w6.lua:33:\
    \ bad argument #1 to 'sub' (string expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmpk6o4g3w6.lua:33: in function 'candidate'\\n\\t/tmp/tmpk6o4g3w6.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8bnry91u.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8bnry91u.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd3xxmgj4.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpd3xxmgj4.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  \n  local words = {}\n  \n  if s == \"\" then\n\
    \    return words\n  end\n  \n  local i = 0\n  \n  while i <= #s do\n    local\
    \ char = s[i]\n    \n    if char == \" \" then\n      if #words == n then\n  \
    \      return words\n      end\n      \n      words[#words + 1] = \"\"\n     \
    \ i = i + 1\n      \n      continue\n    end\n    \n    if #words == n then\n\
    \      words[#words + 1] = \"\"\n      i = i + 1\n      \n      continue\n   \
    \ end\n    \n    if string.find(string.gsub(s, \"[^\" .. string.char(string.ascii_letters)\
    \ .. \"]\", \"\"), char) ~= nil then\n      words[#words + 1] = string.gsub(s,\
    \ \"[^\" .. string.char(string.ascii_letters) .. \"]\", \"\")\n      i = i + 1\n\
    \      \n      continue\n    end\n    \n    i = i + 1\n  end\n  \n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpns48o5d7.lua:35: '=' expected near 'end'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words,word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2jhpw4j.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmpb2jhpw4j.lua:28: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsogbe9s.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphsogbe9s.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \"\
    \ then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n  table.sort(words)\n\
    \  if #words == n then\n    return words\n  else\n    return {}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2r_trejj.lua:30:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \"Mary had \", \"Mary had a \"\
    , \"Mary had a little \"}\\nstack traceback:\\n\\t/tmp/tmp2r_trejj.lua:30: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe4jjw855.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpe4jjw855.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8z7kaqld.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8z7kaqld.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpg8ytotwf.lua:28: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local s = s:lower()\n    local n = tonumber(n)\n\
    \    if s == \"\" then\n        return words\n    end\n    local consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    local vowels = \"aeiou\"\n    local vowel_counter\
    \ = 0\n    local consonant_counter = 0\n    local last_consonant_index = -1\n\
    \    local last_vowel_index = -1\n    for i = 1, #s do\n        if consonants:find(s[i])\
    \ ~= nil then\n            consonant_counter = consonant_counter + 1\n       \
    \ elseif vowels:find(s[i]) ~= nil then\n            vowel_counter = vowel_counter\
    \ + 1\n        else\n            if consonant_counter == n then\n            \
    \    words[#words + 1] = s:sub(1, i - 1)\n            end\n            if vowel_counter\
    \ == n then\n                words[#words + 1] = s:sub(i, i - 1)\n           \
    \ end\n            consonant_counter = 0\n            vowel_counter = 0\n    \
    \        last_consonant_index = -1\n            last_vowel_index = -1\n      \
    \  end\n    end\n    if consonant_counter > n then\n        words[#words + 1]\
    \ = s:sub(1, #s - 1)\n    end\n    if vowel_counter > n then\n        words[#words\
    \ + 1] = s:sub(1, #s - 1)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9owrhh9q.lua:26:\
    \ bad argument #1 to 'find' (string expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp9owrhh9q.lua:26: in function 'candidate'\\n\\t/tmp/tmp9owrhh9q.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xi11z1y.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp1xi11z1y.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfxukqje_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpfxukqje_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsda36511.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpsda36511.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        if string.sub(s,i,i+1)\
    \ == \" \" then\n            i = i + 1\n        elseif string.sub(s,i,i+1) ~=\
    \ \" \" and string.sub(s,i,i+1) ~= \"\" then\n            local consonants = string.gsub(string.sub(s,i,i+1),\
    \ \"[^aeiou]\", \"\")\n            if consonants == n then\n                table.insert(words,\
    \ string.sub(s,i,i+1))\n            end\n            i = i + 1\n        end\n\
    \        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuue0nqmn.lua:33:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpuue0nqmn.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsk58wcmj.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpsk58wcmj.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    local\
    \ letter = s[i]\n    if letter == \"a\" or letter == \"e\" or letter == \"i\"\
    \ or letter == \"o\" or letter == \"u\" then\n      words[#words + 1] = \"\"\n\
    \    elseif letter == \"c\" or letter == \"d\" or letter == \"h\" or letter ==\
    \ \"l\" or letter == \"m\" or letter == \"p\" or letter == \"t\" then\n      if\
    \ #words + 1 == n then\n        words[#words + 1] = words[#words + 1]..letter\n\
    \      else\n        words[#words + 1] = words[#words + 1]..letter\n      end\n\
    \    elseif letter == \"b\" then\n      if #words + 1 == n then\n        words[#words\
    \ + 1] = words[#words + 1]..letter\n      else\n        words[#words + 1] = words[#words\
    \ + 1]..letter\n      end\n    elseif letter == \"f\" or letter == \"g\" or letter\
    \ == \"h\" or letter == \"j\" or letter == \"k\" or letter == \"l\" or letter\
    \ == \"m\" or letter == \"n\" or letter == \"p\" or letter == \"r\" or letter\
    \ == \"s\" or letter == \"t\" or letter == \"v\" or letter == \"y\" then\n   \
    \   if #words + 1 == n then\n        words[#words + 1] = words[#words + 1]..letter\n\
    \      else\n        words[#words + 1] = words[#words + 1]..letter\n      end\n\
    \    elseif letter == \"x\" then\n      if #words + 1 == n then\n        words[#words\
    \ + 1] = words[#words + 1]..letter\n      else\n        words[#words + 1] = words[#words\
    \ + 1]..letter\n      end\n    elseif letter == \"z\" then\n      if #words +\
    \ 1 == n then\n        words[#words + 1] = words[#words + 1]..letter\n      else\n\
    \        words[#words + 1] = words[#words + 1]..letter\n      end\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpev59vklk.lua:57:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpev59vklk.lua:57:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9doi92d3.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp9doi92d3.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfc324lvt.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpfc324lvt.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\n  \n  -- Recursive case\n\
    \  local words = select_words(s, n - 1)\n  if n == 1 then\n    table.insert(words,\
    \ s)\n  else\n    local index = #words + 1\n    for i = 1, n do\n      table.insert(words,\
    \ words[index])\n      index = index + 1\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllh2x94s.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpllh2x94s.lua:17: in function\
    \ 'select_words'\\n\\t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\n\\\
    t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\n\\t/tmp/tmpllh2x94s.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\n\\t/tmp/tmpllh2x94s.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmpllh2x94s.lua:17: in function 'select_words'\\n\\t...\\n\\nRan 1 tests\
    \ in 0.159 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8eop7t19.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8eop7t19.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp52jwkkpv.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp52jwkkpv.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ word = string.sub(s,index,index+n)\n    if word ~= \"\" then\n      table.insert(words,word)\n\
    \    end\n    index = index+n\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptoe_a8vc.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmptoe_a8vc.lua:28: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \" \" then\n      if string.sub(s,i,i) ~= \"a\" and string.sub(s,i,i) ~=\
    \ \"e\" and string.sub(s,i,i) ~= \"i\" and string.sub(s,i,i) ~= \"o\" and string.sub(s,i,i)\
    \ ~= \"u\" then\n        table.insert(words, string.sub(s,i,i))\n      end\n \
    \   end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_onhb6mf.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"M\", \"r\", \"y\", \"h\", \"d\", \"l\",\
    \ \"t\", \"t\", \"l\", \"l\", \"m\", \"b\"}\\nstack traceback:\\n\\t/tmp/tmp_onhb6mf.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gyc9dcf.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp2gyc9dcf.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ word = string.sub(s,index,index+n)\n    index = index+n\n    if word ~= \"\"\
    \ then\n      table.insert(words,word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1owoy576.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmp1owoy576.lua:28: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i+n) == \"\" then\n            i = i + 1\n        else\n    \
    \        table.insert(words, string.sub(s,i,i+n))\n            i = i + n\n   \
    \     end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1llk6yb6.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\"\
    , \"le la\", \"amb\"}\\nstack traceback:\\n\\t/tmp/tmp1llk6yb6.lua:29: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      i\
    \ = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <= #s do\n\
    \        c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n          i = i + 1\n        elseif c == 'y' then\n         \
    \ i = i + 1\n        else\n          table.insert(words, string.sub(s, 1, i -\
    \ 1))\n          break\n        end\n      end\n    else\n      table.insert(words,\
    \ string.sub(s, 1, i - 1))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    elseif c == \"n\" then\n      if #words == n then\n    \
    \    break\n      else\n        table.insert(words, s[i])\n      end\n    else\n\
    \      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpylpqzph_.lua:35:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpylpqzph_.lua:35:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp06cy_gp.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpp06cy_gp.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+n) == string.sub(s,1,n) then\n      table.insert(words, string.sub(s,i+1,i+n))\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqajuuxxg.lua:26:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqajuuxxg.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6cwztimn.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp6cwztimn.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if select_word(word, n) then\n           \
    \ table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzlw75vwg.lua:17:\
    \ attempt to call global 'select_word' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzlw75vwg.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu0nmp1wv.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpu0nmp1wv.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    local c\
    \ = s[i]\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c ==\
    \ \"u\" then\n      words[#words + 1] = c\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_er7stu.lua:27:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpa_er7stu.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpy4ia7p01.lua:28: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    if string.sub(s,\
    \ index, index+n) == string.sub(s,1,n) then\n      table.insert(words, string.sub(s,index+1,index+n))\n\
    \    end\n    index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpziivd5__.lua:27:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpziivd5__.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcks7sj_1.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpcks7sj_1.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpykdqaaxb.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpykdqaaxb.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhie44on.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnhie44on.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == #s then\n                words = {}\n            else\n    \
    \            i = i + 1\n            end\n        elseif c == \"s\" then\n    \
    \        if i == #s then\n                words = {}\n            else\n     \
    \           i = i + 1\n            end\n        elseif c == \"t\" then\n     \
    \       if i == #s then\n                words = {}\n            else\n      \
    \          i = i + 1\n            end\n        elseif c == \"h\" then\n      \
    \      if i == #s then\n                words = {}\n            else\n       \
    \         i = i + 1\n            end\n        elseif c == \"l\" then\n       \
    \     if i == #s then\n                words = {}\n            else\n        \
    \        i = i + 1\n            end\n        elseif c == \"w\" then\n        \
    \    if i == #s then\n                words = {}\n            else\n         \
    \       i = i + 1\n            end\n        elseif c == \"d\" then\n         \
    \   if i == #s then\n                words = {}\n            else\n          \
    \      i = i + 1\n            end\n        elseif c == \"p\" then\n          \
    \  if i == #s then\n                words = {}\n            else\n           \
    \     i = i + 1\n            end\n        elseif c == \"g\" then\n           \
    \ if i == #s then\n                words = {}\n            else\n            \
    \    i = i + 1\n            end\n        elseif c == \"b\" then\n            if\
    \ i == #s then\n                words = {}\n            else\n               \
    \ i = i + 1\n            end\n        elseif c == \"v\" then\n            if i\
    \ == #s then\n                words = {}\n            else\n                i\
    \ = i + 1\n            end\n        elseif c == \"m\" then\n            if i ==\
    \ #s then\n                words = {}\n            else\n                i = i\
    \ + 1\n            end\n        elseif c == \"y\" then\n            if i == #s\
    \ then\n                words = {}\n            else\n                i = i +\
    \ 1\n            end\n        elseif c == \"k\" then\n            if i == #s then\n\
    \                words = {}\n            else\n                i = i + 1\n   \
    \         end\n        elseif c == \"j\" then\n            if i == #s then\n \
    \               words = {}\n            else\n                i = i + 1\n    \
    \        end\n        elseif c == \"q\" then\n            if i == #s then\n  \
    \              words = {}\n            else\n                i = i + 1\n     \
    \       end\n        elseif c == \"z\" then\n            if i == #s then\n   \
    \             words = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpz_d5edrf.lua:132: 'end' expected (to close 'if' at line\
    \ 116) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpmf41mpm6.lua:28: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2eqntcs.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpb2eqntcs.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxyn0rttf.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpxyn0rttf.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx929zngw.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        local\
    \ c = s[i]\n        if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~=\
    \ '!' and c ~= '?' then\n            i = i + 1\n        else\n            i =\
    \ i + 1\n            if i == n then\n                table.insert(words, s)\n\
    \            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0q0kuxkm.lua:32:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0q0kuxkm.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local index = 1\n  while\
    \ index <= #s do\n    local word = string.sub(s,index,index+n)\n    index = index+n\n\
    \    if word ~= \"\" then\n      table.insert(words,word)\n    end\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_r5lwfir.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmp_r5lwfir.lua:29: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local c = s[i]\n   \
    \     if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \            words[#words + 1] = s[i]\n        end\n    end\n    return words[math.min(#words,\
    \ n)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4rihaqur.lua:26:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp4rihaqur.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprzzu7qjd.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmprzzu7qjd.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    if index ==\
    \ n then\n      table.insert(words, s)\n      break\n    end\n    local word =\
    \ s:sub(1, index-1)\n    if word:sub(1, 1) == \" \" then\n      index = index\
    \ + 1\n    else\n      index = index + 1\n      table.insert(words, word)\n  \
    \  end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gij2r5i.lua:34:\
    \ expected: {\"little\"}\\nactual: {\"\", \"M\", \"Ma\", \"Mary had a little lamb\"\
    }\\nstack traceback:\\n\\t/tmp/tmp2gij2r5i.lua:34: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz8qi2xku.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz8qi2xku.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgn2qc_78.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpgn2qc_78.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n\
    \  table.sort(words)\n  local count = 0\n  for i = 1, #words do\n    if string.sub(words[i],1,n)\
    \ == string.sub(s,1,n) then\n      count = count + 1\n    end\n  end\n  if count\
    \ > n then\n    table.insert(words, string.sub(s,1,n))\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp355uzx4u.lua:36:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \"Mary had \", \"Mary had a \"\
    , \"Mary had a little \"}\\nstack traceback:\\n\\t/tmp/tmp355uzx4u.lua:36: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5aw9hu67.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5aw9hu67.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      table.insert(words, string.sub(s,1,i))\n      table.insert(words,\
    \ string.sub(s,i+1,i+1))\n    else\n      table.insert(words, string.sub(s,i,i))\n\
    \    end\n  end\n  table.sort(words)\n  local count = 0\n  for i = 1, #words do\n\
    \    if count == n then\n      break\n    end\n    count = count + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdx1xvqt5.lua:37:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"M\",\\n    \"Mary \",\\n  \
    \  \"Mary had \",\\n    \"Mary had a \",\\n    \"Mary had a little \",\\n    \"\
    a\",\\n    \"a\",\\n    \"a\",\\n    \"a\",\\n    \"a\",\\n    \"b\",\\n    \"\
    d\",\\n    \"e\",\\n    \"h\",\\n    \"h\",\\n    \"i\",\\n    \"l\",\\n    \"\
    l\",\\n    \"l\",\\n    \"l\",\\n    \"l\",\\n    \"m\",\\n    \"r\",\\n    \"\
    t\",\\n    \"t\",\\n    \"y\"\\n}\\nstack traceback:\\n\\t/tmp/tmpdx1xvqt5.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodtxw7d_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpodtxw7d_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    else\n      if string.find(s, string.sub(s, i, i), n) then\n\
    \        table.insert(words, string.sub(s, i, i))\n      end\n      i = i + 1\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqppyp6jy.lua:32:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"a\",\\n    \"y\",\\n    \"\
    \ \",\\n    \"h\",\\n    \"a\",\\n    \"d\",\\n    \" \",\\n    \"a\",\\n    \"\
    \ \",\\n    \"l\",\\n    \"i\",\\n    \"t\",\\n    \"t\",\\n    \"l\",\\n    \"\
    e\",\\n    \" \",\\n    \"l\",\\n    \"a\",\\n    \"m\",\\n    \"b\"\\n}\\nstack\
    \ traceback:\\n\\t/tmp/tmpqppyp6jy.lua:32: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppu93syny.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmppu93syny.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[aeiou]\") then\n \
    \           table.insert(words, word)\n        end\n        i = i + 1\n    end\n\
    \    table.sort(words)\n    return table.take(words, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprpyf2odg.lua:23:\
    \ attempt to call field 'take' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprpyf2odg.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+n)\
    \ == string.sub(s,i,i+n) then\n      table.insert(words, string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfnp6h12.lua:27:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\"\\n}\\nstack traceback:\\n\\t/tmp/tmpbfnp6h12.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local c = s[i]\n   \
    \     if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!' and c ~=\
    \ '?' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2i5o2o4i.lua:16: unfinished string near ''-'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    if index ==\
    \ n then\n      table.insert(words, s)\n      break\n    end\n    local char =\
    \ string.sub(s,index,index+1)\n    if string.find(char, \"aeiouAEIOU\") then\n\
    \      index = index + 1\n      continue\n    end\n    index = index + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpay_mx951.lua:24: '=' expected near 'end'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if word ~= \"\" then\n            if string.find(word,\
    \ \"[^aeiou]\") then\n                table.insert(words, word)\n            else\n\
    \                local count = 0\n                for char in word do\n      \
    \              if string.find(char, \"[^aeiou]\") then\n                     \
    \   count = count + 1\n                    end\n                end\n        \
    \        if count == n then\n                    table.insert(words, word)\n \
    \               end\n            end\n        end\n        i = i + 1\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3b4adnci.lua:22:\
    \ attempt to call a string value\\nstack traceback:\\n\\t/tmp/tmp3b4adnci.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = s:sub(i,i)\n\
    \        if string.find(word, \"[aeiou]\") then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_wmdrh0.lua:26:\
    \ expected: {\"little\"}\\nactual: {\"a\", \"a\", \"a\", \"i\", \"e\", \"a\"}\\\
    nstack traceback:\\n\\t/tmp/tmp6_wmdrh0.lua:26: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local ret = {}\n  local i = 0\n  while i <=\
    \ #s do\n    if string.sub(s, i, i+n) == string.sub(s, \"^\", i) then\n      table.insert(ret,\
    \ string.sub(s, \"^\", i))\n    end\n    i = i + 1\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0f41bgh.lua:17:\
    \ bad argument #2 to 'sub' (number expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpv0f41bgh.lua:17: in function 'candidate'\\n\\t/tmp/tmpv0f41bgh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = { }\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s, i, i+n) == string.sub(s,1,n) then\n            table.insert(words,\
    \ string.sub(s,i+1,i+n))\n        end\n        i = i + 1\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn0aa5w_y.lua:27:\
    \ expected: {\"little\"}\\nactual: {\"Mary\"}\\nstack traceback:\\n\\t/tmp/tmpn0aa5w_y.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local ret = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i) == \" \" then\n      i = i + 1\n      while i <= #s\
    \ do\n        if string.sub(s,i,i) == \" \" then\n          i = i + 1\n      \
    \  else\n          table.insert(ret, string.sub(s,i,i))\n        end\n      end\n\
    \    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2cxhogom.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpox30sga8.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpox30sga8.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8gr6t03h.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8gr6t03h.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6oa2mv2.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpm6oa2mv2.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxbhxwlea.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpxbhxwlea.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjlhz8x7p.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjlhz8x7p.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmec3h__5.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpmec3h__5.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local char =\
    \ s[i]\n    if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\"\
    \ or char == \"u\" then\n      i = i + 1\n    elseif char == \" \" then\n    \
    \  if i == #s then\n        break\n      else\n        i = i + 1\n      end\n\
    \    else\n      if #words == n then\n        table.insert(words, char)\n    \
    \  else\n        table.insert(words, string.sub(s, 1, i))\n      end\n      i\
    \ = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzu_40zlq.lua:40:\
    \ expected: {\"little\"}\\nactual: {\"\", \"M\", \"Ma\", \"Mar\"}\\nstack traceback:\\\
    n\\t/tmp/tmpzu_40zlq.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplncdexc8.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmplncdexc8.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\n  \n  -- Recursive case\n\
    \  local words = select_words(s, n - 1)\n  \n  -- Return words that match our\
    \ criteria\n  for _, word in pairs(words) do\n    if string.sub(s, 1, n) == word\
    \ then\n      return word\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplbbn6h_r.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmplbbn6h_r.lua:17: in function\
    \ 'select_words'\\n\\t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\n\\\
    t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\n\\t/tmp/tmplbbn6h_r.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\n\\t/tmp/tmplbbn6h_r.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmplbbn6h_r.lua:17: in function 'select_words'\\n\\t...\\n\\nRan 1 tests\
    \ in 0.156 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if string.sub(s,i,i+n) == \"\" then\n      table.insert(words,string.sub(s,1,i))\n\
    \    end\n    i = i+1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9j8hfr83.lua:28:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9j8hfr83.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuos044so.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpuos044so.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcoxh_gle.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpcoxh_gle.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xipk0qh.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp_xipk0qh.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_m4wjjz.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpi_m4wjjz.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwboszogu.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwboszogu.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local char =\
    \ string.sub(s,i,i)\n    if string.find(char, \"aeiouAEIOU\") then\n      i =\
    \ i + 1 -- skip vowels\n    elseif string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n      i = i + 1 -- skip consonants\n    else\n      table.insert(words,\
    \ char)\n      i = i + 1\n    end\n  end\n  if #words == n then\n    return words\n\
    \  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfqji5lyu.lua:36:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpfqji5lyu.lua:36:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \" \" then\n      if string.sub(s,i,i) ~= \"\" then\n        if string.sub(s,i,i)\
    \ ~= \" \" then\n          if string.sub(s,i,i) ~= \"\" then\n            if string.sub(s,i,i)\
    \ ~= \" \" then\n              if string.sub(s,i,i) ~= \"\" then\n           \
    \     if string.sub(s,i,i) ~= \"\" then\n                  if string.sub(s,i,i)\
    \ ~= \"\" then\n                    if string.sub(s,i,i) ~= \"\" then\n      \
    \                if string.sub(s,i,i) ~= \"\" then\n                        if\
    \ string.sub(s,i,i) ~= \"\" then\n                          if string.sub(s,i,i)\
    \ ~= \"\" then\n                            if string.sub(s,i,i) ~= \"\" then\n\
    \                              if string.sub(s,i,i) ~= \"\" then\n           \
    \                     if string.sub(s,i,i) ~= \"\" then\n                    \
    \              if string.sub(s,i,i) ~= \"\" then\n                           \
    \         if string.sub(s,i,i) ~= \"\" then\n                                \
    \      if string.sub(s,i,i) ~= \"\" then\n                                   \
    \     if string.sub(s,i,i) ~= \"\" then\n                                    \
    \      if string.sub(s,i,i) ~= \"\" then\n                                   \
    \         if string.sub(s,i,i) ~= \"\" then\n                                \
    \              if string.sub(s,i,i) ~= \"\" then\n                           \
    \                     if string.sub(s,i,i) ~= \"\" then\n                    \
    \                              if string.sub(s,i,i) ~= \"\" then\n           \
    \                                         if string.sub(s,i,i) ~= \"\" then\n\
    \                                                      if string.sub(s,i,i) ~=\
    \ \"\" then\n                                                        if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                          if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                            if\
    \ string.sub(s,i,i) ~= \"\" then\n                                           \
    \                   if string.sub(s,i,i) ~= \"\" then\n                      \
    \                                          if string.sub(s,i,i) ~= \"\" then\n\
    \                                                                  if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \       if string.sub(s,i,i) ~= \"\" then\n                                  \
    \                                    if string.sub(s,i,i) ~= \"\" then\n     \
    \                                                                   if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \             if string.sub(s,i,i) ~= \"\" then\n                            \
    \                                                if string.sub(s,i,i) ~= \"\"\
    \ then\n                                                                     \
    \         if string.sub(s,i,i) ~= \"\" then\n                                \
    \                                                if string.sub(s,i,i) ~= \"\"\
    \ then\n                                                                     \
    \             if string.sub(s,i,i) ~= \"\" then\n                            \
    \                                                        if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \                         if string.sub(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7w11yyjv.lua:58: ')' expected (to close '(' at line 57)\
    \ near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    if string.sub(s,index,index+n)\
    \ == \"\" then\n      index = index + 1\n    else\n      table.insert(words, string.sub(s,index,index+n))\n\
    \      index = index + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_yvsj24.lua:29:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary \",\\n    \"ary h\",\\\
    n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had a\",\\n    \"ad\
    \ a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n    \" litt\",\\\
    n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle l\",\\n    \"le\
    \ la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n    \"amb\",\\n  \
    \  \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmps_yvsj24.lua:29: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe4w8svc5.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpe4w8svc5.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 1\n  while i <= #s\
    \ do\n    local c = s[i]\n    if c == \"a\" or c == \"e\" or c == \"i\" or c ==\
    \ \"o\" or c == \"u\" then\n      i = i + 1\n    else\n      if #words == n then\n\
    \        table.insert(words, s)\n      else\n        table.insert(words, s)\n\
    \      end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk6k780o_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpk6k780o_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp17v6ve6x.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7oy415i1.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp7oy415i1.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ew9c_ws.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp9ew9c_ws.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvm4xf7jx.lua:155: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxpocfmi9.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpxpocfmi9.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppvq5zbzo.lua:28: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == n then\n                words[#words + 1] = \"\"\n         \
    \   else\n                words[#words + 1] = s[i + 1]\n            end\n    \
    \        i = i + 1\n        elseif c == \"s\" then\n            if i == n then\n\
    \                words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"t\" or c == \"h\" or c == \"l\" or c == \"d\" then\n            i = i + 1\n\
    \        elseif c == \"w\" then\n            if i == n then\n                words[#words\
    \ + 1] = \"\"\n            else\n                words[#words + 1] = s[i + 1]\n\
    \            end\n            i = i + 1\n        elseif c == \"b\" then\n    \
    \        if i == n then\n                words[#words + 1] = \"\"\n          \
    \  else\n                words[#words + 1] = s[i + 1]\n            end\n     \
    \       i = i + 1\n        elseif c == \"c\" then\n            if i == n then\n\
    \                words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"m\" then\n            if i == n then\n                words[#words + 1] =\
    \ \"\"\n            else\n                words[#words + 1] = s[i + 1]\n     \
    \       end\n            i = i + 1\n        elseif c == \"f\" then\n         \
    \   if i == n then\n                words[#words + 1] = \"\"\n            else\n\
    \                words[#words + 1] = s[i + 1]\n            end\n            i\
    \ = i + 1\n        elseif c == \"v\" then\n            if i == n then\n      \
    \          words[#words + 1] = \"\"\n            else\n                words[#words\
    \ + 1] = s[i + 1]\n            end\n            i = i + 1\n        elseif c ==\
    \ \"j\" then\n            if i == n then\n                words[#words + 1] =\
    \ \"\"\n            else\n                words[#words + 1] = s[i + 1]\n     \
    \       end\n            i = i + 1\n        elseif c == \"k\" then\n         \
    \   if i == n then\n                words[#words + 1] = \"\"\n            else\n\
    \                words[#words + 1] = s[i + 1]\n            end\n            i\
    \ = i + 1\n        elseif c == \"q\" then\n            if i == n then\n      \
    \          words[#words + 1] = \"\"\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpqdp80r6m.lua:108: 'end' expected (to close 'if' at line\
    \ 92) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in string.gmatch(s, \"[^ ]+\") do\n    \
    \    table.insert(words, w)\n    end\n    table.sort(words)\n    local count =\
    \ 0\n    for _, w in pairs(words) do\n        if string.find(w, string.char(97\
    \ + n)) then\n            count = count + 1\n        end\n    end\n    if count\
    \ == n then\n        return words\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctgxv64_.lua:33:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpctgxv64_.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n      i = i + 1\n    elseif c == 'n' then\n      i = i\
    \ + 1\n      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n\
    \    elseif c == 's' then\n      i = i + 1\n      while i <= #s and s[i] ~= 's'\
    \ do\n        i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'h' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'd' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'p' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'p' do\n        i = i + 1\n\
    \      end\n    elseif c == 'y' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c == 'z' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'z' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n        i = i + 1\n\
    \      end\n    elseif c == 't' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'l' then\n      i = i + 1\n      while \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7qi9foxi.lua:95: 'do' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr1vb1iz6.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpr1vb1iz6.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in string.gmatch(s, \"%S+\") do\n    local count\
    \ = 0\n    for c in string.gmatch(w, \"[%S]+\") do\n      if string.sub(c, 1,\
    \ 1) == c then\n        count = count + 1\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8q7vm10y.lua:31:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp8q7vm10y.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0d2x4q8.lua:28:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpx0d2x4q8.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl7lzo4dp.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpl7lzo4dp.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp74k6yjhd.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp74k6yjhd.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    local j = 1\n    while j <= #c do\n      if string.sub(c, j, j + n) == s\
    \ then\n        table.insert(words, string.sub(c, j, j + n))\n      end\n    \
    \  j = j + 1\n    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9axb30hm.lua:18:\
    \ attempt to get length of local 'c' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9axb30hm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in string.gmatch(s, \"[^ ]+\") do\n    local\
    \ count = 0\n    for c in string.gmatch(w, \"[%a%a]+\") do\n      count = count\
    \ + 1\n      if count == n then\n        table.insert(words, w)\n      end\n \
    \   end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcanlbhio.lua:29:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcanlbhio.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpppf1tfe0.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \" \" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \".\" then\n      words[#words + 1] = \"\"\n    elseif\
    \ string.sub(s,i,i) == \",\" then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmps1kum70q.lua:77: 'end' expected (to close 'if' at line\
    \ 16) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6irmse5o.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp6irmse5o.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdnlzt2x8.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdnlzt2x8.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if string.sub(s, index, index+n) == string.sub(s,1,n) then\n \
    \     table.insert(words, string.sub(s,index+1, index+n))\n    end\n    index\
    \ = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93g784nb.lua:28:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp93g784nb.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9874qmcb.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[^aeiou]\") then\n\
    \            i = i + 1\n        else\n            table.insert(words, word)\n\
    \        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzniqi6qm.lua:30:\
    \ expected: {\"little\"}\\nactual: {\"\", \"a\", \"a\", \"i\", \"a\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpzniqi6qm.lua:30: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words,word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4knfrd3.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\\nstack traceback:\\n\\t/tmp/tmpz4knfrd3.lua:28: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifrb_apl.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpifrb_apl.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while true do\n        if\
    \ index == n then\n            table.insert(words, s)\n            break\n   \
    \     end\n        if string.sub(s,index,index+1) ~= \" \" then\n            index\
    \ = index + 1\n        else\n            index = index + 1\n        end\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzp9nm_i5.lua:32:\
    \ expected: {\"little\"}\\nactual: {\"Mary had a little lamb\"}\\nstack traceback:\\\
    n\\t/tmp/tmpzp9nm_i5.lua:32: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpezao0z6q.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpezao0z6q.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl199nl8v.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpl199nl8v.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp37hv92fi.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp37hv92fi.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        local\
    \ word = s[i]\n        if string.find(word, \"[aeiou]\") then\n            table.insert(words,\
    \ word)\n        end\n        i = i + 1\n    end\n    if #words == 0 then\n  \
    \      return nil\n    end\n    local j = 0\n    while j < #words do\n       \
    \ if string.find(words[j], string.sub(s, j, j + n)) then\n            table.insert(words,\
    \ words[j])\n        end\n        j = j + 1\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmj02_xwb.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmpmj02_xwb.lua:17: in function 'candidate'\\n\\t/tmp/tmpmj02_xwb.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\n  \n  -- Recursive case\n\
    \  local words = select_words(s, n - 1)\n  \n  -- Return words that match our\
    \ criteria\n  if n == 1 then\n    local word = string.match(s, \"^[%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b'lua: /tmp/tmpwataxoou.lua:21: unfinished string near \\'\"^[%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%\\\
    '\\n'"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for w in string.gmatch(s, \"[^ ]+\") do\n   \
    \     if string.find(s, string.char(string.byte(w))..string.byte(string.byte(string.sub(w,1,1))),\
    \ string.char(string.byte(string.sub(w,2,2))..string.byte(string.byte(string.sub(w,3,3)))))\
    \ == n then\n            result[#result+1] = w\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7i8tm1t1.lua:15:\
    \ bad argument #1 to 'char' (invalid value)\\nstack traceback:\\n\\t/tmp/tmp7i8tm1t1.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp7i8tm1t1.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp46v1pltl.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8waihtr.lua:28:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpp8waihtr.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmv93p07c.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpmv93p07c.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if select_word(word, n) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyzvz1kcd.lua:16:\
    \ attempt to call global 'select_word' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyzvz1kcd.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx68hgrff.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    elseif c == \"n\" then\n      if i == #s then\n        break\n\
    \      else\n        words[#words + 1] = s[i + 1]\n        i = i + 2\n      end\n\
    \    else\n      i = i + 1\n    end\n  end\n  if #words == n then\n    return\
    \ words\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnpq5c_te.lua:40:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnpq5c_te.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    local c = s[i]\n\
    \    if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!' and c ~=\
    \ '?' then\n      if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n     \
    \   table.insert(words, string.sub(s, 1, n))\n      end\n      i = i + 1\n   \
    \ end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpql60gh91.lua:30:\
    \ expected: {\"little\"}\\nactual: {\"Mary\"}\\nstack traceback:\\n\\t/tmp/tmpql60gh91.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n            table.insert(words,\
    \ string.sub(s,i,i+n))\n        end\n        i = i + 1\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw361hj1j.lua:27:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpw361hj1j.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local index = 0\n  while\
    \ index <= #s do\n    if string.sub(s,index,index+n) == string.sub(s,index+1,index+n)\
    \ then\n      table.insert(words,string.sub(s,index+1,index+n))\n    end\n   \
    \ index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0qdguwuk.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"Mary\"}\\nstack traceback:\\n\\t/tmp/tmp0qdguwuk.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb8u4ey8o.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpb8u4ey8o.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdvqsfttj.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdvqsfttj.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local result = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if string.sub(s, index, index+n) == string.sub(s, \"^\", index)\
    \ then\n      table.insert(result, string.sub(s, \"^\", index))\n    end\n   \
    \ index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4jxgj8kh.lua:17:\
    \ bad argument #2 to 'sub' (number expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp4jxgj8kh.lua:17: in function 'candidate'\\n\\t/tmp/tmp4jxgj8kh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpy17mjnot.lua:112: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local ret = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(ret,\
    \ string.sub(s,i,i+n))\n      i = i + n\n    end\n    i = i + 1\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvy7m115c.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \" had \", \"a lit\", \"tle l\"\
    , \"amb\"}\\nstack traceback:\\n\\t/tmp/tmpvy7m115c.lua:29: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt6ffne_3.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpt6ffne_3.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmph9gaer8i.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0dg8pdm_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp0dg8pdm_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    elseif c == \"n\" then\n      if i == #s then\n        break\n\
    \      else\n        i = i + 1\n      end\n    elseif c == \"s\" then\n      if\
    \ i == #s then\n        break\n      else\n        i = i + 1\n      end\n    elseif\
    \ c == \"t\" then\n      if i == #s then\n        break\n      else\n        i\
    \ = i + 1\n      end\n    elseif c == \"h\" or c == \"l\" or c == \"o\" or c ==\
    \ \"w\" then\n      if i == #s then\n        break\n      else\n        i = i\
    \ + 1\n      end\n    elseif c == \"d\" then\n      if i == #s then\n        break\n\
    \      else\n        i = i + 1\n      end\n    elseif c == \"p\" then\n      if\
    \ i == #s then\n        break\n      else\n        i = i + 1\n      end\n    elseif\
    \ c == \"y\" then\n      if i == #s then\n        break\n      else\n        i\
    \ = i + 1\n      end\n    elseif c == \"r\" then\n      if i == #s then\n    \
    \    break\n      else\n        i = i + 1\n      end\n    elseif c == \"b\" then\n\
    \      if i == #s then\n        break\n      else\n        i = i + 1\n      end\n\
    \    elseif c == \"v\" then\n      if i == #s then\n        break\n      else\n\
    \        i = i + 1\n      end\n    elseif c == \"m\" then\n      if i == #s then\n\
    \        break\n      else\n        i = i + 1\n      end\n    elseif c == \"c\"\
    \ then\n      if i == #s then\n        break\n      else\n        i = i + 1\n\
    \      end\n    elseif c == \"k\" then\n      if i == #s then\n        break\n\
    \      else\n        i = i + 1\n      end\n    elseif c == \"j\" then\n      if\
    \ i == #s then\n        break\n      else\n        i = i + 1\n      end\n    elseif\
    \ c == \"q\" then\n      if i == #s then\n        break\n      else\n        i\
    \ = i + 1\n      end\n    elseif c == \"n\" then\n      if i == #s then\n    \
    \    break\n      else\n        i = i + 1\n      end\n    elseif c == \"g\" then\n\
    \      if i == #s then\n        break\n      else\n        i = i + 1\n      end\n\
    \    elseif c == \"f\" then\n      if i == #s then\n        break\n      else\n\
    \        i = i + 1\n      end\n    elseif c\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpon8a1t7z.lua:128: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    elseif c == \"n\" then\n      if i == #s then\n        break\n\
    \      else\n        i = i + 1\n      end\n    elseif c == \"s\" then\n      if\
    \ i == #s then\n        break\n      else\n        i = i + 1\n      end\n    elseif\
    \ c == \"t\" or c == \"h\" or c == \"r\" or c == \"d\" then\n      if i == #s\
    \ then\n        break\n      else\n        i = i + 1\n      end\n    elseif c\
    \ == \"w\" then\n      if i == #s then\n        break\n      else\n        i =\
    \ i + 1\n      end\n    elseif c == \"t\" or c == \"h\" or c == \"r\" or c ==\
    \ \"d\" or c == \"s\" then\n      if i == #s then\n        break\n      else\n\
    \        i = i + 1\n      end\n    elseif c == \"b\" or c == \"c\" or c == \"\
    m\" or c == \"o\" or c == \"u\" then\n      if i == #s then\n        break\n \
    \     else\n        i = i + 1\n      end\n    elseif c == \"n\" or c == \"s\"\
    \ then\n      if i == #s then\n        break\n      else\n        i = i + 1\n\
    \      end\n    elseif c == \"p\" or c == \"g\" or c == \"f\" or c == \"v\" or\
    \ c == \"b\" then\n      if i == #s then\n        break\n      else\n        i\
    \ = i + 1\n      end\n    elseif c == \"l\" or c == \"l\" or c == \"a\" or c ==\
    \ \"d\" then\n      if i == #s then\n        break\n      else\n        i = i\
    \ + 1\n      end\n    elseif c == \"h\" or c == \"e\" or c == \"l\" or c == \"\
    l\" or c == \"o\" then\n      if i == #s then\n        break\n      else\n   \
    \     i = i + 1\n      end\n    elseif c == \"d\" or c == \"s\" then\n      if\
    \ i == #s then\n        break\n      else\n        i = i + 1\n      end\n    elseif\
    \ c == \"e\" or c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" then\n  \
    \    if i == #s then\n        break\n      else\n        i = i + 1\n      end\n\
    \    elseif c == \"g\" or c == \"h\" or c == \"i\" or c == \"o\" or c == \"u\"\
    \ then\n      if i == #s then\n        break\n      else\n        i = i + 1\n\
    \      end\n    elseif c == \"f\" or c == \"l\" or c == \"l\" or c\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjpa0euil.lua:98: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    local index = 1\n    while index <= #s do\n \
    \       local char = string.sub(s,index,index)\n        if string.find(char, \"\
    [aeiou]\") then\n            index = index + 1\n        else\n            if string.find(char,\
    \ \"[aeiouAEIOU]\") then\n                index = index + 1\n            else\n\
    \                if string.find(char, \"[aeiouAEIOUaeiou]\") then\n          \
    \          index = index + 1\n                else\n                    if string.find(char,\
    \ \"[aeiouAEIOUaeiouAEIOU]\") then\n                        index = index + 1\n\
    \                    else\n                        if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiou]\"\
    ) then\n                            index = index + 1\n                      \
    \  else\n                            if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ) then\n                                index = index + 1\n                  \
    \          else\n                                if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ) then\n                                    index = index + 1\n              \
    \                  else\n                                    if string.find(char,\
    \ \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\") then\n                     \
    \                   index = index + 1\n                                    else\n\
    \                                        if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ) then\n                                            index = index + 1\n      \
    \                                  else\n                                    \
    \        if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ) then\n                                                index = index + 1\n  \
    \                                          else\n                            \
    \                    if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ) then\n                                                    index = index + 1\n\
    \                                                else\n                      \
    \                              if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ) then\n                                                        index = index\
    \ + 1\n                                                    else\n            \
    \                                            if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ) then\n                                                            index = index\
    \ + 1\n                                                        else\n        \
    \                                                    if string.find(char, \"[aeiouAEIOUaeiouAEIOUaeiouAEIOUae\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b'lua: /tmp/tmpn8eqxj23.lua:56: unfinished string near \\'\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUae\\\
    '\\n'"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = s:sub(i,i)\n\
    \        if string.find(word, \"[^aeiou]\") then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz55lio7j.lua:26:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"M\",\\n    \"r\",\\n    \"\
    y\",\\n    \" \",\\n    \"h\",\\n    \"d\",\\n    \" \",\\n    \" \",\\n    \"\
    l\",\\n    \"t\",\\n    \"t\",\\n    \"l\",\\n    \" \",\\n    \"l\",\\n    \"\
    m\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmpz55lio7j.lua:26: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplyxwt24_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmplyxwt24_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local s = s:lower()\n    for i = 1, #s do\n  \
    \      if string.sub(s,i,i) ~= \" \" then\n            local consonants = string.sub(s,i,i):gsub(\"\
    [aeiou]\", \"\")\n            if consonants == n then\n                table.insert(words,\
    \ string.sub(s,1,i))\n            end\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6uxqt9m2.lua:29:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6uxqt9m2.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i+n) == \"\" then\n            i = i + 1\n        else\n    \
    \        table.insert(words, string.sub(s,i,i+n))\n            i = i + n\n   \
    \     end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphcueji28.lua:29:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\"\
    , \"le la\", \"amb\"}\\nstack traceback:\\n\\t/tmp/tmphcueji28.lua:29: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local result = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      table.insert(result, string.sub(s,1,i))\n    elseif string.sub(s,i,i)\
    \ == \"\" then\n      table.insert(result, string.sub(s,1,i))\n    else\n    \
    \  local count = 0\n      for j = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,j,j)\
    \ then\n          count = count + 1\n        end\n      end\n      if count ==\
    \ n then\n        table.insert(result, string.sub(s,1,i))\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpehso53.lua:38:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Ma\",\\n    \"Mary \",\\n \
    \   \"Mary ha\",\\n    \"Mary had \",\\n    \"Mary had a\",\\n    \"Mary had a\
    \ \",\\n    \"Mary had a little \",\\n    \"Mary had a little la\"\\n}\\nstack\
    \ traceback:\\n\\t/tmp/tmpmpehso53.lua:38: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hh9utal.lua:28:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary\",\\n    \"Mary \",\\\
    n    \"ary h\",\\n    \"ry ha\",\\n    \"y had\",\\n    \" had \",\\n    \"had\
    \ a\",\\n    \"ad a \",\\n    \"d a l\",\\n    \" a li\",\\n    \"a lit\",\\n\
    \    \" litt\",\\n    \"littl\",\\n    \"ittle\",\\n    \"ttle \",\\n    \"tle\
    \ l\",\\n    \"le la\",\\n    \"e lam\",\\n    \" lamb\",\\n    \"lamb\",\\n \
    \   \"amb\",\\n    \"mb\",\\n    \"b\"\\n}\\nstack traceback:\\n\\t/tmp/tmp_hh9utal.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if string.sub(s,index,index+n) == string.sub(s,1,n) then\n   \
    \   table.insert(words, string.sub(s,1,index))\n      index = index + 1\n    end\n\
    \    index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsz5msvs4.lua:29:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpsz5msvs4.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         i = i + 1\n        elseif c == \"s\" then\n            i = i + 1\n \
    \       elseif c == \"t\" then\n            i = i + 1\n        elseif c == \"\
    h\" then\n            i = i + 1\n        elseif c == \"l\" then\n            i\
    \ = i + 1\n        elseif c == \"w\" then\n            i = i + 1\n        elseif\
    \ c == \"d\" then\n            i = i + 1\n        elseif c == \"r\" then\n   \
    \         i = i + 1\n        elseif c == \"v\" then\n            i = i + 1\n \
    \       elseif c == \"z\" then\n            i = i + 1\n        elseif c == \"\
    x\" then\n            i = i + 1\n        elseif c == \"c\" then\n            i\
    \ = i + 1\n        elseif c == \"m\" then\n            i = i + 1\n        elseif\
    \ c == \"p\" then\n            i = i + 1\n        elseif c == \"b\" then\n   \
    \         i = i + 1\n        elseif c == \"n\" then\n            i = i + 1\n \
    \       elseif c == \"k\" then\n            i = i + 1\n        elseif c == \"\
    m\" then\n            i = i + 1\n        elseif c == \"p\" then\n            i\
    \ = i + 1\n        elseif c == \"b\" then\n            i = i + 1\n        elseif\
    \ c == \"n\" then\n            i = i + 1\n        elseif c == \"k\" then\n   \
    \         i = i + 1\n        elseif c == \"m\" then\n            i = i + 1\n \
    \       elseif c == \"p\" then\n            i = i + 1\n        elseif c == \"\
    b\" then\n            i = i + 1\n        elseif c == \"n\" then\n            i\
    \ = i + 1\n        elseif c == \"k\" then\n            i = i + 1\n        elseif\
    \ c == \"m\" then\n            i = i + 1\n        elseif c == \"p\" then\n   \
    \         i = i + 1\n        elseif c == \"b\" then\n            i = i + 1\n \
    \       elseif c == \"n\" then\n            i = i + 1\n        elseif c == \"\
    k\" then\n            i = i + 1\n        elseif c == \"m\" then\n            i\
    \ = i + 1\n        elseif c == \"p\" then\n            i = i + 1\n        elseif\
    \ c == \"b\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         i = i + 1\n        elseif c == \"k\" then\n            i = i + 1\n \
    \       elseif c == \"m\" then\n            i = i + 1\n        elseif c == \"\
    p\" then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2846uq72.lua:97: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg7474bl8.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpg7474bl8.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdjxxi4q1.lua:30: 'end' expected (to close 'function' at\
    \ line 12) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbiop_ptb.lua:21:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpbiop_ptb.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptln_wsp_.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmptln_wsp_.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\n  \n  -- Recursive case\n\
    \  local words = select_words(s, n - 1)\n  if #words == n then \n    table.insert(words,\
    \ s)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6p_kh0nh.lua:17:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmp6p_kh0nh.lua:17: in function\
    \ 'select_words'\\n\\t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\n\\\
    t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\n\\t/tmp/tmp6p_kh0nh.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\n\\t/tmp/tmp6p_kh0nh.lua:17:\
    \ in function 'select_words'\\n\\t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\\
    n\\t/tmp/tmp6p_kh0nh.lua:17: in function 'select_words'\\n\\t...\\n\\nRan 1 tests\
    \ in 0.152 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local letter = string.sub(s,i,i)\n\
    \        if letter:sub(1,1) == \"a\" and letter:sub(2,2) == \"u\" then\n     \
    \       words[#words + 1] = letter\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7oke7ez.lua:26:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpr7oke7ez.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ word = s:sub(1, index)\n    local count = 0\n    for i = 1, #word do\n     \
    \ if word:sub(i, i) == string.upper(word:sub(i, i)) then\n        count = count\
    \ + 1\n      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n    index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpptq8spab.lua:34:\
    \ expected: \\n{\"little\"}\\nactual: \\n{\\n    \"Mary had a \",\\n    \"Mary\
    \ had a l\",\\n    \"Mary had a li\",\\n    \"Mary had a lit\",\\n    \"Mary had\
    \ a litt\",\\n    \"Mary had a littl\",\\n    \"Mary had a little\"\\n}\\nstack\
    \ traceback:\\n\\t/tmp/tmpptq8spab.lua:34: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[aeiou]\") then\n \
    \           table.insert(words, word)\n        end\n        i = i + 1\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf46jg31s.lua:28:\
    \ expected: {\"little\"}\\nactual: {\"a\", \"a\", \"a\", \"i\", \"e\", \"a\"}\\\
    nstack traceback:\\n\\t/tmp/tmpf46jg31s.lua:28: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpethghmqy.lua:19:\
    \ expected: {\"little\"}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpethghmqy.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
