name: HumanEval_157_right_angle_triangle
language: lua
results:
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7gt6oavw.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2ba5ejn.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpt2ba5ejn.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpur6eghh6.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpur6eghh6.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(b - c) < math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgo9xo_6n.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpgo9xo_6n.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp357g9ycq.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp357g9ycq.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab * bc * ac >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw4l_51oi.lua:19:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpw4l_51oi.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 then\n\t\tif b ~= 0 then\n\t\t\tif c ~=\
    \ 0 then\n\t\t\t\t-- Check that the sides are equal\n\t\t\t\tif a == b and a ==\
    \ c then\n\t\t\t\t\t-- Check that the angle is right\n\t\t\t\t\tif math.abs(math.atan2(c-b,\
    \ a-b)) < math.pi then\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\t\
    return false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpduevjr6j.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpduevjr6j.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprxdy_37u.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprxdy_37u.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal ab_ab = ab_sq + bc_sq\n\t\
    local bc_bc = bc_sq + cb_sq\n\tlocal ab_bc = ab_sq + bc_bc\n\treturn ab_ab ==\
    \ bc_bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpci5bs3e0.lua:25:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpci5bs3e0.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the side\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmplg8q0gj7.lua:107: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1a0rdfgh.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1a0rdfgh.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa74wtd08.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa74wtd08.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  return ab\
    \ >= bc and ab >= ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp33ci5o99.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp33ci5o99.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c then\n    return true\n  end\n  --\
    \ Check that the sides are equal\n  if a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ a == c or c == a then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == b or b == c then\n    return true\n  end\n  -- Check that the\
    \ sides are equal\n  if a == c or c == a then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if a == b or b == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpxibqplif.lua:107: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsogh5z2s.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsogh5z2s.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = a - c\n\tlocal abc = ab * bc\n\tlocal\
    \ acb = ac * bc\n\treturn abc > 0 and acb > 0 and abc < acb\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx29dqssi.lua:21:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpx29dqssi.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 then\n\t\tif b ~= 0 then\n\t\t\tif c ~=\
    \ 0 then\n\t\t\t\t-- Check that the sides are equal\n\t\t\t\tif a == b and a ==\
    \ c then\n\t\t\t\t\t-- Check that the angles are right\n\t\t\t\t\tif math.abs(math.atan2(c-b,\
    \ a-b)) < math.pi then\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\t\
    return false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuw2ukm88.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpuw2ukm88.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6788f4m_.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6788f4m_.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmprmpcoz51.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfaeozw9g.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpfaeozw9g.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4rbnpkoe.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4rbnpkoe.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpojb7gnom.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpojb7gnom.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppwo1rp9w.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8yph29w9.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8yph29w9.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpuib4vzbz.lua:72: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqmuzf3mp.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqmuzf3mp.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab > 0 and bc > 0 and\
    \ ac > 0 and ab + bc + ac == b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeq7ykort.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpeq7ykort.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- The sides\
    \ are a, b, c\n\t-- The angles are the sides' angles\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radian\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpifcs7j_0.lua:83: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpv7o4zp0o.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzx_dtkrg.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzx_dtkrg.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal\
    \ ac_ac = ac * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_ab = ab_ac\
    \ * bc_ab\n\tlocal bc_ab_ac = bc_ab * ac\n\tlocal bc_ab_ac_bc = bc_ab * ac_bc\n\
    \tlocal ab_ac_bc_ab_ac = ab_ac_bc * ab\n\tlocal ab_ac_bc_ab_ac_bc = ab_ac_bc *\
    \ ab_ac\n\tlocal bc_ab_ac_bc_ab_ac_bc = bc_ab_ac_bc * ab_ac_bc\n\tlocal ab_ac_bc_ab_ac_bc_ab\
    \ = ab_ac_bc_ab * bc\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac = ab_ac_bc_ab * bc_ac\n\t\
    local bc_ab_ac_bc_ab_ac_bc_ab_ac_bc = bc_ab_ac_bc_ab * bc_ab_ac\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac\
    \ = ab_ac_bc_ab_ac * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc\
    \ = bc_ab_ac_bc_ab_ac * bc_ab_ac_bc_ab\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac\
    \ = bc_ab_ac_bc_ab_ac * bc_ab_ac_bc_ab_ac\n\tlocal bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc\
    \ = bc_ab_ac_bc_ab_ac * bc_ab_ac_bc_ab_ac_bc\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdx2q1zpk.lua:52: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 then\n\t\tif b ~= 0 then\n\t\t\tif c ~=\
    \ 0 then\n\t\t\t\t-- Check that the sides are equal\n\t\t\t\tif a == b and a ==\
    \ c then\n\t\t\t\t\t-- Check that the angle is right\n\t\t\t\t\tif math.abs(math.atan2(b,a))\
    \ < math.pi then\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\treturn\
    \ false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\
    \telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpewf5um0x.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpewf5um0x.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpml5ak90k.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp553usqay.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpowcdeosy.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpowcdeosy.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa0fh4u_5.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa0fh4u_5.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7p9ka2i7.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7p9ka2i7.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpwdmbskg6.lua:128: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkzjd3hq0.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  return ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9110igtz.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp9110igtz.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppazgj36k.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppazgj36k.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ a - b\n    local bc = b - c\n    local ac = c - a\n    local ab_sqr = ab * ab\n\
    \    local bc_sqr = bc * bc \n    local ac_sqr = ac * ac\n    local ab_ac = ab\
    \ * ac\n    local bc_ab = bc * b\n    local ab_ab = ab * b\n    return ab_sqr\
    \ + bc_sqr + ac_sqr == ab_ac + bc_ab + ab_ab\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7qzbp30s.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7qzbp30s.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  return\
    \ ab_sq + bc_sq - ab_ac >= 0 and ab_ac >= 0 and bc_sq - ac_sq >= 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpux_ciw6m.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpux_ciw6m.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(c-a)\n\tlocal abc = ab + bc\n\
    \tlocal bca = bc + ac\n\treturn abc > bca\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5_8n20gt.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5_8n20gt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp23899atu.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp23899atu.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpizc34pav.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpizc34pav.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4xhs3ckm.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0kgle94x.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a == 0 then\n\t\treturn\
    \ b == 0 and c == 0 or (b > 0 and c > 0)\n\telseif b == 0 then\n\t\treturn a ==\
    \ 0 and c > 0 or (a > 0 and c > 0)\n\telseif c == 0 then\n\t\treturn a == 0 and\
    \ b > 0 or (a > 0 and b > 0)\n\tend\n\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab >\
    \ ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzkglfgwe.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzkglfgwe.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpttr0ug8k.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpttr0ug8k.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_zeied0w.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ob7s2og.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4ob7s2og.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b-a)\n\
    \tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp04hf7egw.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp04hf7egw.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9cl68l_z.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9cl68l_z.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a ~= b and a ~= c then\n   \
    \ return false\n  end\n  -- Check that the sides are equal\n  if b ~= c then\n\
    \    return false\n  end\n  -- Check that the sides are equal\n  if a + b ~= c\
    \ then\n    return false\n  end\n  -- Check that the sides are equal\n  if a +\
    \ c ~= b then\n    return false\n  end\n  -- Check that the sides are equal\n\
    \  if b + c ~= a then\n    return false\n  end\n  -- Check that the sides are\
    \ equal\n  if a + b + c ~= 0 then\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph10jdzl5.lua:43:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph10jdzl5.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp09ot3f55.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and (ab > ad or bc > ad)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe5wp514m.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpe5wp514m.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b and b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b and b == c then\n\t\treturn true\n\tend\n\t\
    -- Check that the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a ==\
    \ c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a\
    \ == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t\
    -- Check that the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a ==\
    \ c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a\
    \ == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t\
    -- Check that the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a ==\
    \ c then\n\t\treturn true\n\tend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmps1ytb6uf.lua:119: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_ac_sq\
    \ = ab_ac * ab_ac\n  local bc_bc_sq = bc * bc_sq\n  local bc_bc_sq_sq = bc_bc_sq\
    \ * bc_bc_sq\n  local det = ab_sq + bc_sq - ab_ac_sq\n  local sq_det = ab_sq -\
    \ bc_sq_sq\n  local bc_sq_sq = bc_sq * sq_det\n  local det = ab_sq + bc_sq - ab_ac_sq\n\
    \  local sq_det = ab_sq - bc_sq_sq\n  local bc_sq_sq = bc_sq * sq_det\n  local\
    \ det = ab_sq + bc_sq - ab_ac_sq\n  local sq_det = ab_sq - bc_sq_sq\n  local bc_sq_sq\
    \ = bc_sq * sq_det\n  local det = ab_sq + bc_sq - ab_ac_sq\n  local sq_det = ab_sq\
    \ - bc_sq_sq\n  local bc_sq_sq = bc_sq * sq_det\n  local det = ab_sq + bc_sq -\
    \ ab_ac_sq\n  local sq_det = ab_sq - bc_sq_sq\n  local bc_sq_sq = bc_sq * sq_det\n\
    \  local det = ab_sq + bc_sq - ab_ac_sq\n  local sq_det = ab_sq - bc_sq_sq\n \
    \ local bc_sq_sq = bc_sq * sq_det\n  local det = ab_sq + bc_sq - ab_ac_sq\n  local\
    \ sq_det = ab_sq - bc_sq_sq\n  local bc_sq_sq = bc_sq * sq_det\n  local det =\
    \ ab_sq + bc_sq - ab_ac_sq\n  local sq_det = ab_sq - bc_sq_sq\n  local bc_sq_sq\
    \ = bc_sq * sq_det\n  local det = ab_sq + bc_sq - ab_ac_sq\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvxms53zo.lua:62: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6hgjbch.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpx6hgjbch.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b-a)\n\
    \tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\treturn ab > bc and (ab\
    \ > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpev10566w.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpev10566w.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ztk8sgl.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3ztk8sgl.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(a - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c -\
    \ a)\n    return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6smowjm_.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6smowjm_.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 then\n    return false\n  elseif b == 0\
    \ then\n    return false\n  elseif c == 0 then\n    return false\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp96ior5c8.lua:34: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ a - b\n    local bc = b - c\n    local ac = c - a\n    local det = ab * ac -\
    \ bc * bc\n    return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy67f96rd.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpy67f96rd.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_ab\
    \ = ab * ab\n  local bc_bc = bc * bc \n  local bc_ab = bc * ab\n  local ac_ac\
    \ = ac * ac\n  local ab_bc = ab * bc\n  local ab_ac = ab * ac\n  local bc_ab =\
    \ bc * ab\n  local bc_bc = bc * bc \n  local ab_ab = ab * ab\n  local ab_ac =\
    \ ab * ac\n  local bc_ab = bc * ab\n  local bc_bc = bc * bc \n  local ab_ab =\
    \ ab * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local bc_bc = bc\
    \ * bc \n  local ab_ab = ab * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc\
    \ * ab\n  local bc_bc = bc * bc \n  local ab_ab = ab * ab\n  local ab_ac = ab\
    \ * ac\n  local bc_ab = bc * ab\n  local bc_bc = bc * bc \n  local ab_ab = ab\
    \ * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local bc_bc = bc *\
    \ bc \n  local ab_ab = ab * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc *\
    \ ab\n  local bc_bc = bc * bc \n  local ab_ab = ab * ab\n  local ab_ac = ab *\
    \ ac\n  local bc_ab = bc * ab\n  local bc_bc = bc * bc \n  local ab_ab = ab *\
    \ ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local bc_bc = bc * bc\
    \ \n  local ab_ab = ab * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n\
    \  local bc_bc = bc * bc \n  local ab_ab = ab * ab\n  local ab\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpomzpnz8g.lua:79: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgdxlyulo.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 and b ~= 0 and c ~= 0 then\n\t\t-- Check\
    \ that the sides are equal\n\t\tif a == b and a == c then\n\t\t\t-- Check that\
    \ the angle is right\n\t\t\tif math.abs(math.atan2(b,c)) < math.pi then\n\t\t\t\
    \treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\t--\
    \ Check that the angle is right\n\t\t\tif math.abs(math.atan2(b,c)) < math.pi\
    \ then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcmgqzk_s.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcmgqzk_s.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkjvr1z8u.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ a - b\n   local bc = b - c\n   local cb = c - b\n   local ab_sq = ab * ab\n\
    \   local bc_sq = bc * bc\n   local cb_sq = cb * cb\n   local det = ab_sq * bc_sq\
    \ - cb_sq * ab_sq\n   if det < 0 then\n      return false\n   else\n      return\
    \ det > 0\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5xrhlg6y.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5xrhlg6y.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    \n    return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhnkfj1h.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnhnkfj1h.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  local de\
    \ = math.abs(d - a)\n  return ab >= bc and ab >= ad and ab >= de\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03i5yvqz.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp03i5yvqz.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \t\n\tif det == 0 then\n\t\treturn false\n\telse\n\t\treturn det > 0 and det <\
    \ 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_axqu2h.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6_axqu2h.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then return false end\n\t\
    if a + b > c then return false end\n\tif a + c > b then return false end\n\tif\
    \ b + c > a then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpy9kxykzv.lua:31: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptqfcu738.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptqfcu738.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr -\
    \ cb_sqr\n  \n  if det > 0 then\n    return true\n  else\n    return false\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpljqveci_.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpljqveci_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3vfysifl.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpejdeiz34.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpejdeiz34.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal\
    \ ac_bc = ac * bc\n\tlocal ac_bc = ac * bc\n\treturn (ab_sqr + bc_sqr + ac_sqr\
    \ - ab_ac - bc_ab - ac_bc) < 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv59ndo56.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv59ndo56.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp6yqu9i66.lua:130: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab == bc then\n      return ac > ab\n   elseif ab == ac then\n      return\
    \ bc > ab\n   else\n      return ab > bc\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpms8k2prs.lua:25:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpms8k2prs.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp1hkphy9b.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = a - c\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5cm648z4.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5cm648z4.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzz20qny.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvzz20qny.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ab > bc and\
    \ (ab > ac or math.abs(a - c) > math.abs(b - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbb_3tdm0.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbb_3tdm0.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ a - b\n   local bc = b - c\n   local ac = a - c\n   return ab == bc and ab ==\
    \ ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuyok2i0m.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpuyok2i0m.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c then\n    return true\n  end\n  --\
    \ Check that the sides are equal\n  if a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ a == c or c == a then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == b or b == c then\n    return true\n  end\n  -- Check that the\
    \ sides are equal\n  if a == c or c == a then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if a == b or b == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmplcve2dso.lua:123: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = a - c\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and ab + bc + ac == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtmb6fhr.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdtmb6fhr.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == a then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == a then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == a then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdr40o4gv.lua:92: 'end' expected (to close 'if' at line\
    \ 90) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd2_ilv70.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd2_ilv70.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe2v9vlvs.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpe2v9vlvs.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmplrdu9rg_.lua:108: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or b == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpd87rio3_.lua:111: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppvqlm23g.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppvqlm23g.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjo55binm.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphaik5mre.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphaik5mre.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplpt91qzt.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplpt91qzt.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\tlocal det\
    \ = ab * bc - ac * ac\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpquu_1d11.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpquu_1d11.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal abc = ab * bc\n\treturn\
    \ abc > 0 and abc < ab * ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd1mepwed.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd1mepwed.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\t\n\tif ab\
    \ == bc and ab == ac then\n\t\treturn true\n\telseif ab == bc then\n\t\treturn\
    \ math.abs(a - c) == 90\n\telseif ab == ac then\n\t\treturn math.abs(b - c) ==\
    \ 90\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wq2qleq.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8wq2qleq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmprazq42ix.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplotx2dgh.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplotx2dgh.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppwxn3tra.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(a-c)\n\t\n\tif ab > bc then\n\
    \t\tif ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\tif bc > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcxb4bkw.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkcxb4bkw.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal\
    \ bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_2_ac = ab_2 * ac\n\tlocal\
    \ bc_2_ac = bc_2 * ac\n\tlocal ab_2_ab = bc_2 * ab\n\treturn ab_2_ac >= 0 and\
    \ bc_2_ac >= 0 and ab_2_ab >= 0 and bc_2_ab >= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tuwl8k6.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3tuwl8k6.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf2lbtd7g.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf2lbtd7g.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpl_1uh2tv.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjtgiv9wf.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjtgiv9wf.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq - cb_sq\
    \ * ab_sq\n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiy_g_iif.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpiy_g_iif.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp451ptvb4.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp451ptvb4.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp89yohfiw.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdoobhnej.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdoobhnej.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpomk73q77.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpo1910n6o.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7123iw93.lua:19:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7123iw93.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ a - b\n   local bc = b - c\n   local ac = c - a\n   return ab == bc and ab ==\
    \ ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz6xzxo9q.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpz6xzxo9q.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20fkj2j4.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp20fkj2j4.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpm3_tbm4o.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq + bc_sq - cb_sq\n\
    \t\n\tif det < 0 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprnlt0fpf.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmprnlt0fpf.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe7t07se6.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpe7t07se6.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_2 = ab * ab\n  local\
    \ bc_2 = bc * bc \n  local ac_2 = ac * ac\n  local ab_2_ac = ab_2 * ac\n  local\
    \ bc_2_ac = bc_2 * ac\n  return ab_2_ac + bc_2_ac - ab_2_ac * bc_2 > 0 and ab_2_ac\
    \ * bc_2 < 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwk20sm69.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwk20sm69.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcopej1j8.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcopej1j8.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc\n\tlocal bc_ab = bc * ab\n\tlocal ac_ac =\
    \ ac * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_ab = ab_ac * bc_ab\n\
    \tlocal bc_ac_bc = bc_bc * ac\n\tlocal bc_ac_bc_ab = bc_bc * ab_ab\n\tlocal ab_ac_bc_ab_ac\
    \ = ab_ac_bc * ac\n\tlocal ab_ac_bc_ab_ac_bc = ab_ac_bc * ab_ac * bc\n\tlocal\
    \ ab_ac_bc_ab_ac_bc_ab = ab_ac_bc * ab_ac * bc_ab\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac\
    \ = bc_ac_bc * ab_ac * bc_ab * ac\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc = bc_ac_bc\
    \ * ab_ac * bc_ab * ac * bc\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc_ab = bc_ac_bc\
    \ * ab_ac * bc_ab * ac * bc * ab\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac = bc_ac_bc\
    \ * ab_ac * bc_ab * ac * bc * ab * ac\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc\
    \ = bc_ac_bc * ab_ac * bc_ab * ac * bc * ab * ac * bc\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab\
    \ = bc_ac_bc * ab_ac * bc_ab * ac * bc * ab * ac * bc * ab\n\tlocal bc_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac\
    \ = bc_ac_bc * ab_ac * bc_ab * ac * bc * ab * ac * bc * ab\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpwytu07s4.lua:51: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b and a == c then\n\
    \    return true\n  end\n  \n  -- Check that the sides are equal\n  if a == c\
    \ then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ b == c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check\
    \ that the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or b == c or c ==\
    \ a then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or b == c or c ==\
    \ a then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or b == c or c ==\
    \ a then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or b == c or c ==\
    \ a then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or b == c or c == a then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or b == c or c ==\
    \ a then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or b == c \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp6bbqm7k1.lua:106: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzg6ec9qp.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzg6ec9qp.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4m2neov.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf4m2neov.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmph3alv0d6.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp1sdrcu6o.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3h35vnxt.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3h35vnxt.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(a - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c -\
    \ a)\n    return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv7qtj7y_.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv7qtj7y_.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local abc = ab * bc\n  return\
    \ abc > 0 and abc < ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp91oy7b1h.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp91oy7b1h.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmplixvkxc4.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96ajv_03.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp96ajv_03.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0gsamueb.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and (ab + bc + ac) == b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7nz13zf2.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7nz13zf2.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqkn7fxf.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpuqkn7fxf.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdcq182ai.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdcq182ai.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b then return true end\n  -- Check that\
    \ the sides are equal\n  if a == c then return true end\n  -- Check that the sides\
    \ are equal\n  if b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b then return true end\n  -- Check that the sides are equal\n  if a\
    \ == c then return true end\n  -- Check that the sides are equal\n  if b == c\
    \ then return true end\n  -- Check that the sides are equal\n  if a == b then\
    \ return true end\n  -- Check that the sides are equal\n  if a == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == b then return true end\n\
    \  -- Check that the sides are equal\n  if a == c then return true end\n  -- Check\
    \ that the sides are equal\n  if b == c then return true end\n  -- Check that\
    \ the sides are equal\n  if a == b then return true end\n  -- Check that the sides\
    \ are equal\n  if a == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c then return true end\n  -- Check that the sides are equal\n  if a\
    \ == b then return true end\n  -- Check that the sides are equal\n  if a == c\
    \ then return true end\n  -- Check that the sides are equal\n  if b == c then\
    \ return true end\n  -- Check that the sides are equal\n  if a == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b then return true end\n  -- Check\
    \ that the sides are equal\n  if a == c then return true end\n  -- Check that\
    \ the sides are equal\n  if b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b then return true end\n  -- Check that the sides are equal\n\
    \  if a == c then return true end\n  -- Check that the sides are equal\n  if b\
    \ == c \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3h2vzi4r.lua:71: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(a-b)\n   local bc = math.abs(b-c)\n   local ac = math.abs(a-c)\n  \
    \ if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5rb021dl.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5rb021dl.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero.\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\n  -- Check that the sides are non-negative.\n  if a < 0 or b < 0 or c\
    \ < 0 then\n    return false\n  end\n  -- Check that the sides are equal\n  if\
    \ a == b and a == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpuhinmoo5.lua:111: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xj_hqsp.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7xj_hqsp.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a-b)\n\
    \  local bc = math.abs(b-c)\n  local ca = math.abs(c-a)\n  return ab > bc and\
    \ ab > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzgjvi4h2.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzgjvi4h2.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpilxa65yd.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpilxa65yd.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    -- Check that\
    \ the sides are non-negative\n    if a < 0 or b < 0 or c < 0 then\n      return\
    \ false\n    end\n    -- Check that the sides are equal\n    if a == b and a ==\
    \ c then\n      return true\n    end\n    -- Check that the sides are equal\n\
    \    if a == c then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if b == c then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a > b and a > c then\n      return true\n    end\n \
    \   -- Check that the sides are equal\n    if b > c and b > a then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if c > a and c > b\
    \ then\n      return true\n    end\n    -- Check that the sides are equal\n  \
    \  if a > b and b > c then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if b > c and c > a then\n      return true\n    end\n \
    \   -- Check that the sides are equal\n    if c > a and a > b then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a > c and c > a\
    \ then\n      return true\n    end\n    -- Check that the sides are equal\n  \
    \  if b > a and b > c then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if c > a and c > b then\n      return true\n    end\n \
    \   -- Check that the sides are equal\n    if a > b and b > c then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if b > c and c > a\
    \ then\n      return true\n    end\n    -- Check that the sides are equal\n  \
    \  if c > a and c > b then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a > b and b > c then\n      return true\n    end\n \
    \   -- Check that the sides are equal\n    if b > c and c > a then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if c > a and c > b\
    \ then\n      return true\n    end\n    -- Check that the sides are equal\n  \
    \  if a > b and b > c then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if b > c and c > a then\n      return true\n    end\n \
    \   -- Check that the sides are equal\n    if c > a and c > b then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a > b and b > c\
    \ then\n      return true\n    end\n    -- Check that the \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcx7pdq21.lua:121: 'end' expected (to close 'if' at line\
    \ 10) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpbgrprvf0.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp284379ax.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp284379ax.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a\
    \ - b)\n  local bc = math.abs(b - c)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx7ymidn6.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx7ymidn6.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a\
    \ - b)\n  local bc = math.abs(b - c)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph5h0ex86.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph5h0ex86.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9sjb1264.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn265x0zd.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn265x0zd.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\treturn ab_ac + ab_bc <= bc_ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpojghtdsa.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpojghtdsa.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_2 = ab * ab\n  local\
    \ bc_2 = bc * bc \n  local ac_2 = ac * ac\n  local ab_3 = ab_2 * ab\n  local bc_3\
    \ = bc_2 * bc\n  local ac_3 = ac_2 * ac\n  local ab_4 = ab_2 * ab\n  local bc_4\
    \ = bc_2 * bc\n  local ac_4 = ac_2 * ac\n  local ab_5 = ab_2 * ab\n  local bc_5\
    \ = bc_2 * bc\n  local ac_5 = ac_2 * ac\n  local ab_6 = ab_2 * ab\n  local bc_6\
    \ = bc_2 * bc\n  local ac_6 = ac_2 * ac\n  local ab_7 = ab_2 * ab\n  local bc_7\
    \ = bc_2 * bc\n  local ac_7 = ac_2 * ac\n  local ab_8 = ab_2 * ab\n  local bc_8\
    \ = bc_2 * bc\n  local ac_8 = ac_2 * ac\n  local ab_9 = ab_2 * ab\n  local bc_9\
    \ = bc_2 * bc\n  local ac_9 = ac_2 * ac\n  local ab_10 = ab_2 * ab\n  local bc_10\
    \ = bc_2 * bc\n  local ac_10 = ac_2 * ac\n  local ab_11 = ab_2 * ab\n  local bc_11\
    \ = bc_2 * bc\n  local ac_11 = ac_2 * ac\n  local ab_12 = ab_2 * ab\n  local bc_12\
    \ = bc_2 * bc\n  local ac_12 = ac_2 * ac\n  local ab_13 = ab_2 * ab\n  local bc_13\
    \ = bc_2 * bc\n  local ac_13 = ac_2 * ac\n  local ab_14 = ab_2 * ab\n  local bc_14\
    \ = bc_2 * bc\n  local ac_14 = ac_2 * ac\n  local ab_15 = ab_2 * ab\n  local bc_15\
    \ = bc_2 * bc\n  local ac_15 = ac_2 * ac\n  local ab_16 = ab_2 * ab\n  local bc_16\
    \ = bc_2 * bc\n  local ac_16 = ac_2 * ac\n  local ab_17 = ab_2 * ab\n  local bc_17\
    \ = bc_2 * bc\n  local ac_17 = ac_2 * ac\n  local ab_18 = ab_2 * ab\n  local bc_18\
    \ = bc_2 * bc\n  local ac_18 = ac_2 * ac\n  local ab_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0h89gowr.lua:81: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that none of the sides are equal\n\tif a == b or a == c or b\
    \ == c then\n\t\treturn true\n\tend\n\t-- Check that none of the sides are 90\
    \ degree\n\tif a == b and b == c or a == c and c == b then\n\t\treturn true\n\t\
    end\n\t-- Check that none of the sides are 180 degree\n\tif a == b or a == c or\
    \ b == c then\n\t\treturn false\n\tend\n\t-- Check that none of the sides are\
    \ 270 degree\n\tif a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t\
    -- Check that none of the sides are 360 degree\n\tif a == b or a == c or b ==\
    \ c then\n\t\treturn false\n\tend\n\t-- Check that none of the sides are 90 or\
    \ 270 degree\n\tif a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t\
    -- Check that none of the sides are 180 or 360 degree\n\tif a == b or a == c or\
    \ b == c then\n\t\treturn false\n\tend\n\t-- Check that none of the sides are\
    \ 90 or 270 degree\n\tif a == b or a == c or b == c then\n\t\treturn false\n\t\
    end\n\t-- Check that none of the sides are 180 or 360 degree\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn false\n\tend\n\t-- Check that none of the sides\
    \ are 90 or 270 degree\n\tif a == b or a == c or b == c then\n\t\treturn false\n\
    \tend\n\t-- Check that none of the sides are 180 or 360 degree\n\tif a == b or\
    \ a == c or b == c then\n\t\treturn false\n\tend\n\t-- Check that none of the\
    \ sides are 90 or 270 degree\n\tif a == b or a == c or b == c then\n\t\treturn\
    \ false\n\tend\n\t-- Check that none of the sides are 180 or 360 degree\n\tif\
    \ a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t-- Check that none\
    \ of the sides are 90 or 270 degree\n\tif a == b or a == c or b == c then\n\t\t\
    return false\n\tend\n\t-- Check that none of the sides are 180 or 360 degree\n\
    \tif a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t-- Check that\
    \ none of the sides are 90 or 270 degree\n\tif a == b or a == c or b == c then\n\
    \t\treturn false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphm3bw6l8.lua:77: 'end' expected (to close 'if' at line\
    \ 74) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpreqg761_.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpreqg761_.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpykqbhk2f.lua:19:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpykqbhk2f.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvguuk25.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbvguuk25.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmputs_wg88.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmputs_wg88.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoatmxwot.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpoatmxwot.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ >= bc and ab >= ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1r8w_6ya.lua:11:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp1r8w_6ya.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpor8l0fc4.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpor8l0fc4.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_bc\
    \ = ab * bc\n  local bc_ac = bc * ac\n  local bc_ab = bc * ab\n  local det = ab_sq\
    \ + bc_sq - ac_sq\n  local is_right_angle = (ab_ac - bc_ab + ac_sq + ab_bc) >\
    \ 0\n  return det > 0 and is_right_angle\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_jpis2f.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf_jpis2f.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ == bc and ac == bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph349pvz9.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph349pvz9.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3f8wnh2s.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3f8wnh2s.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaku0nkq1.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpaku0nkq1.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\t\
    end\n\t\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c\
    \ then\n\t\treturn false\n\tend\n\t\n\t-- Check that the sides are equal\n\tif\
    \ a + b > c and a + c > b and b + c > a then\n\t\treturn true\n\tend\n\t\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4c8hjdrk.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4c8hjdrk.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7t__uvxv.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal\
    \ ac_ac = ac * ac\n\tlocal ab_ac_bc = ab_ac + bc_bc\n\tlocal ab_ac_bc_ab = ab_ac\
    \ + bc_ab + ab_ab\n\tlocal ab_ac_bc_ab_sqr = ab_ac_bc_ab * ab_ac_bc_ab\n\tlocal\
    \ bc_ab_ac_bc_ab_sqr = bc_ab_ac_bc_ab * bc_ab_ac_bc_ab\n\tlocal bc_ab_ac_bc_ab_sqrt\
    \ = math.sqrt(bc_ab_ac_bc_ab_sqr)\n\tlocal bc_ab_ac_bc_ab_sqrt_sqr = bc_ab_ac_bc_ab_sqr\
    \ * bc_ab_ac_bc_ab_sqr\n\tlocal bc_ab_ac_bc_ab_sqrt_sqrt = math.sqrt(bc_ab_ac_bc_ab_sqrt_sqr)\n\
    \tlocal bc_ab_ac_bc_ab_sqrt_sqrt_sqr = bc_ab_ac_bc_ab_sqrt_sqr * bc_ab_ac_bc_ab_sqrt_sqr\n\
    \tlocal bc_ab_ac_bc_ab_sqrt_sqrt_sqrt = math.sqrt(bc_ab_ac_bc_ab_sqrt_sqrt_sqr)\n\
    \tlocal bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqr = bc_ab_ac_bc_ab_sqrt_sqrt_sqr * bc_ab_ac_bc_ab_sqrt_sqrt_sqr\n\
    \tlocal bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqrt = math.sqrt(bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqr)\n\
    \tlocal bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqrt_sqr = bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqr\
    \ * bc_ab_ac_bc_ab_sqrt_sqrt_sqrt_sqr\n\tlocal bc_ab_ac\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpnim8qh_i.lua:50: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnlg8rq5p.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnlg8rq5p.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ab == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxw2dk8w5.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxw2dk8w5.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq + bc_sq - cb_sq\n\
    \t\n\tif det < 0 then\n\t\treturn false\n\telseif det == 0 then\n\t\treturn true\n\
    \telse\n\t\tlocal inv_det = 1 / det\n\t\tlocal inv_ab = inv_det * ab\n\t\tlocal\
    \ inv_bc = inv_det * bc\n\t\tlocal inv_cb = inv_det * cb\n\t\t\n\t\treturn (inv_ab\
    \ * inv_bc > 0 and inv_ab * inv_cb < 0 and inv_bc * inv_cb < 0)\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf1ppl74z.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpf1ppl74z.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab*bc*ac >= 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprlrmnnbk.lua:19:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmprlrmnnbk.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_ab\
    \ = ab * ab\n  local bc_bc = bc * bc \n  local bc_ab = bc * ab\n  local ac_bc\
    \ = ac * bc\n  local ac_bc = ac * bc\n  local ab_ac_bc = ab_ac * bc\n  local ab_ac_bc_sq\
    \ = ab_ac_bc * ab_ac_bc\n  local bc_ab_sq = bc_ab * bc_ab\n  local bc_ab_ac =\
    \ bc_ab * ac\n  local bc_ab_ab = bc_ab * ab\n  local bc_bc_sq = bc_bc * bc_bc\n\
    \  local bc_bc_ab = bc_bc * ab\n  local bc_bc_bc = bc_bc * bc\n  local bc_bc_ac\
    \ = bc_bc * ac\n  local bc_bc_ab_sq = bc_bc_ab * bc_bc_ab\n  local bc_bc_bc_sq\
    \ = bc_bc_bc * bc_bc_bc\n  local bc_bc_bc_ac = bc_bc_bc * ac\n  local bc_bc_bc_ab_sq\
    \ = bc_bc_bc_ab * bc_bc_bc_ab\n  local bc_bc_bc_bc_sq = bc_bc_bc_bc * bc_bc_bc_bc\n\
    \  local bc_bc_bc_bc_ac = bc_bc_bc_bc * ac\n  local bc_bc_bc_bc_ab_sq = bc_bc_bc_bc_ab\
    \ * bc_bc_bc_bc_ab\n  local bc_bc_bc_bc_bc_sq = bc_bc_bc_bc_bc * bc_bc_bc_bc_bc\n\
    \  local bc_bc_bc_bc_bc_ac = bc_bc_bc_bc_bc * ac\n  local bc_bc_bc_bc_bc_ab_sq\
    \ = bc_bc_bc_bc_bc_ab * bc_bc_bc_bc_bc_ab\n  local bc_bc_bc_bc_bc_bc_sq = bc_b\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp86ly97qk.lua:58: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn73l9_d8.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn73l9_d8.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmay4fy3s.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpmay4fy3s.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(a - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c -\
    \ a)\n    local abc = ab + bc\n    local abd = ab - bc\n    local bcd = bc - ab\n\
    \    local abdc = abd - bcd\n    return abdc >= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9l37l5b.lua:23:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps9l37l5b.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaienkr8l.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpaienkr8l.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\t\n\tif ab\
    \ > bc then\n\t\tif ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\tif bc > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfkychsk.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpyfkychsk.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9nvrhav.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmps9nvrhav.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    \n    return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzr_5ow7r.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzr_5ow7r.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a + b > c and a + c > b and b + c >\
    \ a then return true end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpum3igvwg.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpum3igvwg.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b-a)\n   local bc = math.abs(c-b)\n   local ac = math.abs(c-a)\n  \
    \ return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy4cqvlhu.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpy4cqvlhu.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd0it2y_m.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd0it2y_m.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal cd = math.abs(c-a)\n\tlocal abc = ab + bc\
    \ + cd\n\tlocal abd = ab + cd - bc\n\tlocal bcd = bc + cd - ab\n\treturn abc >\
    \ abd and abc > bcd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp688hizkh.lua:22:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp688hizkh.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaq6ddqqn.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpaq6ddqqn.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpzz75qt2h.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphxukm5qk.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnmotyma.lua:19:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphnmotyma.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldf6j42m.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpldf6j42m.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  return\
    \ ab_sqr + bc_sqr + ac_sqr - ab_ac >= 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgs4xajjw.lua:23:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgs4xajjw.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp904cxrhl.lua:30: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\tlocal abc\
    \ = math.abs(bc - ac)\n\treturn (abc <= ab)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4d4lyq9.lua:20:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpf4d4lyq9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxl7alau3.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxl7alau3.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == b or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c then\n    return true\n  end\n  --\
    \ Check that the sides are equal\n  if a == b or a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == b or a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ a == c then\n    return true\n  end\n  -- Check that the sides are equal\n \
    \ if b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c then\n    return true\n  end\n  --\
    \ Check that the sides are equal\n  if a == b or a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpug8hh9q1.lua:126: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqrtqmind.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqrtqmind.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5s3g30ua.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5s3g30ua.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprsp8kj4m.lua:18:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprsp8kj4m.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3a4ox2rq.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3a4ox2rq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a < 0 or b < 0 or c < 0 then return false end\n\
    \t-- Check that the sides are equal\n\tif a == b and a == c then return true end\n\
    \t-- Check that the sides are equal\n\tif a == c then return true end\n\t-- Check\
    \ that the sides are equal\n\tif b == c then return true end\n\t-- Check that\
    \ the sides are equal\n\tif a == b and b == c then return true end\n\t-- Check\
    \ that the sides are equal\n\tif a == b and c == b then return true end\n\t--\
    \ Check that the sides are equal\n\tif a == c or b == c or c == a then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == b and b == c then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == b and c == b then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == c or b == c or c ==\
    \ a then return true end\n\t-- Check that the sides are equal\n\tif a == b and\
    \ b == c then return true end\n\t-- Check that the sides are equal\n\tif a ==\
    \ b and c == b then return true end\n\t-- Check that the sides are equal\n\tif\
    \ a == c or b == c or c == a then return true end\n\t-- Check that the sides are\
    \ equal\n\tif a == b and b == c then return true end\n\t-- Check that the sides\
    \ are equal\n\tif a == b and c == b then return true end\n\t-- Check that the\
    \ sides are equal\n\tif a == c or b == c or c == a then return true end\n\t--\
    \ Check that the sides are equal\n\tif a == b and b == c then return true end\n\
    \t-- Check that the sides are equal\n\tif a == b and c == b then return true end\n\
    \t-- Check that the sides are equal\n\tif a == c or b == c or c == a then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == b and b == c then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == b and c == b then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == c or b == c or c ==\
    \ a then return true end\n\t-- Check that the sides are equal\n\tif a == b and\
    \ b == c then return true end\n\t-- Check that the sides are equal\n\tif a ==\
    \ b and c == b then return true end\n\t-- Check that the sides are equal\n\tif\
    \ a == c or b == c or c == a then return true end\n\t-- \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpde93sanl.lua:77: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\tlocal abc\
    \ = math.abs(ab + bc + ac)\n\t\n\tif abc > ab then return true else return false\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbch457gd.lua:21:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbch457gd.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(a-b)\n   local bc = math.abs(b-c)\n   local ca = math.abs(c-a)\n  \
    \ if ab > bc then\n      return ab > ca\n   else\n      return bc > ca\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfl10l5pr.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpfl10l5pr.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
