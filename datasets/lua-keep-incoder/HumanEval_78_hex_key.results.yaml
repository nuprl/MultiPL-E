name: HumanEval_78_hex_key
language: lua
results:
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hex = {}\n\tlocal hex_count = {}\n\tlocal hex_index\
    \ = {}\n\tlocal hex_digit = {}\n\tlocal hex_digit_count = {}\n\tlocal hex_digit_index\
    \ = {}\n\tlocal hex_digit_sum = {}\n\tlocal hex_digit_sum_index = {}\n\tlocal\
    \ hex_digit_sum_index2 = {}\n\tlocal hex_digit_sum_index3 = {}\n\tlocal hex_digit_sum_index4\
    \ = {}\n\tlocal hex_digit_sum_index5 = {}\n\tlocal hex_digit_sum_index6 = {}\n\
    \tlocal hex_digit_sum_index7 = {}\n\tlocal hex_digit_sum_index8 = {}\n\tlocal\
    \ hex_digit_sum_index9 = {}\n\tlocal hex_digit_sum_index10 = {}\n\tlocal hex_digit_sum_index11\
    \ = {}\n\tlocal hex_digit_sum_index12 = {}\n\tlocal hex_digit_sum_index13 = {}\n\
    \tlocal hex_digit_sum_index14 = {}\n\tlocal hex_digit_sum_index15 = {}\n\tlocal\
    \ hex_digit_sum_index16 = {}\n\tlocal hex_digit_sum_index17 = {}\n\tlocal hex_digit_sum_index18\
    \ = {}\n\tlocal hex_digit_sum_index19 = {}\n\tlocal hex_digit_sum_index20 = {}\n\
    \tlocal hex_digit_sum_index21 = {}\n\tlocal hex_digit_sum_index22 = {}\n\tlocal\
    \ hex_digit_sum_index23 = {}\n\tlocal hex_digit_sum_index24 = {}\n\tlocal hex_digit_sum_index25\
    \ = {}\n\tlocal hex_digit_sum_index26 = {}\n\tlocal hex_digit_sum_index27 = {}\n\
    \tlocal hex_digit_sum_index28 = {}\n\tlocal hex_digit_sum_index29 = {}\n\tlocal\
    \ hex_digit_sum_index30 = {}\n\tlocal hex_digit_sum_index31 = {}\n\tlocal hex_digit_sum_index32\
    \ = {}\n\tlocal hex_digit_sum_index33 = {}\n\tlocal hex_digit_sum_index34 = {}\n\
    \tlocal hex_digit_sum_index35 = {}\n\tlocal hex_digit_sum_index36 = {}\n\tlocal\
    \ hex_digit_sum_index37 = {}\n\tlocal hex_digit_sum_index38 = {}\n\tlocal hex_digit_sum_index39\
    \ = {}\n\tlocal hex_digit_sum_index40 = {}\n\tlocal hex_digit_sum_index41 = {}\n\
    \tlocal hex_digit_sum_index42 = {}\n\tlocal hex_digit_sum_index43 = {}\n\tlocal\
    \ hex_digit_sum_index44 = {}\n\tlocal hex_digit_sum_index45 = {}\n\tlocal hex_digit_sum_index46\
    \ = {}\n\tlocal hex_digit_sum_index47 = {}\n\tlocal hex_digit_sum_index48 = {}\n\
    \tlocal hex_digit_sum_index49 = {}\n\tlocal hex_digit_sum_index50 = {}\n\tlocal\
    \ hex_digit_sum_index5\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkdx0uqo_.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local primes_count_max = 2\n\
    \  local primes_count_min = 2\n  local primes_count_max = math.floor(math.sqrt(math.pow(10,\
    \ math.floor(math.log(num, 16))))) + 1\n  for i = primes_count_min .. primes_count_max\
    \ do\n    local prime = true\n    for j = 1, i do\n      if num:sub(i, i + 1)\
    \ ~= num:sub(i, i + 1) then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      primes[#primes + 1] = true\n      primes_count\
    \ = primes_count + 1\n    end\n  end\n  if primes_count > 1 then\n    primes[#primes\
    \ + 1] = false\n  end\n  local primes_count = primes_count\n  local primes_count_max\
    \ = primes_count_max\n  local primes_count_min = primes_count_min\n  local primes_count_max\
    \ = math.floor(math.sqrt(math.pow(10, math.floor(math.log(num, 16))))) + 1\n \
    \ for i = primes_count_min .. primes_count_max do\n    local prime = true\n  \
    \  for j = 1, i do\n      if num:sub(i, i + 1) ~= num:sub(i, i + 1) then\n   \
    \     prime = false\n        break\n      end\n    end\n    if prime then\n  \
    \    primes[#primes + 1] = true\n      primes_count = primes_count + 1\n    end\n\
    \  end\n  if primes_count > 1 then\n    primes[#primes + 1] = false\n  end\n \
    \ local primes_count = primes_count\n  local primes_count_max = primes_count_max\n\
    \  local primes_count_min = primes_count_min\n  local primes_count_max = math.floor(math.sqrt(math.pow(10,\
    \ math.floor(math.log(num, 16))))) + 1\n  for i = primes_count_min .. primes_count_max\
    \ do\n    local prime = true\n    for j = 1, i do\n      if num:sub(i, i + 1)\
    \ ~= num:sub(i, i + 1) then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      primes[#primes + 1] = true\n      primes_count\
    \ = primes_count + 1\n    end\n  end\n  if primes_count > 1 then\n    primes[#primes\
    \ + 1] = false\n  end\n  local primes_count = primes_count\n  local primes_count_max\
    \ = primes_count_max\n  local primes_count_min = primes_count_min\n  local primes_count_max\
    \ = math.floor(math.sqrt(math.pow(10, math.floor(math.log(num, 16))))) + 1\n \
    \ for i = primes_count_min .. primes_count_max do\n    local prime = true\n  \
    \  for j = 1, i do\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj486v26z.lua:23: ',' expected near 'do'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local hexadecimal = {}\n    local prime = {}\n    local\
    \ prime_hex = {}\n    local prime_hexadecimal = {}\n    local prime_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal = {}\n    local prime_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\
    \    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n  \
    \  local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\
    \    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmh6_9jfn.lua:55: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local digits = string.gmatch(num,\
    \ \"%x\")\n  local digits_count = #digits\n  local primes_count = #primes\n  local\
    \ primes_count = primes_count + 1\n  local primes_count = primes_count + 1\n \
    \ local primes_count = primes_count + 1\n  local primes_count = primes_count +\
    \ 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  local primes_count = primes_count\
    \ + 1\n  local primes_count = primes_count + 1\n  \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqgx_xvnz.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 2\n\t\
    local primes_count_min = 2\n\tlocal primes_count_max = math.floor(math.sqrt(math.pow(2,math.floor(math.log(math.pow(2,num),2)))))\n\
    \tlocal primes_count_min = math.floor(math.sqrt(math.pow(2,math.floor(math.log(math.pow(2,num),2)))))\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_max\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_min\n\tlocal primes_count_min = primes_count_min - primes_count_max\n\
    \tlocal primes_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rwlgvt5.lua:65: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal num_digits = #num\n\tlocal num_primes = 0\n\tlocal\
    \ num_hexadecimals = 0\n\tlocal num_primes_hexadecimals = 0\n\tlocal num_primes_hexadecimals_2\
    \ = 0\n\tlocal num_primes_hexadecimals_3 = 0\n\tlocal num_primes_hexadecimals_4\
    \ = 0\n\tlocal num_primes_hexadecimals_5 = 0\n\tlocal num_primes_hexadecimals_6\
    \ = 0\n\tlocal num_primes_hexadecimals_7 = 0\n\tlocal num_primes_hexadecimals_8\
    \ = 0\n\tlocal num_primes_hexadecimals_9 = 0\n\tlocal num_primes_hexadecimals_10\
    \ = 0\n\tlocal num_primes_hexadecimals_11 = 0\n\tlocal num_primes_hexadecimals_12\
    \ = 0\n\tlocal num_primes_hexadecimals_13 = 0\n\tlocal num_primes_hexadecimals_14\
    \ = 0\n\tlocal num_primes_hexadecimals_15 = 0\n\tlocal num_primes_hexadecimals_16\
    \ = 0\n\tlocal num_primes_hexadecimals_17 = 0\n\tlocal num_primes_hexadecimals_18\
    \ = 0\n\tlocal num_primes_hexadecimals_19 = 0\n\tlocal num_primes_hexadecimals_20\
    \ = 0\n\tlocal num_primes_hexadecimals_21 = 0\n\tlocal num_primes_hexadecimals_22\
    \ = 0\n\tlocal num_primes_hexadecimals_23 = 0\n\tlocal num_primes_hexadecimals_24\
    \ = 0\n\tlocal num_primes_hexadecimals_25 = 0\n\tlocal num_primes_hexadecimals_26\
    \ = 0\n\tlocal num_primes_hexadecimals_27 = 0\n\tlocal num_primes_hexadecimals_28\
    \ = 0\n\tlocal num_primes_hexadecimals_29 = 0\n\tlocal num_primes_hexadecimals_30\
    \ = 0\n\tlocal num_primes_hexadecimals_31 = 0\n\tlocal num_primes_hexadecimals_32\
    \ = 0\n\tlocal num_primes_hexadecimals_33 = 0\n\tlocal num_primes_hexadecimals_34\
    \ = 0\n\tlocal num_primes_hexadecimals_35 = 0\n\tlocal num_primes_hexadecimals_36\
    \ = 0\n\tlocal num_primes_hexadecimals_37 = 0\n\tlocal num_primes_hexadecimals_38\
    \ = 0\n\tlocal num_primes_hexadecimals_39 = 0\n\tlocal num_primes_hexadecimals_40\
    \ = 0\n\tlocal num_primes_hex\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfv8j9qjt.lua:75: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local prime_number = 0\n\
    \    local prime_number_count = 0\n    local digit\n    local digit_count\n  \
    \  local digit_count2\n    local digit_count3\n    local digit_count4\n    local\
    \ digit_count5\n    local digit_count6\n    local digit_count7\n    local digit_count8\n\
    \    local digit_count9\n    local digit_count10\n    local digit_count11\n  \
    \  local digit_count12\n    local digit_count13\n    local digit_count14\n   \
    \ local digit_count15\n    local digit_count16\n    local digit_count17\n    local\
    \ digit_count18\n    local digit_count19\n    local digit_count20\n    local digit_count21\n\
    \    local digit_count22\n    local digit_count23\n    local digit_count24\n \
    \   local digit_count25\n    local digit_count26\n    local digit_count27\n  \
    \  local digit_count28\n    local digit_count29\n    local digit_count30\n   \
    \ local digit_count31\n    local digit_count32\n    local digit_count33\n    local\
    \ digit_count34\n    local digit_count35\n    local digit_count36\n    local digit_count37\n\
    \    local digit_count38\n    local digit_count39\n    local digit_count40\n \
    \   local digit_count41\n    local digit_count42\n    local digit_count43\n  \
    \  local digit_count44\n    local digit_count45\n    local digit_count46\n   \
    \ local digit_count47\n    local digit_count48\n    local digit_count49\n    local\
    \ digit_count50\n    local digit_count51\n    local digit_count52\n    local digit_count53\n\
    \    local digit_count54\n    local digit_count55\n    local digit_count56\n \
    \   local digit_count57\n    local digit_count58\n    local digit_count59\n  \
    \  local digit_count60\n    local digit_count61\n    local digit_count62\n   \
    \ local digit_count63\n    local digit_count64\n    local digit_count65\n    local\
    \ digit_count66\n    local digit_count67\n    local digit_count68\n    local digit_count69\n\
    \    local digit_count70\n    local digit_count71\n    local digit_count72\n \
    \   local digit_count73\n    local digit_count74\n    local digit_count75\n  \
    \  local digit_count76\n    local digit_count77\n    local digit_count78\n   \
    \ local digit_count79\n    local digit_count80\n    local digit_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8j63mo9a.lua:116: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    for i = 1, #num do\n        local c = string.byte(num,\
    \ i)\n        if c >= 48 and c <= 57 then\n            table.insert(hex, c - 48)\n\
    \        elseif c >= 65 and c <= 70 then\n            table.insert(hex, c - 65\
    \ + 10)\n        elseif c >= 97 and c <= 102 then\n            table.insert(hex,\
    \ c - 97 + 10)\n        else\n            error(\"invalid hex digit\")\n     \
    \   end\n    end\n    return hex\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoeylup_.lua:37:\
    \ expected: 1, actual: {10, 11}\nstack traceback:\n\t/tmp/tmphoeylup_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {}\n  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count\
    \ = 0\n  local prime_digit_count_max = 0\n  local prime_digit_count_min = 0\n\
    \  local prime_digit_count_sum = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  local prime_digit_count_sum_max = 0\n  local\
    \ prime_digit_count_sum_min = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsgihnqm0.lua:84: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_temp = {}\n\tlocal prime_digit_count_temp2 = {}\n\t\
    local prime_digit_count_temp3 = {}\n\tlocal prime_digit_count_temp4 = {}\n\tlocal\
    \ prime_digit_count_temp5 = {}\n\tlocal prime_digit_count_temp6 = {}\n\tlocal\
    \ prime_digit_count_temp7 = {}\n\tlocal prime_digit_count_temp8 = {}\n\tlocal\
    \ prime_digit_count_temp9 = {}\n\tlocal prime_digit_count_temp10 = {}\n\tlocal\
    \ prime_digit_count_temp11 = {}\n\tlocal prime_digit_count_temp12 = {}\n\tlocal\
    \ prime_digit_count_temp13 = {}\n\tlocal prime_digit_count_temp14 = {}\n\tlocal\
    \ prime_digit_count_temp15 = {}\n\tlocal prime_digit_count_temp16 = {}\n\tlocal\
    \ prime_digit_count_temp17 = {}\n\tlocal prime_digit_count_temp18 = {}\n\tlocal\
    \ prime_digit_count_temp19 = {}\n\tlocal prime_digit_count_temp20 = {}\n\tlocal\
    \ prime_digit_count_temp21 = {}\n\tlocal prime_digit_count_temp22 = {}\n\tlocal\
    \ prime_digit_count_temp23 = {}\n\tlocal prime_digit_count_temp24 = {}\n\tlocal\
    \ prime_digit_count_temp25 = {}\n\tlocal prime_digit_count_temp26 = {}\n\tlocal\
    \ prime_digit_count_temp27 = {}\n\tlocal prime_digit_count_temp28 = {}\n\tlocal\
    \ prime_digit_count_temp29 = {}\n\tlocal prime_digit_count_temp30 = {}\n\tlocal\
    \ prime_digit_count_temp31 = {}\n\tlocal prime_digit_count_temp32 = {}\n\tlocal\
    \ prime_digit_count_temp33 = {}\n\tlocal prime_digit_count_temp34 = {}\n\tlocal\
    \ prime_digit_count_temp35 = {}\n\tlocal prime_digit_count_temp36 = {}\n\tlocal\
    \ prime_digit_count_temp37 = {}\n\tlocal prime_digit_count_temp38 = {}\n\tlocal\
    \ prime_digit_count_temp39 = {}\n\tlocal prime_digit_count_temp40 = {}\n\tlocal\
    \ prime_digit_count_temp41 = {}\n\tlocal prime_digit_count_temp42 = {}\n\tlocal\
    \ prime_digit_count_temp43 = {}\n\tlocal prime_digit_count_temp44 = {}\n\tlocal\
    \ prime_digit_count_temp45 = {}\n\tlocal prime_digit_count_temp46 = {}\n\tlocal\
    \ prime_digit_count_temp47 = {}\n\tlocal prime_digit_count_temp48 = {}\n\tlocal\
    \ prime_digit_count_temp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_3u2l3c.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp635re2t2.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local primes_count_2 = 0\n \
    \ local primes_count_3 = 0\n  local primes_count_4 = 0\n  local primes_count_5\
    \ = 0\n  local primes_count_6 = 0\n  local primes_count_7 = 0\n  local primes_count_8\
    \ = 0\n  local primes_count_9 = 0\n  local primes_count_10 = 0\n  local primes_count_11\
    \ = 0\n  local primes_count_12 = 0\n  local primes_count_13 = 0\n  local primes_count_14\
    \ = 0\n  local primes_count_15 = 0\n  local primes_count_16 = 0\n  local primes_count_17\
    \ = 0\n  local primes_count_18 = 0\n  local primes_count_19 = 0\n  local primes_count_20\
    \ = 0\n  local primes_count_21 = 0\n  local primes_count_22 = 0\n  local primes_count_23\
    \ = 0\n  local primes_count_24 = 0\n  local primes_count_25 = 0\n  local primes_count_26\
    \ = 0\n  local primes_count_27 = 0\n  local primes_count_28 = 0\n  local primes_count_29\
    \ = 0\n  local primes_count_30 = 0\n  local primes_count_31 = 0\n  local primes_count_32\
    \ = 0\n  local primes_count_33 = 0\n  local primes_count_34 = 0\n  local primes_count_35\
    \ = 0\n  local primes_count_36 = 0\n  local primes_count_37 = 0\n  local primes_count_38\
    \ = 0\n  local primes_count_39 = 0\n  local primes_count_40 = 0\n  local primes_count_41\
    \ = 0\n  local primes_count_42 = 0\n  local primes_count_43 = 0\n  local primes_count_44\
    \ = 0\n  local primes_count_45 = 0\n  local primes_count_46 = 0\n  local primes_count_47\
    \ = 0\n  local primes_count_48 = 0\n  local primes_count_49 = 0\n  local primes_count_50\
    \ = 0\n  local primes_count_51 = 0\n  local primes_count_52 = 0\n  local primes_count_53\
    \ = 0\n  local primes_count_54 = 0\n  local primes_count_55 = 0\n  local primes_count_56\
    \ = 0\n  local primes_count_57 = 0\n  local primes_count_58 = 0\n  local primes_count_59\
    \ = 0\n  local primes_count_60 = 0\n  local primes_count_61 = 0\n  local primes_count_62\
    \ = 0\n  local primes_count_63 = 0\n  local primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvsfmnp6z.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hexadecimal = {}\n  local primes = {}\n  local prime_digits = {}\n  local\
    \ prime_digit_count = 0\n  local prime_digit_count_max = 0\n  local prime_digit_count_min\
    \ = 0\n  local prime_digit_count_sum = 0\n  local prime_digit_count_sum2 = 0\n\
    \  local prime_digit_count_sum3 = 0\n  local prime_digit_count_sum4 = 0\n  local\
    \ prime_digit_count_sum5 = 0\n  local prime_digit_count_sum6 = 0\n  local prime_digit_count_sum7\
    \ = 0\n  local prime_digit_count_sum8 = 0\n  local prime_digit_count_sum9 = 0\n\
    \  local prime_digit_count_sum10 = 0\n  local prime_digit_count_sum11 = 0\n  local\
    \ prime_digit_count_sum12 = 0\n  local prime_digit_count_sum13 = 0\n  local prime_digit_count_sum14\
    \ = 0\n  local prime_digit_count_sum15 = 0\n  local prime_digit_count_sum16 =\
    \ 0\n  local prime_digit_count_sum17 = 0\n  local prime_digit_count_sum18 = 0\n\
    \  local prime_digit_count_sum19 = 0\n  local prime_digit_count_sum20 = 0\n  local\
    \ prime_digit_count_sum21 = 0\n  local prime_digit_count_sum22 = 0\n  local prime_digit_count_sum23\
    \ = 0\n  local prime_digit_count_sum24 = 0\n  local prime_digit_count_sum25 =\
    \ 0\n  local prime_digit_count_sum26 = 0\n  local prime_digit_count_sum27 = 0\n\
    \  local prime_digit_count_sum28 = 0\n  local prime_digit_count_sum29 = 0\n  local\
    \ prime_digit_count_sum30 = 0\n  local prime_digit_count_sum31 = 0\n  local prime_digit_count_sum32\
    \ = 0\n  local prime_digit_count_sum33 = 0\n  local prime_digit_count_sum34 =\
    \ 0\n  local prime_digit_count_sum35 = 0\n  local prime_digit_count_sum36 = 0\n\
    \  local prime_digit_count_sum37 = 0\n  local prime_digit_count_sum38 = 0\n  local\
    \ prime_digit_count_sum39 = 0\n  local prime_digit_count_sum40 = 0\n  local prime_digit_count_sum41\
    \ = 0\n  local prime_digit_count_sum42 = 0\n  local prime_digit_count_sum43 =\
    \ 0\n  local prime_digit_count_sum44 = 0\n  local prime_digit_count_sum45 = 0\n\
    \  local prime_digit_count_sum46 = 0\n  local prime_digit_count_sum47 = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprf28lzww.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_sum = 0\n\
    \    local digit\n    local hexadecimal\n    local hexadecimal_digit\n    local\
    \ hexadecimal_digit_count\n    local hexadecimal_digit_sum\n    local hexadecimal_digit_sum2\n\
    \    local hexadecimal_digit_sum3\n    local hexadecimal_digit_sum4\n    local\
    \ hexadecimal_digit_sum5\n    local hexadecimal_digit_sum6\n    local hexadecimal_digit_sum7\n\
    \    local hexadecimal_digit_sum8\n    local hexadecimal_digit_sum9\n    local\
    \ hexadecimal_digit_sum10\n    local hexadecimal_digit_sum11\n    local hexadecimal_digit_sum12\n\
    \    local hexadecimal_digit_sum13\n    local hexadecimal_digit_sum14\n    local\
    \ hexadecimal_digit_sum15\n    local hexadecimal_digit_sum16\n    local hexadecimal_digit_sum17\n\
    \    local hexadecimal_digit_sum18\n    local hexadecimal_digit_sum19\n    local\
    \ hexadecimal_digit_sum20\n    local hexadecimal_digit_sum21\n    local hexadecimal_digit_sum22\n\
    \    local hexadecimal_digit_sum23\n    local hexadecimal_digit_sum24\n    local\
    \ hexadecimal_digit_sum25\n    local hexadecimal_digit_sum26\n    local hexadecimal_digit_sum27\n\
    \    local hexadecimal_digit_sum28\n    local hexadecimal_digit_sum29\n    local\
    \ hexadecimal_digit_sum30\n    local hexadecimal_digit_sum31\n    local hexadecimal_digit_sum32\n\
    \    local hexadecimal_digit_sum33\n    local hexadecimal_digit_sum34\n    local\
    \ hexadecimal_digit_sum35\n    local hexadecimal_digit_sum36\n    local hexadecimal_digit_sum37\n\
    \    local hexadecimal_digit_sum38\n    local hexadecimal_digit_sum39\n    local\
    \ hexadecimal_digit_sum40\n    local hexadecimal_digit_sum41\n    local hexadecimal_digit_sum42\n\
    \    local hexadecimal_digit_sum43\n    local hexadecimal_digit_sum44\n    local\
    \ hexadecimal_digit_sum45\n    local hexadecimal_digit_sum46\n    local hexadecimal_digit_sum47\n\
    \    local hexadecimal_digit_sum48\n    local hexadecimal_digit_sum49\n    local\
    \ hexadecimal_digit_sum50\n    local hexadecimal_digit_sum51\n    local hexadecimal_digit_sum52\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6n40yozg.lua:90: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = 0\n\
    \tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal\
    \ prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdzchq845.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxw5xkxh.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = {}\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdaq0b0ou.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_sum = 0\n\tlocal\
    \ primes_sum2 = 0\n\tlocal primes_sum3 = 0\n\tlocal primes_sum4 = 0\n\tlocal primes_sum5\
    \ = 0\n\tlocal primes_sum6 = 0\n\tlocal primes_sum7 = 0\n\tlocal primes_sum8 =\
    \ 0\n\tlocal primes_sum9 = 0\n\tlocal primes_sum10 = 0\n\tlocal primes_sum11 =\
    \ 0\n\tlocal primes_sum12 = 0\n\tlocal primes_sum13 = 0\n\tlocal primes_sum14\
    \ = 0\n\tlocal primes_sum15 = 0\n\tlocal primes_sum16 = 0\n\tlocal primes_sum17\
    \ = 0\n\tlocal primes_sum18 = 0\n\tlocal primes_sum19 = 0\n\tlocal primes_sum20\
    \ = 0\n\tlocal primes_sum21 = 0\n\tlocal primes_sum22 = 0\n\tlocal primes_sum23\
    \ = 0\n\tlocal primes_sum24 = 0\n\tlocal primes_sum25 = 0\n\tlocal primes_sum26\
    \ = 0\n\tlocal primes_sum27 = 0\n\tlocal primes_sum28 = 0\n\tlocal primes_sum29\
    \ = 0\n\tlocal primes_sum30 = 0\n\tlocal primes_sum31 = 0\n\tlocal primes_sum32\
    \ = 0\n\tlocal primes_sum33 = 0\n\tlocal primes_sum34 = 0\n\tlocal primes_sum35\
    \ = 0\n\tlocal primes_sum36 = 0\n\tlocal primes_sum37 = 0\n\tlocal primes_sum38\
    \ = 0\n\tlocal primes_sum39 = 0\n\tlocal primes_sum40 = 0\n\tlocal primes_sum41\
    \ = 0\n\tlocal primes_sum42 = 0\n\tlocal primes_sum43 = 0\n\tlocal primes_sum44\
    \ = 0\n\tlocal primes_sum45 = 0\n\tlocal primes_sum46 = 0\n\tlocal primes_sum47\
    \ = 0\n\tlocal primes_sum48 = 0\n\tlocal primes_sum49 = 0\n\tlocal primes_sum50\
    \ = 0\n\tlocal primes_sum51 = 0\n\tlocal primes_sum52 = 0\n\tlocal primes_sum53\
    \ = 0\n\tlocal primes_sum54 = 0\n\tlocal primes_sum55 = 0\n\tlocal primes_sum56\
    \ = 0\n\tlocal primes_sum57 = 0\n\tlocal primes_sum58 = 0\n\tlocal primes_sum59\
    \ = 0\n\tlocal primes_sum60 = 0\n\tlocal primes_sum61 = 0\n\tlocal primes_sum62\
    \ = 0\n\tlocal primes_sum63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpox46z8r2.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal hexadecimal = string.gsub(num, \"[0-9A-F]\", \"\")\n\tlocal hexadecimal_length\
    \ = #hexadecimal\n\tlocal hexadecimal_digits = {}\n\tlocal hexadecimal_digits_count\
    \ = 0\n\tlocal hexadecimal_digits_sum = 0\n\tlocal hexadecimal_digits_sum_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime = 0\n\tlocal hexadecimal_digits_sum_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime = 0\n\tlocal\
    \ hexadecimal_digits_sum_not_prime_not_prime_not_prime_prime = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0\n\tlocal hexadecimal_digits_sum_not_prime_not_prime_not_prime_not_prime_not_prime_not_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm49rt74q.lua:58: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local prime_digits = {}\n  local prime_digits_count = 0\n  local prime_digits_count_2\
    \ = 0\n  local prime_digits_count_3 = 0\n  local prime_digits_count_4 = 0\n  local\
    \ prime_digits_count_5 = 0\n  local prime_digits_count_6 = 0\n  local prime_digits_count_7\
    \ = 0\n  local prime_digits_count_8 = 0\n  local prime_digits_count_9 = 0\n  local\
    \ prime_digits_count_10 = 0\n  local prime_digits_count_11 = 0\n  local prime_digits_count_12\
    \ = 0\n  local prime_digits_count_13 = 0\n  local prime_digits_count_14 = 0\n\
    \  local prime_digits_count_15 = 0\n  local prime_digits_count_16 = 0\n  local\
    \ prime_digits_count_17 = 0\n  local prime_digits_count_18 = 0\n  local prime_digits_count_19\
    \ = 0\n  local prime_digits_count_20 = 0\n  local prime_digits_count_21 = 0\n\
    \  local prime_digits_count_22 = 0\n  local prime_digits_count_23 = 0\n  local\
    \ prime_digits_count_24 = 0\n  local prime_digits_count_25 = 0\n  local prime_digits_count_26\
    \ = 0\n  local prime_digits_count_27 = 0\n  local prime_digits_count_28 = 0\n\
    \  local prime_digits_count_29 = 0\n  local prime_digits_count_30 = 0\n  local\
    \ prime_digits_count_31 = 0\n  local prime_digits_count_32 = 0\n  local prime_digits_count_33\
    \ = 0\n  local prime_digits_count_34 = 0\n  local prime_digits_count_35 = 0\n\
    \  local prime_digits_count_36 = 0\n  local prime_digits_count_37 = 0\n  local\
    \ prime_digits_count_38 = 0\n  local prime_digits_count_39 = 0\n  local prime_digits_count_40\
    \ = 0\n  local prime_digits_count_41 = 0\n  local prime_digits_count_42 = 0\n\
    \  local prime_digits_count_43 = 0\n  local prime_digits_count_44 = 0\n  local\
    \ prime_digits_count_45 = 0\n  local prime_digits_count_46 = 0\n  local prime_digits_count_47\
    \ = 0\n  local prime_digits_count_48 = 0\n  local prime_digits_count_49 = 0\n\
    \  local prime_digits_count_50 = 0\n  local prime_digits_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx0vm6yn9.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    for i = 1, #num do\n        local digit = string.byte(num,\
    \ i)\n        if digit == nil then\n            error(\"Invalid hexadecimal number\"\
    )\n        end\n        hexadecimal[digit] = true\n    end\n    local primes =\
    \ {}\n    local prime_number = 2\n    local prime_digits = {}\n    local prime_digit_count\
    \ = 0\n    for digit = 2, #hexadecimal do\n        if hexadecimal[digit] then\n\
    \            prime_digits[digit] = true\n            if prime_digit_count == 0\
    \ then\n                prime_number = prime_number * digit\n            else\n\
    \                prime_digit_count = prime_digit_count - 1\n            end\n\
    \        end\n    end\n    for digit = 2, #prime_digits do\n        if prime_digits[digit]\
    \ then\n            primes[prime_number] = true\n            prime_number = prime_number\
    \ + 1\n        end\n    end\n    return #primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwugw_k7.lua:52:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzwugw_k7.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_count = 0\n  local prime_digits = {}\n  local\
    \ prime_digit_count = 0\n  local prime_digit_sum = 0\n  local prime_digit_sum2\
    \ = 0\n  local prime_digit_sum3 = 0\n  local prime_digit_sum4 = 0\n  local prime_digit_sum5\
    \ = 0\n  local prime_digit_sum6 = 0\n  local prime_digit_sum7 = 0\n  local prime_digit_sum8\
    \ = 0\n  local prime_digit_sum9 = 0\n  local prime_digit_sum10 = 0\n  local prime_digit_sum11\
    \ = 0\n  local prime_digit_sum12 = 0\n  local prime_digit_sum13 = 0\n  local prime_digit_sum14\
    \ = 0\n  local prime_digit_sum15 = 0\n  local prime_digit_sum16 = 0\n  local prime_digit_sum17\
    \ = 0\n  local prime_digit_sum18 = 0\n  local prime_digit_sum19 = 0\n  local prime_digit_sum20\
    \ = 0\n  local prime_digit_sum21 = 0\n  local prime_digit_sum22 = 0\n  local prime_digit_sum23\
    \ = 0\n  local prime_digit_sum24 = 0\n  local prime_digit_sum25 = 0\n  local prime_digit_sum26\
    \ = 0\n  local prime_digit_sum27 = 0\n  local prime_digit_sum28 = 0\n  local prime_digit_sum29\
    \ = 0\n  local prime_digit_sum30 = 0\n  local prime_digit_sum31 = 0\n  local prime_digit_sum32\
    \ = 0\n  local prime_digit_sum33 = 0\n  local prime_digit_sum34 = 0\n  local prime_digit_sum35\
    \ = 0\n  local prime_digit_sum36 = 0\n  local prime_digit_sum37 = 0\n  local prime_digit_sum38\
    \ = 0\n  local prime_digit_sum39 = 0\n  local prime_digit_sum40 = 0\n  local prime_digit_sum41\
    \ = 0\n  local prime_digit_sum42 = 0\n  local prime_digit_sum43 = 0\n  local prime_digit_sum44\
    \ = 0\n  local prime_digit_sum45 = 0\n  local prime_digit_sum46 = 0\n  local prime_digit_sum47\
    \ = 0\n  local prime_digit_sum48 = 0\n  local prime_digit_sum49 = 0\n  local prime_digit_sum50\
    \ = 0\n  local prime_digit_sum51 = 0\n  local prime_digit_sum52 = 0\n  local prime_digit_sum53\
    \ = 0\n  local prime_digit_sum54 = 0\n  local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq5wzsgoa.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_hex = {}\n\tlocal prime_hex2\
    \ = {}\n\tlocal prime_hex3 = {}\n\tlocal prime_hex4 = {}\n\tlocal prime_hex5 =\
    \ {}\n\tlocal prime_hex6 = {}\n\tlocal prime_hex7 = {}\n\tlocal prime_hex8 = {}\n\
    \tlocal prime_hex9 = {}\n\tlocal prime_hex10 = {}\n\tlocal prime_hex11 = {}\n\t\
    local prime_hex12 = {}\n\tlocal prime_hex13 = {}\n\tlocal prime_hex14 = {}\n\t\
    local prime_hex15 = {}\n\tlocal prime_hex16 = {}\n\tlocal prime_hex17 = {}\n\t\
    local prime_hex18 = {}\n\tlocal prime_hex19 = {}\n\tlocal prime_hex20 = {}\n\t\
    local prime_hex21 = {}\n\tlocal prime_hex22 = {}\n\tlocal prime_hex23 = {}\n\t\
    local prime_hex24 = {}\n\tlocal prime_hex25 = {}\n\tlocal prime_hex26 = {}\n\t\
    local prime_hex27 = {}\n\tlocal prime_hex28 = {}\n\tlocal prime_hex29 = {}\n\t\
    local prime_hex30 = {}\n\tlocal prime_hex31 = {}\n\tlocal prime_hex32 = {}\n\t\
    local prime_hex33 = {}\n\tlocal prime_hex34 = {}\n\tlocal prime_hex35 = {}\n\t\
    local prime_hex36 = {}\n\tlocal prime_hex37 = {}\n\tlocal prime_hex38 = {}\n\t\
    local prime_hex39 = {}\n\tlocal prime_hex40 = {}\n\tlocal prime_hex41 = {}\n\t\
    local prime_hex42 = {}\n\tlocal prime_hex43 = {}\n\tlocal prime_hex44 = {}\n\t\
    local prime_hex45 = {}\n\tlocal prime_hex46 = {}\n\tlocal prime_hex47 = {}\n\t\
    local prime_hex48 = {}\n\tlocal prime_hex49 = {}\n\tlocal prime_hex50 = {}\n\t\
    local prime_hex51 = {}\n\tlocal prime_hex52 = {}\n\tlocal prime_hex53 = {}\n\t\
    local prime_hex54 = {}\n\tlocal prime_hex55 = {}\n\tlocal prime_hex56 = {}\n\t\
    local prime_hex57 = {}\n\tlocal prime_hex58 = {}\n\tlocal prime_hex59 = {}\n\t\
    local prime_hex60 = {}\n\tlocal prime_hex61 = {}\n\tlocal prime_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzcygfy_6.lua:94: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tfor i = 1, #num do\n\t\tlocal c = string.byte(num,\
    \ i)\n\t\tif c >= 48 and c <= 57 then\n\t\t\thexadecimal[i] = c\n\t\telse\n\t\t\
    \thexadecimal[i] = string.byte(\"A\", i)\n\t\tend\n\tend\n\tlocal primes = {}\n\
    \tlocal prime = 1\n\tlocal prime_found = false\n\tfor i = 1, #hexadecimal do\n\
    \t\tlocal c = hexadecimal[i]\n\t\tif c >= 48 and c <= 57 then\n\t\t\tprime = prime\
    \ * 10 + c\n\t\telse\n\t\t\tprime = prime * 10 + string.byte(\"A\", i)\n\t\tend\n\
    \t\tif prime > 2 then\n\t\t\tprimes[#primes + 1] = prime\n\t\tend\n\tend\n\tlocal\
    \ primes_count = #primes\n\tlocal primes_count_2 = primes_count\n\tlocal primes_count_3\
    \ = primes_count * primes_count\n\tlocal primes_count_4 = primes_count_2 * primes_count\n\
    \tlocal primes_count_5 = primes_count_3 * primes_count\n\tlocal primes_count_6\
    \ = primes_count_4 * primes_count\n\tlocal primes_count_7 = primes_count_5 * primes_count\n\
    \tlocal primes_count_8 = primes_count_6 * primes_count\n\tlocal primes_count_9\
    \ = primes_count_7 * primes_count\n\tlocal primes_count_10 = primes_count_8 *\
    \ primes_count\n\tlocal primes_count_11 = primes_count_9 * primes_count\n\tlocal\
    \ primes_count_12 = primes_count_10 * primes_count\n\tlocal primes_count_13 =\
    \ primes_count_11 * primes_count\n\tlocal primes_count_14 = primes_count_12 *\
    \ primes_count\n\tlocal primes_count_15 = primes_count_13 * primes_count\n\tlocal\
    \ primes_count_16 = primes_count_14 * primes_count\n\tlocal primes_count_17 =\
    \ primes_count_15 * primes_count\n\tlocal primes_count_18 = primes_count_16 *\
    \ primes_count\n\tlocal primes_count_19 = primes_count_17 * primes_count\n\tlocal\
    \ primes_count_20 = primes_count_18 * primes_count\n\tlocal primes_count_21 =\
    \ primes_count_19 * primes_count\n\tlocal primes_count_22 = primes_count_20 *\
    \ primes_count\n\tlocal primes_count_23 = primes_count_21 * primes_count\n\tlocal\
    \ primes_count_24 = primes_count_22 * primes_count\n\tlocal primes_count_25 =\
    \ primes_count_23 * primes_count\n\tlocal primes_count_26 = primes_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxsienf8n.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprbwt5rpx.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal prime_number = 0\n\tlocal\
    \ prime_digit = 0\n\tlocal prime_digit_count = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_sum = 0\n\t\
    local prime_digit_count_sum2 = 0\n\tlocal prime_digit_count_sum3 = 0\n\tlocal\
    \ prime_digit_count_sum4 = 0\n\tlocal prime_digit_count_sum5 = 0\n\tlocal prime_digit_count_sum6\
    \ = 0\n\tlocal prime_digit_count_sum7 = 0\n\tlocal prime_digit_count_sum8 = 0\n\
    \tlocal prime_digit_count_sum9 = 0\n\tlocal prime_digit_count_sum10 = 0\n\tlocal\
    \ prime_digit_count_sum11 = 0\n\tlocal prime_digit_count_sum12 = 0\n\tlocal prime_digit_count_sum13\
    \ = 0\n\tlocal prime_digit_count_sum14 = 0\n\tlocal prime_digit_count_sum15 =\
    \ 0\n\tlocal prime_digit_count_sum16 = 0\n\tlocal prime_digit_count_sum17 = 0\n\
    \tlocal prime_digit_count_sum18 = 0\n\tlocal prime_digit_count_sum19 = 0\n\tlocal\
    \ prime_digit_count_sum20 = 0\n\tlocal prime_digit_count_sum21 = 0\n\tlocal prime_digit_count_sum22\
    \ = 0\n\tlocal prime_digit_count_sum23 = 0\n\tlocal prime_digit_count_sum24 =\
    \ 0\n\tlocal prime_digit_count_sum25 = 0\n\tlocal prime_digit_count_sum26 = 0\n\
    \tlocal prime_digit_count_sum27 = 0\n\tlocal prime_digit_count_sum28 = 0\n\tlocal\
    \ prime_digit_count_sum29 = 0\n\tlocal prime_digit_count_sum30 = 0\n\tlocal prime_digit_count_sum31\
    \ = 0\n\tlocal prime_digit_count_sum32 = 0\n\tlocal prime_digit_count_sum33 =\
    \ 0\n\tlocal prime_digit_count_sum34 = 0\n\tlocal prime_digit_count_sum35 = 0\n\
    \tlocal prime_digit_count_sum36 = 0\n\tlocal prime_digit_count_sum37 = 0\n\tlocal\
    \ prime_digit_count_sum38 = 0\n\tlocal prime_digit_count_sum39 = 0\n\tlocal prime_digit_count_sum40\
    \ = 0\n\tlocal prime_digit_count_sum41 = 0\n\tlocal prime_digit_count_sum42 =\
    \ 0\n\tlocal prime_digit_count_sum43 = 0\n\tlocal prime_digit_count_sum44 = 0\n\
    \tlocal prime_digit_count_sum45 = 0\n\tlocal prime_digit_count_sum46 = 0\n\tlocal\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzgzmtkc0.lua:84: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local num_digits = #num\n  local num_primes = 0\n  local\
    \ prime_digits = {}\n  local prime_digits_count = 0\n  local prime_digit_index\
    \ = 0\n  local prime_digit_count = 0\n  local prime_digit_index2 = 0\n  local\
    \ prime_digit_count2 = 0\n  local prime_digit_index3 = 0\n  local prime_digit_count3\
    \ = 0\n  local prime_digit_index4 = 0\n  local prime_digit_count4 = 0\n  local\
    \ prime_digit_index5 = 0\n  local prime_digit_count5 = 0\n  local prime_digit_index6\
    \ = 0\n  local prime_digit_count6 = 0\n  local prime_digit_index7 = 0\n  local\
    \ prime_digit_count7 = 0\n  local prime_digit_index8 = 0\n  local prime_digit_count8\
    \ = 0\n  local prime_digit_index9 = 0\n  local prime_digit_count9 = 0\n  local\
    \ prime_digit_index10 = 0\n  local prime_digit_count10 = 0\n  local prime_digit_index11\
    \ = 0\n  local prime_digit_count11 = 0\n  local prime_digit_index12 = 0\n  local\
    \ prime_digit_count12 = 0\n  local prime_digit_index13 = 0\n  local prime_digit_count13\
    \ = 0\n  local prime_digit_index14 = 0\n  local prime_digit_count14 = 0\n  local\
    \ prime_digit_index15 = 0\n  local prime_digit_count15 = 0\n  local prime_digit_index16\
    \ = 0\n  local prime_digit_count16 = 0\n  local prime_digit_index17 = 0\n  local\
    \ prime_digit_count17 = 0\n  local prime_digit_index18 = 0\n  local prime_digit_count18\
    \ = 0\n  local prime_digit_index19 = 0\n  local prime_digit_count19 = 0\n  local\
    \ prime_digit_index20 = 0\n  local prime_digit_count20 = 0\n  local prime_digit_index21\
    \ = 0\n  local prime_digit_count21 = 0\n  local prime_digit_index22 = 0\n  local\
    \ prime_digit_count22 = 0\n  local prime_digit_index23 = 0\n  local prime_digit_count23\
    \ = 0\n  local prime_digit_index24 = 0\n  local prime_digit_count24 = 0\n  local\
    \ prime_digit_index25 = 0\n  local prime_digit_count25 = 0\n  local prime_digit_index26\
    \ = 0\n  local prime_digit_count26 = 0\n  local prime_digit_index27 = 0\n  local\
    \ prime\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph59orbwv.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvamntapp.lua:21: ')' expected (to close '(' at line 20) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_count_2 =\
    \ 0\n    local primes_count_3 = 0\n    local primes_count_4 = 0\n    local primes_count_5\
    \ = 0\n    local primes_count_6 = 0\n    local primes_count_7 = 0\n    local primes_count_8\
    \ = 0\n    local primes_count_9 = 0\n    local primes_count_10 = 0\n    local\
    \ primes_count_11 = 0\n    local primes_count_12 = 0\n    local primes_count_13\
    \ = 0\n    local primes_count_14 = 0\n    local primes_count_15 = 0\n    local\
    \ primes_count_16 = 0\n    local primes_count_17 = 0\n    local primes_count_18\
    \ = 0\n    local primes_count_19 = 0\n    local primes_count_20 = 0\n    local\
    \ primes_count_21 = 0\n    local primes_count_22 = 0\n    local primes_count_23\
    \ = 0\n    local primes_count_24 = 0\n    local primes_count_25 = 0\n    local\
    \ primes_count_26 = 0\n    local primes_count_27 = 0\n    local primes_count_28\
    \ = 0\n    local primes_count_29 = 0\n    local primes_count_30 = 0\n    local\
    \ primes_count_31 = 0\n    local primes_count_32 = 0\n    local primes_count_33\
    \ = 0\n    local primes_count_34 = 0\n    local primes_count_35 = 0\n    local\
    \ primes_count_36 = 0\n    local primes_count_37 = 0\n    local primes_count_38\
    \ = 0\n    local primes_count_39 = 0\n    local primes_count_40 = 0\n    local\
    \ primes_count_41 = 0\n    local primes_count_42 = 0\n    local primes_count_43\
    \ = 0\n    local primes_count_44 = 0\n    local primes_count_45 = 0\n    local\
    \ primes_count_46 = 0\n    local primes_count_47 = 0\n    local primes_count_48\
    \ = 0\n    local primes_count_49 = 0\n    local primes_count_50 = 0\n    local\
    \ primes_count_51 = 0\n    local primes_count_52 = 0\n    local primes_count_53\
    \ = 0\n    local primes_count_54 = 0\n    local primes_count_55 = 0\n    local\
    \ primes_count_56 = 0\n    local primes_count_57 = 0\n    local primes_count_58\
    \ = 0\n    local primes_count_59 = 0\n    local primes_count_60 = 0\n    local\
    \ primes_count_61 = 0\n    local primes_count_62 = 0\n    local primes_count_63\
    \ = 0\n    local primes_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps8cgoexh.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    for i = 1, #num do\n        local digit = string.byte(num,\
    \ i)\n        if digit == nil then\n            error(\"invalid hexadecimal number\"\
    )\n        end\n        table.insert(hex, digit)\n    end\n    local primes =\
    \ {}\n    local prime = 1\n    for i = 2, #hex do\n        local digit = hex[i]\n\
    \        if digit == nil then\n            error(\"invalid hexadecimal number\"\
    )\n        end\n        if digit == 2 then\n            prime = prime + 1\n  \
    \      end\n        if digit == 3 then\n            prime = prime + 1\n      \
    \  end\n        if digit == 5 then\n            prime = prime + 1\n        end\n\
    \        if digit == 7 then\n            prime = prime + 1\n        end\n    \
    \    if digit == 11 then\n            prime = prime + 1\n        end\n       \
    \ if digit == 13 then\n            prime = prime + 1\n        end\n        if\
    \ digit == 17 then\n            prime = prime + 1\n        end\n        if digit\
    \ == 19 then\n            prime = prime + 1\n        end\n        if digit ==\
    \ 29 then\n            prime = prime + 1\n        end\n        if digit == 37\
    \ then\n            prime = prime + 1\n        end\n        if digit == 47 then\n\
    \            prime = prime + 1\n        end\n        if digit == 59 then\n   \
    \         prime = prime + 1\n        end\n        if digit == 71 then\n      \
    \      prime = prime + 1\n        end\n        if digit == 89 then\n         \
    \   prime = prime + 1\n        end\n        if digit == 103 then\n           \
    \ prime = prime + 1\n        end\n        if digit == 117 then\n            prime\
    \ = prime + 1\n        end\n        if digit == 131 then\n            prime =\
    \ prime + 1\n        end\n        if digit == 137 then\n            prime = prime\
    \ + 1\n        end\n        if digit == 139 then\n            prime = prime +\
    \ 1\n        end\n        if digit == 151 then\n            prime = prime + 1\n\
    \        end\n        if digit == 153 then\n            prime = prime + 1\n  \
    \      end\n        if digit == 157 then\n            prime = prime + 1\n    \
    \    end\n        if digit == 163 then\n            prime = prime + 1\n      \
    \  end\n        if digit == 167 then\n            prime = prime + 1\n        end\n\
    \        if digit == 173 then\n            prime = prime + 1\n        end\n  \
    \      if digit == 177 then\n            prime = prime + 1\n        end\n    \
    \    if digit == 179 then\n            prime = prime + 1\n        end\n      \
    \  if digit == 181 then\n            prime = prime + 1\n        end\n        if\
    \ digit == 191 then\n            prime = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp38fsg5s2.lua:119: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal prime_digits\
    \ = {}\n\tlocal prime_digits_len = #prime_digits\n\tlocal prime_digits_count =\
    \ nil\n\tlocal prime_digits_count_len = nil\n\tlocal prime_digits_count_count\
    \ = nil\n\tlocal prime_digits_count_count_len = nil\n\tlocal prime_digits_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_len = nil\n\tlocal prime_digits_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_len = nil\n\tlocal prime_digits_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_len = nil\n\tlocal\
    \ prime_digits_count_count_count_count_count_count = nil\n\tlocal prime_digits_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count = nil\n\
    \tlocal prime_digits_count_count_count_count_count_count_len = nil\n\tlocal prime_digits_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_len =\
    \ nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count =\
    \ nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n\tlocal prime_digits_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpckh906mi.lua:53: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {}\n  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count\
    \ = {}\n  local prime_digit_count_max = {}\n  local prime_digit_count_max_index\
    \ = {}\n  local prime_digit_count_max_index2 = {}\n  local prime_digit_count_max_index3\
    \ = {}\n  local prime_digit_count_max_index4 = {}\n  local prime_digit_count_max_index5\
    \ = {}\n  local prime_digit_count_max_index6 = {}\n  local prime_digit_count_max_index7\
    \ = {}\n  local prime_digit_count_max_index8 = {}\n  local prime_digit_count_max_index9\
    \ = {}\n  local prime_digit_count_max_index10 = {}\n  local prime_digit_count_max_index11\
    \ = {}\n  local prime_digit_count_max_index12 = {}\n  local prime_digit_count_max_index13\
    \ = {}\n  local prime_digit_count_max_index14 = {}\n  local prime_digit_count_max_index15\
    \ = {}\n  local prime_digit_count_max_index16 = {}\n  local prime_digit_count_max_index17\
    \ = {}\n  local prime_digit_count_max_index18 = {}\n  local prime_digit_count_max_index19\
    \ = {}\n  local prime_digit_count_max_index20 = {}\n  local prime_digit_count_max_index21\
    \ = {}\n  local prime_digit_count_max_index22 = {}\n  local prime_digit_count_max_index23\
    \ = {}\n  local prime_digit_count_max_index24 = {}\n  local prime_digit_count_max_index25\
    \ = {}\n  local prime_digit_count_max_index26 = {}\n  local prime_digit_count_max_index27\
    \ = {}\n  local prime_digit_count_max_index28 = {}\n  local prime_digit_count_max_index29\
    \ = {}\n  local prime_digit_count_max_index30 = {}\n  local prime_digit_count_max_index31\
    \ = {}\n  local prime_digit_count_max_index32 = {}\n  local prime_digit_count_max_index33\
    \ = {}\n  local prime_digit_count_max_index34 = {}\n  local prime_digit_count_max_index35\
    \ = {}\n  local prime_digit_count_max_index36 = {}\n  local prime_digit_count_max_index37\
    \ = {}\n  local prime_digit_count_max_index38 = {}\n  local prime_digit_count_max_index39\
    \ = {}\n  local prime_digit_count_max_index40 = {}\n  local prime_digit_count_max_index41\
    \ = {}\n  local prime_digit_count_max_index42 = {}\n  local prime_digit_count_max_index43\
    \ = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv9j21egy.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal primes_digits = {}\n\tlocal primes_digits_count = 0\n\tlocal primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_count = 0\n\tlocal primes_digits_sum_primes_count\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum_primes_digits_sum\
    \ = 0\n\tlocal primes_digits_sum_primes_digits_count_primes_digits_sum_prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzun8tl5m.lua:51: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = {}\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = {}\n\tlocal prime_digit_sum = {}\n\tlocal prime_digit_sum2\
    \ = {}\n\tlocal prime_digit_sum3 = {}\n\tlocal prime_digit_sum4 = {}\n\tlocal\
    \ prime_digit_sum5 = {}\n\tlocal prime_digit_sum6 = {}\n\tlocal prime_digit_sum7\
    \ = {}\n\tlocal prime_digit_sum8 = {}\n\tlocal prime_digit_sum9 = {}\n\tlocal\
    \ prime_digit_sum10 = {}\n\tlocal prime_digit_sum11 = {}\n\tlocal prime_digit_sum12\
    \ = {}\n\tlocal prime_digit_sum13 = {}\n\tlocal prime_digit_sum14 = {}\n\tlocal\
    \ prime_digit_sum15 = {}\n\tlocal prime_digit_sum16 = {}\n\tlocal prime_digit_sum17\
    \ = {}\n\tlocal prime_digit_sum18 = {}\n\tlocal prime_digit_sum19 = {}\n\tlocal\
    \ prime_digit_sum20 = {}\n\tlocal prime_digit_sum21 = {}\n\tlocal prime_digit_sum22\
    \ = {}\n\tlocal prime_digit_sum23 = {}\n\tlocal prime_digit_sum24 = {}\n\tlocal\
    \ prime_digit_sum25 = {}\n\tlocal prime_digit_sum26 = {}\n\tlocal prime_digit_sum27\
    \ = {}\n\tlocal prime_digit_sum28 = {}\n\tlocal prime_digit_sum29 = {}\n\tlocal\
    \ prime_digit_sum30 = {}\n\tlocal prime_digit_sum31 = {}\n\tlocal prime_digit_sum32\
    \ = {}\n\tlocal prime_digit_sum33 = {}\n\tlocal prime_digit_sum34 = {}\n\tlocal\
    \ prime_digit_sum35 = {}\n\tlocal prime_digit_sum36 = {}\n\tlocal prime_digit_sum37\
    \ = {}\n\tlocal prime_digit_sum38 = {}\n\tlocal prime_digit_sum39 = {}\n\tlocal\
    \ prime_digit_sum40 = {}\n\tlocal prime_digit_sum41 = {}\n\tlocal prime_digit_sum42\
    \ = {}\n\tlocal prime_digit_sum43 = {}\n\tlocal prime_digit_sum44 = {}\n\tlocal\
    \ prime_digit_sum45 = {}\n\tlocal prime_digit_sum46 = {}\n\tlocal prime_digit_sum47\
    \ = {}\n\tlocal prime_digit_sum48 = {}\n\tlocal prime_digit_sum49 = {}\n\tlocal\
    \ prime_digit_sum50 = {}\n\tlocal prime_digit_sum51 = {}\n\tlocal prime_digit_sum52\
    \ = {}\n\tlocal prime_digit_sum53 = {}\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppczf3gsg.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime_digits = {}\n    local\
    \ prime_digit_count = 0\n    local prime_digit_count_max = 2\n    local prime_digit_count_min\
    \ = 2\n    local prime_digit_count_step = 2\n    local prime_digit_count_max =\
    \ math.floor(math.sqrt(math.pow(prime_digit_count_max, 2)))\n    local prime_digit_count_min\
    \ = math.floor(math.sqrt(math.pow(prime_digit_count_min, 2)))\n    local prime_digit_count_step\
    \ = math.floor(math.sqrt(math.pow(prime_digit_count_step, 2)))\n    local prime_digit_count_max\
    \ = prime_digit_count_max - prime_digit_count_min\n    local prime_digit_count_min\
    \ = prime_digit_count_min - prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step - prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_max\
    \ = prime_digit_count_max + prime_digit_count_step\n    local prime_digit_count_min\
    \ = prime_digit_count_min + prime_digit_count_step\n    local prime_digit_count_step\
    \ = prime_digit_count_step + prime_digit_count_min\n    local prime_digit_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf5mbc4lc.lua:62: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime_digits = {}\n    local\
    \ prime_digits_count = 0\n    local prime_digits_sum = 0\n    local prime_digits_sum2\
    \ = 0\n    local prime_digits_sum3 = 0\n    local prime_digits_sum4 = 0\n    local\
    \ prime_digits_sum5 = 0\n    local prime_digits_sum6 = 0\n    local prime_digits_sum7\
    \ = 0\n    local prime_digits_sum8 = 0\n    local prime_digits_sum9 = 0\n    local\
    \ prime_digits_sum10 = 0\n    local prime_digits_sum11 = 0\n    local prime_digits_sum12\
    \ = 0\n    local prime_digits_sum13 = 0\n    local prime_digits_sum14 = 0\n  \
    \  local prime_digits_sum15 = 0\n    local prime_digits_sum16 = 0\n    local prime_digits_sum17\
    \ = 0\n    local prime_digits_sum18 = 0\n    local prime_digits_sum19 = 0\n  \
    \  local prime_digits_sum20 = 0\n    local prime_digits_sum21 = 0\n    local prime_digits_sum22\
    \ = 0\n    local prime_digits_sum23 = 0\n    local prime_digits_sum24 = 0\n  \
    \  local prime_digits_sum25 = 0\n    local prime_digits_sum26 = 0\n    local prime_digits_sum27\
    \ = 0\n    local prime_digits_sum28 = 0\n    local prime_digits_sum29 = 0\n  \
    \  local prime_digits_sum30 = 0\n    local prime_digits_sum31 = 0\n    local prime_digits_sum32\
    \ = 0\n    local prime_digits_sum33 = 0\n    local prime_digits_sum34 = 0\n  \
    \  local prime_digits_sum35 = 0\n    local prime_digits_sum36 = 0\n    local prime_digits_sum37\
    \ = 0\n    local prime_digits_sum38 = 0\n    local prime_digits_sum39 = 0\n  \
    \  local prime_digits_sum40 = 0\n    local prime_digits_sum41 = 0\n    local prime_digits_sum42\
    \ = 0\n    local prime_digits_sum43 = 0\n    local prime_digits_sum44 = 0\n  \
    \  local prime_digits_sum45 = 0\n    local prime_digits_sum46 = 0\n    local prime_digits_sum47\
    \ = 0\n    local prime_digits_sum48 = 0\n    local prime_digits_sum49\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplsgqxjfy.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count = {}\n\
    \  local prime_digit_count_max = {}\n  local prime_digit_count_max_index = {}\n\
    \  local prime_digit_count_max_index2 = {}\n  local prime_digit_count_max_index3\
    \ = {}\n  local prime_digit_count_max_index4 = {}\n  local prime_digit_count_max_index5\
    \ = {}\n  local prime_digit_count_max_index6 = {}\n  local prime_digit_count_max_index7\
    \ = {}\n  local prime_digit_count_max_index8 = {}\n  local prime_digit_count_max_index9\
    \ = {}\n  local prime_digit_count_max_index10 = {}\n  local prime_digit_count_max_index11\
    \ = {}\n  local prime_digit_count_max_index12 = {}\n  local prime_digit_count_max_index13\
    \ = {}\n  local prime_digit_count_max_index14 = {}\n  local prime_digit_count_max_index15\
    \ = {}\n  local prime_digit_count_max_index16 = {}\n  local prime_digit_count_max_index17\
    \ = {}\n  local prime_digit_count_max_index18 = {}\n  local prime_digit_count_max_index19\
    \ = {}\n  local prime_digit_count_max_index20 = {}\n  local prime_digit_count_max_index21\
    \ = {}\n  local prime_digit_count_max_index22 = {}\n  local prime_digit_count_max_index23\
    \ = {}\n  local prime_digit_count_max_index24 = {}\n  local prime_digit_count_max_index25\
    \ = {}\n  local prime_digit_count_max_index26 = {}\n  local prime_digit_count_max_index27\
    \ = {}\n  local prime_digit_count_max_index28 = {}\n  local prime_digit_count_max_index29\
    \ = {}\n  local prime_digit_count_max_index30 = {}\n  local prime_digit_count_max_index31\
    \ = {}\n  local prime_digit_count_max_index32 = {}\n  local prime_digit_count_max_index33\
    \ = {}\n  local prime_digit_count_max_index34 = {}\n  local prime_digit_count_max_index35\
    \ = {}\n  local prime_digit_count_max_index36 = {}\n  local prime_digit_count_max_index37\
    \ = {}\n  local prime_digit_count_max_index38 = {}\n  local prime_digit_count_max_index39\
    \ = {}\n  local prime_digit_count_max_index40 = {}\n  local prime_digit_count_max_index41\
    \ = {}\n  local prime_digit_count_max_index42 = {}\n  local prime_digit_count_max_index43\
    \ = {}\n  local prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_rnbht6w.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_temp = {}\n\tlocal prime_digit_count_temp_temp = {}\n\
    \tlocal prime_digit_count_temp_temp_temp = {}\n\tlocal prime_digit_count_temp_temp_temp2\
    \ = {}\n\tlocal prime_digit_count_temp_temp_temp3 = {}\n\tlocal prime_digit_count_temp_temp_temp4\
    \ = {}\n\tlocal prime_digit_count_temp_temp_temp5 = {}\n\tlocal prime_digit_count_temp_temp_temp6\
    \ = {}\n\tlocal prime_digit_count_temp_temp_temp7 = {}\n\tlocal prime_digit_count_temp_temp_temp8\
    \ = {}\n\tlocal prime_digit_count_temp_temp_temp9 = {}\n\tlocal prime_digit_count_temp_temp10\
    \ = {}\n\tlocal prime_digit_count_temp_temp11 = {}\n\tlocal prime_digit_count_temp_temp12\
    \ = {}\n\tlocal prime_digit_count_temp_temp13 = {}\n\tlocal prime_digit_count_temp_temp14\
    \ = {}\n\tlocal prime_digit_count_temp_temp15 = {}\n\tlocal prime_digit_count_temp_temp16\
    \ = {}\n\tlocal prime_digit_count_temp_temp17 = {}\n\tlocal prime_digit_count_temp_temp18\
    \ = {}\n\tlocal prime_digit_count_temp_temp19 = {}\n\tlocal prime_digit_count_temp_temp20\
    \ = {}\n\tlocal prime_digit_count_temp_temp21 = {}\n\tlocal prime_digit_count_temp_temp22\
    \ = {}\n\tlocal prime_digit_count_temp_temp23 = {}\n\tlocal prime_digit_count_temp_temp24\
    \ = {}\n\tlocal prime_digit_count_temp_temp25 = {}\n\tlocal prime_digit_count_temp_temp26\
    \ = {}\n\tlocal prime_digit_count_temp_temp27 = {}\n\tlocal prime_digit_count_temp_temp28\
    \ = {}\n\tlocal prime_digit_count_temp_temp29 = {}\n\tlocal prime_digit_count_temp_temp30\
    \ = {}\n\tlocal prime_digit_count_temp_temp31 = {}\n\tlocal prime_digit_count_temp_temp32\
    \ = {}\n\tlocal prime_digit_count_temp_temp33 = {}\n\tlocal prime_digit_count_temp_temp34\
    \ = {}\n\tlocal prime_digit_count_temp_temp35 = {}\n\tlocal prime_digit_count_temp_temp36\
    \ = {}\n\tlocal prime_digit_count_temp_temp37 = {}\n\tlocal prime_digit_count_temp_temp38\
    \ = {}\n\tlocal prime_digit_count_temp_temp39 = {}\n\tlocal prime_digit_count_temp_temp40\
    \ = {}\n\tlocal prime_digit_count_temp_temp41 = {}\n\tlocal prime_digit_count_temp_temp42\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm8gb4yjq.lua:77: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local primes_count = 0\n\
    \    local hexadecimal_count = 0\n    local primes_hexadecimal_count = 0\n   \
    \ local primes_hexadecimal_count_2 = 0\n    local primes_hexadecimal_count_3 =\
    \ 0\n    local primes_hexadecimal_count_4 = 0\n    local primes_hexadecimal_count_5\
    \ = 0\n    local primes_hexadecimal_count_6 = 0\n    local primes_hexadecimal_count_7\
    \ = 0\n    local primes_hexadecimal_count_8 = 0\n    local primes_hexadecimal_count_9\
    \ = 0\n    local primes_hexadecimal_count_10 = 0\n    local primes_hexadecimal_count_11\
    \ = 0\n    local primes_hexadecimal_count_12 = 0\n    local primes_hexadecimal_count_13\
    \ = 0\n    local primes_hexadecimal_count_14 = 0\n    local primes_hexadecimal_count_15\
    \ = 0\n    local primes_hexadecimal_count_16 = 0\n    local primes_hexadecimal_count_17\
    \ = 0\n    local primes_hexadecimal_count_18 = 0\n    local primes_hexadecimal_count_19\
    \ = 0\n    local primes_hexadecimal_count_20 = 0\n    local primes_hexadecimal_count_21\
    \ = 0\n    local primes_hexadecimal_count_22 = 0\n    local primes_hexadecimal_count_23\
    \ = 0\n    local primes_hexadecimal_count_24 = 0\n    local primes_hexadecimal_count_25\
    \ = 0\n    local primes_hexadecimal_count_26 = 0\n    local primes_hexadecimal_count_27\
    \ = 0\n    local primes_hexadecimal_count_28 = 0\n    local primes_hexadecimal_count_29\
    \ = 0\n    local primes_hexadecimal_count_30 = 0\n    local primes_hexadecimal_count_31\
    \ = 0\n    local primes_hexadecimal_count_32 = 0\n    local primes_hexadecimal_count_33\
    \ = 0\n    local primes_hexadecimal_count_34 = 0\n    local primes_hexadecimal_count_35\
    \ = 0\n    local primes_hexadecimal_count_36 = 0\n    local primes_hexadecimal_count_37\
    \ = 0\n    local primes_hexadecimal_count_38 = 0\n    local primes_hexadecimal_count_39\
    \ = 0\n    local primes_hexadecimal_count_40 = 0\n    local primes_hexadecimal_count_41\
    \ = 0\n    local primes_hexadecimal_count_42 = 0\n    local primes_hexadecimal_count_43\
    \ = 0\n    local primes_hexadecimal_count_44 = 0\n    local primes_hex\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qxknuhf.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 2\n\t\
    local primes_count_min = 2\n\tlocal primes_count_step = 1\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(num))\n\tlocal primes_count_min = math.floor(math.sqrt(num))\n\
    \tlocal primes_count_step = math.floor(math.sqrt(num))\n\tlocal primes_count_max\
    \ = primes_count_max - primes_count_min\n\tlocal primes_count_min = primes_count_min\
    \ - primes_count_step\n\tlocal primes_count_step = primes_count_step + 1\n\tlocal\
    \ primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\tlocal\
    \ primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - primes_count_min\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step + 1\n\tlocal primes_count_max = primes_count_max - prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9jgkp3g9.lua:69: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal\
    \ digit\n\tlocal hexadecimal_digit\n\tlocal hexadecimal_digit_count\n\tlocal hexadecimal_digit_count_2\n\
    \tlocal hexadecimal_digit_count_3\n\tlocal hexadecimal_digit_count_4\n\tlocal\
    \ hexadecimal_digit_count_5\n\tlocal hexadecimal_digit_count_6\n\tlocal hexadecimal_digit_count_7\n\
    \tlocal hexadecimal_digit_count_8\n\tlocal hexadecimal_digit_count_9\n\tlocal\
    \ hexadecimal_digit_count_10\n\tlocal hexadecimal_digit_count_11\n\tlocal hexadecimal_digit_count_12\n\
    \tlocal hexadecimal_digit_count_13\n\tlocal hexadecimal_digit_count_14\n\tlocal\
    \ hexadecimal_digit_count_15\n\tlocal hexadecimal_digit_count_16\n\tlocal hexadecimal_digit_count_17\n\
    \tlocal hexadecimal_digit_count_18\n\tlocal hexadecimal_digit_count_19\n\tlocal\
    \ hexadecimal_digit_count_20\n\tlocal hexadecimal_digit_count_21\n\tlocal hexadecimal_digit_count_22\n\
    \tlocal hexadecimal_digit_count_23\n\tlocal hexadecimal_digit_count_24\n\tlocal\
    \ hexadecimal_digit_count_25\n\tlocal hexadecimal_digit_count_26\n\tlocal hexadecimal_digit_count_27\n\
    \tlocal hexadecimal_digit_count_28\n\tlocal hexadecimal_digit_count_29\n\tlocal\
    \ hexadecimal_digit_count_30\n\tlocal hexadecimal_digit_count_31\n\tlocal hexadecimal_digit_count_32\n\
    \tlocal hexadecimal_digit_count_33\n\tlocal hexadecimal_digit_count_34\n\tlocal\
    \ hexadecimal_digit_count_35\n\tlocal hexadecimal_digit_count_36\n\tlocal hexadecimal_digit_count_37\n\
    \tlocal hexadecimal_digit_count_38\n\tlocal hexadecimal_digit_count_39\n\tlocal\
    \ hexadecimal_digit_count_40\n\tlocal hexadecimal_digit_count_41\n\tlocal hexadecimal_digit_count_42\n\
    \tlocal hexadecimal_digit_count_43\n\tlocal hexadecimal_digit_count_44\n\tlocal\
    \ hexadecimal_digit_count_45\n\tlocal hexadecimal_digit_count_46\n\tlocal hexadecimal_digit_count_47\n\
    \tlocal hexadecimal_digit_count_48\n\tlocal hexadecimal_digit_count_49\n\tlocal\
    \ hexadecimal_digit_count_50\n\tlocal hexadecimal_digit_count_51\n\tlocal hexadecimal_digit_count_52\n\
    \tlocal hexadecimal_digit_count_53\n\tlocal hexadecimal_digit_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpful_cs4p.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqvxy71_0.lua:51: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local hex_count = {}\n  local hex = string.gsub(tostring(num),\
    \ \"%x\", \"\")\n  for i = 1, #hex do\n    local hex_key = hex_key[hex[i]]\n \
    \   if hex_key ~= nil then\n      hex_key[hex[i]] = hex_key[hex[i]] + 1\n    else\n\
    \      hex_key[hex[i]] = 1\n    end\n  end\n  for i = 1, #hex_key do\n    if hex_key[i]\
    \ > 1 then\n      hex_count[i] = hex_key[i]\n    end\n  end\n  local prime_count\
    \ = 0\n  for i = 1, #hex_count do\n    if hex_count[i] == 2 then\n      prime_count\
    \ = prime_count + 1\n    end\n  end\n  return prime_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuqo4se4.lua:46:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnuqo4se4.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_sum48 = 0\n\tlocal prime_digits_sum49 = 0\n\tlocal prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1cqo8n2x.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local hex_keys = {}\n  local hex_keys_len = {}\n  local\
    \ hex_keys_lens = {}\n  local hex_keys_lens_len = {}\n  local hex_keys_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_len = {}\n  local hex_keys_lens_lens_lens =\
    \ {}\n  local hex_keys_lens_lens_lens_len = {}\n  local hex_keys_lens_lens_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_len = {}\n  local hex_keys_lens_lens_lens_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_len = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_len = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_len = {}\n  local\
    \ hex_keys_lens_lens_lens_lens_lens_lens_lens_lens = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens = {}\n \
    \ local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = {}\n  local\
    \ hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens = {}\n  local\
    \ hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = {}\n \
    \ local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens =\
    \ {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local hex_keys_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwiddm9o4.lua:57: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index = {}\n\
    \tlocal prime_digit_count_max_index[1] = 1\n\tlocal prime_digit_count_max_index[2]\
    \ = 2\n\tlocal prime_digit_count_max_index[3] = 3\n\tlocal prime_digit_count_max_index[4]\
    \ = 4\n\tlocal prime_digit_count_max_index[5] = 5\n\tlocal prime_digit_count_max_index[6]\
    \ = 6\n\tlocal prime_digit_count_max_index[7] = 7\n\tlocal prime_digit_count_max_index[8]\
    \ = 8\n\tlocal prime_digit_count_max_index[9] = 9\n\tlocal prime_digit_count_max_index[10]\
    \ = 10\n\tlocal prime_digit_count_max_index[11] = 11\n\tlocal prime_digit_count_max_index[12]\
    \ = 12\n\tlocal prime_digit_count_max_index[13] = 13\n\tlocal prime_digit_count_max_index[14]\
    \ = 14\n\tlocal prime_digit_count_max_index[15] = 15\n\tlocal prime_digit_count_max_index[16]\
    \ = 16\n\tlocal prime_digit_count_max_index[17] = 17\n\tlocal prime_digit_count_max_index[18]\
    \ = 18\n\tlocal prime_digit_count_max_index[19] = 19\n\tlocal prime_digit_count_max_index[20]\
    \ = 20\n\tlocal prime_digit_count_max_index[21] = 21\n\tlocal prime_digit_count_max_index[22]\
    \ = 22\n\tlocal prime_digit_count_max_index[23] = 23\n\tlocal prime_digit_count_max_index[24]\
    \ = 24\n\tlocal prime_digit_count_max_index[25] = 25\n\tlocal prime_digit_count_max_index[26]\
    \ = 26\n\tlocal prime_digit_count_max_index[27] = 27\n\tlocal prime_digit_count_max_index[28]\
    \ = 28\n\tlocal prime_digit_count_max_index[29] = 29\n\tlocal prime_digit_count_max_index[30]\
    \ = 30\n\tlocal prime_digit_count_max_index[31] = 31\n\tlocal prime_digit_count_max_index[32]\
    \ = 32\n\tlocal prime_digit_count_max_index[33] = 33\n\tlocal prime_digit_count_max_index[34]\
    \ = 34\n\tlocal prime_digit_count_max_index[35] = 35\n\tlocal prime_digit_count_max_index[36]\
    \ = 36\n\tlocal prime_digit_count_max_index[37] = 37\n\tlocal prime_digit_count_max_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxr9tfj6p.lua:23: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tfor i = 1, #num do\n\t\tlocal c = string.sub(num, i, i)\n\t\
    \tif c ~= '0' and c ~= '1' then\n\t\t\thex[#hex + 1] = c\n\t\tend\n\tend\n\treturn\
    \ hex\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeewnyl04.lua:31:\
    \ expected: 1, actual: {\"A\", \"B\"}\nstack traceback:\n\t/tmp/tmpeewnyl04.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 2\n\t\
    local primes_count_min = 2\n\tlocal primes_count_step = 1\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16)))))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(2,math.floor(math.log(num,16\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm6j80mi7.lua:47: ')' expected (to close '(' at line 46) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local prime_digits = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex =\
    \ {2,3,5,7,11,13,17,19}\n    local prime_digits_hex2 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex3 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex4\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex5 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex6 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex7\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex8 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex9 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex10\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex11 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex12 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex13\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex14 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex15 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex16\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex17 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex18 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex19\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex20 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex21 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex22\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex23 = {2,3,5,7,11,13,17,19}\n\
    \    local prime_digits_hex24 = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex25\
    \ = {2,3,5,7,11,13,17,19}\n    local prime_digits_hex26 = {2,3,5,7,11,13,17,19}\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6jfmps7r.lua:58: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = string.lower(num)\n    local num_len = string.len(num_str)\n\
    \    local num_digits = string.len(num_str)\n    local num_digits_prime = 0\n\
    \    local num_digits_not_prime = 0\n    local num_digits_prime_not_prime = 0\n\
    \    local num_digits_prime_not_prime_not_prime = 0\n    local num_digits_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime = 0\n\
    \    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0\n    local num_digits_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsy4v4kvl.lua:50: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpltdksvpz.lua:56: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local count = 0\n    local digit\n    for digit = 1,\
    \ #num do\n        local hex_value = tonumber(num:sub(digit,digit))\n        if\
    \ hex_value ~= nil then\n            count = count + 1\n            hex[hex_value]\
    \ = hex[hex_value] + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ug_5yw5.lua:34:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8ug_5yw5.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local digits = {}\n  local digits_count\
    \ = 0\n  local primes_hex = {}\n  local primes_hex_hex = {}\n  local primes_hex_hex_count\
    \ = {}\n  local primes_hex_hex_hex = {}\n  local primes_hex_hex_hex_hex = {}\n\
    \  local primes_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\
    \  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\
    \  local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n  local\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n  local \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7wkxxz_s.lua:68: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf_vpv5lk.lua:21: ')' expected (to close '(' at line 20) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {}\n    local num_digits = #num\n    local num_primes = 0\n\
    \    local num_primes_hex = 0\n    local num_primes_hex2 = 0\n    local num_primes_hex3\
    \ = 0\n    local num_primes_hex4 = 0\n    local num_primes_hex5 = 0\n    local\
    \ num_primes_hex6 = 0\n    local num_primes_hex7 = 0\n    local num_primes_hex8\
    \ = 0\n    local num_primes_hex9 = 0\n    local num_primes_hex10 = 0\n    local\
    \ num_primes_hex11 = 0\n    local num_primes_hex12 = 0\n    local num_primes_hex13\
    \ = 0\n    local num_primes_hex14 = 0\n    local num_primes_hex15 = 0\n    local\
    \ num_primes_hex16 = 0\n    local num_primes_hex17 = 0\n    local num_primes_hex18\
    \ = 0\n    local num_primes_hex19 = 0\n    local num_primes_hex20 = 0\n    local\
    \ num_primes_hex21 = 0\n    local num_primes_hex22 = 0\n    local num_primes_hex23\
    \ = 0\n    local num_primes_hex24 = 0\n    local num_primes_hex25 = 0\n    local\
    \ num_primes_hex26 = 0\n    local num_primes_hex27 = 0\n    local num_primes_hex28\
    \ = 0\n    local num_primes_hex29 = 0\n    local num_primes_hex30 = 0\n    local\
    \ num_primes_hex31 = 0\n    local num_primes_hex32 = 0\n    local num_primes_hex33\
    \ = 0\n    local num_primes_hex34 = 0\n    local num_primes_hex35 = 0\n    local\
    \ num_primes_hex36 = 0\n    local num_primes_hex37 = 0\n    local num_primes_hex38\
    \ = 0\n    local num_primes_hex39 = 0\n    local num_primes_hex40 = 0\n    local\
    \ num_primes_hex41 = 0\n    local num_primes_hex42 = 0\n    local num_primes_hex43\
    \ = 0\n    local num_primes_hex44 = 0\n    local num_primes_hex45 = 0\n    local\
    \ num_primes_hex46 = 0\n    local num_primes_hex47 = 0\n    local num_primes_hex48\
    \ = 0\n    local num_primes_hex49 = 0\n    local num_primes_hex50 = 0\n    local\
    \ num_primes_hex51 = 0\n    local num_primes_hex52 = 0\n    local num_primes_hex53\
    \ = 0\n    local num_primes_hex54 = 0\n    local num_primes_hex55\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp110276bp.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdf1igdib.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal count = 0\n\tlocal digit\n\tfor i = 1, #num do\n\t\t\
    digit = tonumber(num:sub(i,i))\n\t\tif digit == nil then\n\t\t\treturn nil\n\t\
    \tend\n\t\tif digit == 0 then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount\
    \ = count + 1\n\t\t\thex[digit] = hex[digit] or 1\n\t\tend\n\tend\n\tif count\
    \ < 2 then\n\t\treturn nil\n\tend\n\tlocal primes = {}\n\tlocal prime\n\tfor prime\
    \ = 2, #hex do\n\t\tif hex[prime] == 2 then\n\t\t\tprimes[prime] = primes[prime]\
    \ + 1\n\t\tend\n\tend\n\tfor prime = 2, #primes do\n\t\tif primes[prime] > 1 then\n\
    \t\t\treturn nil\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8ktuj13.lua:54:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpj8ktuj13.lua:54: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_sum = 0\n\tlocal\
    \ primes_sum2 = 0\n\tlocal primes_sum3 = 0\n\tlocal primes_sum4 = 0\n\tlocal primes_sum5\
    \ = 0\n\tlocal primes_sum6 = 0\n\tlocal primes_sum7 = 0\n\tlocal primes_sum8 =\
    \ 0\n\tlocal primes_sum9 = 0\n\tlocal primes_sum10 = 0\n\tlocal primes_sum11 =\
    \ 0\n\tlocal primes_sum12 = 0\n\tlocal primes_sum13 = 0\n\tlocal primes_sum14\
    \ = 0\n\tlocal primes_sum15 = 0\n\tlocal primes_sum16 = 0\n\tlocal primes_sum17\
    \ = 0\n\tlocal primes_sum18 = 0\n\tlocal primes_sum19 = 0\n\tlocal primes_sum20\
    \ = 0\n\tlocal primes_sum21 = 0\n\tlocal primes_sum22 = 0\n\tlocal primes_sum23\
    \ = 0\n\tlocal primes_sum24 = 0\n\tlocal primes_sum25 = 0\n\tlocal primes_sum26\
    \ = 0\n\tlocal primes_sum27 = 0\n\tlocal primes_sum28 = 0\n\tlocal primes_sum29\
    \ = 0\n\tlocal primes_sum30 = 0\n\tlocal primes_sum31 = 0\n\tlocal primes_sum32\
    \ = 0\n\tlocal primes_sum33 = 0\n\tlocal primes_sum34 = 0\n\tlocal primes_sum35\
    \ = 0\n\tlocal primes_sum36 = 0\n\tlocal primes_sum37 = 0\n\tlocal primes_sum38\
    \ = 0\n\tlocal primes_sum39 = 0\n\tlocal primes_sum40 = 0\n\tlocal primes_sum41\
    \ = 0\n\tlocal primes_sum42 = 0\n\tlocal primes_sum43 = 0\n\tlocal primes_sum44\
    \ = 0\n\tlocal primes_sum45 = 0\n\tlocal primes_sum46 = 0\n\tlocal primes_sum47\
    \ = 0\n\tlocal primes_sum48 = 0\n\tlocal primes_sum49 = 0\n\tlocal primes_sum50\
    \ = 0\n\tlocal primes_sum51 = 0\n\tlocal primes_sum52 = 0\n\tlocal primes_sum53\
    \ = 0\n\tlocal primes_sum54 = 0\n\tlocal primes_sum55 = 0\n\tlocal primes_sum56\
    \ = 0\n\tlocal primes_sum57 = 0\n\tlocal primes_sum58 = 0\n\tlocal primes_sum59\
    \ = 0\n\tlocal primes_sum60 = 0\n\tlocal primes_sum61 = 0\n\tlocal primes_sum62\
    \ = 0\n\tlocal primes_sum63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptw56gfnd.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local prime_digits = {}\n\
    \    local prime_digit_count = {}\n    local prime_digit_count_max = {}\n    local\
    \ prime_digit_count_max_index = {}\n    local prime_digit_count_max_index[1] =\
    \ 1\n    local prime_digit_count_max_index[2] = 2\n    local prime_digit_count_max_index[3]\
    \ = 3\n    local prime_digit_count_max_index[4] = 4\n    local prime_digit_count_max_index[5]\
    \ = 5\n    local prime_digit_count_max_index[6] = 6\n    local prime_digit_count_max_index[7]\
    \ = 7\n    local prime_digit_count_max_index[8] = 8\n    local prime_digit_count_max_index[9]\
    \ = 9\n    local prime_digit_count_max_index[10] = 10\n    local prime_digit_count_max_index[11]\
    \ = 11\n    local prime_digit_count_max_index[12] = 12\n    local prime_digit_count_max_index[13]\
    \ = 13\n    local prime_digit_count_max_index[14] = 14\n    local prime_digit_count_max_index[15]\
    \ = 15\n    local prime_digit_count_max_index[16] = 16\n    local prime_digit_count_max_index[17]\
    \ = 17\n    local prime_digit_count_max_index[18] = 18\n    local prime_digit_count_max_index[19]\
    \ = 19\n    local prime_digit_count_max_index[20] = 20\n    local prime_digit_count_max_index[21]\
    \ = 21\n    local prime_digit_count_max_index[22] = 22\n    local prime_digit_count_max_index[23]\
    \ = 23\n    local prime_digit_count_max_index[24] = 24\n    local prime_digit_count_max_index[25]\
    \ = 25\n    local prime_digit_count_max_index[26] = 26\n    local prime_digit_count_max_index[27]\
    \ = 27\n    local prime_digit_count_max_index[28] = 28\n    local prime_digit_count_max_index[29]\
    \ = 29\n    local prime_digit_count_max_index[30] = 30\n    local prime_digit_count_max_index[31]\
    \ = 31\n    local prime_digit_count_max_index[32] = 32\n    local prime_digit_count_max_index[33]\
    \ = 33\n    local prime_digit_count_max_index[34] = 34\n    local prime_digit_count_max_index[35]\
    \ = 35\n    local prime_digit_count_max_index[36] = 36\n    local prime_digit_count_max_index[37]\
    \ = 37\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpagi4g5rd.lua:24: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\tlocal prime_digit_count_temp\
    \ = {}\n\tlocal prime_digit_count_temp2 = {}\n\tlocal prime_digit_count_temp3\
    \ = {}\n\tlocal prime_digit_count_temp4 = {}\n\tlocal prime_digit_count_temp5\
    \ = {}\n\tlocal prime_digit_count_temp6 = {}\n\tlocal prime_digit_count_temp7\
    \ = {}\n\tlocal prime_digit_count_temp8 = {}\n\tlocal prime_digit_count_temp9\
    \ = {}\n\tlocal prime_digit_count_temp10 = {}\n\tlocal prime_digit_count_temp11\
    \ = {}\n\tlocal prime_digit_count_temp12 = {}\n\tlocal prime_digit_count_temp13\
    \ = {}\n\tlocal prime_digit_count_temp14 = {}\n\tlocal prime_digit_count_temp15\
    \ = {}\n\tlocal prime_digit_count_temp16 = {}\n\tlocal prime_digit_count_temp17\
    \ = {}\n\tlocal prime_digit_count_temp18 = {}\n\tlocal prime_digit_count_temp19\
    \ = {}\n\tlocal prime_digit_count_temp20 = {}\n\tlocal prime_digit_count_temp21\
    \ = {}\n\tlocal prime_digit_count_temp22 = {}\n\tlocal prime_digit_count_temp23\
    \ = {}\n\tlocal prime_digit_count_temp24 = {}\n\tlocal prime_digit_count_temp25\
    \ = {}\n\tlocal prime_digit_count_temp26 = {}\n\tlocal prime_digit_count_temp27\
    \ = {}\n\tlocal prime_digit_count_temp28 = {}\n\tlocal prime_digit_count_temp29\
    \ = {}\n\tlocal prime_digit_count_temp30 = {}\n\tlocal prime_digit_count_temp31\
    \ = {}\n\tlocal prime_digit_count_temp32 = {}\n\tlocal prime_digit_count_temp33\
    \ = {}\n\tlocal prime_digit_count_temp34 = {}\n\tlocal prime_digit_count_temp35\
    \ = {}\n\tlocal prime_digit_count_temp36 = {}\n\tlocal prime_digit_count_temp37\
    \ = {}\n\tlocal prime_digit_count_temp38 = {}\n\tlocal prime_digit_count_temp39\
    \ = {}\n\tlocal prime_digit_count_temp40 = {}\n\tlocal prime_digit_count_temp41\
    \ = {}\n\tlocal prime_digit_count_temp42 = {}\n\tlocal prime_digit_count_temp43\
    \ = {}\n\tlocal prime_digit_count_temp44 = {}\n\tlocal prime_digit_count_temp45\
    \ = {}\n\tlocal prime_digit_count_temp46 = {}\n\tlocal prime_digit_count_temp47\
    \ = {}\n\tlocal prime_digit_count_temp48 = {}\n\tlocal prime_digit_count_temp49\
    \ = {}\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppmyeoiev.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1hin1z4w.lua:51: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_sum = 0\n\tlocal\
    \ primes_sum2 = 0\n\tlocal primes_sum3 = 0\n\tlocal primes_sum4 = 0\n\tlocal primes_sum5\
    \ = 0\n\tlocal primes_sum6 = 0\n\tlocal primes_sum7 = 0\n\tlocal primes_sum8 =\
    \ 0\n\tlocal primes_sum9 = 0\n\tlocal primes_sum10 = 0\n\tlocal primes_sum11 =\
    \ 0\n\tlocal primes_sum12 = 0\n\tlocal primes_sum13 = 0\n\tlocal primes_sum14\
    \ = 0\n\tlocal primes_sum15 = 0\n\tlocal primes_sum16 = 0\n\tlocal primes_sum17\
    \ = 0\n\tlocal primes_sum18 = 0\n\tlocal primes_sum19 = 0\n\tlocal primes_sum20\
    \ = 0\n\tlocal primes_sum21 = 0\n\tlocal primes_sum22 = 0\n\tlocal primes_sum23\
    \ = 0\n\tlocal primes_sum24 = 0\n\tlocal primes_sum25 = 0\n\tlocal primes_sum26\
    \ = 0\n\tlocal primes_sum27 = 0\n\tlocal primes_sum28 = 0\n\tlocal primes_sum29\
    \ = 0\n\tlocal primes_sum30 = 0\n\tlocal primes_sum31 = 0\n\tlocal primes_sum32\
    \ = 0\n\tlocal primes_sum33 = 0\n\tlocal primes_sum34 = 0\n\tlocal primes_sum35\
    \ = 0\n\tlocal primes_sum36 = 0\n\tlocal primes_sum37 = 0\n\tlocal primes_sum38\
    \ = 0\n\tlocal primes_sum39 = 0\n\tlocal primes_sum40 = 0\n\tlocal primes_sum41\
    \ = 0\n\tlocal primes_sum42 = 0\n\tlocal primes_sum43 = 0\n\tlocal primes_sum44\
    \ = 0\n\tlocal primes_sum45 = 0\n\tlocal primes_sum46 = 0\n\tlocal primes_sum47\
    \ = 0\n\tlocal primes_sum48 = 0\n\tlocal primes_sum49 = 0\n\tlocal primes_sum50\
    \ = 0\n\tlocal primes_sum51 = 0\n\tlocal primes_sum52 = 0\n\tlocal primes_sum53\
    \ = 0\n\tlocal primes_sum54 = 0\n\tlocal primes_sum55 = 0\n\tlocal primes_sum56\
    \ = 0\n\tlocal primes_sum57 = 0\n\tlocal primes_sum58 = 0\n\tlocal primes_sum59\
    \ = 0\n\tlocal primes_sum60 = 0\n\tlocal primes_sum61 = 0\n\tlocal primes_sum62\
    \ = 0\n\tlocal primes_sum63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp19ye2x0d.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local digits = {}\n  local digits_count\
    \ = 0\n  local primes_digits = {}\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local primes_digits_count = 0\n  local primes_digits_count\
    \ = 0\n  local primes_digits_count = 0\n  local primes_digits_count = 0\n  local\
    \ primes_digits_count = 0\n  local prime\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw1u4ju1v.lua:96: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local key = {}\n  local i = 1\n  while i <= #num do\n    local c = string.sub(num,\
    \ i, i)\n    if c == \"A\" or c == \"B\" or c == \"C\" or c == \"D\" or c == \"\
    E\" or c == \"F\" then\n      table.insert(key, c)\n    end\n    i = i + 1\n \
    \ end\n  return #key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4qlp867.lua:33:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa4qlp867.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_min = {}\n\tlocal\
    \ prime_digit_count_max_min = {}\n\tlocal prime_digit_count_max_min_max = {}\n\
    \tlocal prime_digit_count_max_min_max_min = {}\n\tlocal prime_digit_count_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min = {}\n\tlocal\
    \ prime_digit_count_max_min_max_min_max_min_max_min_max = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = {}\n\tlocal prime_digit_count_max_min_max_min_max_min_max_min_max_min_max_min_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7ndsp8m.lua:58: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal count = 0\n\tlocal digit\n\tfor i = 1, #num, 1 do\n\t\
    \tdigit = tonumber(string.sub(num, i, i))\n\t\tif digit == nil then\n\t\t\tbreak\n\
    \t\tend\n\t\tif digit == 0 or digit == 1 then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\t\thex[digit] = hex[digit] + 1\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0rm7_2a.lua:38:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_0rm7_2a.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local count = 0\n    local digit\n    for digit in string.gmatch(num,\
    \ \"%x\") do\n        count = count + 1\n        hex[digit] = hex[digit] + 1\n\
    \    end\n    for digit = 2, #hex do\n        if hex[digit] == 2 then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk0fpc45.lua:23:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvk0fpc45.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_count = 0\n    local prime_digits = {}\n\
    \    local prime_digit_count = 0\n    local prime_digit_sum = 0\n    local prime_digit_sum2\
    \ = 0\n    local prime_digit_sum3 = 0\n    local prime_digit_sum4 = 0\n    local\
    \ prime_digit_sum5 = 0\n    local prime_digit_sum6 = 0\n    local prime_digit_sum7\
    \ = 0\n    local prime_digit_sum8 = 0\n    local prime_digit_sum9 = 0\n    local\
    \ prime_digit_sum10 = 0\n    local prime_digit_sum11 = 0\n    local prime_digit_sum12\
    \ = 0\n    local prime_digit_sum13 = 0\n    local prime_digit_sum14 = 0\n    local\
    \ prime_digit_sum15 = 0\n    local prime_digit_sum16 = 0\n    local prime_digit_sum17\
    \ = 0\n    local prime_digit_sum18 = 0\n    local prime_digit_sum19 = 0\n    local\
    \ prime_digit_sum20 = 0\n    local prime_digit_sum21 = 0\n    local prime_digit_sum22\
    \ = 0\n    local prime_digit_sum23 = 0\n    local prime_digit_sum24 = 0\n    local\
    \ prime_digit_sum25 = 0\n    local prime_digit_sum26 = 0\n    local prime_digit_sum27\
    \ = 0\n    local prime_digit_sum28 = 0\n    local prime_digit_sum29 = 0\n    local\
    \ prime_digit_sum30 = 0\n    local prime_digit_sum31 = 0\n    local prime_digit_sum32\
    \ = 0\n    local prime_digit_sum33 = 0\n    local prime_digit_sum34 = 0\n    local\
    \ prime_digit_sum35 = 0\n    local prime_digit_sum36 = 0\n    local prime_digit_sum37\
    \ = 0\n    local prime_digit_sum38 = 0\n    local prime_digit_sum39 = 0\n    local\
    \ prime_digit_sum40 = 0\n    local prime_digit_sum41 = 0\n    local prime_digit_sum42\
    \ = 0\n    local prime_digit_sum43 = 0\n    local prime_digit_sum44 = 0\n    local\
    \ prime_digit_sum45 = 0\n    local prime_digit_sum46 = 0\n    local prime_digit_sum47\
    \ = 0\n    local prime_digit_sum48 = 0\n    local prime_digit_sum49 = 0\n    local\
    \ prime_digit_sum50 = 0\n    local prime_digit_sum51 = 0\n    local prime_digit_sum52\
    \ = 0\n    local prime_digit_sum53 = 0\n    local prime_digit_sum54 = 0\n    local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphivu3z6_.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_sum = 0\n\tlocal prime_digit_count_sum2 = 0\n\tlocal\
    \ prime_digit_count_sum3 = 0\n\tlocal prime_digit_count_sum4 = 0\n\tlocal prime_digit_count_sum5\
    \ = 0\n\tlocal prime_digit_count_sum6 = 0\n\tlocal prime_digit_count_sum7 = 0\n\
    \tlocal prime_digit_count_sum8 = 0\n\tlocal prime_digit_count_sum9 = 0\n\tlocal\
    \ prime_digit_count_sum10 = 0\n\tlocal prime_digit_count_sum11 = 0\n\tlocal prime_digit_count_sum12\
    \ = 0\n\tlocal prime_digit_count_sum13 = 0\n\tlocal prime_digit_count_sum14 =\
    \ 0\n\tlocal prime_digit_count_sum15 = 0\n\tlocal prime_digit_count_sum16 = 0\n\
    \tlocal prime_digit_count_sum17 = 0\n\tlocal prime_digit_count_sum18 = 0\n\tlocal\
    \ prime_digit_count_sum19 = 0\n\tlocal prime_digit_count_sum20 = 0\n\tlocal prime_digit_count_sum21\
    \ = 0\n\tlocal prime_digit_count_sum22 = 0\n\tlocal prime_digit_count_sum23 =\
    \ 0\n\tlocal prime_digit_count_sum24 = 0\n\tlocal prime_digit_count_sum25 = 0\n\
    \tlocal prime_digit_count_sum26 = 0\n\tlocal prime_digit_count_sum27 = 0\n\tlocal\
    \ prime_digit_count_sum28 = 0\n\tlocal prime_digit_count_sum29 = 0\n\tlocal prime_digit_count_sum30\
    \ = 0\n\tlocal prime_digit_count_sum31 = 0\n\tlocal prime_digit_count_sum32 =\
    \ 0\n\tlocal prime_digit_count_sum33 = 0\n\tlocal prime_digit_count_sum34 = 0\n\
    \tlocal prime_digit_count_sum35 = 0\n\tlocal prime_digit_count_sum36 = 0\n\tlocal\
    \ prime_digit_count_sum37 = 0\n\tlocal prime_digit_count_sum38 = 0\n\tlocal prime_digit_count_sum39\
    \ = 0\n\tlocal prime_digit_count_sum40 = 0\n\tlocal prime_digit_count_sum41 =\
    \ 0\n\tlocal prime_digit_count_sum42 = 0\n\tlocal prime_digit_count_sum43 = 0\n\
    \tlocal prime_digit_count_sum44 = 0\n\tlocal prime_digit_count_sum45 = 0\n\tlocal\
    \ prime_digit_count_sum46 = 0\n\tlocal prime_digit_count_sum47 = 0\n\tlocal prime_digit_count_sum48\
    \ = 0\n\tlocal prime_digit_count_sum49 = 0\n\tlocal prime\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp67sls4i7.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_count = 0\n  local prime_digits = {}\n  local\
    \ prime_digit_count = 0\n  local prime_digit_sum = 0\n  local prime_digit_sum2\
    \ = 0\n  local prime_digit_sum3 = 0\n  local prime_digit_sum4 = 0\n  local prime_digit_sum5\
    \ = 0\n  local prime_digit_sum6 = 0\n  local prime_digit_sum7 = 0\n  local prime_digit_sum8\
    \ = 0\n  local prime_digit_sum9 = 0\n  local prime_digit_sum10 = 0\n  local prime_digit_sum11\
    \ = 0\n  local prime_digit_sum12 = 0\n  local prime_digit_sum13 = 0\n  local prime_digit_sum14\
    \ = 0\n  local prime_digit_sum15 = 0\n  local prime_digit_sum16 = 0\n  local prime_digit_sum17\
    \ = 0\n  local prime_digit_sum18 = 0\n  local prime_digit_sum19 = 0\n  local prime_digit_sum20\
    \ = 0\n  local prime_digit_sum21 = 0\n  local prime_digit_sum22 = 0\n  local prime_digit_sum23\
    \ = 0\n  local prime_digit_sum24 = 0\n  local prime_digit_sum25 = 0\n  local prime_digit_sum26\
    \ = 0\n  local prime_digit_sum27 = 0\n  local prime_digit_sum28 = 0\n  local prime_digit_sum29\
    \ = 0\n  local prime_digit_sum30 = 0\n  local prime_digit_sum31 = 0\n  local prime_digit_sum32\
    \ = 0\n  local prime_digit_sum33 = 0\n  local prime_digit_sum34 = 0\n  local prime_digit_sum35\
    \ = 0\n  local prime_digit_sum36 = 0\n  local prime_digit_sum37 = 0\n  local prime_digit_sum38\
    \ = 0\n  local prime_digit_sum39 = 0\n  local prime_digit_sum40 = 0\n  local prime_digit_sum41\
    \ = 0\n  local prime_digit_sum42 = 0\n  local prime_digit_sum43 = 0\n  local prime_digit_sum44\
    \ = 0\n  local prime_digit_sum45 = 0\n  local prime_digit_sum46 = 0\n  local prime_digit_sum47\
    \ = 0\n  local prime_digit_sum48 = 0\n  local prime_digit_sum49 = 0\n  local prime_digit_sum50\
    \ = 0\n  local prime_digit_sum51 = 0\n  local prime_digit_sum52 = 0\n  local prime_digit_sum53\
    \ = 0\n  local prime_digit_sum54 = 0\n  local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpohywk9w1.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_sum = 0\n\
    \    local primes_sum2 = 0\n    local primes_sum3 = 0\n    local primes_sum4 =\
    \ 0\n    local primes_sum5 = 0\n    local primes_sum6 = 0\n    local primes_sum7\
    \ = 0\n    local primes_sum8 = 0\n    local primes_sum9 = 0\n    local primes_sum10\
    \ = 0\n    local primes_sum11 = 0\n    local primes_sum12 = 0\n    local primes_sum13\
    \ = 0\n    local primes_sum14 = 0\n    local primes_sum15 = 0\n    local primes_sum16\
    \ = 0\n    local primes_sum17 = 0\n    local primes_sum18 = 0\n    local primes_sum19\
    \ = 0\n    local primes_sum20 = 0\n    local primes_sum21 = 0\n    local primes_sum22\
    \ = 0\n    local primes_sum23 = 0\n    local primes_sum24 = 0\n    local primes_sum25\
    \ = 0\n    local primes_sum26 = 0\n    local primes_sum27 = 0\n    local primes_sum28\
    \ = 0\n    local primes_sum29 = 0\n    local primes_sum30 = 0\n    local primes_sum31\
    \ = 0\n    local primes_sum32 = 0\n    local primes_sum33 = 0\n    local primes_sum34\
    \ = 0\n    local primes_sum35 = 0\n    local primes_sum36 = 0\n    local primes_sum37\
    \ = 0\n    local primes_sum38 = 0\n    local primes_sum39 = 0\n    local primes_sum40\
    \ = 0\n    local primes_sum41 = 0\n    local primes_sum42 = 0\n    local primes_sum43\
    \ = 0\n    local primes_sum44 = 0\n    local primes_sum45 = 0\n    local primes_sum46\
    \ = 0\n    local primes_sum47 = 0\n    local primes_sum48 = 0\n    local primes_sum49\
    \ = 0\n    local primes_sum50 = 0\n    local primes_sum51 = 0\n    local primes_sum52\
    \ = 0\n    local primes_sum53 = 0\n    local primes_sum54 = 0\n    local primes_sum55\
    \ = 0\n    local primes_sum56 = 0\n    local primes_sum57 = 0\n    local primes_sum58\
    \ = 0\n    local primes_sum59 = 0\n    local primes_sum60 = 0\n    local primes_sum61\
    \ = 0\n    local primes_sum62 = 0\n    local primes_sum63\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe56pvb5j.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb4uffx54.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiqr3ck23.lua:19: ')' expected (to close '(' at line 18) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime = 0\n    local count\
    \ = 0\n    for i = 1, #num do\n        local digit = tonumber(num:sub(i,i))\n\
    \        if digit == nil then\n            error(\"invalid hexadecimal number\"\
    )\n        end\n        if digit == 0 then\n            error(\"invalid hexadecimal\
    \ number\")\n        end\n        if digit == 1 then\n            error(\"invalid\
    \ hexadecimal number\")\n        end\n        if digit == 2 then\n           \
    \ primes[#primes+1] = digit\n        else\n            hex[#hex+1] = digit\n \
    \       end\n    end\n    for i = 1, #primes do\n        local prime = primes[i]\n\
    \        for j = 1, #hex do\n            if hex[j] == prime then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpdiz1xs.lua:25:\
    \ invalid hexadecimal number\nstack traceback:\n\t/tmp/tmprpdiz1xs.lua:25: in\
    \ function 'candidate'\n\t/tmp/tmprpdiz1xs.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tfor i = 1, #num do\n\t\tlocal c = string.sub(num, i, i)\n\t\
    \tif c ~= nil then\n\t\t\thex[c] = hex[c] or 1\n\t\tend\n\tend\n\tlocal primes\
    \ = {}\n\tlocal prime = 1\n\tlocal prime_found = false\n\tlocal prime_found2 =\
    \ false\n\tlocal prime_found3 = false\n\tlocal prime_found4 = false\n\tlocal prime_found5\
    \ = false\n\tlocal prime_found6 = false\n\tlocal prime_found7 = false\n\tlocal\
    \ prime_found8 = false\n\tlocal prime_found9 = false\n\tlocal prime_found10 =\
    \ false\n\tlocal prime_found11 = false\n\tlocal prime_found12 = false\n\tlocal\
    \ prime_found13 = false\n\tlocal prime_found14 = false\n\tlocal prime_found15\
    \ = false\n\tlocal prime_found16 = false\n\tlocal prime_found17 = false\n\tlocal\
    \ prime_found18 = false\n\tlocal prime_found19 = false\n\tlocal prime_found20\
    \ = false\n\tlocal prime_found21 = false\n\tlocal prime_found22 = false\n\tlocal\
    \ prime_found23 = false\n\tlocal prime_found24 = false\n\tlocal prime_found25\
    \ = false\n\tlocal prime_found26 = false\n\tlocal prime_found27 = false\n\tlocal\
    \ prime_found28 = false\n\tlocal prime_found29 = false\n\tlocal prime_found30\
    \ = false\n\tlocal prime_found31 = false\n\tlocal prime_found32 = false\n\tlocal\
    \ prime_found33 = false\n\tlocal prime_found34 = false\n\tlocal prime_found35\
    \ = false\n\tlocal prime_found36 = false\n\tlocal prime_found37 = false\n\tlocal\
    \ prime_found38 = false\n\tlocal prime_found39 = false\n\tlocal prime_found40\
    \ = false\n\tlocal prime_found41 = false\n\tlocal prime_found42 = false\n\tlocal\
    \ prime_found43 = false\n\tlocal prime_found44 = false\n\tlocal prime_found45\
    \ = false\n\tlocal prime_found46 = false\n\tlocal prime_found47 = false\n\tlocal\
    \ prime_found48 = false\n\tlocal prime_found49 = false\n\tlocal prime_found50\
    \ = false\n\tlocal prime_found51 = false\n\tlocal prime_found52 = false\n\tlocal\
    \ prime_found53 = false\n\tlocal prime_found54 = false\n\tlocal prime_found55\
    \ = false\n\tlocal prime_found56 = false\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoyx6rzbl.lua:96: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_digits = {}\n    local prime_digit_count\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\
    \ = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max =\
    \ 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n\
    \    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n  \
    \  local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local\
    \ prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\
    \ = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max =\
    \ 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n\
    \    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n  \
    \  local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local\
    \ prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpogktznor.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = string.gsub(tostring(num), \"%a+\", \"\")\n    local num_len\
    \ = #num_str\n    local num_digits = #num_str\n    local num_primes = 0\n    local\
    \ num_primes_count = 0\n    local num_primes_sum = 0\n    local num_primes_sum2\
    \ = 0\n    local num_primes_sum3 = 0\n    local num_primes_sum4 = 0\n    local\
    \ num_primes_sum5 = 0\n    local num_primes_sum6 = 0\n    local num_primes_sum7\
    \ = 0\n    local num_primes_sum8 = 0\n    local num_primes_sum9 = 0\n    local\
    \ num_primes_sum10 = 0\n    local num_primes_sum11 = 0\n    local num_primes_sum12\
    \ = 0\n    local num_primes_sum13 = 0\n    local num_primes_sum14 = 0\n    local\
    \ num_primes_sum15 = 0\n    local num_primes_sum16 = 0\n    local num_primes_sum17\
    \ = 0\n    local num_primes_sum18 = 0\n    local num_primes_sum19 = 0\n    local\
    \ num_primes_sum20 = 0\n    local num_primes_sum21 = 0\n    local num_primes_sum22\
    \ = 0\n    local num_primes_sum23 = 0\n    local num_primes_sum24 = 0\n    local\
    \ num_primes_sum25 = 0\n    local num_primes_sum26 = 0\n    local num_primes_sum27\
    \ = 0\n    local num_primes_sum28 = 0\n    local num_primes_sum29 = 0\n    local\
    \ num_primes_sum30 = 0\n    local num_primes_sum31 = 0\n    local num_primes_sum32\
    \ = 0\n    local num_primes_sum33 = 0\n    local num_primes_sum34 = 0\n    local\
    \ num_primes_sum35 = 0\n    local num_primes_sum36 = 0\n    local num_primes_sum37\
    \ = 0\n    local num_primes_sum38 = 0\n    local num_primes_sum39 = 0\n    local\
    \ num_primes_sum40 = 0\n    local num_primes_sum41 = 0\n    local num_primes_sum42\
    \ = 0\n    local num_primes_sum43 = 0\n    local num_primes_sum44 = 0\n    local\
    \ num_primes_sum45 = 0\n    local num_primes_sum46 = 0\n    local num_primes_sum47\
    \ = 0\n    local num_primes_sum48 = 0\n    local num_primes_sum49 = 0\n    local\
    \ num_primes_sum50 = 0\n    local num_primes_sum51 = 0\n    local num_primes_sum52\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe8m4_rf4.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_sum = 0\n\
    \    local primes_sum2 = 0\n    local primes_sum3 = 0\n    local primes_sum4 =\
    \ 0\n    local primes_sum5 = 0\n    local primes_sum6 = 0\n    local primes_sum7\
    \ = 0\n    local primes_sum8 = 0\n    local primes_sum9 = 0\n    local primes_sum10\
    \ = 0\n    local primes_sum11 = 0\n    local primes_sum12 = 0\n    local primes_sum13\
    \ = 0\n    local primes_sum14 = 0\n    local primes_sum15 = 0\n    local primes_sum16\
    \ = 0\n    local primes_sum17 = 0\n    local primes_sum18 = 0\n    local primes_sum19\
    \ = 0\n    local primes_sum20 = 0\n    local primes_sum21 = 0\n    local primes_sum22\
    \ = 0\n    local primes_sum23 = 0\n    local primes_sum24 = 0\n    local primes_sum25\
    \ = 0\n    local primes_sum26 = 0\n    local primes_sum27 = 0\n    local primes_sum28\
    \ = 0\n    local primes_sum29 = 0\n    local primes_sum30 = 0\n    local primes_sum31\
    \ = 0\n    local primes_sum32 = 0\n    local primes_sum33 = 0\n    local primes_sum34\
    \ = 0\n    local primes_sum35 = 0\n    local primes_sum36 = 0\n    local primes_sum37\
    \ = 0\n    local primes_sum38 = 0\n    local primes_sum39 = 0\n    local primes_sum40\
    \ = 0\n    local primes_sum41 = 0\n    local primes_sum42 = 0\n    local primes_sum43\
    \ = 0\n    local primes_sum44 = 0\n    local primes_sum45 = 0\n    local primes_sum46\
    \ = 0\n    local primes_sum47 = 0\n    local primes_sum48 = 0\n    local primes_sum49\
    \ = 0\n    local primes_sum50 = 0\n    local primes_sum51 = 0\n    local primes_sum52\
    \ = 0\n    local primes_sum53 = 0\n    local primes_sum54 = 0\n    local primes_sum55\
    \ = 0\n    local primes_sum56 = 0\n    local primes_sum57 = 0\n    local primes_sum58\
    \ = 0\n    local primes_sum59 = 0\n    local primes_sum60 = 0\n    local primes_sum61\
    \ = 0\n    local primes_sum62 = 0\n    local primes_sum63\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_cy11uwv.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal\
    \ primes_count_2 = 0\n\tlocal primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\
    \tlocal primes_count_5 = 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7\
    \ = 0\n\tlocal primes_count_8 = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10\
    \ = 0\n\tlocal primes_count_11 = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13\
    \ = 0\n\tlocal primes_count_14 = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16\
    \ = 0\n\tlocal primes_count_17 = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19\
    \ = 0\n\tlocal primes_count_20 = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22\
    \ = 0\n\tlocal primes_count_23 = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25\
    \ = 0\n\tlocal primes_count_26 = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28\
    \ = 0\n\tlocal primes_count_29 = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31\
    \ = 0\n\tlocal primes_count_32 = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34\
    \ = 0\n\tlocal primes_count_35 = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37\
    \ = 0\n\tlocal primes_count_38 = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40\
    \ = 0\n\tlocal primes_count_41 = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43\
    \ = 0\n\tlocal primes_count_44 = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46\
    \ = 0\n\tlocal primes_count_47 = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49\
    \ = 0\n\tlocal primes_count_50 = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52\
    \ = 0\n\tlocal primes_count_53 = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55\
    \ = 0\n\tlocal primes_count_56 = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58\
    \ = 0\n\tlocal primes_count_59 = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61\
    \ = 0\n\tlocal primes_count_62 = 0\n\tlocal primes_count_63\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxwp2j1_t.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 0\n\t\
    local primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min\
    \ = 0\n\tlocal primes_count_max = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_max\
    \ = 0\n\tlocal primes_count_min = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppth3ekwy.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal function is_prime(n)\n\t\tlocal function is_factor(factor)\n\t\t\treturn\
    \ math.mod(n, factor) == 0 and factor ~= 1\n\t\tend\n\t\tlocal function is_prime_pair(m)\n\
    \t\t\treturn is_prime(m) and is_prime(m - 1)\n\t\tend\n\t\tlocal function is_prime_triple(m)\n\
    \t\t\treturn is_prime(m) and is_prime(m - 2) and is_prime(m - 3)\n\t\tend\n\t\t\
    local function is_prime_quad(m)\n\t\t\treturn is_prime(m) and is_prime(m - 4)\
    \ and is_prime(m - 5) and is_prime(m - 6) and is_prime(m - 7)\n\t\tend\n\t\tlocal\
    \ function is_prime_quintuple(m)\n\t\t\treturn is_prime(m) and is_prime(m - 8)\
    \ and is_prime(m - 9) and is_prime(m - 10) and is_prime(m - 11) and is_prime(m\
    \ - 12) and is_prime(m - 13) and is_prime(m - 14) and is_prime(m - 15)\n\t\tend\n\
    \t\tlocal function is_prime_hexadecimal(m)\n\t\t\treturn is_prime(m) and is_prime(m\
    \ - 16) and is_prime(m - 17) and is_prime(m - 18) and is_prime(m - 19) and is_prime(m\
    \ - 20) and is_prime(m - 21) \n\t\tend\n\t\tlocal function is_prime_decimal(m)\n\
    \t\t\treturn is_prime(m) and is_prime(m - 10) and is_prime(m - 11) and is_prime(m\
    \ - 12) and is_prime(m - 13) and is_prime(m - 14) and is_prime(m - 15) and is_prime(m\
    \ - 16) and is_prime(m - 17) and is_prime(m - 18) and is_prime(m - 19) and is_prime(m\
    \ - 20) and is_prime(m - 21) \n\t\tend\n\t\tlocal function is_prime_octal(m)\n\
    \t\t\treturn is_prime(m) and is_prime(m - 8) and is_prime(m - 9) and is_prime(m\
    \ - 10) and is_prime(m - 11) and is_prime(m - 12) and is_prime(m - 13) and is_prime(m\
    \ - 14) and is_prime(m - 15) and is_prime(m - 16) and is_prime(m - 17) and is_prime(m\
    \ - 18) and is_prime(m - 19) and is_prime(m - 20) and is_prime(m - 21) \n\t\t\
    end\n\t\tlocal function is_prime_hex_digit(m)\n\t\t\treturn is_prime(m) and is_prime(m\
    \ - 16) and is_prime(m - 17) and is_prime(m - 18) and is_prime(m - 19) and is_prime(m\
    \ - 20) and is_prime(m - 21) \n\t\tend\n\t\tlocal function is_prime_decimal_digit(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpki4eny0q.lua:47: ')' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count = {}\n\
    \  local prime_digit_count_max = {}\n  local prime_digit_count_max_index = {}\n\
    \  local prime_digit_count_max_index2 = {}\n  local prime_digit_count_max_index3\
    \ = {}\n  local prime_digit_count_max_index4 = {}\n  local prime_digit_count_max_index5\
    \ = {}\n  local prime_digit_count_max_index6 = {}\n  local prime_digit_count_max_index7\
    \ = {}\n  local prime_digit_count_max_index8 = {}\n  local prime_digit_count_max_index9\
    \ = {}\n  local prime_digit_count_max_index10 = {}\n  local prime_digit_count_max_index11\
    \ = {}\n  local prime_digit_count_max_index12 = {}\n  local prime_digit_count_max_index13\
    \ = {}\n  local prime_digit_count_max_index14 = {}\n  local prime_digit_count_max_index15\
    \ = {}\n  local prime_digit_count_max_index16 = {}\n  local prime_digit_count_max_index17\
    \ = {}\n  local prime_digit_count_max_index18 = {}\n  local prime_digit_count_max_index19\
    \ = {}\n  local prime_digit_count_max_index20 = {}\n  local prime_digit_count_max_index21\
    \ = {}\n  local prime_digit_count_max_index22 = {}\n  local prime_digit_count_max_index23\
    \ = {}\n  local prime_digit_count_max_index24 = {}\n  local prime_digit_count_max_index25\
    \ = {}\n  local prime_digit_count_max_index26 = {}\n  local prime_digit_count_max_index27\
    \ = {}\n  local prime_digit_count_max_index28 = {}\n  local prime_digit_count_max_index29\
    \ = {}\n  local prime_digit_count_max_index30 = {}\n  local prime_digit_count_max_index31\
    \ = {}\n  local prime_digit_count_max_index32 = {}\n  local prime_digit_count_max_index33\
    \ = {}\n  local prime_digit_count_max_index34 = {}\n  local prime_digit_count_max_index35\
    \ = {}\n  local prime_digit_count_max_index36 = {}\n  local prime_digit_count_max_index37\
    \ = {}\n  local prime_digit_count_max_index38 = {}\n  local prime_digit_count_max_index39\
    \ = {}\n  local prime_digit_count_max_index40 = {}\n  local prime_digit_count_max_index41\
    \ = {}\n  local prime_digit_count_max_index42 = {}\n  local prime_digit_count_max_index43\
    \ = {}\n  local prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpksapq_uh.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime = 1\n\tlocal count = 0\n\t\
    for i = 1, #num, 1 do\n\t\tlocal c = string.sub(num, i, i)\n\t\tif c == \"A\"\
    \ then\n\t\t\thex[1] = hex[1] + 2\n\t\telseif c == \"B\" then\n\t\t\thex[2] =\
    \ hex[2] + 2\n\t\telseif c == \"C\" then\n\t\t\thex[3] = hex[3] + 2\n\t\telseif\
    \ c == \"D\" then\n\t\t\thex[4] = hex[4] + 2\n\t\telseif c == \"E\" then\n\t\t\
    \thex[5] = hex[5] + 2\n\t\telseif c == \"F\" then\n\t\t\thex[6] = hex[6] + 2\n\
    \t\telseif c == \"0\" then\n\t\t\thex[7] = hex[7] + 2\n\t\telseif c == \"1\" then\n\
    \t\t\thex[8] = hex[8] + 2\n\t\telseif c == \"2\" then\n\t\t\thex[9] = hex[9] +\
    \ 2\n\t\telseif c == \"3\" then\n\t\t\thex[10] = hex[10] + 2\n\t\telseif c ==\
    \ \"4\" then\n\t\t\thex[11] = hex[11] + 2\n\t\telseif c == \"5\" then\n\t\t\t\
    hex[12] = hex[12] + 2\n\t\telseif c == \"6\" then\n\t\t\thex[13] = hex[13] + 2\n\
    \t\telseif c == \"7\" then\n\t\t\thex[14] = hex[14] + 2\n\t\telseif c == \"8\"\
    \ then\n\t\t\thex[15] = hex[15] + 2\n\t\telseif c == \"9\" then\n\t\t\thex[16]\
    \ = hex[16] + 2\n\t\telseif c == \"A\" then\n\t\t\thex[17] = hex[17] + 2\n\t\t\
    elseif c == \"B\" then\n\t\t\thex[18] = hex[18] + 2\n\t\telseif c == \"C\" then\n\
    \t\t\thex[19] = hex[19] + 2\n\t\telseif c == \"D\" then\n\t\t\thex[20] = hex[20]\
    \ + 2\n\t\telseif c == \"E\" then\n\t\t\thex[21] = hex[21] + 2\n\t\telseif c ==\
    \ \"F\" then\n\t\t\thex[22] = hex[22] + 2\n\t\telseif c == \"0\" then\n\t\t\t\
    hex[23] = hex[23] + 2\n\t\telseif c == \"1\" then\n\t\t\thex[24] = hex[24] + 2\n\
    \t\telseif c == \"2\" then\n\t\t\thex[25] = hex[25] + 2\n\t\telseif c == \"3\"\
    \ then\n\t\t\thex\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptff8v296.lua:76: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal num_digits\
    \ = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count = 0\n\tlocal num_primes_sum\
    \ = 0\n\tlocal num_primes_sum2 = 0\n\tlocal num_primes_sum3 = 0\n\tlocal num_primes_sum4\
    \ = 0\n\tlocal num_primes_sum5 = 0\n\tlocal num_primes_sum6 = 0\n\tlocal num_primes_sum7\
    \ = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum9 = 0\n\tlocal num_primes_sum10\
    \ = 0\n\tlocal num_primes_sum11 = 0\n\tlocal num_primes_sum12 = 0\n\tlocal num_primes_sum13\
    \ = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum15 = 0\n\tlocal num_primes_sum16\
    \ = 0\n\tlocal num_primes_sum17 = 0\n\tlocal num_primes_sum18 = 0\n\tlocal num_primes_sum19\
    \ = 0\n\tlocal num_primes_sum20 = 0\n\tlocal num_primes_sum21 = 0\n\tlocal num_primes_sum22\
    \ = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum24 = 0\n\tlocal num_primes_sum25\
    \ = 0\n\tlocal num_primes_sum26 = 0\n\tlocal num_primes_sum27 = 0\n\tlocal num_primes_sum28\
    \ = 0\n\tlocal num_primes_sum29 = 0\n\tlocal num_primes_sum30 = 0\n\tlocal num_primes_sum31\
    \ = 0\n\tlocal num_primes_sum32 = 0\n\tlocal num_primes_sum33 = 0\n\tlocal num_primes_sum34\
    \ = 0\n\tlocal num_primes_sum35 = 0\n\tlocal num_primes_sum36 = 0\n\tlocal num_primes_sum37\
    \ = 0\n\tlocal num_primes_sum38 = 0\n\tlocal num_primes_sum39 = 0\n\tlocal num_primes_sum40\
    \ = 0\n\tlocal num_primes_sum41 = 0\n\tlocal num_primes_sum42 = 0\n\tlocal num_primes_sum43\
    \ = 0\n\tlocal num_primes_sum44 = 0\n\tlocal num_primes_sum45 = 0\n\tlocal num_primes_sum46\
    \ = 0\n\tlocal num_primes_sum47 = 0\n\tlocal num_primes_sum48 = 0\n\tlocal num_primes_sum49\
    \ = 0\n\tlocal num_primes_sum50 = 0\n\tlocal num_primes_sum51 = 0\n\tlocal num_primes_sum52\
    \ = 0\n\tlocal num_primes_sum53\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jiilawo.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 3\n\t\
    local primes_count_min = 2\n\tlocal primes_count_step = 2\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_step\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_step\n\tlocal primes_count_step = primes_count_step * primes_count_step\n\
    \tlocal primes_count_max = primes_count_max * primes_count_step\n\tlocal primes_count_min\
    \ = primes_count_min * primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ * primes_count_step\n\tlocal primes_count_max = primes_count_max * primes_count_step\n\
    \tlocal primes_count_min = primes_count_min * primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step * primes_count_step\n\tlocal primes_count_max = primes_count_max\
    \ * primes_count_step\n\tlocal primes_count_min = primes_count_min * primes_count_step\n\
    \tlocal primes_count_step = primes_count_step * primes_count_step\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_step\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_step\n\tlocal primes_count_step = primes_count_step * primes_count_step\n\
    \tlocal primes_count_max = primes_count_max * primes_count_step\n\tlocal primes_count_min\
    \ = primes_count_min * primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ * primes_count_step\n\tlocal primes_count_max = primes_count_max * primes_count_step\n\
    \tlocal primes_count_min = primes_count_min * primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step * primes_count_step\n\tlocal primes_count_max = primes_count_max\
    \ * primes_count_step\n\tlocal primes_count_min = primes_count_min * primes_count_step\n\
    \tlocal primes_count_step = primes_count_step * primes_count_step\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_step\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_step\n\tlocal primes_count_step = primes_count_step * primes_count_step\n\
    \tlocal primes_count_max = primes_count_max * primes_count_step\n\tlocal primes_count_min\
    \ = primes_count_min * primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ * primes_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe4qprybe.lua:65: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal primes_hex = {}\n\tlocal primes_hex_hex = {}\n\tlocal primes_hex_hex_count\
    \ = {}\n\tlocal primes_hex_hex_hex = {}\n\tlocal primes_hex_hex_hex_hex = {}\n\
    \tlocal primes_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\t\
    local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\t\
    local primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count =\
    \ {}\n\tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\
    \tlocal primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_count = {}\n\tlocal\
    \ primes_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp43tunnzq.lua:68: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp16ipcxu9.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp62ikseqe.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index = {}\n\
    \tlocal prime_digit_count_max_index2 = {}\n\tlocal prime_digit_count_max_index3\
    \ = {}\n\tlocal prime_digit_count_max_index4 = {}\n\tlocal prime_digit_count_max_index5\
    \ = {}\n\tlocal prime_digit_count_max_index6 = {}\n\tlocal prime_digit_count_max_index7\
    \ = {}\n\tlocal prime_digit_count_max_index8 = {}\n\tlocal prime_digit_count_max_index9\
    \ = {}\n\tlocal prime_digit_count_max_index10 = {}\n\tlocal prime_digit_count_max_index11\
    \ = {}\n\tlocal prime_digit_count_max_index12 = {}\n\tlocal prime_digit_count_max_index13\
    \ = {}\n\tlocal prime_digit_count_max_index14 = {}\n\tlocal prime_digit_count_max_index15\
    \ = {}\n\tlocal prime_digit_count_max_index16 = {}\n\tlocal prime_digit_count_max_index17\
    \ = {}\n\tlocal prime_digit_count_max_index18 = {}\n\tlocal prime_digit_count_max_index19\
    \ = {}\n\tlocal prime_digit_count_max_index20 = {}\n\tlocal prime_digit_count_max_index21\
    \ = {}\n\tlocal prime_digit_count_max_index22 = {}\n\tlocal prime_digit_count_max_index23\
    \ = {}\n\tlocal prime_digit_count_max_index24 = {}\n\tlocal prime_digit_count_max_index25\
    \ = {}\n\tlocal prime_digit_count_max_index26 = {}\n\tlocal prime_digit_count_max_index27\
    \ = {}\n\tlocal prime_digit_count_max_index28 = {}\n\tlocal prime_digit_count_max_index29\
    \ = {}\n\tlocal prime_digit_count_max_index30 = {}\n\tlocal prime_digit_count_max_index31\
    \ = {}\n\tlocal prime_digit_count_max_index32 = {}\n\tlocal prime_digit_count_max_index33\
    \ = {}\n\tlocal prime_digit_count_max_index34 = {}\n\tlocal prime_digit_count_max_index35\
    \ = {}\n\tlocal prime_digit_count_max_index36 = {}\n\tlocal prime_digit_count_max_index37\
    \ = {}\n\tlocal prime_digit_count_max_index38 = {}\n\tlocal prime_digit_count_max_index39\
    \ = {}\n\tlocal prime_digit_count_max_index40 = {}\n\tlocal prime_digit_count_max_index41\
    \ = {}\n\tlocal prime_digit_count_max_index42 = {}\n\tlocal prime_digit_count_max_index43\
    \ = {}\n\tlocal prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsskfaqex.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ji0rjuo.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digits_count = 0\n\tlocal prime_digit_count = 0\n\tlocal prime_digit_count_max\
    \ = math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmk5x1ary.lua:23: function or expression too complex near 'math'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local hex_count = 0\n    local hex_digit\n    local hex_digit_count\n\
    \    local hex_digit_count2\n    local hex_digit_count3\n    local hex_digit_count4\n\
    \    local hex_digit_count5\n    local hex_digit_count6\n    local hex_digit_count7\n\
    \    local hex_digit_count8\n    local hex_digit_count9\n    local hex_digit_count10\n\
    \    local hex_digit_count11\n    local hex_digit_count12\n    local hex_digit_count13\n\
    \    local hex_digit_count14\n    local hex_digit_count15\n    local hex_digit_count16\n\
    \    local hex_digit_count17\n    local hex_digit_count18\n    local hex_digit_count19\n\
    \    local hex_digit_count20\n    local hex_digit_count21\n    local hex_digit_count22\n\
    \    local hex_digit_count23\n    local hex_digit_count24\n    local hex_digit_count25\n\
    \    local hex_digit_count26\n    local hex_digit_count27\n    local hex_digit_count28\n\
    \    local hex_digit_count29\n    local hex_digit_count30\n    local hex_digit_count31\n\
    \    local hex_digit_count32\n    local hex_digit_count33\n    local hex_digit_count34\n\
    \    local hex_digit_count35\n    local hex_digit_count36\n    local hex_digit_count37\n\
    \    local hex_digit_count38\n    local hex_digit_count39\n    local hex_digit_count40\n\
    \    local hex_digit_count41\n    local hex_digit_count42\n    local hex_digit_count43\n\
    \    local hex_digit_count44\n    local hex_digit_count45\n    local hex_digit_count46\n\
    \    local hex_digit_count47\n    local hex_digit_count48\n    local hex_digit_count49\n\
    \    local hex_digit_count50\n    local hex_digit_count51\n    local hex_digit_count52\n\
    \    local hex_digit_count53\n    local hex_digit_count54\n    local hex_digit_count55\n\
    \    local hex_digit_count56\n    local hex_digit_count57\n    local hex_digit_count58\n\
    \    local hex_digit_count59\n    local hex_digit_count60\n    local hex_digit_count61\n\
    \    local hex_digit_count62\n    local hex_digit_count63\n    local hex_digit_count64\n\
    \    local hex_digit_count65\n    local hex_digit_count66\n    local hex_digit_count67\n\
    \    local hex_digit_count68\n    local hex_digit_count69\n    local hex_digit_count70\n\
    \    local hex_digit_count71\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplj9v3q3q.lua:105: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = 0\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_product\
    \ = 1\n\tlocal prime_digit_sum2 = 0\n\tlocal prime_digit_product2 = 0\n\tlocal\
    \ prime_digit_sum3 = 0\n\tlocal prime_digit_product3 = 0\n\tlocal prime_digit_sum4\
    \ = 0\n\tlocal prime_digit_product4 = 0\n\tlocal prime_digit_sum5 = 0\n\tlocal\
    \ prime_digit_product5 = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_product6\
    \ = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_product7 = 0\n\tlocal\
    \ prime_digit_sum8 = 0\n\tlocal prime_digit_product8 = 0\n\tlocal prime_digit_sum9\
    \ = 0\n\tlocal prime_digit_product9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal\
    \ prime_digit_product10 = 0\n\tlocal prime_digit_sum11 = 0\n\tlocal prime_digit_product11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_product12 = 0\n\tlocal\
    \ prime_digit_sum13 = 0\n\tlocal prime_digit_product13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_product14 = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal\
    \ prime_digit_product15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_product16\
    \ = 0\n\tlocal prime_digit_sum17 = 0\n\tlocal prime_digit_product17 = 0\n\tlocal\
    \ prime_digit_sum18 = 0\n\tlocal prime_digit_product18 = 0\n\tlocal prime_digit_sum19\
    \ = 0\n\tlocal prime_digit_product19 = 0\n\tlocal prime_digit_sum20 = 0\n\tlocal\
    \ prime_digit_product20 = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_product21\
    \ = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_product22 = 0\n\tlocal\
    \ prime_digit_sum23 = 0\n\tlocal prime_digit_product23 = 0\n\tlocal prime_digit_sum24\
    \ = 0\n\tlocal prime_digit_product24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal\
    \ prime_digit_product25 = 0\n\tlocal prime_digit_sum26 = 0\n\tlocal prime_digit_product26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_product27 = 0\n\tlocal\
    \ prime\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdiubdytt.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_sum48 = 0\n\tlocal prime_digits_sum49 = 0\n\tlocal prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptie8wuns.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index = {}\n\
    \tlocal prime_digit_count_max_index2 = {}\n\tlocal prime_digit_count_max_index3\
    \ = {}\n\tlocal prime_digit_count_max_index4 = {}\n\tlocal prime_digit_count_max_index5\
    \ = {}\n\tlocal prime_digit_count_max_index6 = {}\n\tlocal prime_digit_count_max_index7\
    \ = {}\n\tlocal prime_digit_count_max_index8 = {}\n\tlocal prime_digit_count_max_index9\
    \ = {}\n\tlocal prime_digit_count_max_index10 = {}\n\tlocal prime_digit_count_max_index11\
    \ = {}\n\tlocal prime_digit_count_max_index12 = {}\n\tlocal prime_digit_count_max_index13\
    \ = {}\n\tlocal prime_digit_count_max_index14 = {}\n\tlocal prime_digit_count_max_index15\
    \ = {}\n\tlocal prime_digit_count_max_index16 = {}\n\tlocal prime_digit_count_max_index17\
    \ = {}\n\tlocal prime_digit_count_max_index18 = {}\n\tlocal prime_digit_count_max_index19\
    \ = {}\n\tlocal prime_digit_count_max_index20 = {}\n\tlocal prime_digit_count_max_index21\
    \ = {}\n\tlocal prime_digit_count_max_index22 = {}\n\tlocal prime_digit_count_max_index23\
    \ = {}\n\tlocal prime_digit_count_max_index24 = {}\n\tlocal prime_digit_count_max_index25\
    \ = {}\n\tlocal prime_digit_count_max_index26 = {}\n\tlocal prime_digit_count_max_index27\
    \ = {}\n\tlocal prime_digit_count_max_index28 = {}\n\tlocal prime_digit_count_max_index29\
    \ = {}\n\tlocal prime_digit_count_max_index30 = {}\n\tlocal prime_digit_count_max_index31\
    \ = {}\n\tlocal prime_digit_count_max_index32 = {}\n\tlocal prime_digit_count_max_index33\
    \ = {}\n\tlocal prime_digit_count_max_index34 = {}\n\tlocal prime_digit_count_max_index35\
    \ = {}\n\tlocal prime_digit_count_max_index36 = {}\n\tlocal prime_digit_count_max_index37\
    \ = {}\n\tlocal prime_digit_count_max_index38 = {}\n\tlocal prime_digit_count_max_index39\
    \ = {}\n\tlocal prime_digit_count_max_index40 = {}\n\tlocal prime_digit_count_max_index41\
    \ = {}\n\tlocal prime_digit_count_max_index42 = {}\n\tlocal prime_digit_count_max_index43\
    \ = {}\n\tlocal prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqhokhofk.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjku34rm8.lua:84: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime = 1\n\tlocal hexa = 0\n\t\
    local hexa_decimal = 0\n\tlocal hex_digit = 0\n\tlocal hex_digit_count = 0\n\t\
    local hex_digit_prime = 0\n\tlocal hex_digit_prime_count = 0\n\tlocal hex_digit_prime_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_decimal = 0\n\tlocal hex_digit_prime_hexa_count\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa = 0\n\tlocal hex_digit_prime_hexa_hexa_decimal\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_decimal = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_count\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_count\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_decimal\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_count = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_hexa\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_hexa_count = 0\n\tlocal\
    \ hex_digit_prime_hexa_hexa_hexa_hexa_hexa_hexa_hexa = 0\n\tlocal hex_digit_prime_hexa_hexa_hexa_hexa_hexa_hexa_hexa_count\
    \ = 0\n\tlocal hex_digit_prime_hexa_hexa_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu2dmgmbq.lua:68: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_sum48 = 0\n\tlocal prime_digits_sum49 = 0\n\tlocal prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4f52x2n4.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal hexadecimal = 0\n\tlocal\
    \ hexadecimal_count = 0\n\tlocal hexadecimal_digit = 0\n\tlocal hexadecimal_digit_count\
    \ = 0\n\tlocal hexadecimal_digit_prime = 0\n\tlocal hexadecimal_digit_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum = 0\n\tlocal hexadecimal_digit_prime_sum_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime = 0\n\tlocal hexadecimal_digit_prime_sum_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime = 0\n\tlocal\
    \ hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_count = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_count = 0\n\
    \tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum = 0\n\tlocal\
    \ hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_count = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_prime\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_prime_sum\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_prime_sum_prime_sum_prime_sum_prime_sum\
    \ = 0\n\tlocal hexadecimal_digit_prime_sum_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp34nysi7n.lua:64: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = tonumber(num)\n    local num_len = #num_str\n    local num_digits\
    \ = math.floor(math.log(num_str + 1, 16))\n    local num_primes = 0\n    local\
    \ num_primes_count = 0\n    local num_primes_sum = 0\n    local num_primes_sum_count\
    \ = 0\n    local num_primes_sum2 = 0\n    local num_primes_sum2_count = 0\n  \
    \  local num_primes_sum3 = 0\n    local num_primes_sum3_count = 0\n    local num_primes_sum4\
    \ = 0\n    local num_primes_sum4_count = 0\n    local num_primes_sum5 = 0\n  \
    \  local num_primes_sum5_count = 0\n    local num_primes_sum6 = 0\n    local num_primes_sum6_count\
    \ = 0\n    local num_primes_sum7 = 0\n    local num_primes_sum7_count = 0\n  \
    \  local num_primes_sum8 = 0\n    local num_primes_sum8_count = 0\n    local num_primes_sum9\
    \ = 0\n    local num_primes_sum9_count = 0\n    local num_primes_sum10 = 0\n \
    \   local num_primes_sum10_count = 0\n    local num_primes_sum11 = 0\n    local\
    \ num_primes_sum11_count = 0\n    local num_primes_sum12 = 0\n    local num_primes_sum12_count\
    \ = 0\n    local num_primes_sum13 = 0\n    local num_primes_sum13_count = 0\n\
    \    local num_primes_sum14 = 0\n    local num_primes_sum14_count = 0\n    local\
    \ num_primes_sum15 = 0\n    local num_primes_sum15_count = 0\n    local num_primes_sum16\
    \ = 0\n    local num_primes_sum16_count = 0\n    local num_primes_sum17 = 0\n\
    \    local num_primes_sum17_count = 0\n    local num_primes_sum18 = 0\n    local\
    \ num_primes_sum18_count = 0\n    local num_primes_sum19 = 0\n    local num_primes_sum19_count\
    \ = 0\n    local num_primes_sum20 = 0\n    local num_primes_sum20_count = 0\n\
    \    local num_primes_sum21 = 0\n    local num_primes_sum21_count = 0\n    local\
    \ num_primes_sum22 = 0\n    local num_primes_sum22_count = 0\n    local num_primes_sum23\
    \ = 0\n    local num_primes_sum23_count = 0\n    local num_primes_sum24 = 0\n\
    \    local num_primes_sum24_count = 0\n    local num_primes_sum25 = 0\n    local\
    \ num_primes_sum25\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxxj9kqi.lua:85: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_count = 0\n  local prime_digits = {}\n  local\
    \ prime_digit_count = {}\n  local prime_digit_sum = {}\n  local prime_digit_sums\
    \ = {}\n  local prime_digit_sums_count = 0\n  local prime_digit_sums_sum = 0\n\
    \  local prime_digit_sums_sums = {}\n  local prime_digit_sums_sums_count = 0\n\
    \  local prime_digit_sums_sums_sum = 0\n  local prime_digit_sums_sums_sums = {}\n\
    \  local prime_digit_sums_sums_sums_count = 0\n  local prime_digit_sums_sums_sums_sum\
    \ = 0\n  local prime_digit_sums_sums_sums_sums = {}\n  local prime_digit_sums_sums_sums_sums_count\
    \ = 0\n  local prime_digit_sums_sums_sums_sums_sum = 0\n  local prime_digit_sums_sums_sums_sums_sums\
    \ = {}\n  local prime_digit_sums_sums_sums_sums_sums_count = 0\n  local prime_digit_sums_sums_sums_sums_sums_sum\
    \ = 0\n  local prime_digit_sums_sums_sums_sums_sums_sums = {}\n  local prime_digit_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  local prime_digit_sums_sums_sums_sums_sums_sums_sum = 0\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_count = 0\n  local\
    \ prime_digit_sums_sums_sums_sums_sums_sums_sums_sum = 0\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_count = 0\n\
    \  local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n  local\
    \ prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums = {}\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum =\
    \ 0\n  local prime_digit_sums_sums_sums_sums_sums_sums_sums_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprglxbdbd.lua:63: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_temp = {}\n\tlocal prime_digit_count_temp2 = {}\n\t\
    local prime_digit_count_temp3 = {}\n\tlocal prime_digit_count_temp4 = {}\n\tlocal\
    \ prime_digit_count_temp5 = {}\n\tlocal prime_digit_count_temp6 = {}\n\tlocal\
    \ prime_digit_count_temp7 = {}\n\tlocal prime_digit_count_temp8 = {}\n\tlocal\
    \ prime_digit_count_temp9 = {}\n\tlocal prime_digit_count_temp10 = {}\n\tlocal\
    \ prime_digit_count_temp11 = {}\n\tlocal prime_digit_count_temp12 = {}\n\tlocal\
    \ prime_digit_count_temp13 = {}\n\tlocal prime_digit_count_temp14 = {}\n\tlocal\
    \ prime_digit_count_temp15 = {}\n\tlocal prime_digit_count_temp16 = {}\n\tlocal\
    \ prime_digit_count_temp17 = {}\n\tlocal prime_digit_count_temp18 = {}\n\tlocal\
    \ prime_digit_count_temp19 = {}\n\tlocal prime_digit_count_temp20 = {}\n\tlocal\
    \ prime_digit_count_temp21 = {}\n\tlocal prime_digit_count_temp22 = {}\n\tlocal\
    \ prime_digit_count_temp23 = {}\n\tlocal prime_digit_count_temp24 = {}\n\tlocal\
    \ prime_digit_count_temp25 = {}\n\tlocal prime_digit_count_temp26 = {}\n\tlocal\
    \ prime_digit_count_temp27 = {}\n\tlocal prime_digit_count_temp28 = {}\n\tlocal\
    \ prime_digit_count_temp29 = {}\n\tlocal prime_digit_count_temp30 = {}\n\tlocal\
    \ prime_digit_count_temp31 = {}\n\tlocal prime_digit_count_temp32 = {}\n\tlocal\
    \ prime_digit_count_temp33 = {}\n\tlocal prime_digit_count_temp34 = {}\n\tlocal\
    \ prime_digit_count_temp35 = {}\n\tlocal prime_digit_count_temp36 = {}\n\tlocal\
    \ prime_digit_count_temp37 = {}\n\tlocal prime_digit_count_temp38 = {}\n\tlocal\
    \ prime_digit_count_temp39 = {}\n\tlocal prime_digit_count_temp40 = {}\n\tlocal\
    \ prime_digit_count_temp41 = {}\n\tlocal prime_digit_count_temp42 = {}\n\tlocal\
    \ prime_digit_count_temp43 = {}\n\tlocal prime_digit_count_temp44 = {}\n\tlocal\
    \ prime_digit_count_temp45 = {}\n\tlocal prime_digit_count_temp46 = {}\n\tlocal\
    \ prime_digit_count_temp47 = {}\n\tlocal prime_digit_count_temp48 = {}\n\tlocal\
    \ prime_digit_count_temp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptc_xxe1d.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local prime = {}\n    local prime_hex = {}\n\
    \    local prime_hex_count = {}\n    local prime_hex_count2 = {}\n    local prime_hex_count3\
    \ = {}\n    local prime_hex_count4 = {}\n    local prime_hex_count5 = {}\n   \
    \ local prime_hex_count6 = {}\n    local prime_hex_count7 = {}\n    local prime_hex_count8\
    \ = {}\n    local prime_hex_count9 = {}\n    local prime_hex_count10 = {}\n  \
    \  local prime_hex_count11 = {}\n    local prime_hex_count12 = {}\n    local prime_hex_count13\
    \ = {}\n    local prime_hex_count14 = {}\n    local prime_hex_count15 = {}\n \
    \   local prime_hex_count16 = {}\n    local prime_hex_count17 = {}\n    local\
    \ prime_hex_count18 = {}\n    local prime_hex_count19 = {}\n    local prime_hex_count20\
    \ = {}\n    local prime_hex_count21 = {}\n    local prime_hex_count22 = {}\n \
    \   local prime_hex_count23 = {}\n    local prime_hex_count24 = {}\n    local\
    \ prime_hex_count25 = {}\n    local prime_hex_count26 = {}\n    local prime_hex_count27\
    \ = {}\n    local prime_hex_count28 = {}\n    local prime_hex_count29 = {}\n \
    \   local prime_hex_count30 = {}\n    local prime_hex_count31 = {}\n    local\
    \ prime_hex_count32 = {}\n    local prime_hex_count33 = {}\n    local prime_hex_count34\
    \ = {}\n    local prime_hex_count35 = {}\n    local prime_hex_count36 = {}\n \
    \   local prime_hex_count37 = {}\n    local prime_hex_count38 = {}\n    local\
    \ prime_hex_count39 = {}\n    local prime_hex_count40 = {}\n    local prime_hex_count41\
    \ = {}\n    local prime_hex_count42 = {}\n    local prime_hex_count43 = {}\n \
    \   local prime_hex_count44 = {}\n    local prime_hex_count45 = {}\n    local\
    \ prime_hex_count46 = {}\n    local prime_hex_count47 = {}\n    local prime_hex_count48\
    \ = {}\n    local prime_hex_count49 = {}\n    local prime_hex_count50 = {}\n \
    \   local prime_hex_count51 = {}\n    local prime_hex_count52 = {}\n    local\
    \ prime_hex_count53 = {}\n    local prime_hex_count54 = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd83mqtnv.lua:87: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local prime_digits = {2,3,5,7,11,13,17,19}\n  local prime_digits_count = #prime_digits\n\
    \  local prime_digits_index = 0\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n  local\
    \ prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\n\
    \  local prime_digits_index_max = #prime_digits-1\n  local prime_digits_index_max\
    \ = #prime_digits-1\n  local prime_digits_index_max = #prime_digits-1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_4paqlb3.lua:67: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_min = {}\n\tlocal\
    \ prime_digit_count_sum = {}\n\tlocal prime_digit_count_sum_max = {}\n\tlocal\
    \ prime_digit_count_sum_min = {}\n\tlocal prime_digit_count_sum_sum = {}\n\tlocal\
    \ prime_digit_count_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_min =\
    \ {}\n\tlocal prime_digit_count_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_min = {}\n\tlocal prime_digit_count_sum_sum_sum_sum\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_sum_min\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_min = {}\n\tlocal prime_digit_count_sum_sum_sum_sum\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_sum = {}\n\tlocal prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n\tlocal prime_digit_count_sum_sum_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjkifb_97.lua:74: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key\
    \ = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7kq_3y26.lua:116: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzqjoglb4.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal num_digits\
    \ = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count = 0\n\tlocal num_primes_sum\
    \ = 0\n\tlocal num_primes_sum2 = 0\n\tlocal num_primes_sum3 = 0\n\tlocal num_primes_sum4\
    \ = 0\n\tlocal num_primes_sum5 = 0\n\tlocal num_primes_sum6 = 0\n\tlocal num_primes_sum7\
    \ = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum9 = 0\n\tlocal num_primes_sum10\
    \ = 0\n\tlocal num_primes_sum11 = 0\n\tlocal num_primes_sum12 = 0\n\tlocal num_primes_sum13\
    \ = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum15 = 0\n\tlocal num_primes_sum16\
    \ = 0\n\tlocal num_primes_sum17 = 0\n\tlocal num_primes_sum18 = 0\n\tlocal num_primes_sum19\
    \ = 0\n\tlocal num_primes_sum20 = 0\n\tlocal num_primes_sum21 = 0\n\tlocal num_primes_sum22\
    \ = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum24 = 0\n\tlocal num_primes_sum25\
    \ = 0\n\tlocal num_primes_sum26 = 0\n\tlocal num_primes_sum27 = 0\n\tlocal num_primes_sum28\
    \ = 0\n\tlocal num_primes_sum29 = 0\n\tlocal num_primes_sum30 = 0\n\tlocal num_primes_sum31\
    \ = 0\n\tlocal num_primes_sum32 = 0\n\tlocal num_primes_sum33 = 0\n\tlocal num_primes_sum34\
    \ = 0\n\tlocal num_primes_sum35 = 0\n\tlocal num_primes_sum36 = 0\n\tlocal num_primes_sum37\
    \ = 0\n\tlocal num_primes_sum38 = 0\n\tlocal num_primes_sum39 = 0\n\tlocal num_primes_sum40\
    \ = 0\n\tlocal num_primes_sum41 = 0\n\tlocal num_primes_sum42 = 0\n\tlocal num_primes_sum43\
    \ = 0\n\tlocal num_primes_sum44 = 0\n\tlocal num_primes_sum45 = 0\n\tlocal num_primes_sum46\
    \ = 0\n\tlocal num_primes_sum47 = 0\n\tlocal num_primes_sum48 = 0\n\tlocal num_primes_sum49\
    \ = 0\n\tlocal num_primes_sum50 = 0\n\tlocal num_primes_sum51 = 0\n\tlocal num_primes_sum52\
    \ = 0\n\tlocal num_primes_sum53\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp16coka7i.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal hexadecimal = 0\n\tlocal hexadecimal_count = 0\n\tlocal hexadecimal_digit\
    \ = 0\n\tlocal hexadecimal_digit_count = 0\n\tlocal hexadecimal_digit_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_count = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_count = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_count = 0\n\
    \tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal = 0\n\
    \tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\n\tlocal hexadecimal_digit_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmcr_eqw5.lua:57: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count\
    \ = {}\n\tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index\
    \ = {}\n\tlocal prime_digit_count_max_index2 = {}\n\tlocal prime_digit_count_max_index3\
    \ = {}\n\tlocal prime_digit_count_max_index4 = {}\n\tlocal prime_digit_count_max_index5\
    \ = {}\n\tlocal prime_digit_count_max_index6 = {}\n\tlocal prime_digit_count_max_index7\
    \ = {}\n\tlocal prime_digit_count_max_index8 = {}\n\tlocal prime_digit_count_max_index9\
    \ = {}\n\tlocal prime_digit_count_max_index10 = {}\n\tlocal prime_digit_count_max_index11\
    \ = {}\n\tlocal prime_digit_count_max_index12 = {}\n\tlocal prime_digit_count_max_index13\
    \ = {}\n\tlocal prime_digit_count_max_index14 = {}\n\tlocal prime_digit_count_max_index15\
    \ = {}\n\tlocal prime_digit_count_max_index16 = {}\n\tlocal prime_digit_count_max_index17\
    \ = {}\n\tlocal prime_digit_count_max_index18 = {}\n\tlocal prime_digit_count_max_index19\
    \ = {}\n\tlocal prime_digit_count_max_index20 = {}\n\tlocal prime_digit_count_max_index21\
    \ = {}\n\tlocal prime_digit_count_max_index22 = {}\n\tlocal prime_digit_count_max_index23\
    \ = {}\n\tlocal prime_digit_count_max_index24 = {}\n\tlocal prime_digit_count_max_index25\
    \ = {}\n\tlocal prime_digit_count_max_index26 = {}\n\tlocal prime_digit_count_max_index27\
    \ = {}\n\tlocal prime_digit_count_max_index28 = {}\n\tlocal prime_digit_count_max_index29\
    \ = {}\n\tlocal prime_digit_count_max_index30 = {}\n\tlocal prime_digit_count_max_index31\
    \ = {}\n\tlocal prime_digit_count_max_index32 = {}\n\tlocal prime_digit_count_max_index33\
    \ = {}\n\tlocal prime_digit_count_max_index34 = {}\n\tlocal prime_digit_count_max_index35\
    \ = {}\n\tlocal prime_digit_count_max_index36 = {}\n\tlocal prime_digit_count_max_index37\
    \ = {}\n\tlocal prime_digit_count_max_index38 = {}\n\tlocal prime_digit_count_max_index39\
    \ = {}\n\tlocal prime_digit_count_max_index40 = {}\n\tlocal prime_digit_count_max_index41\
    \ = {}\n\tlocal prime_digit_count_max_index42 = {}\n\tlocal prime_digit_count_max_index43\
    \ = {}\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpar9rg4od.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = string.lower(num)\n    local num_len = #num_str\n    local\
    \ num_digits = {}\n    local num_primes = {}\n    local num_primes_len = {}\n\
    \    local num_primes_sum = 0\n    local num_primes_sum2 = 0\n    local num_primes_sum3\
    \ = 0\n    local num_primes_sum4 = 0\n    local num_primes_sum5 = 0\n    local\
    \ num_primes_sum6 = 0\n    local num_primes_sum7 = 0\n    local num_primes_sum8\
    \ = 0\n    local num_primes_sum9 = 0\n    local num_primes_sum10 = 0\n    local\
    \ num_primes_sum11 = 0\n    local num_primes_sum12 = 0\n    local num_primes_sum13\
    \ = 0\n    local num_primes_sum14 = 0\n    local num_primes_sum15 = 0\n    local\
    \ num_primes_sum16 = 0\n    local num_primes_sum17 = 0\n    local num_primes_sum18\
    \ = 0\n    local num_primes_sum19 = 0\n    local num_primes_sum20 = 0\n    local\
    \ num_primes_sum21 = 0\n    local num_primes_sum22 = 0\n    local num_primes_sum23\
    \ = 0\n    local num_primes_sum24 = 0\n    local num_primes_sum25 = 0\n    local\
    \ num_primes_sum26 = 0\n    local num_primes_sum27 = 0\n    local num_primes_sum28\
    \ = 0\n    local num_primes_sum29 = 0\n    local num_primes_sum30 = 0\n    local\
    \ num_primes_sum31 = 0\n    local num_primes_sum32 = 0\n    local num_primes_sum33\
    \ = 0\n    local num_primes_sum34 = 0\n    local num_primes_sum35 = 0\n    local\
    \ num_primes_sum36 = 0\n    local num_primes_sum37 = 0\n    local num_primes_sum38\
    \ = 0\n    local num_primes_sum39 = 0\n    local num_primes_sum40 = 0\n    local\
    \ num_primes_sum41 = 0\n    local num_primes_sum42 = 0\n    local num_primes_sum43\
    \ = 0\n    local num_primes_sum44 = 0\n    local num_primes_sum45 = 0\n    local\
    \ num_primes_sum46 = 0\n    local num_primes_sum47 = 0\n    local num_primes_sum48\
    \ = 0\n    local num_primes_sum49 = 0\n    local num_primes_sum50 = 0\n    local\
    \ num_primes_sum51 = 0\n    local num_primes_sum52 = 0\n    local num_primes_sum53\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprc2pvm0g.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hexadecimal = {}\n  local primes = {}\n  local prime = 1\n  local digit\
    \ = 1\n  local count = 0\n  local i = 0\n  local j = 0\n  local k = 0\n  local\
    \ l = 0\n  local m = 0\n  local n = 0\n  local o = 0\n  local p = 0\n  local q\
    \ = 0\n  local r = 0\n  local s = 0\n  local t = 0\n  local u = 0\n  local v =\
    \ 0\n  local w = 0\n  local x = 0\n  local y = 0\n  local z = 0\n  local a = 0\n\
    \  local b = 0\n  local c = 0\n  local d = 0\n  local e = 0\n  local f = 0\n \
    \ local g = 0\n  local h = 0\n  local i = 0\n  local j = 0\n  local k = 0\n  local\
    \ l = 0\n  local m = 0\n  local n = 0\n  local o = 0\n  local p = 0\n  local q\
    \ = 0\n  local r = 0\n  local s = 0\n  local t = 0\n  local u = 0\n  local v =\
    \ 0\n  local w = 0\n  local x = 0\n  local y = 0\n  local z = 0\n  local a = 0\n\
    \  local b = 0\n  local c = 0\n  local d = 0\n  local e = 0\n  local f = 0\n \
    \ local g = 0\n  local h = 0\n  local i = 0\n  local j = 0\n  local k = 0\n  local\
    \ l = 0\n  local m = 0\n  local n = 0\n  local o = 0\n  local p = 0\n  local q\
    \ = 0\n  local r = 0\n  local s = 0\n  local t = 0\n  local u = 0\n  local v =\
    \ 0\n  local w = 0\n  local x = 0\n  local y = 0\n  local z = 0\n  local a = 0\n\
    \  local b = 0\n  local c = 0\n  local d = 0\n  local e = 0\n  local f = 0\n \
    \ local g = 0\n  local h = 0\n  local i = 0\n  local j = 0\n  local k = 0\n  local\
    \ l = 0\n  local m = 0\n  local n = 0\n  local o = 0\n  local p = 0\n  local q\
    \ = 0\n  local r = 0\n  local s = 0\n  local t = 0\n  local u = 0\n  local v =\
    \ 0\n  local w = 0\n  local x = 0\n  local y = 0\n  local z = 0\n  local a = 0\n\
    \  local b = 0\n  local c = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0_8507xp.lua:134: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal count = 0\n\tlocal digit\n\tlocal prime\n\tlocal prime_digit\n\
    \tlocal prime_digit_count\n\tlocal prime_digit_count2\n\tlocal prime_digit_count3\n\
    \tlocal prime_digit_count4\n\tlocal prime_digit_count5\n\tlocal prime_digit_count6\n\
    \tlocal prime_digit_count7\n\tlocal prime_digit_count8\n\tlocal prime_digit_count9\n\
    \tlocal prime_digit_count10\n\tlocal prime_digit_count11\n\tlocal prime_digit_count12\n\
    \tlocal prime_digit_count13\n\tlocal prime_digit_count14\n\tlocal prime_digit_count15\n\
    \tlocal prime_digit_count16\n\tlocal prime_digit_count17\n\tlocal prime_digit_count18\n\
    \tlocal prime_digit_count19\n\tlocal prime_digit_count20\n\tlocal prime_digit_count21\n\
    \tlocal prime_digit_count22\n\tlocal prime_digit_count23\n\tlocal prime_digit_count24\n\
    \tlocal prime_digit_count25\n\tlocal prime_digit_count26\n\tlocal prime_digit_count27\n\
    \tlocal prime_digit_count28\n\tlocal prime_digit_count29\n\tlocal prime_digit_count30\n\
    \tlocal prime_digit_count31\n\tlocal prime_digit_count32\n\tlocal prime_digit_count33\n\
    \tlocal prime_digit_count34\n\tlocal prime_digit_count35\n\tlocal prime_digit_count36\n\
    \tlocal prime_digit_count37\n\tlocal prime_digit_count38\n\tlocal prime_digit_count39\n\
    \tlocal prime_digit_count40\n\tlocal prime_digit_count41\n\tlocal prime_digit_count42\n\
    \tlocal prime_digit_count43\n\tlocal prime_digit_count44\n\tlocal prime_digit_count45\n\
    \tlocal prime_digit_count46\n\tlocal prime_digit_count47\n\tlocal prime_digit_count48\n\
    \tlocal prime_digit_count49\n\tlocal prime_digit_count50\n\tlocal prime_digit_count51\n\
    \tlocal prime_digit_count52\n\tlocal prime_digit_count53\n\tlocal prime_digit_count54\n\
    \tlocal prime_digit_count55\n\tlocal prime_digit_count56\n\tlocal prime_digit_count57\n\
    \tlocal prime_digit_count58\n\tlocal prime_digit_count59\n\tlocal prime_digit_count60\n\
    \tlocal prime_digit_count61\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp87eqzaha.lua:97: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp6bj7uhl.lua:19: ')' expected (to close '(' at line 18) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key\
    \ = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsnsglzf8.lua:116: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hex = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hex_key = {}\n\tlocal prime_hex_key2 = {}\n\tlocal prime_hex_key3\
    \ = {}\n\tlocal prime_hex_key4 = {}\n\tlocal prime_hex_key5 = {}\n\tlocal prime_hex_key6\
    \ = {}\n\tlocal prime_hex_key7 = {}\n\tlocal prime_hex_key8 = {}\n\tlocal prime_hex_key9\
    \ = {}\n\tlocal prime_hex_key10 = {}\n\tlocal prime_hex_key11 = {}\n\tlocal prime_hex_key12\
    \ = {}\n\tlocal prime_hex_key13 = {}\n\tlocal prime_hex_key14 = {}\n\tlocal prime_hex_key15\
    \ = {}\n\tlocal prime_hex_key16 = {}\n\tlocal prime_hex_key17 = {}\n\tlocal prime_hex_key18\
    \ = {}\n\tlocal prime_hex_key19 = {}\n\tlocal prime_hex_key20 = {}\n\tlocal prime_hex_key21\
    \ = {}\n\tlocal prime_hex_key22 = {}\n\tlocal prime_hex_key23 = {}\n\tlocal prime_hex_key24\
    \ = {}\n\tlocal prime_hex_key25 = {}\n\tlocal prime_hex_key26 = {}\n\tlocal prime_hex_key27\
    \ = {}\n\tlocal prime_hex_key28 = {}\n\tlocal prime_hex_key29 = {}\n\tlocal prime_hex_key30\
    \ = {}\n\tlocal prime_hex_key31 = {}\n\tlocal prime_hex_key32 = {}\n\tlocal prime_hex_key33\
    \ = {}\n\tlocal prime_hex_key34 = {}\n\tlocal prime_hex_key35 = {}\n\tlocal prime_hex_key36\
    \ = {}\n\tlocal prime_hex_key37 = {}\n\tlocal prime_hex_key38 = {}\n\tlocal prime_hex_key39\
    \ = {}\n\tlocal prime_hex_key40 = {}\n\tlocal prime_hex_key41 = {}\n\tlocal prime_hex_key42\
    \ = {}\n\tlocal prime_hex_key43 = {}\n\tlocal prime_hex_key44 = {}\n\tlocal prime_hex_key45\
    \ = {}\n\tlocal prime_hex_key46 = {}\n\tlocal prime_hex_key47 = {}\n\tlocal prime_hex_key48\
    \ = {}\n\tlocal prime_hex_key49 = {}\n\tlocal prime_hex_key50 = {}\n\tlocal prime_hex_key51\
    \ = {}\n\tlocal prime_hex_key52 = {}\n\tlocal prime_hex_key53 = {}\n\tlocal prime_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprwiw2k02.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime = 1\n    local hexa\
    \ = 0\n    local hexa_dec = 0\n    local hex_digit = 0\n    local hex_digit_dec\
    \ = 0\n    local hex_digit_dec2 = 1\n    local hex_digit_dec3 = 2\n    local hex_digit_dec4\
    \ = 3\n    local hex_digit_dec5 = 4\n    local hex_digit_dec6 = 5\n    local hex_digit_dec7\
    \ = 6\n    local hex_digit_dec8 = 7\n    local hex_digit_dec9 = 8\n    local hex_digit_dec10\
    \ = 9\n    local hex_digit_dec11 = 10\n    local hex_digit_dec12 = 11\n    local\
    \ hex_digit_dec13 = 12\n    local hex_digit_dec14 = 13\n    local hex_digit_dec15\
    \ = 14\n    local hex_digit_dec16 = 15\n    local hex_digit_dec17 = 16\n    local\
    \ hex_digit_dec18 = 17\n    local hex_digit_dec19 = 18\n    local hex_digit_dec20\
    \ = 19\n    local hex_digit_dec21 = 20\n    local hex_digit_dec22 = 21\n    local\
    \ hex_digit_dec23 = 22\n    local hex_digit_dec24 = 23\n    local hex_digit_dec25\
    \ = 24\n    local hex_digit_dec26 = 25\n    local hex_digit_dec27 = 26\n    local\
    \ hex_digit_dec28 = 27\n    local hex_digit_dec29 = 28\n    local hex_digit_dec30\
    \ = 29\n    local hex_digit_dec31 = 30\n    local hex_digit_dec32 = 31\n    local\
    \ hex_digit_dec33 = 32\n    local hex_digit_dec34 = 33\n    local hex_digit_dec35\
    \ = 34\n    local hex_digit_dec36 = 35\n    local hex_digit_dec37 = 36\n    local\
    \ hex_digit_dec38 = 37\n    local hex_digit_dec39 = 38\n    local hex_digit_dec40\
    \ = 39\n    local hex_digit_dec41 = 40\n    local hex_digit_dec42 = 41\n    local\
    \ hex_digit_dec43 = 42\n    local hex_digit_dec44 = 43\n    local hex_digit_dec45\
    \ = 44\n    local hex_digit_dec46 = 45\n    local hex_digit_dec47 = 46\n    local\
    \ hex_digit_dec48 = 47\n    local hex_digit_dec49 = 48\n    local hex_digit_dec50\
    \ = 49\n    local hex_digit_dec51 = 50\n    local hex_digit_dec52 = 51\n    local\
    \ hex_digit_dec53 = 52\n    local hex_digit_dec54 = 53\n    local hex_digit_dec55\
    \ = 54\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl57nc448.lua:92: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_sum48 = 0\n\tlocal prime_digits_sum49 = 0\n\tlocal prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9v5ofqzl.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local key = {}\n  local digits = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp229rh152.lua:20: ')' expected (to close '(' at line 19) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_max = 0\n    local\
    \ primes_count_min = 0\n    local primes_count_max = 0\n    local primes_count_min\
    \ = 0\n    local primes_count_max = 0\n    local primes_count_min = 0\n    local\
    \ primes_count_max = 0\n    local primes_count_min = 0\n    local primes_count_max\
    \ = 0\n    local primes_count_min = 0\n    local primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp28duk4g7.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tfor i = 1, #num do\n\t\tlocal c = string.sub(num, i, i)\n\t\
    \tif c == \"A\" then\n\t\t\thex[1] = true\n\t\telseif c == \"B\" then\n\t\t\t\
    hex[2] = true\n\t\telseif c == \"C\" then\n\t\t\thex[3] = true\n\t\telseif c ==\
    \ \"D\" then\n\t\t\thex[4] = true\n\t\telseif c == \"E\" then\n\t\t\thex[5] =\
    \ true\n\t\telseif c == \"F\" then\n\t\t\thex[6] = true\n\t\telseif c == \"0\"\
    \ then\n\t\t\thex[7] = true\n\t\telseif c == \"1\" then\n\t\t\thex[8] = true\n\
    \t\telseif c == \"2\" then\n\t\t\thex[9] = true\n\t\telseif c == \"3\" then\n\t\
    \t\thex[10] = true\n\t\telseif c == \"4\" then\n\t\t\thex[11] = true\n\t\telseif\
    \ c == \"5\" then\n\t\t\thex[12] = true\n\t\telseif c == \"6\" then\n\t\t\thex[13]\
    \ = true\n\t\telseif c == \"7\" then\n\t\t\thex[14] = true\n\t\telseif c == \"\
    8\" then\n\t\t\thex[15] = true\n\t\telseif c == \"9\" then\n\t\t\thex[16] = true\n\
    \t\telseif c == \"A\" then\n\t\t\thex[17] = true\n\t\telseif c == \"B\" then\n\
    \t\t\thex[18] = true\n\t\telseif c == \"C\" then\n\t\t\thex[19] = true\n\t\telseif\
    \ c == \"D\" then\n\t\t\thex[20] = true\n\t\telseif c == \"E\" then\n\t\t\thex[21]\
    \ = true\n\t\telseif c == \"F\" then\n\t\t\thex[22] = true\n\t\tend\n\tend\n\t\
    return #hex\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzawmkddc.lua:73:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzawmkddc.lua:73: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key\
    \ = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key =\
    \ {}\n  local hex_key = {}\n  local hex_key = {}\n  local hex_key = {}\n  local\
    \ hex_key = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptgq0axq4.lua:116: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local prime_digits = {}\n  local prime_digits_count = 0\n  local prime_digits_sum\
    \ = 0\n  local prime_digits_sum2 = 0\n  local prime_digits_sum3 = 0\n  local prime_digits_sum4\
    \ = 0\n  local prime_digits_sum5 = 0\n  local prime_digits_sum6 = 0\n  local prime_digits_sum7\
    \ = 0\n  local prime_digits_sum8 = 0\n  local prime_digits_sum9 = 0\n  local prime_digits_sum10\
    \ = 0\n  local prime_digits_sum11 = 0\n  local prime_digits_sum12 = 0\n  local\
    \ prime_digits_sum13 = 0\n  local prime_digits_sum14 = 0\n  local prime_digits_sum15\
    \ = 0\n  local prime_digits_sum16 = 0\n  local prime_digits_sum17 = 0\n  local\
    \ prime_digits_sum18 = 0\n  local prime_digits_sum19 = 0\n  local prime_digits_sum20\
    \ = 0\n  local prime_digits_sum21 = 0\n  local prime_digits_sum22 = 0\n  local\
    \ prime_digits_sum23 = 0\n  local prime_digits_sum24 = 0\n  local prime_digits_sum25\
    \ = 0\n  local prime_digits_sum26 = 0\n  local prime_digits_sum27 = 0\n  local\
    \ prime_digits_sum28 = 0\n  local prime_digits_sum29 = 0\n  local prime_digits_sum30\
    \ = 0\n  local prime_digits_sum31 = 0\n  local prime_digits_sum32 = 0\n  local\
    \ prime_digits_sum33 = 0\n  local prime_digits_sum34 = 0\n  local prime_digits_sum35\
    \ = 0\n  local prime_digits_sum36 = 0\n  local prime_digits_sum37 = 0\n  local\
    \ prime_digits_sum38 = 0\n  local prime_digits_sum39 = 0\n  local prime_digits_sum40\
    \ = 0\n  local prime_digits_sum41 = 0\n  local prime_digits_sum42 = 0\n  local\
    \ prime_digits_sum43 = 0\n  local prime_digits_sum44 = 0\n  local prime_digits_sum45\
    \ = 0\n  local prime_digits_sum46 = 0\n  local prime_digits_sum47 = 0\n  local\
    \ prime_digits_sum48 = 0\n  local prime_digits_sum49 = 0\n  local prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkglsfpog.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal hex_count = 0\n\tlocal hex_digit = 0\n\tlocal hex_digit_count\
    \ = 0\n\tlocal hex_digit_sum = 0\n\tlocal hex_digit_sum2 = 0\n\tlocal hex_digit_sum3\
    \ = 0\n\tlocal hex_digit_sum4 = 0\n\tlocal hex_digit_sum5 = 0\n\tlocal hex_digit_sum6\
    \ = 0\n\tlocal hex_digit_sum7 = 0\n\tlocal hex_digit_sum8 = 0\n\tlocal hex_digit_sum9\
    \ = 0\n\tlocal hex_digit_sum10 = 0\n\tlocal hex_digit_sum11 = 0\n\tlocal hex_digit_sum12\
    \ = 0\n\tlocal hex_digit_sum13 = 0\n\tlocal hex_digit_sum14 = 0\n\tlocal hex_digit_sum15\
    \ = 0\n\tlocal hex_digit_sum16 = 0\n\tlocal hex_digit_sum17 = 0\n\tlocal hex_digit_sum18\
    \ = 0\n\tlocal hex_digit_sum19 = 0\n\tlocal hex_digit_sum20 = 0\n\tlocal hex_digit_sum21\
    \ = 0\n\tlocal hex_digit_sum22 = 0\n\tlocal hex_digit_sum23 = 0\n\tlocal hex_digit_sum24\
    \ = 0\n\tlocal hex_digit_sum25 = 0\n\tlocal hex_digit_sum26 = 0\n\tlocal hex_digit_sum27\
    \ = 0\n\tlocal hex_digit_sum28 = 0\n\tlocal hex_digit_sum29 = 0\n\tlocal hex_digit_sum30\
    \ = 0\n\tlocal hex_digit_sum31 = 0\n\tlocal hex_digit_sum32 = 0\n\tlocal hex_digit_sum33\
    \ = 0\n\tlocal hex_digit_sum34 = 0\n\tlocal hex_digit_sum35 = 0\n\tlocal hex_digit_sum36\
    \ = 0\n\tlocal hex_digit_sum37 = 0\n\tlocal hex_digit_sum38 = 0\n\tlocal hex_digit_sum39\
    \ = 0\n\tlocal hex_digit_sum40 = 0\n\tlocal hex_digit_sum41 = 0\n\tlocal hex_digit_sum42\
    \ = 0\n\tlocal hex_digit_sum43 = 0\n\tlocal hex_digit_sum44 = 0\n\tlocal hex_digit_sum45\
    \ = 0\n\tlocal hex_digit_sum46 = 0\n\tlocal hex_digit_sum47 = 0\n\tlocal hex_digit_sum48\
    \ = 0\n\tlocal hex_digit_sum49 = 0\n\tlocal hex_digit_sum50 = 0\n\tlocal hex_digit_sum51\
    \ = 0\n\tlocal hex_digit_sum52 = 0\n\tlocal hex_digit_sum53 = 0\n\tlocal hex_digit_sum54\
    \ = 0\n\tlocal hex_digit_sum55 = 0\n\tlocal hex_digit_sum56 = 0\n\tlocal hex_digit_sum57\
    \ = 0\n\tlocal hex_digit_sum58 = 0\n\tlocal hex_digit_sum59 = 0\n\tlocal hex_digit_sum60\
    \ = 0\n\tlocal hex_digit_sum61 = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxughga1l.lua:96: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_min = {}\n\tlocal\
    \ prime_digit_count_max_min = {}\n\tlocal prime_digit_count_max_min = {}\n\tlocal\
    \ prime_digit_count_max_min2 = {}\n\tlocal prime_digit_count_max_min3 = {}\n\t\
    local prime_digit_count_max_min4 = {}\n\tlocal prime_digit_count_max_min5 = {}\n\
    \tlocal prime_digit_count_max_min6 = {}\n\tlocal prime_digit_count_max_min7 =\
    \ {}\n\tlocal prime_digit_count_max_min8 = {}\n\tlocal prime_digit_count_max_min9\
    \ = {}\n\tlocal prime_digit_count_max_min10 = {}\n\tlocal prime_digit_count_max_min11\
    \ = {}\n\tlocal prime_digit_count_max_min12 = {}\n\tlocal prime_digit_count_max_min13\
    \ = {}\n\tlocal prime_digit_count_max_min14 = {}\n\tlocal prime_digit_count_max_min15\
    \ = {}\n\tlocal prime_digit_count_max_min16 = {}\n\tlocal prime_digit_count_max_min17\
    \ = {}\n\tlocal prime_digit_count_max_min18 = {}\n\tlocal prime_digit_count_max_min19\
    \ = {}\n\tlocal prime_digit_count_max_min20 = {}\n\tlocal prime_digit_count_max_min21\
    \ = {}\n\tlocal prime_digit_count_max_min22 = {}\n\tlocal prime_digit_count_max_min23\
    \ = {}\n\tlocal prime_digit_count_max_min24 = {}\n\tlocal prime_digit_count_max_min25\
    \ = {}\n\tlocal prime_digit_count_max_min26 = {}\n\tlocal prime_digit_count_max_min27\
    \ = {}\n\tlocal prime_digit_count_max_min28 = {}\n\tlocal prime_digit_count_max_min29\
    \ = {}\n\tlocal prime_digit_count_max_min30 = {}\n\tlocal prime_digit_count_max_min31\
    \ = {}\n\tlocal prime_digit_count_max_min32 = {}\n\tlocal prime_digit_count_max_min33\
    \ = {}\n\tlocal prime_digit_count_max_min34 = {}\n\tlocal prime_digit_count_max_min35\
    \ = {}\n\tlocal prime_digit_count_max_min36 = {}\n\tlocal prime_digit_count_max_min37\
    \ = {}\n\tlocal prime_digit_count_max_min38 = {}\n\tlocal prime_digit_count_max_min39\
    \ = {}\n\tlocal prime_digit_count_max_min40 = {}\n\tlocal prime_digit_count_max_min41\
    \ = {}\n\tlocal prime_digit_count_max_min42 = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqvh7v764.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = {}\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6t5ztqwq.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime = 1\n    local count\
    \ = 0\n    local digit\n    local i\n    local j\n    local k\n    local l\n \
    \   local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmsnc222m.lua:158: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal hexadecimal = nil\n\tlocal hexadecimal_count = 0\n\tlocal hexadecimal_digit\
    \ = nil\n\tlocal hexadecimal_digit_count = 0\n\tlocal hexadecimal_digit_value\
    \ = nil\n\tlocal hexadecimal_digit_value_count = 0\n\tlocal hexadecimal_digit_value_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_count = 0\n\tlocal hexadecimal_digit_value_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_count = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_count = 0\n\tlocal\
    \ hexadecimal_digit_value_prime_prime_prime_prime = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime = nil\n\t\
    local hexadecimal_digit_value_prime_prime_prime_prime_prime_count = 0\n\tlocal\
    \ hexadecimal_digit_value_prime_prime_prime_prime_prime_prime = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = nil\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal hexadecimal_digit_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3v0xk7qe.lua:61: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx81mn8bp.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal hexadecimal_digits = {}\n\
    \tlocal hexadecimal_digits_count = 0\n\tlocal hexadecimal_digits_sum = 0\n\tlocal\
    \ hexadecimal_digits_sum_2 = 0\n\tlocal hexadecimal_digits_sum_3 = 0\n\tlocal\
    \ hexadecimal_digits_sum_4 = 0\n\tlocal hexadecimal_digits_sum_5 = 0\n\tlocal\
    \ hexadecimal_digits_sum_6 = 0\n\tlocal hexadecimal_digits_sum_7 = 0\n\tlocal\
    \ hexadecimal_digits_sum_8 = 0\n\tlocal hexadecimal_digits_sum_9 = 0\n\tlocal\
    \ hexadecimal_digits_sum_10 = 0\n\tlocal hexadecimal_digits_sum_11 = 0\n\tlocal\
    \ hexadecimal_digits_sum_12 = 0\n\tlocal hexadecimal_digits_sum_13 = 0\n\tlocal\
    \ hexadecimal_digits_sum_14 = 0\n\tlocal hexadecimal_digits_sum_15 = 0\n\tlocal\
    \ hexadecimal_digits_sum_16 = 0\n\tlocal hexadecimal_digits_sum_17 = 0\n\tlocal\
    \ hexadecimal_digits_sum_18 = 0\n\tlocal hexadecimal_digits_sum_19 = 0\n\tlocal\
    \ hexadecimal_digits_sum_20 = 0\n\tlocal hexadecimal_digits_sum_21 = 0\n\tlocal\
    \ hexadecimal_digits_sum_22 = 0\n\tlocal hexadecimal_digits_sum_23 = 0\n\tlocal\
    \ hexadecimal_digits_sum_24 = 0\n\tlocal hexadecimal_digits_sum_25 = 0\n\tlocal\
    \ hexadecimal_digits_sum_26 = 0\n\tlocal hexadecimal_digits_sum_27 = 0\n\tlocal\
    \ hexadecimal_digits_sum_28 = 0\n\tlocal hexadecimal_digits_sum_29 = 0\n\tlocal\
    \ hexadecimal_digits_sum_30 = 0\n\tlocal hexadecimal_digits_sum_31 = 0\n\tlocal\
    \ hexadecimal_digits_sum_32 = 0\n\tlocal hexadecimal_digits_sum_33 = 0\n\tlocal\
    \ hexadecimal_digits_sum_34 = 0\n\tlocal hexadecimal_digits_sum_35 = 0\n\tlocal\
    \ hexadecimal_digits_sum_36 = 0\n\tlocal hexadecimal_digits_sum_37 = 0\n\tlocal\
    \ hexadecimal_digits_sum_38 = 0\n\tlocal hexadecimal_digits_sum_39 = 0\n\tlocal\
    \ hexadecimal_digits_sum_40 = 0\n\tlocal hexadecimal_digits_sum_41 = 0\n\tlocal\
    \ hexadecimal_digits_sum_42 = 0\n\tlocal hexadecimal_digits_sum_43 = 0\n\tlocal\
    \ hexadecimal_digits_sum_44 = 0\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2quc_0vf.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 0\n\t\
    local primes_count_min = 0\n\tlocal primes_count_min_index = 0\n\tlocal primes_count_max_index\
    \ = 0\n\tlocal primes_count_min_index2 = 0\n\tlocal primes_count_max_index2 =\
    \ 0\n\tlocal primes_count_min_index3 = 0\n\tlocal primes_count_max_index3 = 0\n\
    \tlocal primes_count_min_index4 = 0\n\tlocal primes_count_max_index4 = 0\n\tlocal\
    \ primes_count_min_index5 = 0\n\tlocal primes_count_max_index5 = 0\n\tlocal primes_count_min_index6\
    \ = 0\n\tlocal primes_count_max_index6 = 0\n\tlocal primes_count_min_index7 =\
    \ 0\n\tlocal primes_count_max_index7 = 0\n\tlocal primes_count_min_index8 = 0\n\
    \tlocal primes_count_max_index8 = 0\n\tlocal primes_count_min_index9 = 0\n\tlocal\
    \ primes_count_max_index9 = 0\n\tlocal primes_count_min_index10 = 0\n\tlocal primes_count_max_index10\
    \ = 0\n\tlocal primes_count_min_index11 = 0\n\tlocal primes_count_max_index11\
    \ = 0\n\tlocal primes_count_min_index12 = 0\n\tlocal primes_count_max_index12\
    \ = 0\n\tlocal primes_count_min_index13 = 0\n\tlocal primes_count_max_index13\
    \ = 0\n\tlocal primes_count_min_index14 = 0\n\tlocal primes_count_max_index14\
    \ = 0\n\tlocal primes_count_min_index15 = 0\n\tlocal primes_count_max_index15\
    \ = 0\n\tlocal primes_count_min_index16 = 0\n\tlocal primes_count_max_index16\
    \ = 0\n\tlocal primes_count_min_index17 = 0\n\tlocal primes_count_max_index17\
    \ = 0\n\tlocal primes_count_min_index18 = 0\n\tlocal primes_count_max_index18\
    \ = 0\n\tlocal primes_count_min_index19 = 0\n\tlocal primes_count_max_index19\
    \ = 0\n\tlocal primes_count_min_index20 = 0\n\tlocal primes_count_max_index20\
    \ = 0\n\tlocal primes_count_min_index21 = 0\n\tlocal primes_count_max_index21\
    \ = 0\n\tlocal primes_count_min_index22 = 0\n\tlocal primes_count_max_index22\
    \ = 0\n\tlocal primes_count_min_index23 = 0\n\tlocal primes_count_max_index23\
    \ = 0\n\tlocal primes_count_min_index24 = 0\n\tlocal primes_count_max_index24\
    \ = 0\n\tlocal primes_count_min_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyuvcqq7u.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8az5_a09.lua:55: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = 0\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptngvgpt7.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local digits = {}\n  local digits_count\
    \ = 0\n  local hexadecimal = {}\n  local hexadecimal_count = 0\n  local hexadecimal_digits\
    \ = {}\n  local hexadecimal_digits_count = 0\n  local hexadecimal_digits_primes\
    \ = {}\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_count = 0\n  local hexadecimal_digits_primes_count\
    \ = 0\n  local hexadecimal_digits_primes_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3pu7osc4.lua:80: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = 0\n\
    \tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal\
    \ prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1yhv42_8.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal num_digits\
    \ = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count = 0\n\tlocal num_primes_sum\
    \ = 0\n\tlocal num_primes_sum_count = 0\n\tlocal num_primes_sum2 = 0\n\tlocal\
    \ num_primes_sum2_count = 0\n\tlocal num_primes_sum3 = 0\n\tlocal num_primes_sum3_count\
    \ = 0\n\tlocal num_primes_sum4 = 0\n\tlocal num_primes_sum4_count = 0\n\tlocal\
    \ num_primes_sum5 = 0\n\tlocal num_primes_sum5_count = 0\n\tlocal num_primes_sum6\
    \ = 0\n\tlocal num_primes_sum6_count = 0\n\tlocal num_primes_sum7 = 0\n\tlocal\
    \ num_primes_sum7_count = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum8_count\
    \ = 0\n\tlocal num_primes_sum9 = 0\n\tlocal num_primes_sum9_count = 0\n\tlocal\
    \ num_primes_sum10 = 0\n\tlocal num_primes_sum10_count = 0\n\tlocal num_primes_sum11\
    \ = 0\n\tlocal num_primes_sum11_count = 0\n\tlocal num_primes_sum12 = 0\n\tlocal\
    \ num_primes_sum12_count = 0\n\tlocal num_primes_sum13 = 0\n\tlocal num_primes_sum13_count\
    \ = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum14_count = 0\n\tlocal\
    \ num_primes_sum15 = 0\n\tlocal num_primes_sum15_count = 0\n\tlocal num_primes_sum16\
    \ = 0\n\tlocal num_primes_sum16_count = 0\n\tlocal num_primes_sum17 = 0\n\tlocal\
    \ num_primes_sum17_count = 0\n\tlocal num_primes_sum18 = 0\n\tlocal num_primes_sum18_count\
    \ = 0\n\tlocal num_primes_sum19 = 0\n\tlocal num_primes_sum19_count = 0\n\tlocal\
    \ num_primes_sum20 = 0\n\tlocal num_primes_sum20_count = 0\n\tlocal num_primes_sum21\
    \ = 0\n\tlocal num_primes_sum21_count = 0\n\tlocal num_primes_sum22 = 0\n\tlocal\
    \ num_primes_sum22_count = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum23_count\
    \ = 0\n\tlocal num_primes_sum24 = 0\n\tlocal num_primes_sum24_count = 0\n\tlocal\
    \ num_primes_sum25 = 0\n\tlocal num_primes_sum25_count = 0\n\tlocal num_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvh_cyfnw.lua:86: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hexadecimal = {}\n  local primes = {}\n  local prime_digits = {}\n  local\
    \ prime_digit_count = 0\n  local prime_digit_count_max = 2\n  local prime_digit_count_min\
    \ = 2\n  local prime_digit_count_step = 1\n  local prime_digit_count_max = math.floor(math.sqrt(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(num)))\
    \ + 1))) + 1))) + 1))\n  local prime_digit_count_min = math.floor(math.sqrt(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(num)))\
    \ + 1))) + 1))) + 1))\n  local prime_digit_count_step = math.floor(math.sqrt(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(num)))\
    \ + 1))) + 1))) + 1))\n  local prime_digit_count_max = prime_digit_count_max *\
    \ 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime_digit_count_step\
    \ = prime_digit_count_step * 2\n  local prime_digit_count_max = prime_digit_count_max\
    \ * 2\n  local prime_digit_count_min = prime_digit_count_min * 2\n  local prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4yp73619.lua:64: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local primes_count = 0\n    local\
    \ digits = string.gmatch(num, \"%x\")\n    if digits == nil then\n        return\
    \ nil\n    end\n    for i = 1, #digits do\n        local digit = tonumber(digits[i])\n\
    \        if digit == nil then\n            return nil\n        end\n        hex[digit]\
    \ = true\n    end\n    for i = 2, #hex do\n        if hex[i] == true then\n  \
    \          primes[#primes + 1] = i\n        end\n    end\n    for i = 2, #primes\
    \ do\n        if primes[i] * primes[i] > #hex then\n            primes_count =\
    \ primes_count + 1\n        end\n    end\n    return primes_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49br58mo.lua:25:\
    \ attempt to get length of local 'digits' (a function value)\nstack traceback:\n\
    \t/tmp/tmp49br58mo.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = 0\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpec_4hz8w.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.gsub(tostring(num), \"%a+\", \"\")\n\tlocal num_str =\
    \ string.gsub(num_str, \"%c\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%0\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%2\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%3\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%4\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%5\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%6\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%7\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%8\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%9\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%A\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%B\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%C\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%D\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%E\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%F\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%1\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%2\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%3\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%4\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%5\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%6\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%7\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%8\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%9\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%A\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%B\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%C\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"%D\", \"%1\")\n\tlocal num_str = string.gsub(num_str, \"%E\", \"%1\")\n\t\
    local num_str = string.gsub(num_str, \"%F\", \"%1\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaec3373x.lua:50: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_digits = {}\n    local prime_digit_count\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_sum = 0\n    local prime_digit_count_sum_max\
    \ = 0\n    local prime_digit_count_sum_min = 0\n    local prime_digit_count_product\
    \ = 0\n    local prime_digit_count_product_max = 0\n    local prime_digit_count_product_min\
    \ = 0\n    local prime_digit_count_product2 = 0\n    local prime_digit_count_product2_max\
    \ = 0\n    local prime_digit_count_product2_min = 0\n    local prime_digit_count_product3\
    \ = 0\n    local prime_digit_count_product3_max = 0\n    local prime_digit_count_product3_min\
    \ = 0\n    local prime_digit_count_product4 = 0\n    local prime_digit_count_product4_max\
    \ = 0\n    local prime_digit_count_product4_min = 0\n    local prime_digit_count_product5\
    \ = 0\n    local prime_digit_count_product5_max = 0\n    local prime_digit_count_product5_min\
    \ = 0\n    local prime_digit_count_product6 = 0\n    local prime_digit_count_product6_max\
    \ = 0\n    local prime_digit_count_product6_min = 0\n    local prime_digit_count_product7\
    \ = 0\n    local prime_digit_count_product7_max = 0\n    local prime_digit_count_product7_min\
    \ = 0\n    local prime_digit_count_product8 = 0\n    local prime_digit_count_product8_max\
    \ = 0\n    local prime_digit_count_product8_min = 0\n    local prime_digit_count_product9\
    \ = 0\n    local prime_digit_count_product9_max = 0\n    local prime_digit_count_product9_min\
    \ = 0\n    local prime_digit_count_product10 = 0\n    local prime_digit_count_product10_max\
    \ = 0\n    local prime_digit_count_product10_min = 0\n    local prime_digit_count_product11\
    \ = 0\n    local prime_digit_count_product11_max = 0\n    local prime_digit_count_product11_min\
    \ = 0\n    local prime_digit_count_product12 = 0\n    local prime_digit_count_product12_max\
    \ = 0\n    local prime_digit_count_product12_min = 0\n    local prime_digit_count_product13\
    \ = 0\n    local prime_digit_count_product13_max = 0\n    local prime_digit_count_product13_min\
    \ = 0\n    local prime_digit_count_product14 = 0\n    local prime_digit_count_product14_max\
    \ = 0\n    local prime_digit_count_product14_min = 0\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzoflrp6n.lua:81: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal primes_hex = {}\n\tlocal primes_hex_hex = {}\n\tlocal primes_hex_hex_count\
    \ = {}\n\tlocal primes_hex_hex_count_hex = {}\n\tlocal primes_hex_hex_count_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal\
    \ primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex =\
    \ {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex\
    \ = {}\n\tlocal primes_hex_hex_count_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_hex_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpndzwmg52.lua:59: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max\
    \ = 0\n\tlocal prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\t\
    local prime_digit_count_min = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\tlocal \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7zdeg_yq.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index = {}\n\
    \tlocal prime_digit_count_max_index[1] = 1\n\tlocal prime_digit_count_max_index[2]\
    \ = 2\n\tlocal prime_digit_count_max_index[3] = 3\n\tlocal prime_digit_count_max_index[4]\
    \ = 4\n\tlocal prime_digit_count_max_index[5] = 5\n\tlocal prime_digit_count_max_index[6]\
    \ = 6\n\tlocal prime_digit_count_max_index[7] = 7\n\tlocal prime_digit_count_max_index[8]\
    \ = 8\n\tlocal prime_digit_count_max_index[9] = 9\n\tlocal prime_digit_count_max_index[10]\
    \ = 10\n\tlocal prime_digit_count_max_index[11] = 11\n\tlocal prime_digit_count_max_index[12]\
    \ = 12\n\tlocal prime_digit_count_max_index[13] = 13\n\tlocal prime_digit_count_max_index[14]\
    \ = 14\n\tlocal prime_digit_count_max_index[15] = 15\n\tlocal prime_digit_count_max_index[16]\
    \ = 16\n\tlocal prime_digit_count_max_index[17] = 17\n\tlocal prime_digit_count_max_index[18]\
    \ = 18\n\tlocal prime_digit_count_max_index[19] = 19\n\tlocal prime_digit_count_max_index[20]\
    \ = 20\n\tlocal prime_digit_count_max_index[21] = 21\n\tlocal prime_digit_count_max_index[22]\
    \ = 22\n\tlocal prime_digit_count_max_index[23] = 23\n\tlocal prime_digit_count_max_index[24]\
    \ = 24\n\tlocal prime_digit_count_max_index[25] = 25\n\tlocal prime_digit_count_max_index[26]\
    \ = 26\n\tlocal prime_digit_count_max_index[27] = 27\n\tlocal prime_digit_count_max_index[28]\
    \ = 28\n\tlocal prime_digit_count_max_index[29] = 29\n\tlocal prime_digit_count_max_index[30]\
    \ = 30\n\tlocal prime_digit_count_max_index[31] = 31\n\tlocal prime_digit_count_max_index[32]\
    \ = 32\n\tlocal prime_digit_count_max_index[33] = 33\n\tlocal prime_digit_count_max_index[34]\
    \ = 34\n\tlocal prime_digit_count_max_index[35] = 35\n\tlocal prime_digit_count_max_index[36]\
    \ = 36\n\tlocal prime_digit_count_max_index[37] = 37\n\tlocal prime_digit_count_max_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8wpq6_59.lua:23: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = string.len(num_str)\n\t\
    local num_digits = string.len(num_str)\n\tlocal num_primes = 0\n\tlocal num_primes_count\
    \ = 0\n\tlocal num_primes_count_max = 2\n\tlocal num_primes_count_min = 2\n\t\
    local num_primes_count_step = 2\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_count_step\n\
    \tlocal num_primes_count_min = num_digits/num_primes_count_step\n\tlocal num_primes_count_step\
    \ = num_digits/num_primes_count_step\n\tlocal num_primes_count_max = num_digits/num_primes_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp99k9gv6i.lua:66: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hexadecimal = {}\n  local primes = {}\n  local prime_digits = {}\n  local\
    \ prime_digit_count = {}\n  local prime_digit_count_max = {}\n  local prime_digit_count_max_index\
    \ = {}\n  local prime_digit_count_max_index2 = {}\n  local prime_digit_count_max2\
    \ = {}\n  local prime_digit_count_max3 = {}\n  local prime_digit_count_max4 =\
    \ {}\n  local prime_digit_count_max5 = {}\n  local prime_digit_count_max6 = {}\n\
    \  local prime_digit_count_max7 = {}\n  local prime_digit_count_max8 = {}\n  local\
    \ prime_digit_count_max9 = {}\n  local prime_digit_count_max10 = {}\n  local prime_digit_count_max11\
    \ = {}\n  local prime_digit_count_max12 = {}\n  local prime_digit_count_max13\
    \ = {}\n  local prime_digit_count_max14 = {}\n  local prime_digit_count_max15\
    \ = {}\n  local prime_digit_count_max16 = {}\n  local prime_digit_count_max17\
    \ = {}\n  local prime_digit_count_max18 = {}\n  local prime_digit_count_max19\
    \ = {}\n  local prime_digit_count_max20 = {}\n  local prime_digit_count_max21\
    \ = {}\n  local prime_digit_count_max22 = {}\n  local prime_digit_count_max23\
    \ = {}\n  local prime_digit_count_max24 = {}\n  local prime_digit_count_max25\
    \ = {}\n  local prime_digit_count_max26 = {}\n  local prime_digit_count_max27\
    \ = {}\n  local prime_digit_count_max28 = {}\n  local prime_digit_count_max29\
    \ = {}\n  local prime_digit_count_max30 = {}\n  local prime_digit_count_max31\
    \ = {}\n  local prime_digit_count_max32 = {}\n  local prime_digit_count_max33\
    \ = {}\n  local prime_digit_count_max34 = {}\n  local prime_digit_count_max35\
    \ = {}\n  local prime_digit_count_max36 = {}\n  local prime_digit_count_max37\
    \ = {}\n  local prime_digit_count_max38 = {}\n  local prime_digit_count_max39\
    \ = {}\n  local prime_digit_count_max40 = {}\n  local prime_digit_count_max41\
    \ = {}\n  local prime_digit_count_max42 = {}\n  local prime_digit_count_max43\
    \ = {}\n  local prime_digit_count_max44 = {}\n  local prime_digit_count_max45\
    \ = {}\n  local prime_digit_count_max46 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo_pnyxu1.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_max = {}\n\tlocal prime_digit_count_max_index = {}\n\
    \tlocal prime_digit_count_max_index2 = {}\n\tlocal prime_digit_count_max_index3\
    \ = {}\n\tlocal prime_digit_count_max_index4 = {}\n\tlocal prime_digit_count_max_index5\
    \ = {}\n\tlocal prime_digit_count_max_index6 = {}\n\tlocal prime_digit_count_max_index7\
    \ = {}\n\tlocal prime_digit_count_max_index8 = {}\n\tlocal prime_digit_count_max_index9\
    \ = {}\n\tlocal prime_digit_count_max_index10 = {}\n\tlocal prime_digit_count_max_index11\
    \ = {}\n\tlocal prime_digit_count_max_index12 = {}\n\tlocal prime_digit_count_max_index13\
    \ = {}\n\tlocal prime_digit_count_max_index14 = {}\n\tlocal prime_digit_count_max_index15\
    \ = {}\n\tlocal prime_digit_count_max_index16 = {}\n\tlocal prime_digit_count_max_index17\
    \ = {}\n\tlocal prime_digit_count_max_index18 = {}\n\tlocal prime_digit_count_max_index19\
    \ = {}\n\tlocal prime_digit_count_max_index20 = {}\n\tlocal prime_digit_count_max_index21\
    \ = {}\n\tlocal prime_digit_count_max_index22 = {}\n\tlocal prime_digit_count_max_index23\
    \ = {}\n\tlocal prime_digit_count_max_index24 = {}\n\tlocal prime_digit_count_max_index25\
    \ = {}\n\tlocal prime_digit_count_max_index26 = {}\n\tlocal prime_digit_count_max_index27\
    \ = {}\n\tlocal prime_digit_count_max_index28 = {}\n\tlocal prime_digit_count_max_index29\
    \ = {}\n\tlocal prime_digit_count_max_index30 = {}\n\tlocal prime_digit_count_max_index31\
    \ = {}\n\tlocal prime_digit_count_max_index32 = {}\n\tlocal prime_digit_count_max_index33\
    \ = {}\n\tlocal prime_digit_count_max_index34 = {}\n\tlocal prime_digit_count_max_index35\
    \ = {}\n\tlocal prime_digit_count_max_index36 = {}\n\tlocal prime_digit_count_max_index37\
    \ = {}\n\tlocal prime_digit_count_max_index38 = {}\n\tlocal prime_digit_count_max_index39\
    \ = {}\n\tlocal prime_digit_count_max_index40 = {}\n\tlocal prime_digit_count_max_index41\
    \ = {}\n\tlocal prime_digit_count_max_index42 = {}\n\tlocal prime_digit_count_max_index43\
    \ = {}\n\tlocal prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdxenp8qb.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal hexadecimal = string.gsub(string.lower(num), \"%a+\", \"\")\n\t\
    local hexadecimal_length = #hexadecimal\n\tlocal hexadecimal_digits = {}\n\tlocal\
    \ hexadecimal_digits_count = 0\n\tlocal hexadecimal_digit_count = 0\n\tlocal hexadecimal_digit_sum\
    \ = 0\n\tlocal hexadecimal_digit_product = 1\n\tlocal hexadecimal_digit_product2\
    \ = 0\n\tlocal hexadecimal_digit_product3 = 0\n\tlocal hexadecimal_digit_product4\
    \ = 0\n\tlocal hexadecimal_digit_product5 = 0\n\tlocal hexadecimal_digit_product6\
    \ = 0\n\tlocal hexadecimal_digit_product7 = 0\n\tlocal hexadecimal_digit_product8\
    \ = 0\n\tlocal hexadecimal_digit_product9 = 0\n\tlocal hexadecimal_digit_product10\
    \ = 0\n\tlocal hexadecimal_digit_product11 = 0\n\tlocal hexadecimal_digit_product12\
    \ = 0\n\tlocal hexadecimal_digit_product13 = 0\n\tlocal hexadecimal_digit_product14\
    \ = 0\n\tlocal hexadecimal_digit_product15 = 0\n\tlocal hexadecimal_digit_product16\
    \ = 0\n\tlocal hexadecimal_digit_product17 = 0\n\tlocal hexadecimal_digit_product18\
    \ = 0\n\tlocal hexadecimal_digit_product19 = 0\n\tlocal hexadecimal_digit_product20\
    \ = 0\n\tlocal hexadecimal_digit_product21 = 0\n\tlocal hexadecimal_digit_product22\
    \ = 0\n\tlocal hexadecimal_digit_product23 = 0\n\tlocal hexadecimal_digit_product24\
    \ = 0\n\tlocal hexadecimal_digit_product25 = 0\n\tlocal hexadecimal_digit_product26\
    \ = 0\n\tlocal hexadecimal_digit_product27 = 0\n\tlocal hexadecimal_digit_product28\
    \ = 0\n\tlocal hexadecimal_digit_product29 = 0\n\tlocal hexadecimal_digit_product30\
    \ = 0\n\tlocal hexadecimal_digit_product31 = 0\n\tlocal hexadecimal_digit_product32\
    \ = 0\n\tlocal hexadecimal_digit_product33 = 0\n\tlocal hexadecimal_digit_product34\
    \ = 0\n\tlocal hexadecimal_digit_product35 = 0\n\tlocal hexadecimal_digit_product36\
    \ = 0\n\tlocal hexadecimal_digit_product37 = 0\n\tlocal hexadecimal_digit_product38\
    \ = 0\n\tlocal hexadecimal_digit_product39 = 0\n\tlocal hexadecimal_digit_product40\
    \ = 0\n\tlocal hexadecimal_digit_product41 = 0\n\tlocal hexadecimal_digit_product42\
    \ = 0\n\tlocal hexadecimal_digit_product43 = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw813g_zb.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_sum = 0\n\tlocal\
    \ primes_sum2 = 0\n\tlocal primes_sum3 = 0\n\tlocal primes_sum4 = 0\n\tlocal primes_sum5\
    \ = 0\n\tlocal primes_sum6 = 0\n\tlocal primes_sum7 = 0\n\tlocal primes_sum8 =\
    \ 0\n\tlocal primes_sum9 = 0\n\tlocal primes_sum10 = 0\n\tlocal primes_sum11 =\
    \ 0\n\tlocal primes_sum12 = 0\n\tlocal primes_sum13 = 0\n\tlocal primes_sum14\
    \ = 0\n\tlocal primes_sum15 = 0\n\tlocal primes_sum16 = 0\n\tlocal primes_sum17\
    \ = 0\n\tlocal primes_sum18 = 0\n\tlocal primes_sum19 = 0\n\tlocal primes_sum20\
    \ = 0\n\tlocal primes_sum21 = 0\n\tlocal primes_sum22 = 0\n\tlocal primes_sum23\
    \ = 0\n\tlocal primes_sum24 = 0\n\tlocal primes_sum25 = 0\n\tlocal primes_sum26\
    \ = 0\n\tlocal primes_sum27 = 0\n\tlocal primes_sum28 = 0\n\tlocal primes_sum29\
    \ = 0\n\tlocal primes_sum30 = 0\n\tlocal primes_sum31 = 0\n\tlocal primes_sum32\
    \ = 0\n\tlocal primes_sum33 = 0\n\tlocal primes_sum34 = 0\n\tlocal primes_sum35\
    \ = 0\n\tlocal primes_sum36 = 0\n\tlocal primes_sum37 = 0\n\tlocal primes_sum38\
    \ = 0\n\tlocal primes_sum39 = 0\n\tlocal primes_sum40 = 0\n\tlocal primes_sum41\
    \ = 0\n\tlocal primes_sum42 = 0\n\tlocal primes_sum43 = 0\n\tlocal primes_sum44\
    \ = 0\n\tlocal primes_sum45 = 0\n\tlocal primes_sum46 = 0\n\tlocal primes_sum47\
    \ = 0\n\tlocal primes_sum48 = 0\n\tlocal primes_sum49 = 0\n\tlocal primes_sum50\
    \ = 0\n\tlocal primes_sum51 = 0\n\tlocal primes_sum52 = 0\n\tlocal primes_sum53\
    \ = 0\n\tlocal primes_sum54 = 0\n\tlocal primes_sum55 = 0\n\tlocal primes_sum56\
    \ = 0\n\tlocal primes_sum57 = 0\n\tlocal primes_sum58 = 0\n\tlocal primes_sum59\
    \ = 0\n\tlocal primes_sum60 = 0\n\tlocal primes_sum61 = 0\n\tlocal primes_sum62\
    \ = 0\n\tlocal primes_sum63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpapbwhd02.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpblmgw7jt.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp78kuoqbd.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_digits = {}\n    local prime_digit_count\
    \ = {}\n    local prime_digit_count_max = {}\n    local prime_digit_count_min\
    \ = {}\n    local prime_digit_count_sum = {}\n    local prime_digit_count_sum_max\
    \ = {}\n    local prime_digit_count_sum_min = {}\n    local prime_digit_count_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_max = {}\n    local prime_digit_count_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_sum_min = {}\n    local prime_digit_count_sum_sum_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_sum_max = {}\n    local prime_digit_count_sum_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_sum_min = {}\n    local prime_digit_count_sum_sum_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_max = {}\n    local prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_min = {}\n    local prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_max = {}\n    local prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_min = {}\n    local prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_max = {}\n    local prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_min = {}\n    local prime_digit_count_sum_sum_sum_sum_sum\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_max = {}\n    local prime_digit_count_sum_sum_sum_sum_min\
    \ = {}\n    local prime_digit_count_sum_sum_sum_sum_sum = {}\n    local prime_digit_count_sum_sum_sum_sum_max\
    \ = {}\n    local prime_digit_count_sum_sum_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoz6gkrc5.lua:74: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal\
    \ primes_count_2 = 0\n\tlocal primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\
    \tlocal primes_count_5 = 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7\
    \ = 0\n\tlocal primes_count_8 = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10\
    \ = 0\n\tlocal primes_count_11 = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13\
    \ = 0\n\tlocal primes_count_14 = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16\
    \ = 0\n\tlocal primes_count_17 = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19\
    \ = 0\n\tlocal primes_count_20 = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22\
    \ = 0\n\tlocal primes_count_23 = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25\
    \ = 0\n\tlocal primes_count_26 = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28\
    \ = 0\n\tlocal primes_count_29 = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31\
    \ = 0\n\tlocal primes_count_32 = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34\
    \ = 0\n\tlocal primes_count_35 = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37\
    \ = 0\n\tlocal primes_count_38 = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40\
    \ = 0\n\tlocal primes_count_41 = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43\
    \ = 0\n\tlocal primes_count_44 = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46\
    \ = 0\n\tlocal primes_count_47 = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49\
    \ = 0\n\tlocal primes_count_50 = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52\
    \ = 0\n\tlocal primes_count_53 = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55\
    \ = 0\n\tlocal primes_count_56 = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58\
    \ = 0\n\tlocal primes_count_59 = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61\
    \ = 0\n\tlocal primes_count_62 = 0\n\tlocal primes_count_63\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk0d17xrw.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = 0\n\
    \tlocal prime_digit_count_2 = 0\n\tlocal prime_digit_count_3 = 0\n\tlocal prime_digit_count_4\
    \ = 0\n\tlocal prime_digit_count_5 = 0\n\tlocal prime_digit_count_6 = 0\n\tlocal\
    \ prime_digit_count_7 = 0\n\tlocal prime_digit_count_8 = 0\n\tlocal prime_digit_count_9\
    \ = 0\n\tlocal prime_digit_count_10 = 0\n\tlocal prime_digit_count_11 = 0\n\t\
    local prime_digit_count_12 = 0\n\tlocal prime_digit_count_13 = 0\n\tlocal prime_digit_count_14\
    \ = 0\n\tlocal prime_digit_count_15 = 0\n\tlocal prime_digit_count_16 = 0\n\t\
    local prime_digit_count_17 = 0\n\tlocal prime_digit_count_18 = 0\n\tlocal prime_digit_count_19\
    \ = 0\n\tlocal prime_digit_count_20 = 0\n\tlocal prime_digit_count_21 = 0\n\t\
    local prime_digit_count_22 = 0\n\tlocal prime_digit_count_23 = 0\n\tlocal prime_digit_count_24\
    \ = 0\n\tlocal prime_digit_count_25 = 0\n\tlocal prime_digit_count_26 = 0\n\t\
    local prime_digit_count_27 = 0\n\tlocal prime_digit_count_28 = 0\n\tlocal prime_digit_count_29\
    \ = 0\n\tlocal prime_digit_count_30 = 0\n\tlocal prime_digit_count_31 = 0\n\t\
    local prime_digit_count_32 = 0\n\tlocal prime_digit_count_33 = 0\n\tlocal prime_digit_count_34\
    \ = 0\n\tlocal prime_digit_count_35 = 0\n\tlocal prime_digit_count_36 = 0\n\t\
    local prime_digit_count_37 = 0\n\tlocal prime_digit_count_38 = 0\n\tlocal prime_digit_count_39\
    \ = 0\n\tlocal prime_digit_count_40 = 0\n\tlocal prime_digit_count_41 = 0\n\t\
    local prime_digit_count_42 = 0\n\tlocal prime_digit_count_43 = 0\n\tlocal prime_digit_count_44\
    \ = 0\n\tlocal prime_digit_count_45 = 0\n\tlocal prime_digit_count_46 = 0\n\t\
    local prime_digit_count_47 = 0\n\tlocal prime_digit_count_48 = 0\n\tlocal prime_digit_count_49\
    \ = 0\n\tlocal prime_digit_count_50 = 0\n\tlocal prime_digit_count_51 = 0\n\t\
    local prime_digit_count_52 = 0\n\tlocal prime_digit_count_53 = 0\n\tlocal prime_digit_count_54\
    \ = 0\n\tlocal prime_digit_count_55 = 0\n\tlocal prime_digit_count_56\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdu5hewwt.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count = 0\n\
    \  local prime_digit_count_max = 0\n  local prime_digit_count_min = 0\n  local\
    \ prime_digit_count_sum = 0\n  local prime_digit_count_sum2 = 0\n  local prime_digit_count_sum3\
    \ = 0\n  local prime_digit_count_sum4 = 0\n  local prime_digit_count_sum5 = 0\n\
    \  local prime_digit_count_sum6 = 0\n  local prime_digit_count_sum7 = 0\n  local\
    \ prime_digit_count_sum8 = 0\n  local prime_digit_count_sum9 = 0\n  local prime_digit_count_sum10\
    \ = 0\n  local prime_digit_count_sum11 = 0\n  local prime_digit_count_sum12 =\
    \ 0\n  local prime_digit_count_sum13 = 0\n  local prime_digit_count_sum14 = 0\n\
    \  local prime_digit_count_sum15 = 0\n  local prime_digit_count_sum16 = 0\n  local\
    \ prime_digit_count_sum17 = 0\n  local prime_digit_count_sum18 = 0\n  local prime_digit_count_sum19\
    \ = 0\n  local prime_digit_count_sum20 = 0\n  local prime_digit_count_sum21 =\
    \ 0\n  local prime_digit_count_sum22 = 0\n  local prime_digit_count_sum23 = 0\n\
    \  local prime_digit_count_sum24 = 0\n  local prime_digit_count_sum25 = 0\n  local\
    \ prime_digit_count_sum26 = 0\n  local prime_digit_count_sum27 = 0\n  local prime_digit_count_sum28\
    \ = 0\n  local prime_digit_count_sum29 = 0\n  local prime_digit_count_sum30 =\
    \ 0\n  local prime_digit_count_sum31 = 0\n  local prime_digit_count_sum32 = 0\n\
    \  local prime_digit_count_sum33 = 0\n  local prime_digit_count_sum34 = 0\n  local\
    \ prime_digit_count_sum35 = 0\n  local prime_digit_count_sum36 = 0\n  local prime_digit_count_sum37\
    \ = 0\n  local prime_digit_count_sum38 = 0\n  local prime_digit_count_sum39 =\
    \ 0\n  local prime_digit_count_sum40 = 0\n  local prime_digit_count_sum41 = 0\n\
    \  local prime_digit_count_sum42 = 0\n  local prime_digit_count_sum43 = 0\n  local\
    \ prime_digit_count_sum44 = 0\n  local prime_digit_count_sum45 = 0\n  local prime_digit_count_sum46\
    \ = 0\n  local prime_digit_count_sum47 = 0\n  local prime_digit_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi17npawx.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count = {}\n\
    \tlocal prime_digit_count_temp = {}\n\tlocal prime_digit_count_temp_temp = {}\n\
    \tlocal prime_digit_count_temp_temp2 = {}\n\tlocal prime_digit_count_temp_temp3\
    \ = {}\n\tlocal prime_digit_count_temp_temp4 = {}\n\tlocal prime_digit_count_temp_temp5\
    \ = {}\n\tlocal prime_digit_count_temp_temp6 = {}\n\tlocal prime_digit_count_temp_temp7\
    \ = {}\n\tlocal prime_digit_count_temp_temp8 = {}\n\tlocal prime_digit_count_temp_temp9\
    \ = {}\n\tlocal prime_digit_count_temp_temp10 = {}\n\tlocal prime_digit_count_temp_temp11\
    \ = {}\n\tlocal prime_digit_count_temp_temp12 = {}\n\tlocal prime_digit_count_temp_temp13\
    \ = {}\n\tlocal prime_digit_count_temp_temp14 = {}\n\tlocal prime_digit_count_temp_temp15\
    \ = {}\n\tlocal prime_digit_count_temp_temp16 = {}\n\tlocal prime_digit_count_temp_temp17\
    \ = {}\n\tlocal prime_digit_count_temp_temp18 = {}\n\tlocal prime_digit_count_temp_temp19\
    \ = {}\n\tlocal prime_digit_count_temp_temp20 = {}\n\tlocal prime_digit_count_temp_temp21\
    \ = {}\n\tlocal prime_digit_count_temp_temp22 = {}\n\tlocal prime_digit_count_temp_temp23\
    \ = {}\n\tlocal prime_digit_count_temp_temp24 = {}\n\tlocal prime_digit_count_temp_temp25\
    \ = {}\n\tlocal prime_digit_count_temp_temp26 = {}\n\tlocal prime_digit_count_temp_temp27\
    \ = {}\n\tlocal prime_digit_count_temp_temp28 = {}\n\tlocal prime_digit_count_temp_temp29\
    \ = {}\n\tlocal prime_digit_count_temp_temp30 = {}\n\tlocal prime_digit_count_temp_temp31\
    \ = {}\n\tlocal prime_digit_count_temp_temp32 = {}\n\tlocal prime_digit_count_temp_temp33\
    \ = {}\n\tlocal prime_digit_count_temp_temp34 = {}\n\tlocal prime_digit_count_temp_temp35\
    \ = {}\n\tlocal prime_digit_count_temp_temp36 = {}\n\tlocal prime_digit_count_temp_temp37\
    \ = {}\n\tlocal prime_digit_count_temp_temp38 = {}\n\tlocal prime_digit_count_temp_temp39\
    \ = {}\n\tlocal prime_digit_count_temp_temp40 = {}\n\tlocal prime_digit_count_temp_temp41\
    \ = {}\n\tlocal prime_digit_count_temp_temp42 = {}\n\tlocal prime_digit_count_temp_temp43\
    \ = {}\n\tlocal prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm9kfawso.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local primes_count_max = 2\n\
    \  local primes_count_min = 2\n  local primes_count_step = 2\n  local primes_count_max\
    \ = primes_count_max * primes_count_step\n  local primes_count_min = primes_count_min\
    \ * primes_count_step\n  local primes_count_step = primes_count_step * primes_count_step\n\
    \  local primes_count_max = primes_count_max * primes_count_step\n  local primes_count_min\
    \ = primes_count_min * primes_count_step\n  local primes_count_step = primes_count_step\
    \ * primes_count_step\n  local primes_count_max = primes_count_max * primes_count_step\n\
    \  local primes_count_min = primes_count_min * primes_count_step\n  local primes_count_step\
    \ = primes_count_step * primes_count_step\n  local primes_count_max = primes_count_max\
    \ * primes_count_step\n  local primes_count_min = primes_count_min * primes_count_step\n\
    \  local primes_count_step = primes_count_step * primes_count_step\n  local primes_count_max\
    \ = primes_count_max * primes_count_step\n  local primes_count_min = primes_count_min\
    \ * primes_count_step\n  local primes_count_step = primes_count_step * primes_count_step\n\
    \  local primes_count_max = primes_count_max * primes_count_step\n  local primes_count_min\
    \ = primes_count_min * primes_count_step\n  local primes_count_step = primes_count_step\
    \ * primes_count_step\n  local primes_count_max = primes_count_max * primes_count_step\n\
    \  local primes_count_min = primes_count_min * primes_count_step\n  local primes_count_step\
    \ = primes_count_step * primes_count_step\n  local primes_count_max = primes_count_max\
    \ * primes_count_step\n  local primes_count_min = primes_count_min * primes_count_step\n\
    \  local primes_count_step = primes_count_step * primes_count_step\n  local primes_count_max\
    \ = primes_count_max * primes_count_step\n  local primes_count_min = primes_count_min\
    \ * primes_count_step\n  local primes_count_step = primes_count_step * primes_count_step\n\
    \  local primes_count_max = primes_count_max * primes_count_step\n  local primes_count_min\
    \ = primes_count_min * primes_count_step\n  local primes_count_step = primes_count_step\
    \ * primes_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdvs6eku2.lua:65: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = tostring(num)\n    local num_len = #num_str\n    local num_digits\
    \ = #num_str\n    local num_primes = 0\n    local num_primes_count = 0\n    local\
    \ num_primes_sum = 0\n    local num_primes_sum2 = 0\n    local num_primes_sum3\
    \ = 0\n    local num_primes_sum4 = 0\n    local num_primes_sum5 = 0\n    local\
    \ num_primes_sum6 = 0\n    local num_primes_sum7 = 0\n    local num_primes_sum8\
    \ = 0\n    local num_primes_sum9 = 0\n    local num_primes_sum10 = 0\n    local\
    \ num_primes_sum11 = 0\n    local num_primes_sum12 = 0\n    local num_primes_sum13\
    \ = 0\n    local num_primes_sum14 = 0\n    local num_primes_sum15 = 0\n    local\
    \ num_primes_sum16 = 0\n    local num_primes_sum17 = 0\n    local num_primes_sum18\
    \ = 0\n    local num_primes_sum19 = 0\n    local num_primes_sum20 = 0\n    local\
    \ num_primes_sum21 = 0\n    local num_primes_sum22 = 0\n    local num_primes_sum23\
    \ = 0\n    local num_primes_sum24 = 0\n    local num_primes_sum25 = 0\n    local\
    \ num_primes_sum26 = 0\n    local num_primes_sum27 = 0\n    local num_primes_sum28\
    \ = 0\n    local num_primes_sum29 = 0\n    local num_primes_sum30 = 0\n    local\
    \ num_primes_sum31 = 0\n    local num_primes_sum32 = 0\n    local num_primes_sum33\
    \ = 0\n    local num_primes_sum34 = 0\n    local num_primes_sum35 = 0\n    local\
    \ num_primes_sum36 = 0\n    local num_primes_sum37 = 0\n    local num_primes_sum38\
    \ = 0\n    local num_primes_sum39 = 0\n    local num_primes_sum40 = 0\n    local\
    \ num_primes_sum41 = 0\n    local num_primes_sum42 = 0\n    local num_primes_sum43\
    \ = 0\n    local num_primes_sum44 = 0\n    local num_primes_sum45 = 0\n    local\
    \ num_primes_sum46 = 0\n    local num_primes_sum47 = 0\n    local num_primes_sum48\
    \ = 0\n    local num_primes_sum49 = 0\n    local num_primes_sum50 = 0\n    local\
    \ num_primes_sum51 = 0\n    local num_primes_sum52 = 0\n    local num_primes_sum53\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgkn7voi3.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hex = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hex_key = {}\n\tlocal prime_hex_key2 = {}\n\tlocal prime_hex_key3\
    \ = {}\n\tlocal prime_hex_key4 = {}\n\tlocal prime_hex_key5 = {}\n\tlocal prime_hex_key6\
    \ = {}\n\tlocal prime_hex_key7 = {}\n\tlocal prime_hex_key8 = {}\n\tlocal prime_hex_key9\
    \ = {}\n\tlocal prime_hex_key10 = {}\n\tlocal prime_hex_key11 = {}\n\tlocal prime_hex_key12\
    \ = {}\n\tlocal prime_hex_key13 = {}\n\tlocal prime_hex_key14 = {}\n\tlocal prime_hex_key15\
    \ = {}\n\tlocal prime_hex_key16 = {}\n\tlocal prime_hex_key17 = {}\n\tlocal prime_hex_key18\
    \ = {}\n\tlocal prime_hex_key19 = {}\n\tlocal prime_hex_key20 = {}\n\tlocal prime_hex_key21\
    \ = {}\n\tlocal prime_hex_key22 = {}\n\tlocal prime_hex_key23 = {}\n\tlocal prime_hex_key24\
    \ = {}\n\tlocal prime_hex_key25 = {}\n\tlocal prime_hex_key26 = {}\n\tlocal prime_hex_key27\
    \ = {}\n\tlocal prime_hex_key28 = {}\n\tlocal prime_hex_key29 = {}\n\tlocal prime_hex_key30\
    \ = {}\n\tlocal prime_hex_key31 = {}\n\tlocal prime_hex_key32 = {}\n\tlocal prime_hex_key33\
    \ = {}\n\tlocal prime_hex_key34 = {}\n\tlocal prime_hex_key35 = {}\n\tlocal prime_hex_key36\
    \ = {}\n\tlocal prime_hex_key37 = {}\n\tlocal prime_hex_key38 = {}\n\tlocal prime_hex_key39\
    \ = {}\n\tlocal prime_hex_key40 = {}\n\tlocal prime_hex_key41 = {}\n\tlocal prime_hex_key42\
    \ = {}\n\tlocal prime_hex_key43 = {}\n\tlocal prime_hex_key44 = {}\n\tlocal prime_hex_key45\
    \ = {}\n\tlocal prime_hex_key46 = {}\n\tlocal prime_hex_key47 = {}\n\tlocal prime_hex_key48\
    \ = {}\n\tlocal prime_hex_key49 = {}\n\tlocal prime_hex_key50 = {}\n\tlocal prime_hex_key51\
    \ = {}\n\tlocal prime_hex_key52 = {}\n\tlocal prime_hex_key53 = {}\n\tlocal prime_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy6qsjze8.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_digits = {}\n    local prime_digit_count\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\
    \ = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max =\
    \ 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n\
    \    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n  \
    \  local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local\
    \ prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\
    \ = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max =\
    \ 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n\
    \    local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n  \
    \  local prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local\
    \ prime_digit_count_min = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n\
    \    local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n  \
    \  local prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local\
    \ prime_digit_count_max = 0\n    local prime_digit_count_min = 0\n    local prime_digit_count_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamgdj239.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local primes_count = 0\n\
    \    local primes_sum = 0\n    local primes_sum2 = 0\n    local primes_sum3 =\
    \ 0\n    local primes_sum4 = 0\n    local primes_sum5 = 0\n    local primes_sum6\
    \ = 0\n    local primes_sum7 = 0\n    local primes_sum8 = 0\n    local primes_sum9\
    \ = 0\n    local primes_sum10 = 0\n    local primes_sum11 = 0\n    local primes_sum12\
    \ = 0\n    local primes_sum13 = 0\n    local primes_sum14 = 0\n    local primes_sum15\
    \ = 0\n    local primes_sum16 = 0\n    local primes_sum17 = 0\n    local primes_sum18\
    \ = 0\n    local primes_sum19 = 0\n    local primes_sum20 = 0\n    local primes_sum21\
    \ = 0\n    local primes_sum22 = 0\n    local primes_sum23 = 0\n    local primes_sum24\
    \ = 0\n    local primes_sum25 = 0\n    local primes_sum26 = 0\n    local primes_sum27\
    \ = 0\n    local primes_sum28 = 0\n    local primes_sum29 = 0\n    local primes_sum30\
    \ = 0\n    local primes_sum31 = 0\n    local primes_sum32 = 0\n    local primes_sum33\
    \ = 0\n    local primes_sum34 = 0\n    local primes_sum35 = 0\n    local primes_sum36\
    \ = 0\n    local primes_sum37 = 0\n    local primes_sum38 = 0\n    local primes_sum39\
    \ = 0\n    local primes_sum40 = 0\n    local primes_sum41 = 0\n    local primes_sum42\
    \ = 0\n    local primes_sum43 = 0\n    local primes_sum44 = 0\n    local primes_sum45\
    \ = 0\n    local primes_sum46 = 0\n    local primes_sum47 = 0\n    local primes_sum48\
    \ = 0\n    local primes_sum49 = 0\n    local primes_sum50 = 0\n    local primes_sum51\
    \ = 0\n    local primes_sum52 = 0\n    local primes_sum53 = 0\n    local primes_sum54\
    \ = 0\n    local primes_sum55 = 0\n    local primes_sum56 = 0\n    local primes_sum57\
    \ = 0\n    local primes_sum58 = 0\n    local primes_sum59 = 0\n    local primes_sum60\
    \ = 0\n    local primes_sum61 = 0\n    local primes_sum62 = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdnw7vkv5.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwepap7ge.lua:21: ')' expected (to close '(' at line 20) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdo2yawef.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\tlocal\
    \ prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hex\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqop1if8j.lua:56: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal prime_digits = {}\n\tlocal prime_digits_count = 0\n\tlocal prime_digits_sum\
    \ = 0\n\tlocal prime_digits_sum2 = 0\n\tlocal prime_digits_sum3 = 0\n\tlocal prime_digits_sum4\
    \ = 0\n\tlocal prime_digits_sum5 = 0\n\tlocal prime_digits_sum6 = 0\n\tlocal prime_digits_sum7\
    \ = 0\n\tlocal prime_digits_sum8 = 0\n\tlocal prime_digits_sum9 = 0\n\tlocal prime_digits_sum10\
    \ = 0\n\tlocal prime_digits_sum11 = 0\n\tlocal prime_digits_sum12 = 0\n\tlocal\
    \ prime_digits_sum13 = 0\n\tlocal prime_digits_sum14 = 0\n\tlocal prime_digits_sum15\
    \ = 0\n\tlocal prime_digits_sum16 = 0\n\tlocal prime_digits_sum17 = 0\n\tlocal\
    \ prime_digits_sum18 = 0\n\tlocal prime_digits_sum19 = 0\n\tlocal prime_digits_sum20\
    \ = 0\n\tlocal prime_digits_sum21 = 0\n\tlocal prime_digits_sum22 = 0\n\tlocal\
    \ prime_digits_sum23 = 0\n\tlocal prime_digits_sum24 = 0\n\tlocal prime_digits_sum25\
    \ = 0\n\tlocal prime_digits_sum26 = 0\n\tlocal prime_digits_sum27 = 0\n\tlocal\
    \ prime_digits_sum28 = 0\n\tlocal prime_digits_sum29 = 0\n\tlocal prime_digits_sum30\
    \ = 0\n\tlocal prime_digits_sum31 = 0\n\tlocal prime_digits_sum32 = 0\n\tlocal\
    \ prime_digits_sum33 = 0\n\tlocal prime_digits_sum34 = 0\n\tlocal prime_digits_sum35\
    \ = 0\n\tlocal prime_digits_sum36 = 0\n\tlocal prime_digits_sum37 = 0\n\tlocal\
    \ prime_digits_sum38 = 0\n\tlocal prime_digits_sum39 = 0\n\tlocal prime_digits_sum40\
    \ = 0\n\tlocal prime_digits_sum41 = 0\n\tlocal prime_digits_sum42 = 0\n\tlocal\
    \ prime_digits_sum43 = 0\n\tlocal prime_digits_sum44 = 0\n\tlocal prime_digits_sum45\
    \ = 0\n\tlocal prime_digits_sum46 = 0\n\tlocal prime_digits_sum47 = 0\n\tlocal\
    \ prime_digits_sum48 = 0\n\tlocal prime_digits_sum49 = 0\n\tlocal prime_digits_sum50\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqj147t8d.lua:82: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local hexadecimal = 0\n  local\
    \ hexadecimal_digit = 0\n  local hexadecimal_digit_count = 0\n  local hexadecimal_digit_count_max\
    \ = 0\n  local hexadecimal_digit_count_min = 0\n  local hexadecimal_digit_count_max_min\
    \ = 0\n  local hexadecimal_digit_count_max_min_index = 0\n  local hexadecimal_digit_count_max_min_index2\
    \ = 0\n  local hexadecimal_digit_count_max_min_index3 = 0\n  local hexadecimal_digit_count_max_min_index4\
    \ = 0\n  local hexadecimal_digit_count_max_min_index5 = 0\n  local hexadecimal_digit_count_max_min_index6\
    \ = 0\n  local hexadecimal_digit_count_max_min_index7 = 0\n  local hexadecimal_digit_count_max_min_index8\
    \ = 0\n  local hexadecimal_digit_count_max_min_index9 = 0\n  local hexadecimal_digit_count_max_min_index10\
    \ = 0\n  local hexadecimal_digit_count_max_min_index11 = 0\n  local hexadecimal_digit_count_max_min_index12\
    \ = 0\n  local hexadecimal_digit_count_max_min_index13 = 0\n  local hexadecimal_digit_count_max_min_index14\
    \ = 0\n  local hexadecimal_digit_count_max_min_index15 = 0\n  local hexadecimal_digit_count_max_min_index16\
    \ = 0\n  local hexadecimal_digit_count_max_min_index17 = 0\n  local hexadecimal_digit_count_max_min_index18\
    \ = 0\n  local hexadecimal_digit_count_max_min_index19 = 0\n  local hexadecimal_digit_count_max_min_index20\
    \ = 0\n  local hexadecimal_digit_count_max_min_index21 = 0\n  local hexadecimal_digit_count_max_min_index22\
    \ = 0\n  local hexadecimal_digit_count_max_min_index23 = 0\n  local hexadecimal_digit_count_max_min_index24\
    \ = 0\n  local hexadecimal_digit_count_max_min_index25 = 0\n  local hexadecimal_digit_count_max_min_index26\
    \ = 0\n  local hexadecimal_digit_count_max_min_index27 = 0\n  local hexadecimal_digit_count_max_min_index28\
    \ = 0\n  local hexadecimal_digit_count_max_min_index29 = 0\n  local hexadecimal_digit_count_max_min_index30\
    \ = 0\n  local hexadecimal_digit_count_max_min_index31 = 0\n  local hexadecimal_digit_count_max_min_index32\
    \ = 0\n  local hexadecimal_digit_count_max_min_index33 = 0\n  local hexadecimal_digit_count_max_min_index34\
    \ = 0\n  local hexadecimal_digit_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpapg1n007.lua:73: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal num_digits\
    \ = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count = 0\n\tlocal num_primes_sum\
    \ = 0\n\tlocal num_primes_sum2 = 0\n\tlocal num_primes_sum3 = 0\n\tlocal num_primes_sum4\
    \ = 0\n\tlocal num_primes_sum5 = 0\n\tlocal num_primes_sum6 = 0\n\tlocal num_primes_sum7\
    \ = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum9 = 0\n\tlocal num_primes_sum10\
    \ = 0\n\tlocal num_primes_sum11 = 0\n\tlocal num_primes_sum12 = 0\n\tlocal num_primes_sum13\
    \ = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum15 = 0\n\tlocal num_primes_sum16\
    \ = 0\n\tlocal num_primes_sum17 = 0\n\tlocal num_primes_sum18 = 0\n\tlocal num_primes_sum19\
    \ = 0\n\tlocal num_primes_sum20 = 0\n\tlocal num_primes_sum21 = 0\n\tlocal num_primes_sum22\
    \ = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum24 = 0\n\tlocal num_primes_sum25\
    \ = 0\n\tlocal num_primes_sum26 = 0\n\tlocal num_primes_sum27 = 0\n\tlocal num_primes_sum28\
    \ = 0\n\tlocal num_primes_sum29 = 0\n\tlocal num_primes_sum30 = 0\n\tlocal num_primes_sum31\
    \ = 0\n\tlocal num_primes_sum32 = 0\n\tlocal num_primes_sum33 = 0\n\tlocal num_primes_sum34\
    \ = 0\n\tlocal num_primes_sum35 = 0\n\tlocal num_primes_sum36 = 0\n\tlocal num_primes_sum37\
    \ = 0\n\tlocal num_primes_sum38 = 0\n\tlocal num_primes_sum39 = 0\n\tlocal num_primes_sum40\
    \ = 0\n\tlocal num_primes_sum41 = 0\n\tlocal num_primes_sum42 = 0\n\tlocal num_primes_sum43\
    \ = 0\n\tlocal num_primes_sum44 = 0\n\tlocal num_primes_sum45 = 0\n\tlocal num_primes_sum46\
    \ = 0\n\tlocal num_primes_sum47 = 0\n\tlocal num_primes_sum48 = 0\n\tlocal num_primes_sum49\
    \ = 0\n\tlocal num_primes_sum50 = 0\n\tlocal num_primes_sum51 = 0\n\tlocal num_primes_sum52\
    \ = 0\n\tlocal num_primes_sum53\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx2w4km8w.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {}\n  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count\
    \ = {}\n  local prime_digit_count_max = {}\n  local prime_digit_count_min = {}\n\
    \  local prime_digit_count_max2 = {}\n  local prime_digit_count_min2 = {}\n  local\
    \ prime_digit_count_max3 = {}\n  local prime_digit_count_min3 = {}\n  local prime_digit_count_max4\
    \ = {}\n  local prime_digit_count_min4 = {}\n  local prime_digit_count_max5 =\
    \ {}\n  local prime_digit_count_min5 = {}\n  local prime_digit_count_max6 = {}\n\
    \  local prime_digit_count_min6 = {}\n  local prime_digit_count_max7 = {}\n  local\
    \ prime_digit_count_min7 = {}\n  local prime_digit_count_max8 = {}\n  local prime_digit_count_min8\
    \ = {}\n  local prime_digit_count_max9 = {}\n  local prime_digit_count_min9 =\
    \ {}\n  local prime_digit_count_max10 = {}\n  local prime_digit_count_min10 =\
    \ {}\n  local prime_digit_count_max11 = {}\n  local prime_digit_count_min11 =\
    \ {}\n  local prime_digit_count_max12 = {}\n  local prime_digit_count_min12 =\
    \ {}\n  local prime_digit_count_max13 = {}\n  local prime_digit_count_min13 =\
    \ {}\n  local prime_digit_count_max14 = {}\n  local prime_digit_count_min14 =\
    \ {}\n  local prime_digit_count_max15 = {}\n  local prime_digit_count_min15 =\
    \ {}\n  local prime_digit_count_max16 = {}\n  local prime_digit_count_min16 =\
    \ {}\n  local prime_digit_count_max17 = {}\n  local prime_digit_count_min17 =\
    \ {}\n  local prime_digit_count_max18 = {}\n  local prime_digit_count_min18 =\
    \ {}\n  local prime_digit_count_max19 = {}\n  local prime_digit_count_min19 =\
    \ {}\n  local prime_digit_count_max20 = {}\n  local prime_digit_count_min20 =\
    \ {}\n  local prime_digit_count_max21 = {}\n  local prime_digit_count_min21 =\
    \ {}\n  local prime_digit_count_max22 = {}\n  local prime_digit_count_min22 =\
    \ {}\n  local prime_digit_count_max23 = {}\n  local prime_digit_count_min23 =\
    \ {}\n  local prime_digit_count_max24 = {}\n  local prime_digit_count_min24 =\
    \ {}\n  local prime_digit_count_max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ido8kd7.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_count = 0\n    local prime_digits = {}\n\
    \    local prime_digit_count = {}\n    local prime_digit_sum = {}\n    local prime_digit_sums\
    \ = {}\n    local prime_digit_sums_count = 0\n    local prime_digit_sums_sum =\
    \ 0\n    local prime_digit_sums_sums = {}\n    local prime_digit_sums_sums_count\
    \ = 0\n    local prime_digit_sums_sums_sum = 0\n    local prime_digit_sums_sums_sums\
    \ = {}\n    local prime_digit_sums_sums_sums_count = 0\n    local prime_digit_sums_sums_sums_sum\
    \ = 0\n    local prime_digit_sums_sums_sums_sums = {}\n    local prime_digit_sums_sums_sums_sums_count\
    \ = 0\n    local prime_digit_sums_sums_sums_sums_sum = 0\n    local prime_digit_sums_sums_sums_sums_sums\
    \ = {}\n    local prime_digit_sums_sums_sums_sums_sums_count = 0\n    local prime_digit_sums_sums_sums_sums_sums_sum\
    \ = 0\n    local prime_digit_sums_sums_sums_sums_sums_sums = {}\n    local prime_digit_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n    local prime_digit_sums_sums_sums_sums_sums_sums_sum = 0\n    local\
    \ prime_digit_sums_sums_sums_sums_sums_sums_sums = {}\n    local prime_digit_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n    local prime_digit_sums_sums_sums_sums_sums_sums_sums_sum = 0\n    local\
    \ prime_digit_sums_sums_sums_sums_sums_sums_sums_sums = {}\n    local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n    local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n\
    \    local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums = {}\n   \
    \ local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums_count = 0\n \
    \   local prime_digit_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n \
    \   local prime_digit_sums_sums_sums_sums_sums_sums_sums_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuu9zhq8l.lua:63: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_digits = {}\n    local prime_digit_count\
    \ = 0\n    local prime_digit_count_max = 0\n    local prime_digit_count_min =\
    \ 0\n    local prime_digit_count_sum = 0\n    local prime_digit_count_sum2 = 0\n\
    \    local prime_digit_count_sum3 = 0\n    local prime_digit_count_sum4 = 0\n\
    \    local prime_digit_count_sum5 = 0\n    local prime_digit_count_sum6 = 0\n\
    \    local prime_digit_count_sum7 = 0\n    local prime_digit_count_sum8 = 0\n\
    \    local prime_digit_count_sum9 = 0\n    local prime_digit_count_sum10 = 0\n\
    \    local prime_digit_count_sum11 = 0\n    local prime_digit_count_sum12 = 0\n\
    \    local prime_digit_count_sum13 = 0\n    local prime_digit_count_sum14 = 0\n\
    \    local prime_digit_count_sum15 = 0\n    local prime_digit_count_sum16 = 0\n\
    \    local prime_digit_count_sum17 = 0\n    local prime_digit_count_sum18 = 0\n\
    \    local prime_digit_count_sum19 = 0\n    local prime_digit_count_sum20 = 0\n\
    \    local prime_digit_count_sum21 = 0\n    local prime_digit_count_sum22 = 0\n\
    \    local prime_digit_count_sum23 = 0\n    local prime_digit_count_sum24 = 0\n\
    \    local prime_digit_count_sum25 = 0\n    local prime_digit_count_sum26 = 0\n\
    \    local prime_digit_count_sum27 = 0\n    local prime_digit_count_sum28 = 0\n\
    \    local prime_digit_count_sum29 = 0\n    local prime_digit_count_sum30 = 0\n\
    \    local prime_digit_count_sum31 = 0\n    local prime_digit_count_sum32 = 0\n\
    \    local prime_digit_count_sum33 = 0\n    local prime_digit_count_sum34 = 0\n\
    \    local prime_digit_count_sum35 = 0\n    local prime_digit_count_sum36 = 0\n\
    \    local prime_digit_count_sum37 = 0\n    local prime_digit_count_sum38 = 0\n\
    \    local prime_digit_count_sum39 = 0\n    local prime_digit_count_sum40 = 0\n\
    \    local prime_digit_count_sum41 = 0\n    local prime_digit_count_sum42 = 0\n\
    \    local prime_digit_count_sum43 = 0\n    local prime_digit_count_sum44 = 0\n\
    \    local prime_digit_count_sum45 = 0\n    local prime_digit_count_sum46 = 0\n\
    \    local prime_digit_count_sum47 = 0\n    local prime_digit_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8z14vadm.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local primes_count = 0\n\
    \    local primes_count_max = 2\n    local primes_count_min = 2\n    local primes_count_max\
    \ = math.floor(math.sqrt(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10, math.floor(math.log(math.pow(10,\
    \ math.floor(math.log(math.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0jog9rmd.lua:23: function or expression too complex near 'math'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal digit_count = 1\n\tlocal\
    \ digit_primes = {}\n\tlocal digit_prime_count = 0\n\tlocal digit_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_count = 0\n\tlocal digit_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_count = 0\n\tlocal digit_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_count = 0\n\t\
    local digit_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\t\
    local digit_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\t\
    local digit_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_prime_primes =\
    \ {}\n\tlocal digit_prime_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\
    \tlocal digit_prime_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\t\
    local digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes = {}\n\
    \tlocal digit_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp2oz4oae.lua:64: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal count = 0\n\tfor i = 1, #num, 1 do\n\t\tlocal c = string.sub(num,\
    \ i, i)\n\t\tif c ~= 'A' and c ~= 'B' and c ~= 'C' and c ~= 'D' and c ~= 'E' and\
    \ c ~= 'F' then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\thex[#hex + 1] = c\n\t\
    \tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytapc1qg.lua:34:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpytapc1qg.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_count = 0\n  local digit_count = 0\n  local\
    \ digit_sum = 0\n  local digit\n  for i = 1, #num do\n    digit = tonumber(string.sub(num,\
    \ i, i))\n    if digit == nil then\n      digit_count = digit_count + 1\n    \
    \  digit_sum = digit_sum + digit\n    else\n      digit_count = digit_count +\
    \ 1\n      digit_sum = digit_sum + digit\n      if digit_sum == 2 then\n     \
    \   primes[#primes + 1] = digit\n        prime_count = prime_count + 1\n     \
    \   digit_sum = 0\n      end\n    end\n  end\n  if prime_count == 0 then\n   \
    \ return nil\n  end\n  return prime_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrzzlbk8.lua:27:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyrzzlbk8.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkx8hyav2.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.gsub(tostring(num), \"%a+\", \"\")\n\tlocal num_len =\
    \ #num_str\n\tlocal num_digits = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count\
    \ = 0\n\tlocal num_primes_count_max = 2\n\tlocal num_primes_count_min = 2\n\t\
    local num_primes_count_step = 1\n\tlocal num_primes_count_max = num_digits - num_primes_count_min\n\
    \tlocal num_primes_count_min = num_digits - num_primes_count_max\n\tlocal num_primes_count_step\
    \ = num_digits - num_primes_count_max\n\tlocal num_primes_count_max = num_digits\
    \ - num_primes_count_min\n\tlocal num_primes_count_min = num_digits - num_primes_count_max\n\
    \tlocal num_primes_count_step = num_digits - num_primes_count_max\n\tlocal num_primes_count_max\
    \ = num_digits - num_primes_count_min\n\tlocal num_primes_count_min = num_digits\
    \ - num_primes_count_max\n\tlocal num_primes_count_step = num_digits - num_primes_count_max\n\
    \tlocal num_primes_count_max = num_digits - num_primes_count_min\n\tlocal num_primes_count_min\
    \ = num_digits - num_primes_count_max\n\tlocal num_primes_count_step = num_digits\
    \ - num_primes_count_max\n\tlocal num_primes_count_max = num_digits - num_primes_count_min\n\
    \tlocal num_primes_count_min = num_digits - num_primes_count_max\n\tlocal num_primes_count_step\
    \ = num_digits - num_primes_count_max\n\tlocal num_primes_count_max = num_digits\
    \ - num_primes_count_min\n\tlocal num_primes_count_min = num_digits - num_primes_count_max\n\
    \tlocal num_primes_count_step = num_digits - num_primes_count_max\n\tlocal num_primes_count_max\
    \ = num_digits - num_primes_count_min\n\tlocal num_primes_count_min = num_digits\
    \ - num_primes_count_max\n\tlocal num_primes_count_step = num_digits - num_primes_count_max\n\
    \tlocal num_primes_count_max = num_digits - num_primes_count_min\n\tlocal num_primes_count_min\
    \ = num_digits - num_primes_count_max\n\tlocal num_primes_count_step = num_digits\
    \ - num_primes_count_max\n\tlocal num_primes_count_max = num_digits - num_primes_count_min\n\
    \tlocal num_primes_count_min = num_digits - num_primes_count_max\n\tlocal num_primes_count_step\
    \ = num_digits - num_primes_count_max\n\tlocal num_primes_count_max = num_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ffsuer5.lua:66: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_count_max\
    \ = 2\n    local primes_count_min = 2\n    local primes_count_max = math.floor(math.sqrt(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(2,math.floor(math.log(math.pow(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqlazb2hk.lua:22: function or expression too complex near '.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 2\n\t\
    local primes_count_min = 2\n\tlocal primes_count_step = 2\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(primes_count_max))\n\tlocal primes_count_min = math.floor(math.sqrt(primes_count_min))\n\
    \tlocal primes_count_step = math.floor(math.sqrt(primes_count_step))\n\tlocal\
    \ primes_count_max = primes_count_max - primes_count_min\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ - primes_count_min\n\tlocal primes_count_max = primes_count_max - primes_count_step\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step - primes_count_min\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_step\n\tlocal primes_count_min = primes_count_min - primes_count_step\n\
    \tlocal primes_count_step = primes_count_step - primes_count_min\n\tlocal primes_count_max\
    \ = primes_count_max - primes_count_step\n\tlocal primes_count_min = primes_count_min\
    \ - primes_count_step\n\tlocal primes_count_step = primes_count_step - primes_count_min\n\
    \tlocal primes_count_max = primes_count_max - primes_count_step\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ - primes_count_min\n\tlocal primes_count_max = primes_count_max - primes_count_step\n\
    \tlocal primes_count_min = primes_count_min - primes_count_step\n\tlocal primes_count_step\
    \ = primes_count_step - primes_count_min\n\tlocal primes_count_max = primes_count_max\
    \ - primes_count_step\n\tlocal primes_count_min = primes_count_min - primes_count_step\n\
    \tlocal primes_count_step = primes_count_step - primes_count_min\n\tlocal primes_count_max\
    \ = primes_count_max - primes_count_step\n\tlocal primes_count_min = primes_count_min\
    \ - primes_count_step\n\tlocal primes_count_step = primes_count_step - primes_count_min\n\
    \tlocal primes_count_max = primes_count_max - primes_count_step\n\tlocal primes_count_min\
    \ = primes_count_min - primes_count_step\n\tlocal primes_count_step = primes_count_step\
    \ - primes_count_min\n\tlocal primes_count_max = primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmotc9wta.lua:66: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local primes_count = 0\n\
    \    local primes_count_2 = 0\n    local primes_count_3 = 0\n    local primes_count_4\
    \ = 0\n    local primes_count_5 = 0\n    local primes_count_6 = 0\n    local primes_count_7\
    \ = 0\n    local primes_count_8 = 0\n    local primes_count_9 = 0\n    local primes_count_10\
    \ = 0\n    local primes_count_11 = 0\n    local primes_count_12 = 0\n    local\
    \ primes_count_13 = 0\n    local primes_count_14 = 0\n    local primes_count_15\
    \ = 0\n    local primes_count_16 = 0\n    local primes_count_17 = 0\n    local\
    \ primes_count_18 = 0\n    local primes_count_19 = 0\n    local primes_count_20\
    \ = 0\n    local primes_count_21 = 0\n    local primes_count_22 = 0\n    local\
    \ primes_count_23 = 0\n    local primes_count_24 = 0\n    local primes_count_25\
    \ = 0\n    local primes_count_26 = 0\n    local primes_count_27 = 0\n    local\
    \ primes_count_28 = 0\n    local primes_count_29 = 0\n    local primes_count_30\
    \ = 0\n    local primes_count_31 = 0\n    local primes_count_32 = 0\n    local\
    \ primes_count_33 = 0\n    local primes_count_34 = 0\n    local primes_count_35\
    \ = 0\n    local primes_count_36 = 0\n    local primes_count_37 = 0\n    local\
    \ primes_count_38 = 0\n    local primes_count_39 = 0\n    local primes_count_40\
    \ = 0\n    local primes_count_41 = 0\n    local primes_count_42 = 0\n    local\
    \ primes_count_43 = 0\n    local primes_count_44 = 0\n    local primes_count_45\
    \ = 0\n    local primes_count_46 = 0\n    local primes_count_47 = 0\n    local\
    \ primes_count_48 = 0\n    local primes_count_49 = 0\n    local primes_count_50\
    \ = 0\n    local primes_count_51 = 0\n    local primes_count_52 = 0\n    local\
    \ primes_count_53 = 0\n    local primes_count_54 = 0\n    local primes_count_55\
    \ = 0\n    local primes_count_56 = 0\n    local primes_count_57 = 0\n    local\
    \ primes_count_58 = 0\n    local primes_count_59 = 0\n    local primes_count_60\
    \ = 0\n    local primes_count_61 = 0\n    local primes_count_62 = 0\n    local\
    \ primes_count_63\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq07rv66m.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {}\n    local primes = {}\n    local prime_digits = {}\n    local\
    \ prime_digit_count = {}\n    local prime_digit_count_temp = {}\n    local prime_digit_count_temp_temp\
    \ = {}\n    local prime_digit_count_temp_temp2 = {}\n    local prime_digit_count_temp_temp3\
    \ = {}\n    local prime_digit_count_temp_temp4 = {}\n    local prime_digit_count_temp_temp5\
    \ = {}\n    local prime_digit_count_temp_temp6 = {}\n    local prime_digit_count_temp_temp7\
    \ = {}\n    local prime_digit_count_temp_temp8 = {}\n    local prime_digit_count_temp_temp9\
    \ = {}\n    local prime_digit_count_temp_temp10 = {}\n    local prime_digit_count_temp_temp11\
    \ = {}\n    local prime_digit_count_temp_temp12 = {}\n    local prime_digit_count_temp_temp13\
    \ = {}\n    local prime_digit_count_temp_temp14 = {}\n    local prime_digit_count_temp_temp15\
    \ = {}\n    local prime_digit_count_temp_temp16 = {}\n    local prime_digit_count_temp_temp17\
    \ = {}\n    local prime_digit_count_temp_temp18 = {}\n    local prime_digit_count_temp_temp19\
    \ = {}\n    local prime_digit_count_temp_temp20 = {}\n    local prime_digit_count_temp_temp21\
    \ = {}\n    local prime_digit_count_temp_temp22 = {}\n    local prime_digit_count_temp_temp23\
    \ = {}\n    local prime_digit_count_temp_temp24 = {}\n    local prime_digit_count_temp_temp25\
    \ = {}\n    local prime_digit_count_temp_temp26 = {}\n    local prime_digit_count_temp_temp27\
    \ = {}\n    local prime_digit_count_temp_temp28 = {}\n    local prime_digit_count_temp_temp29\
    \ = {}\n    local prime_digit_count_temp_temp30 = {}\n    local prime_digit_count_temp_temp31\
    \ = {}\n    local prime_digit_count_temp_temp32 = {}\n    local prime_digit_count_temp_temp33\
    \ = {}\n    local prime_digit_count_temp_temp34 = {}\n    local prime_digit_count_temp_temp35\
    \ = {}\n    local prime_digit_count_temp_temp36 = {}\n    local prime_digit_count_temp_temp37\
    \ = {}\n    local prime_digit_count_temp_temp38 = {}\n    local prime_digit_count_temp_temp39\
    \ = {}\n    local prime_digit_count_temp_temp40 = {}\n    local prime_digit_count_temp_temp41\
    \ = {}\n    local prime_digit_count_temp_temp42 = {}\n    local prime_digit_count_temp_temp43\
    \ = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp42rn20_r.lua:79: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpes13g2nx.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal hex_count\
    \ = 0\n\tlocal hex_digit\n\tlocal hex_digit_count\n\tlocal hex_digit_index\n\t\
    local hex_digit_index2\n\tlocal hex_digit_index3\n\tlocal hex_digit_index4\n\t\
    local hex_digit_index5\n\tlocal hex_digit_index6\n\tlocal hex_digit_index7\n\t\
    local hex_digit_index8\n\tlocal hex_digit_index9\n\tlocal hex_digit_index10\n\t\
    local hex_digit_index11\n\tlocal hex_digit_index12\n\tlocal hex_digit_index13\n\
    \tlocal hex_digit_index14\n\tlocal hex_digit_index15\n\tlocal hex_digit_index16\n\
    \tlocal hex_digit_index17\n\tlocal hex_digit_index18\n\tlocal hex_digit_index19\n\
    \tlocal hex_digit_index20\n\tlocal hex_digit_index21\n\tlocal hex_digit_index22\n\
    \tlocal hex_digit_index23\n\tlocal hex_digit_index24\n\tlocal hex_digit_index25\n\
    \tlocal hex_digit_index26\n\tlocal hex_digit_index27\n\tlocal hex_digit_index28\n\
    \tlocal hex_digit_index29\n\tlocal hex_digit_index30\n\tlocal hex_digit_index31\n\
    \tlocal hex_digit_index32\n\tlocal hex_digit_index33\n\tlocal hex_digit_index34\n\
    \tlocal hex_digit_index35\n\tlocal hex_digit_index36\n\tlocal hex_digit_index37\n\
    \tlocal hex_digit_index38\n\tlocal hex_digit_index39\n\tlocal hex_digit_index40\n\
    \tlocal hex_digit_index41\n\tlocal hex_digit_index42\n\tlocal hex_digit_index43\n\
    \tlocal hex_digit_index44\n\tlocal hex_digit_index45\n\tlocal hex_digit_index46\n\
    \tlocal hex_digit_index47\n\tlocal hex_digit_index48\n\tlocal hex_digit_index49\n\
    \tlocal hex_digit_index50\n\tlocal hex_digit_index51\n\tlocal hex_digit_index52\n\
    \tlocal hex_digit_index53\n\tlocal hex_digit_index54\n\tlocal hex_digit_index55\n\
    \tlocal hex_digit_index56\n\tlocal hex_digit_index57\n\tlocal hex_digit_index58\n\
    \tlocal hex_digit_index59\n\tlocal hex_digit_index60\n\tlocal hex_digit_index61\n\
    \tlocal hex_digit_index62\n\tlocal hex_digit_index63\n\tlocal hex_digit_index64\n\
    \tlocal hex_digit_index65\n\tlocal hex_digit_index66\n\tlocal hex_digit_index67\n\
    \tlocal hex_digit_index68\n\tlocal hex_digit_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaowety7r.lua:105: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local primes_count = 0\n    local primes_count_2 =\
    \ 0\n    local primes_count_3 = 0\n    local primes_count_4 = 0\n    local primes_count_5\
    \ = 0\n    local primes_count_6 = 0\n    local primes_count_7 = 0\n    local primes_count_8\
    \ = 0\n    local primes_count_9 = 0\n    local primes_count_10 = 0\n    local\
    \ primes_count_11 = 0\n    local primes_count_12 = 0\n    local primes_count_13\
    \ = 0\n    local primes_count_14 = 0\n    local primes_count_15 = 0\n    local\
    \ primes_count_16 = 0\n    local primes_count_17 = 0\n    local primes_count_18\
    \ = 0\n    local primes_count_19 = 0\n    local primes_count_20 = 0\n    local\
    \ primes_count_21 = 0\n    local primes_count_22 = 0\n    local primes_count_23\
    \ = 0\n    local primes_count_24 = 0\n    local primes_count_25 = 0\n    local\
    \ primes_count_26 = 0\n    local primes_count_27 = 0\n    local primes_count_28\
    \ = 0\n    local primes_count_29 = 0\n    local primes_count_30 = 0\n    local\
    \ primes_count_31 = 0\n    local primes_count_32 = 0\n    local primes_count_33\
    \ = 0\n    local primes_count_34 = 0\n    local primes_count_35 = 0\n    local\
    \ primes_count_36 = 0\n    local primes_count_37 = 0\n    local primes_count_38\
    \ = 0\n    local primes_count_39 = 0\n    local primes_count_40 = 0\n    local\
    \ primes_count_41 = 0\n    local primes_count_42 = 0\n    local primes_count_43\
    \ = 0\n    local primes_count_44 = 0\n    local primes_count_45 = 0\n    local\
    \ primes_count_46 = 0\n    local primes_count_47 = 0\n    local primes_count_48\
    \ = 0\n    local primes_count_49 = 0\n    local primes_count_50 = 0\n    local\
    \ primes_count_51 = 0\n    local primes_count_52 = 0\n    local primes_count_53\
    \ = 0\n    local primes_count_54 = 0\n    local primes_count_55 = 0\n    local\
    \ primes_count_56 = 0\n    local primes_count_57 = 0\n    local primes_count_58\
    \ = 0\n    local primes_count_59 = 0\n    local primes_count_60 = 0\n    local\
    \ primes_count_61 = 0\n    local primes_count_62 = 0\n    local primes_count_63\
    \ = 0\n    local primes_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_wks9aa9.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.gsub(tostring(num), \"^0x\", \"\")\n\tlocal num_str =\
    \ string.gsub(num_str, \"0x\", \"\")\n\tlocal num_str = string.gsub(num_str, \"\
    0\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F]\", \"\")\n\tlocal\
    \ num_str = string.gsub(num_str, \"[a-fA-F0-9]\", \"\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"[a-fA-F0-9]{2}\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{3}\"\
    , \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{4}\", \"\")\n\t\
    local num_str = string.gsub(num_str, \"[a-fA-F0-9]{5}\", \"\")\n\tlocal num_str\
    \ = string.gsub(num_str, \"[a-fA-F0-9]{6}\", \"\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"[a-fA-F0-9]{7}\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{8}\"\
    , \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{9}\", \"\")\n\t\
    local num_str = string.gsub(num_str, \"[a-fA-F0-9]{10}\", \"\")\n\tlocal num_str\
    \ = string.gsub(num_str, \"[a-fA-F0-9]{11}\", \"\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"[a-fA-F0-9]{12}\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{13}\"\
    , \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{14}\", \"\")\n\t\
    local num_str = string.gsub(num_str, \"[a-fA-F0-9]{15}\", \"\")\n\tlocal num_str\
    \ = string.gsub(num_str, \"[a-fA-F0-9]{16}\", \"\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"[a-fA-F0-9]{17}\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{18}\"\
    , \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{19}\", \"\")\n\t\
    local num_str = string.gsub(num_str, \"[a-fA-F0-9]{20}\", \"\")\n\tlocal num_str\
    \ = string.gsub(num_str, \"[a-fA-F0-9]{21}\", \"\")\n\tlocal num_str = string.gsub(num_str,\
    \ \"[a-fA-F0-9]{22}\", \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{23}\"\
    , \"\")\n\tlocal num_str = string.gsub(num_str, \"[a-fA-F0-9]{24}\", \"\")\n\t\
    local num_str = string.gsub(num_str, \"[a-fA-F0-9]{25}\", \"\")\n\tlocal num_str\
    \ = string.gsub(num_str, \"[\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphop5m0im.lua:47: unfinished string near '\"['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local primes_count_max = 2\n\
    \  local primes_count_min = 2\n  local primes_count_step = 2\n  local primes_count_max\
    \ = math.floor(math.sqrt(primes_count_max))\n  local primes_count_min = math.floor(math.sqrt(primes_count_min))\n\
    \  local primes_count_step = math.floor(math.sqrt(primes_count_step))\n  local\
    \ primes_count_max = primes_count_max - primes_count_min\n  local primes_count_min\
    \ = primes_count_min - primes_count_step\n  local primes_count_step = primes_count_step\
    \ - primes_count_min\n  local primes_count_max = primes_count_max + 1\n  local\
    \ primes_count_min = primes_count_min + 1\n  local primes_count_step = primes_count_step\
    \ + 1\n  local primes_count_max = primes_count_max + 1\n  local primes_count_min\
    \ = primes_count_min + 1\n  local primes_count_step = primes_count_step + 1\n\
    \  local primes_count_max = primes_count_max + 1\n  local primes_count_min = primes_count_min\
    \ + 1\n  local primes_count_step = primes_count_step + 1\n  local primes_count_max\
    \ = primes_count_max + 1\n  local primes_count_min = primes_count_min + 1\n  local\
    \ primes_count_step = primes_count_step + 1\n  local primes_count_max = primes_count_max\
    \ + 1\n  local primes_count_min = primes_count_min + 1\n  local primes_count_step\
    \ = primes_count_step + 1\n  local primes_count_max = primes_count_max + 1\n \
    \ local primes_count_min = primes_count_min + 1\n  local primes_count_step = primes_count_step\
    \ + 1\n  local primes_count_max = primes_count_max + 1\n  local primes_count_min\
    \ = primes_count_min + 1\n  local primes_count_step = primes_count_step + 1\n\
    \  local primes_count_max = primes_count_max + 1\n  local primes_count_min = primes_count_min\
    \ + 1\n  local primes_count_step = primes_count_step + 1\n  local primes_count_max\
    \ = primes_count_max + 1\n  local primes_count_min = primes_count_min + 1\n  local\
    \ primes_count_step = primes_count_step + 1\n  local primes_count_max = primes_count_max\
    \ + 1\n  local primes_count_min = primes_count_min + 1\n  local primes_count_step\
    \ = primes_count_step + 1\n  local primes_count_max = primes_count_max + 1\n \
    \ local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa3jokedf.lua:73: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zmdcn1k.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tfor i = 1, #num do\n\t\tlocal c = string.byte(num, i)\n\t\t\
    if c > 47 and c < 58 then\n\t\t\thex[#hex + 1] = c\n\t\tend\n\tend\n\treturn hex\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv5hflpg.lua:31:\
    \ expected: 1, actual: {}\nstack traceback:\n\t/tmp/tmpjv5hflpg.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {}\n    local prime_count = 0\n    local prime_digits = {}\n\
    \    local prime_digit_count = 0\n    local prime_digit_sum = 0\n    local prime_digit_sum2\
    \ = 0\n    local prime_digit_sum3 = 0\n    local prime_digit_sum4 = 0\n    local\
    \ prime_digit_sum5 = 0\n    local prime_digit_sum6 = 0\n    local prime_digit_sum7\
    \ = 0\n    local prime_digit_sum8 = 0\n    local prime_digit_sum9 = 0\n    local\
    \ prime_digit_sum10 = 0\n    local prime_digit_sum11 = 0\n    local prime_digit_sum12\
    \ = 0\n    local prime_digit_sum13 = 0\n    local prime_digit_sum14 = 0\n    local\
    \ prime_digit_sum15 = 0\n    local prime_digit_sum16 = 0\n    local prime_digit_sum17\
    \ = 0\n    local prime_digit_sum18 = 0\n    local prime_digit_sum19 = 0\n    local\
    \ prime_digit_sum20 = 0\n    local prime_digit_sum21 = 0\n    local prime_digit_sum22\
    \ = 0\n    local prime_digit_sum23 = 0\n    local prime_digit_sum24 = 0\n    local\
    \ prime_digit_sum25 = 0\n    local prime_digit_sum26 = 0\n    local prime_digit_sum27\
    \ = 0\n    local prime_digit_sum28 = 0\n    local prime_digit_sum29 = 0\n    local\
    \ prime_digit_sum30 = 0\n    local prime_digit_sum31 = 0\n    local prime_digit_sum32\
    \ = 0\n    local prime_digit_sum33 = 0\n    local prime_digit_sum34 = 0\n    local\
    \ prime_digit_sum35 = 0\n    local prime_digit_sum36 = 0\n    local prime_digit_sum37\
    \ = 0\n    local prime_digit_sum38 = 0\n    local prime_digit_sum39 = 0\n    local\
    \ prime_digit_sum40 = 0\n    local prime_digit_sum41 = 0\n    local prime_digit_sum42\
    \ = 0\n    local prime_digit_sum43 = 0\n    local prime_digit_sum44 = 0\n    local\
    \ prime_digit_sum45 = 0\n    local prime_digit_sum46 = 0\n    local prime_digit_sum47\
    \ = 0\n    local prime_digit_sum48 = 0\n    local prime_digit_sum49 = 0\n    local\
    \ prime_digit_sum50 = 0\n    local prime_digit_sum51 = 0\n    local prime_digit_sum52\
    \ = 0\n    local prime_digit_sum53 = 0\n    local prime_digit_sum54 = 0\n    local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprhlgkc95.lua:89: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hexadecimal = {}\n  local primes = {}\n  local primes_count = 0\n  local\
    \ digit\n  for digit in string.gmatch(num, \"%x\") do\n    hexadecimal[digit]\
    \ = true\n  end\n  for digit = 2, 16 do\n    if hexadecimal[digit] then\n    \
    \  primes[digit] = true\n      primes_count = primes_count + 1\n    end\n  end\n\
    \  if primes_count > 1 then\n    return primes_count\n  end\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgxld_bc.lua:40:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphgxld_bc.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {}\n  local primes = {}\n  local primes_count = 0\n  local primes_count_2\
    \ = 0\n  local primes_count_3 = 0\n  local primes_count_4 = 0\n  local primes_count_5\
    \ = 0\n  local primes_count_6 = 0\n  local primes_count_7 = 0\n  local primes_count_8\
    \ = 0\n  local primes_count_9 = 0\n  local primes_count_10 = 0\n  local primes_count_11\
    \ = 0\n  local primes_count_12 = 0\n  local primes_count_13 = 0\n  local primes_count_14\
    \ = 0\n  local primes_count_15 = 0\n  local primes_count_16 = 0\n  local primes_count_17\
    \ = 0\n  local primes_count_18 = 0\n  local primes_count_19 = 0\n  local primes_count_20\
    \ = 0\n  local primes_count_21 = 0\n  local primes_count_22 = 0\n  local primes_count_23\
    \ = 0\n  local primes_count_24 = 0\n  local primes_count_25 = 0\n  local primes_count_26\
    \ = 0\n  local primes_count_27 = 0\n  local primes_count_28 = 0\n  local primes_count_29\
    \ = 0\n  local primes_count_30 = 0\n  local primes_count_31 = 0\n  local primes_count_32\
    \ = 0\n  local primes_count_33 = 0\n  local primes_count_34 = 0\n  local primes_count_35\
    \ = 0\n  local primes_count_36 = 0\n  local primes_count_37 = 0\n  local primes_count_38\
    \ = 0\n  local primes_count_39 = 0\n  local primes_count_40 = 0\n  local primes_count_41\
    \ = 0\n  local primes_count_42 = 0\n  local primes_count_43 = 0\n  local primes_count_44\
    \ = 0\n  local primes_count_45 = 0\n  local primes_count_46 = 0\n  local primes_count_47\
    \ = 0\n  local primes_count_48 = 0\n  local primes_count_49 = 0\n  local primes_count_50\
    \ = 0\n  local primes_count_51 = 0\n  local primes_count_52 = 0\n  local primes_count_53\
    \ = 0\n  local primes_count_54 = 0\n  local primes_count_55 = 0\n  local primes_count_56\
    \ = 0\n  local primes_count_57 = 0\n  local primes_count_58 = 0\n  local primes_count_59\
    \ = 0\n  local primes_count_60 = 0\n  local primes_count_61 = 0\n  local primes_count_62\
    \ = 0\n  local primes_count_63 = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqritmnyr.lua:96: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local num_str = tonumber(num)\n  local num_len = #num\n  local prime_digits\
    \ = {}\n  local prime_digits_len = #prime_digits\n  local prime_digits_count =\
    \ #prime_digits\n  local prime_digits_count_max = #prime_digits - 1\n  local prime_digits_count_min\
    \ = prime_digits_count - 1\n  local prime_digits_count_max = prime_digits_count_max\
    \ - prime_digits_count_min\n  local prime_digits_count_min = prime_digits_count_min\
    \ + 1\n  local prime_digits_count_max = prime_digits_count_max + 1\n  local prime_digits_count_min\
    \ = prime_digits_count_min + 1\n  local prime_digits_count_max = prime_digits_count_max\
    \ + 1\n  local prime_digits_count_min = prime_digits_count_min + 1\n  local prime_digits_count_max\
    \ = prime_digits_count_max + 1\n  local prime_digits_count_min = prime_digits_count_min\
    \ + 1\n  local prime_digits_count_max = prime_digits_count_max + 1\n  local prime_digits_count_min\
    \ = prime_digits_count_min + 1\n  local prime_digits_count_max = prime_digits_count_max\
    \ + 1\n  local prime_digits_count_min = prime_digits_count_min + 1\n  local prime_digits_count_max\
    \ = prime_digits_count_max + 1\n  local prime_digits_count_min = prime_digits_count_min\
    \ + 1\n  local prime_digits_count_max = prime_digits_count_max + 1\n  local prime_digits_count_min\
    \ = prime_digits_count_min + 1\n  local prime_digits_count_max = prime_digits_count_max\
    \ + 1\n  local prime_digits_count_min = prime_digits_count_min + 1\n  local prime_digits_count_max\
    \ = prime_digits_count_max + 1\n  local prime_digits_count_min = prime_digits_count_min\
    \ + 1\n  local prime_digits_count_max = prime_digits_count_max + 1\n  local prime_digits_count_min\
    \ = prime_digits_count_min + 1\n  local prime_digits_count_max = prime_digits_count_max\
    \ + 1\n  local prime_digits_count_min = prime_digits_count_min + 1\n  local prime_digits_count_max\
    \ = prime_digits_count_max + 1\n  local prime_digits_count_min = prime_digits_count_min\
    \ + 1\n  local prime\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj1xiw4pl.lua:64: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local num_str = string.gsub(num, \":\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \"-\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n  local num_str = string.gsub(num_str, \"-\", \"\")\n  local num_str\
    \ = string.gsub(num_str, \".\", \"\")\n  local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n  local num_str = string.gsub(num_str, \".\", \"\")\n  local num_str\
    \ = string.gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2qnwims5.lua:70: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_2 = 0\n\t\
    local primes_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal primes_count_5 =\
    \ 0\n\tlocal primes_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal primes_count_8\
    \ = 0\n\tlocal primes_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal primes_count_11\
    \ = 0\n\tlocal primes_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal primes_count_14\
    \ = 0\n\tlocal primes_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal primes_count_17\
    \ = 0\n\tlocal primes_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal primes_count_20\
    \ = 0\n\tlocal primes_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal primes_count_23\
    \ = 0\n\tlocal primes_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal primes_count_26\
    \ = 0\n\tlocal primes_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal primes_count_29\
    \ = 0\n\tlocal primes_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal primes_count_32\
    \ = 0\n\tlocal primes_count_33 = 0\n\tlocal primes_count_34 = 0\n\tlocal primes_count_35\
    \ = 0\n\tlocal primes_count_36 = 0\n\tlocal primes_count_37 = 0\n\tlocal primes_count_38\
    \ = 0\n\tlocal primes_count_39 = 0\n\tlocal primes_count_40 = 0\n\tlocal primes_count_41\
    \ = 0\n\tlocal primes_count_42 = 0\n\tlocal primes_count_43 = 0\n\tlocal primes_count_44\
    \ = 0\n\tlocal primes_count_45 = 0\n\tlocal primes_count_46 = 0\n\tlocal primes_count_47\
    \ = 0\n\tlocal primes_count_48 = 0\n\tlocal primes_count_49 = 0\n\tlocal primes_count_50\
    \ = 0\n\tlocal primes_count_51 = 0\n\tlocal primes_count_52 = 0\n\tlocal primes_count_53\
    \ = 0\n\tlocal primes_count_54 = 0\n\tlocal primes_count_55 = 0\n\tlocal primes_count_56\
    \ = 0\n\tlocal primes_count_57 = 0\n\tlocal primes_count_58 = 0\n\tlocal primes_count_59\
    \ = 0\n\tlocal primes_count_60 = 0\n\tlocal primes_count_61 = 0\n\tlocal primes_count_62\
    \ = 0\n\tlocal primes_count_63 = 0\n\tlocal primes_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9tgixmrz.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = string.len(num_str)\n\t\
    local num_digits = string.len(num_str)\n\tlocal num_primes = 0\n\tlocal num_primes_count\
    \ = 0\n\tlocal num_primes_sum = 0\n\tlocal num_primes_sum2 = 0\n\tlocal num_primes_sum3\
    \ = 0\n\tlocal num_primes_sum4 = 0\n\tlocal num_primes_sum5 = 0\n\tlocal num_primes_sum6\
    \ = 0\n\tlocal num_primes_sum7 = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum9\
    \ = 0\n\tlocal num_primes_sum10 = 0\n\tlocal num_primes_sum11 = 0\n\tlocal num_primes_sum12\
    \ = 0\n\tlocal num_primes_sum13 = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum15\
    \ = 0\n\tlocal num_primes_sum16 = 0\n\tlocal num_primes_sum17 = 0\n\tlocal num_primes_sum18\
    \ = 0\n\tlocal num_primes_sum19 = 0\n\tlocal num_primes_sum20 = 0\n\tlocal num_primes_sum21\
    \ = 0\n\tlocal num_primes_sum22 = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum24\
    \ = 0\n\tlocal num_primes_sum25 = 0\n\tlocal num_primes_sum26 = 0\n\tlocal num_primes_sum27\
    \ = 0\n\tlocal num_primes_sum28 = 0\n\tlocal num_primes_sum29 = 0\n\tlocal num_primes_sum30\
    \ = 0\n\tlocal num_primes_sum31 = 0\n\tlocal num_primes_sum32 = 0\n\tlocal num_primes_sum33\
    \ = 0\n\tlocal num_primes_sum34 = 0\n\tlocal num_primes_sum35 = 0\n\tlocal num_primes_sum36\
    \ = 0\n\tlocal num_primes_sum37 = 0\n\tlocal num_primes_sum38 = 0\n\tlocal num_primes_sum39\
    \ = 0\n\tlocal num_primes_sum40 = 0\n\tlocal num_primes_sum41 = 0\n\tlocal num_primes_sum42\
    \ = 0\n\tlocal num_primes_sum43 = 0\n\tlocal num_primes_sum44 = 0\n\tlocal num_primes_sum45\
    \ = 0\n\tlocal num_primes_sum46 = 0\n\tlocal num_primes_sum47 = 0\n\tlocal num_primes_sum48\
    \ = 0\n\tlocal num_primes_sum49 = 0\n\tlocal num_primes_sum50 = 0\n\tlocal num_primes_sum51\
    \ = 0\n\tlocal num_primes_sum52 = 0\n\tlocal num_primes_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbu438l_m.lua:88: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local num_str = string.lower(num)\n  local num_len = #num_str\n  local num_hex\
    \ = #num_str\n  local num_digits = #num_str\n  local num_primes = 0\n  local num_primes_hex\
    \ = 0\n  local num_primes_digits = 0\n  local num_primes_hex_len = 0\n  local\
    \ num_primes_digits_len = 0\n  local num_primes_hex_len_len = 0\n  local num_primes_digits_len_len\
    \ = 0\n  local num_primes_hex_len_len_len = 0\n  local num_primes_digits_len_len\
    \ = 0\n  local num_primes_hex_len_len_len = 0\n  local num_primes_digits_len_len\
    \ = 0\n  local num_primes_hex_len_len = 0\n  local num_primes_digits_len_len =\
    \ 0\n  local num_primes_hex_len = 0\n  local num_primes_digits_len = 0\n  local\
    \ num_primes_hex = 0\n  local num_primes_digits = 0\n  local num_primes_hex_len\
    \ = 0\n  local num_primes_digits_len = 0\n  local num_primes_hex_len_len = 0\n\
    \  local num_primes_digits_len_len = 0\n  local num_primes_hex_len = 0\n  local\
    \ num_primes_digits_len = 0\n  local num_primes_hex = 0\n  local num_primes_digits\
    \ = 0\n  local num_primes_hex_len = 0\n  local num_primes_digits_len = 0\n  local\
    \ num_primes_hex_len_len = 0\n  local num_primes_digits_len_len = 0\n  local num_primes_hex_len\
    \ = 0\n  local num_primes_digits_len = 0\n  local num_primes_hex = 0\n  local\
    \ num_primes_digits = 0\n  local num_primes_hex_len = 0\n  local num_primes_digits_len\
    \ = 0\n  local num_primes_hex_len_len = 0\n  local num_primes_digits_len = 0\n\
    \  local num_primes_hex = 0\n  local num_primes_digits = 0\n  local num_primes_hex_len\
    \ = 0\n  local num_primes_digits_len = 0\n  local num_primes_hex_len = 0\n  local\
    \ num_primes_digits_len = 0\n  local num_primes_hex = 0\n  local num_primes_digits\
    \ = 0\n  local num_primes_hex_len = 0\n  local num_primes_digits_len = 0\n  local\
    \ num_primes_hex_len = 0\n  local num_primes_digits_len = 0\n  local num_primes_hex\
    \ = 0\n  local num_primes_digits = 0\n  local num_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyuobak01.lua:86: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal digit_count = 1\n\tlocal\
    \ digit\n\tlocal hexadecimal\n\tlocal hexadecimal_digit\n\tlocal hexadecimal_digit_count\n\
    \tlocal hexadecimal_digit_prime\n\tlocal hexadecimal_digit_prime_count\n\tlocal\
    \ hexadecimal_digit_prime_prime\n\tlocal hexadecimal_digit_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime\n\tlocal hexadecimal_digit_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime\n\tlocal hexadecimal_digit_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime\n\tlocal hexadecimal_digit_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime\n\tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime\n\tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime\n\t\
    local hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime\n\t\
    local hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    \tlocal hexadecimal_digit_prime_prime_prime_prime_prime_prime_prime_prime_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpng50sl8t.lua:62: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_digits = {}\n  local prime_digit_count = {}\n\
    \  local prime_digit_count_max = {}\n  local prime_digit_count_max_index = {}\n\
    \  local prime_digit_count_max_index2 = {}\n  local prime_digit_count_max_index3\
    \ = {}\n  local prime_digit_count_max_index4 = {}\n  local prime_digit_count_max_index5\
    \ = {}\n  local prime_digit_count_max_index6 = {}\n  local prime_digit_count_max_index7\
    \ = {}\n  local prime_digit_count_max_index8 = {}\n  local prime_digit_count_max_index9\
    \ = {}\n  local prime_digit_count_max_index10 = {}\n  local prime_digit_count_max_index11\
    \ = {}\n  local prime_digit_count_max_index12 = {}\n  local prime_digit_count_max_index13\
    \ = {}\n  local prime_digit_count_max_index14 = {}\n  local prime_digit_count_max_index15\
    \ = {}\n  local prime_digit_count_max_index16 = {}\n  local prime_digit_count_max_index17\
    \ = {}\n  local prime_digit_count_max_index18 = {}\n  local prime_digit_count_max_index19\
    \ = {}\n  local prime_digit_count_max_index20 = {}\n  local prime_digit_count_max_index21\
    \ = {}\n  local prime_digit_count_max_index22 = {}\n  local prime_digit_count_max_index23\
    \ = {}\n  local prime_digit_count_max_index24 = {}\n  local prime_digit_count_max_index25\
    \ = {}\n  local prime_digit_count_max_index26 = {}\n  local prime_digit_count_max_index27\
    \ = {}\n  local prime_digit_count_max_index28 = {}\n  local prime_digit_count_max_index29\
    \ = {}\n  local prime_digit_count_max_index30 = {}\n  local prime_digit_count_max_index31\
    \ = {}\n  local prime_digit_count_max_index32 = {}\n  local prime_digit_count_max_index33\
    \ = {}\n  local prime_digit_count_max_index34 = {}\n  local prime_digit_count_max_index35\
    \ = {}\n  local prime_digit_count_max_index36 = {}\n  local prime_digit_count_max_index37\
    \ = {}\n  local prime_digit_count_max_index38 = {}\n  local prime_digit_count_max_index39\
    \ = {}\n  local prime_digit_count_max_index40 = {}\n  local prime_digit_count_max_index41\
    \ = {}\n  local prime_digit_count_max_index42 = {}\n  local prime_digit_count_max_index43\
    \ = {}\n  local prime_digit_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3qzb8t4h.lua:78: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal function is_prime(n)\n\t\tlocal function is_factor(num)\n\t\t\tif num\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor i = 2, num do\n\t\t\t\t\
    if n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn\
    \ true\n\t\tend\n\t\tlocal function is_prime_pair(num)\n\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\tlocal function\
    \ is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\
    \t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\
    local function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function\
    \ is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function\
    \ is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    local function is_prime_pair(num)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal function is_prime_pair(num)\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd3u1nvod.lua:82: 'end' expected (to close 'function' at line\
    \ 68) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_sum = 0\n\tlocal\
    \ primes_sum2 = 0\n\tlocal primes_sum3 = 0\n\tlocal primes_sum4 = 0\n\tlocal primes_sum5\
    \ = 0\n\tlocal primes_sum6 = 0\n\tlocal primes_sum7 = 0\n\tlocal primes_sum8 =\
    \ 0\n\tlocal primes_sum9 = 0\n\tlocal primes_sum10 = 0\n\tlocal primes_sum11 =\
    \ 0\n\tlocal primes_sum12 = 0\n\tlocal primes_sum13 = 0\n\tlocal primes_sum14\
    \ = 0\n\tlocal primes_sum15 = 0\n\tlocal primes_sum16 = 0\n\tlocal primes_sum17\
    \ = 0\n\tlocal primes_sum18 = 0\n\tlocal primes_sum19 = 0\n\tlocal primes_sum20\
    \ = 0\n\tlocal primes_sum21 = 0\n\tlocal primes_sum22 = 0\n\tlocal primes_sum23\
    \ = 0\n\tlocal primes_sum24 = 0\n\tlocal primes_sum25 = 0\n\tlocal primes_sum26\
    \ = 0\n\tlocal primes_sum27 = 0\n\tlocal primes_sum28 = 0\n\tlocal primes_sum29\
    \ = 0\n\tlocal primes_sum30 = 0\n\tlocal primes_sum31 = 0\n\tlocal primes_sum32\
    \ = 0\n\tlocal primes_sum33 = 0\n\tlocal primes_sum34 = 0\n\tlocal primes_sum35\
    \ = 0\n\tlocal primes_sum36 = 0\n\tlocal primes_sum37 = 0\n\tlocal primes_sum38\
    \ = 0\n\tlocal primes_sum39 = 0\n\tlocal primes_sum40 = 0\n\tlocal primes_sum41\
    \ = 0\n\tlocal primes_sum42 = 0\n\tlocal primes_sum43 = 0\n\tlocal primes_sum44\
    \ = 0\n\tlocal primes_sum45 = 0\n\tlocal primes_sum46 = 0\n\tlocal primes_sum47\
    \ = 0\n\tlocal primes_sum48 = 0\n\tlocal primes_sum49 = 0\n\tlocal primes_sum50\
    \ = 0\n\tlocal primes_sum51 = 0\n\tlocal primes_sum52 = 0\n\tlocal primes_sum53\
    \ = 0\n\tlocal primes_sum54 = 0\n\tlocal primes_sum55 = 0\n\tlocal primes_sum56\
    \ = 0\n\tlocal primes_sum57 = 0\n\tlocal primes_sum58 = 0\n\tlocal primes_sum59\
    \ = 0\n\tlocal primes_sum60 = 0\n\tlocal primes_sum61 = 0\n\tlocal primes_sum62\
    \ = 0\n\tlocal primes_sum63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzj_18tu6.lua:95: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local prime_digits = {}\n  local prime_digits_count =\
    \ 0\n  local prime_digit_count = 0\n  local prime_digit_count_max = 0\n  local\
    \ prime_digit_count_min = 0\n  local prime_digit_count_sum = 0\n  local prime_digit_count_sum2\
    \ = 0\n  local prime_digit_count_sum3 = 0\n  local prime_digit_count_sum4 = 0\n\
    \  local prime_digit_count_sum5 = 0\n  local prime_digit_count_sum6 = 0\n  local\
    \ prime_digit_count_sum7 = 0\n  local prime_digit_count_sum8 = 0\n  local prime_digit_count_sum9\
    \ = 0\n  local prime_digit_count_sum10 = 0\n  local prime_digit_count_sum11 =\
    \ 0\n  local prime_digit_count_sum12 = 0\n  local prime_digit_count_sum13 = 0\n\
    \  local prime_digit_count_sum14 = 0\n  local prime_digit_count_sum15 = 0\n  local\
    \ prime_digit_count_sum16 = 0\n  local prime_digit_count_sum17 = 0\n  local prime_digit_count_sum18\
    \ = 0\n  local prime_digit_count_sum19 = 0\n  local prime_digit_count_sum20 =\
    \ 0\n  local prime_digit_count_sum21 = 0\n  local prime_digit_count_sum22 = 0\n\
    \  local prime_digit_count_sum23 = 0\n  local prime_digit_count_sum24 = 0\n  local\
    \ prime_digit_count_sum25 = 0\n  local prime_digit_count_sum26 = 0\n  local prime_digit_count_sum27\
    \ = 0\n  local prime_digit_count_sum28 = 0\n  local prime_digit_count_sum29 =\
    \ 0\n  local prime_digit_count_sum30 = 0\n  local prime_digit_count_sum31 = 0\n\
    \  local prime_digit_count_sum32 = 0\n  local prime_digit_count_sum33 = 0\n  local\
    \ prime_digit_count_sum34 = 0\n  local prime_digit_count_sum35 = 0\n  local prime_digit_count_sum36\
    \ = 0\n  local prime_digit_count_sum37 = 0\n  local prime_digit_count_sum38 =\
    \ 0\n  local prime_digit_count_sum39 = 0\n  local prime_digit_count_sum40 = 0\n\
    \  local prime_digit_count_sum41 = 0\n  local prime_digit_count_sum42 = 0\n  local\
    \ prime_digit_count_sum43 = 0\n  local prime_digit_count_sum44 = 0\n  local prime_digit_count_sum45\
    \ = 0\n  local prime_digit_count_sum46 = 0\n  local prime_digit_count_sum47\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwogk56ia.lua:83: 'end' expected (to close 'function' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
