name: HumanEval_42_incr_list
language: lua
results:
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj11qkxw.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpxj11qkxw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvphlf8d7.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpvphlf8d7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdemz_f2.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmptdemz_f2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7c4oojy2.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp7c4oojy2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssp75v8k.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpssp75v8k.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbydm0fg.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmpnbydm0fg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    table.insert(l, l[n])\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqftxqat.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 2, 1, 2}\nstack traceback:\n\t/tmp/tmpfqftxqat.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    if type(v) == \"number\" then\n      n =\
    \ v + 1\n      l[i] = n\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kpzgye0.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp_kpzgye0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    table.insert(l, n + l[i])\n    n = n + 1\n  end\n  return l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w7lwh9i.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp7w7lwh9i.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vorg_vf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmp2vorg_vf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ l2 = {}\n  for _, v in ipairs(l) do\n    l2[i] = v\n    i = i + 1\n  end\n \
    \ return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f1knvz4.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp8f1knvz4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7619omvx.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp7619omvx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    l[i] = l[i] + n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5oia9lh1.lua:19:\
    \ expected: {4, 3, 2}\nactual: {5, 2, 2}\nstack traceback:\n\t/tmp/tmp5oia9lh1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6j_ao4y.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmps6j_ao4y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyj0ohdw.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmptyj0ohdw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    if v ~= nil then\n      n = n + 1\n    \
    \  l[i] = v + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea8y3k1x.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpea8y3k1x.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  local t = {}\n  for i = 1, #l do\n    t[i] = l[i]\n    n = n * l[i]\n\
    \  end\n  while i <= #l do\n    t[i] = n\n    i = i + 1\n    n = n * i\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqec3yu8.lua:26:\
    \ expected: {4, 3, 2}\nactual: {6, 12, 36}\nstack traceback:\n\t/tmp/tmpjqec3yu8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    out[#out + 1] = v\n    i = i + 1\n\
    \  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hlbntx3.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp1hlbntx3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6pvyed4.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpj6pvyed4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wveqgts.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp4wveqgts.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxvzr_zd.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmpfxvzr_zd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp339vq8s7.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp339vq8s7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbes1mi4.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpcbes1mi4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2kl5ywx.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpy2kl5ywx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwwpegeg.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmppwwpegeg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydquhrp9.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpydquhrp9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidxoq7fj.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpidxoq7fj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    local elem = l[i]\n    if elem\
    \ == nil then\n      n = n + 1\n      l[i] = n\n    else\n      n = elem + 1\n\
    \      l[i] = n\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjv2vt8e.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpkjv2vt8e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local e = l[i]\n    if type(e) == \"number\" then\n      n =\
    \ n + 1\n      l[i] = e\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99ojfdd3.lua:22:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp99ojfdd3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    table.insert(l, n + l[i])\n    n = n + 1\n  end\n  return l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepb6vc7f.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpepb6vc7f.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  local t = {}\n  for i = 1, #l do\n    t[i] = l[i]\n    n = n * t[i]\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0dc32vc.lua:21:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpd0dc32vc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[#ret + 1] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33k4jr2r.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp33k4jr2r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxowuaey.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpuxowuaey.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34ac95gi.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp34ac95gi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp288lm7te.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp288lm7te.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ t = {}\n  for i = 1, #l do\n    t[i] = l[i] + n\n    n = t[i]\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq83j546g.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 6, 7}\nstack traceback:\n\t/tmp/tmpq83j546g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuifseu4.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpyuifseu4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmq0h4wm.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpkmq0h4wm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb2p5bdb.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmppb2p5bdb.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo6cxoim.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmpyo6cxoim.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibf834aa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpibf834aa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    table.insert(l, n + l[i])\n    n = n + 1\n  end\n  return l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkg1rxzx.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpbkg1rxzx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr0oplsg.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmphr0oplsg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = #l\n  while i ~= 0 do\n    i = i - 1\n    n = n + 1\n    l[i] = l[i] + n\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_8gbtbo.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0_8gbtbo.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96e0ou3d.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp96e0ou3d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00dyq6xo.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp00dyq6xo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmj6773o.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmppmj6773o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    table.insert(l, n + l[i])\n    i = i + 1\n  \
    \  n = n + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5jm9p8_.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpb5jm9p8_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3jmlzz1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpv3jmlzz1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlqz9r5v.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmphlqz9r5v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n + 1\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02xy1i59.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmp02xy1i59.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogjq1dqq.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpogjq1dqq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6fl1wdv.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpc6fl1wdv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local e = l[i]\n    if e ~= nil then\n      n = n + 1\n    \
    \  l[i] = e\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_y7t5fs.lua:22:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp1_y7t5fs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6q4txft.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpn6q4txft.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfz0l7da.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpbfz0l7da.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w0_54fi.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp1w0_54fi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple86h4kd.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmple86h4kd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuelwm4f.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpjuelwm4f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywyuvv66.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpywyuvv66.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    l[i] = l[i] + n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatb66bgq.lua:19:\
    \ expected: {4, 3, 2}\nactual: {5, 2, 2}\nstack traceback:\n\t/tmp/tmpatb66bgq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp_e0ioi.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmplp_e0ioi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnnf9qaz.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpjnnf9qaz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz6ux846.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmppz6ux846.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_bbga7c.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpd_bbga7c.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw6ufnob.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpmw6ufnob.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ybhpmd8.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp7ybhpmd8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m8l2ykt.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp6m8l2ykt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dmukip7.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp6dmukip7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3kq_m1f.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpg3kq_m1f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlxbnuvv.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpmlxbnuvv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyggc1is.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpiyggc1is.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgvwpvzz.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsgvwpvzz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4i9n3m2.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmph4i9n3m2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ result = {}\n  for i = 1, #l do\n    table.insert(result, l[i] + n)\n    n =\
    \ n + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62jj7ggb.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmp62jj7ggb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i97satw.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp0i97satw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl0epq9c.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpxl0epq9c.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    if type(v) == \"number\" then\n      n =\
    \ v + 1\n      l[i] = n\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeznjah7j.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpeznjah7j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n + 1\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ae19ye5.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmp5ae19ye5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjmir0ql.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmptjmir0ql.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp900m2304.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp900m2304.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2j9s__h.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpr2j9s__h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    table.insert(l, l[n])\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h89l_mw.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 2, 1, 2}\nstack traceback:\n\t/tmp/tmp1h89l_mw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    out[i - 1] = v\n    i = i + 1\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35pbxjxb.lua:20:\
    \ expected: {4, 3, 2}\nactual: {0=3, 2, 1}\nstack traceback:\n\t/tmp/tmp35pbxjxb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnopw16xl.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpnopw16xl.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd6q7qq2.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpjd6q7qq2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n - 1\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u_db4h_.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 2, 0}\nstack traceback:\n\t/tmp/tmp_u_db4h_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc3gz0lj.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpxc3gz0lj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n + 1\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5913z57.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpo5913z57.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    table.insert(l, n + l[i])\n    n = n + 1\n  end\n  return l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9y_p9y_u.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp9y_p9y_u.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaky1d93.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpiaky1d93.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxs714yf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmptxs714yf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7lddllz.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpk7lddllz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgsngiky.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpjgsngiky.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi37antww.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi37antww.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdhe_rx2.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpbdhe_rx2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmz4rux5.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpfmz4rux5.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxie07xg.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpkxie07xg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    table.insert(l, l[n])\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn94mox_z.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 2, 1, 2}\nstack traceback:\n\t/tmp/tmpn94mox_z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yphedao.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmp2yphedao.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    l[i] = l[i] + n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ves_16.lua:19:\
    \ expected: {4, 3, 2}\nactual: {5, 2, 2}\nstack traceback:\n\t/tmp/tmp09ves_16.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5kxcvrx.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpy5kxcvrx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    l[i] = l[i] + n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_pjsjpe.lua:19:\
    \ expected: {4, 3, 2}\nactual: {5, 2, 2}\nstack traceback:\n\t/tmp/tmpn_pjsjpe.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9f_r5dc.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpq9f_r5dc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vo5cw5l.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9vo5cw5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxctnjh0x.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpxctnjh0x.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    if v ~= nil then\n      n = v + n\n    \
    \  l[i] = n\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwza2n9jc.lua:22:\
    \ expected: {4, 3, 2}\nactual: {4, 6, 7}\nstack traceback:\n\t/tmp/tmpwza2n9jc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckxkcjy9.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpckxkcjy9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79p647bd.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp79p647bd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposrc6pt2.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmposrc6pt2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb338u93.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsb338u93.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfv0qxaic.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpfv0qxaic.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i = 1, #l do\n    ret[#ret + 1] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n + 1\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbfg77q8.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpzbfg77q8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  local t = {}\n  for i = 1, #l do\n    t[i] = l[i]\n    n = n * l[i]\n\
    \  end\n  while i <= #l do\n    t[i] = n\n    i = i + 1\n    n = n * i\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsc_ub8e.lua:26:\
    \ expected: {4, 3, 2}\nactual: {6, 12, 36}\nstack traceback:\n\t/tmp/tmpcsc_ub8e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecf3_1b9.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpecf3_1b9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueqiwken.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpueqiwken.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    local v = l[i]\n    l[i] = v + n\n    n = n * 2\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzkgxdp9.lua:20:\
    \ expected: {4, 3, 2}\nactual: {4, 4, 5}\nstack traceback:\n\t/tmp/tmpzzkgxdp9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gqagkjk.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp8gqagkjk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wpovfh_.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp1wpovfh_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
