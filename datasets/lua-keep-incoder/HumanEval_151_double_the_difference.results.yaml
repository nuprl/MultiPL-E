name: HumanEval_151_double_the_difference
language: lua
results:
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper43jpvk.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmper43jpvk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ibiga1a.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp3ibiga1a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjn_o7ii2.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpjn_o7ii2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lmogmjs.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp2lmogmjs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyugxv_p.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpbyugxv_p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2rtlefz.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpd2rtlefz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv6id0qd.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmprv6id0qd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbs2gbvx.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpsbs2gbvx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxpptg7w.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpxxpptg7w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe85j8yol.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpe85j8yol.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      sum =\
    \ sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtd364bv.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpvtd364bv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteh04khw.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpteh04khw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5p_zka3.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp_5p_zka3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hkaxu6o.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp6hkaxu6o.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_rh1qj4.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpq_rh1qj4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4me07gus.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp4me07gus.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qrvbvsu.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5qrvbvsu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_1lufke.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpo_1lufke.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3r1ipip.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpq3r1ipip.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o_b5hip.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5o_b5hip.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggs3_1gu.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpggs3_1gu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckn55b8y.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpckn55b8y.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra4fo95e.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpra4fo95e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpam8getpa.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpam8getpa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbso9jz8.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpvbso9jz8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4kpif00.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpk4kpif00.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pz5iw3x.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp4pz5iw3x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaeo18ouo.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpaeo18ouo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgu3gwzy.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpfgu3gwzy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xmd2g5c.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp7xmd2g5c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4godys6.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpz4godys6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzaapc_s.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpfzaapc_s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrss2scv.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpjrss2scv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi49925x4.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpi49925x4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwv891t7.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmppwv891t7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh0vx01w.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpxh0vx01w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iut9ppk.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp3iut9ppk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbyowp35.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmprbyowp35.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpje981w.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpvpje981w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc1h8zt4.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpbc1h8zt4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jlv_1rk.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5jlv_1rk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcfb_8qq.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmprcfb_8qq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_adcq8w.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp4_adcq8w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw_1hxdb.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpsw_1hxdb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjmvfjyx.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpsjmvfjyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tl9_ube.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp_tl9_ube.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] > 0 then\n\t\t\tsum = sum\
    \ + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1lond3y.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpw1lond3y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i30_fkw.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp1i30_fkw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fjekibp.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp7fjekibp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_l162ta.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp8_l162ta.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfq1_u67.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmprfq1_u67.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7_i7zaf.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpz7_i7zaf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc86aung2.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpc86aung2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39uo6ske.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp39uo6ske.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxaq_nxu.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpnxaq_nxu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgluj5ab.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmplgluj5ab.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfskd4cg1.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpfskd4cg1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wu08882.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp0wu08882.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8ynbr35.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpj8ynbr35.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizc9z6lu.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpizc9z6lu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rddsk1s.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp3rddsk1s.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeykw44u.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpqeykw44u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxbum9kk.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpzxbum9kk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf3qr_6u.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpdf3qr_6u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxabjvlw_.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpxabjvlw_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rw968eo.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp5rw968eo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_taw9xl1.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp_taw9xl1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z_0lu_p.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2z_0lu_p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypruhu4c.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpypruhu4c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd8mhsxk.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmptd8mhsxk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdf1ydur.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpfdf1ydur.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kgrzpk4.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp4kgrzpk4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgukduwxe.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpgukduwxe.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfxq_5y3.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpbfxq_5y3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e433c3t.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp9e433c3t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4_zjtro.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpz4_zjtro.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoahmzj7.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpwoahmzj7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs4smem9.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpqs4smem9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9665mdeq.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp9665mdeq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpz5jdtr.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpfpz5jdtr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mi16kdx.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5mi16kdx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi4g1fdz.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpwi4g1fdz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9fdlr4m.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpu9fdlr4m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_kzrjoo.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpk_kzrjoo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tlocal i = 1\n\twhile i < #lst do\n\t\tif lst[i] % 2 == 1 then\n\
    \t\t\tsum = sum + lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparh3v7a7.lua:24:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmparh3v7a7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6s3_d21.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp_6s3_d21.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jj1vlzc.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp6jj1vlzc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yyidw5q.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp7yyidw5q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3cy8qst.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpi3cy8qst.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4bohpcm.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpd4bohpcm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqlt3v0a.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpaqlt3v0a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] > 0 then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmnr2_en.lua:23:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmprmnr2_en.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q5654uo.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp6q5654uo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrspnnta.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpmrspnnta.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      sum =\
    \ sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimz_ynrh.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpimz_ynrh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kqkh92t.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp7kqkh92t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0cox3l_.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpa0cox3l_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa39d770i.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa39d770i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsepcu8r.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppsepcu8r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0tdaoy8.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpm0tdaoy8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw6yydko.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmprw6yydko.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxutojxxf.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpxutojxxf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ymfat7e.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp6ymfat7e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp889p22dc.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp889p22dc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52sy044p.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp52sy044p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoixxakpb.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpoixxakpb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3p0z07j.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpl3p0z07j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf66ssk0d.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpf66ssk0d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr314_4zx.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpr314_4zx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6ls_4tt.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpa6ls_4tt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6cnbj43.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpy6cnbj43.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit_3mgu1.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpit_3mgu1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyglmbpxf.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpyglmbpxf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96rx6bs5.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp96rx6bs5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ve5ku7r.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp0ve5ku7r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_0o9vtm.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpq_0o9vtm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8k3_2rq.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpw8k3_2rq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d3k6cuf.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp8d3k6cuf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmrzngmm.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpxmrzngmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptin9ko_g.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmptin9ko_g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyc1eh8i.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmptyc1eh8i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf162j9wv.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpf162j9wv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfigzlw8h.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpfigzlw8h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcamrxhnv.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpcamrxhnv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85gmmc_.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpc85gmmc_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_mzr6jm.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpb_mzr6jm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsz6n44f.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpjsz6n44f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x3jxvhg.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp8x3jxvhg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6xgoupr.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpk6xgoupr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tlocal i = 1\n\twhile i <= #lst do\n\t\tif lst[i] > 0 then\n\
    \t\t\tsum = sum + lst[i] * lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rs9rdmc.lua:24:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp0rs9rdmc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3w48g59.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmph3w48g59.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xtksli7.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp8xtksli7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsd_hbxz.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmptsd_hbxz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kill0tx.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp1kill0tx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4abgy43z.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp4abgy43z.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvc4akx2.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpcvc4akx2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tj1amqp.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp4tj1amqp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwxvv_v7.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpiwxvv_v7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9n7u0hu.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpa9n7u0hu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyle13vmy.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpyle13vmy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v ~= nil and v ~= 0 then\n\
    \t\t\tsum = sum + v * v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk36_v3ev.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpk36_v3ev.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v ~= nil and v ~= 0 then\n\
    \t\t\tsum = sum + v * v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxem6m9ap.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpxem6m9ap.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpjx_hck.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpxpjx_hck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvcu8zaj.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpnvcu8zaj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk42h4c1n.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpk42h4c1n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_s78wttb.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp_s78wttb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59varan1.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp59varan1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjsi8o3o.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpzjsi8o3o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pkedgig.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp9pkedgig.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxve6xxe.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmppxve6xxe.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmrtril1.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpcmrtril1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhhq7na9.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpmhhq7na9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69t1hzmo.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp69t1hzmo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiswtcxg.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpsiswtcxg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbr4mlaq.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpbbr4mlaq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoon0_za.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpeoon0_za.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuqbocvb.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpbuqbocvb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kg38o5d.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp2kg38o5d.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2zw1xr5.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpo2zw1xr5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka9k375n.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpka9k375n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86_iyx1i.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp86_iyx1i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo5pb3nh.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpfo5pb3nh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtdx6rwf.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpjtdx6rwf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q2yrumn.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5q2yrumn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe_hp5os.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpoe_hp5os.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznlo9c3l.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpznlo9c3l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpti7vq03w.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpti7vq03w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71e1kion.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp71e1kion.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_i5in1l.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpl_i5in1l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z1ml76n.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp8z1ml76n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qfaertj.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp0qfaertj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfo2xhuq.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmppfo2xhuq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yhff5dp.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp3yhff5dp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55nwdkcw.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp55nwdkcw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z8y0vmh.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp2z8y0vmh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvsdiyis.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpnvsdiyis.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppks1l0f6.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmppks1l0f6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqoxv5fr6.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpqoxv5fr6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v ~= 0 then\n\
    \      sum = sum + v*v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcg5dfpj.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpqcg5dfpj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kv88vvm.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp0kv88vvm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf1em_8_.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptf1em_8_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj4kfgty.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpqj4kfgty.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o8e7c7s.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp4o8e7c7s.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcu0aa74.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpzcu0aa74.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzat697wj.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpzat697wj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v ~= 0 and not (v < 0 and\
    \ v % 2 == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cue7gy1.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp8cue7gy1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25ghd38b.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp25ghd38b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2szz100z.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp2szz100z.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d2jct_c.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp8d2jct_c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ppf935.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpl0ppf935.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] > 0 then\n\t\t\tsum = sum\
    \ + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2eettkkn.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp2eettkkn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqpwsgf8.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmppqpwsgf8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkp2hbl85.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpkp2hbl85.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if lst[i]%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyuh2b7f.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpyyuh2b7f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp1480xj.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcp1480xj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcs36m59.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpxcs36m59.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q4kn400.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp6q4kn400.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8tyg8o.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpqs8tyg8o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2==1\
    \ then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw5mdyv8.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpiw5mdyv8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwusj1_5.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpmwusj1_5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
