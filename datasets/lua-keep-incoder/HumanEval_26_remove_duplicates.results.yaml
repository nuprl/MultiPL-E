name: HumanEval_26_remove_duplicates
language: lua
results:
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] then\n      table.remove(seen,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return table.concat(seen)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ykodihx.lua:20:\
    \ expected: {}\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp6ykodihx.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdjus2i8r.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpdjus2i8r.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lp4bgn6.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp4lp4bgn6.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjyygagfv.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2,2\", \"3,3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpjyygagfv.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57dmpipb.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmp57dmpipb.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tn57zgh.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp3tn57zgh.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, value in ipairs(numbers) do\n    if seen[value] then\n \
    \     table.insert(numbers, value)\n    else\n      seen[value] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7ijra2y.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpz7ijra2y.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      table.insert(output, value)\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqgwons0.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqqgwons0.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuukili9a.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpuukili9a.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp06_fqn21.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp06_fqn21.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ekuo1jc.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp1ekuo1jc.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp06p115qi.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp06p115qi.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4e7kwwqa.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp4e7kwwqa.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxw7u5ve7.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpxw7u5ve7.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp50ohqre0.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp50ohqre0.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzekqyu8y.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpzekqyu8y.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in pairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnn72rus2.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnn72rus2.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmped8nxys_.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2,2\", \"3,3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmped8nxys_.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdo05hjt7.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpdo05hjt7.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result] == nil\
    \ then\n      result[#result] = v\n    else\n      result[#result] = v\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_f6bpk60.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {0=4}\\nstack traceback:\\n\\t/tmp/tmp_f6bpk60.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ then\n      table.insert(output, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpre2xdwza.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpre2xdwza.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = true\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ish0p36.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, true, true, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmp3ish0p36.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp31qlfmgi.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp31qlfmgi.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9dubvi01.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9dubvi01.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjdstzsoo.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpjdstzsoo.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3ihvpb3.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpm3ihvpb3.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = number\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph42wkcgx.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmph42wkcgx.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1]\n    else\n      result[#result + 1] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpv4wfpg3m.lua:10: '=' expected near 'else'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, v in pairs(numbers) do\n    if seen[v]\
    \ then\n      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjrfbe5uy.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpjrfbe5uy.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in pairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpab987jp4.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpab987jp4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa736x_fq.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpa736x_fq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_1vbl5pl.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp_1vbl5pl.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwumx5tfy.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpwumx5tfy.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe9hvhb8w.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpe9hvhb8w.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ then\n      output[#output + 1] = v\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpshifov20.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpshifov20.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      output[#output + 1] = v\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp68qtyoij.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmp68qtyoij.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ ~= value and result[value] or value\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpilua3lf8.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmpilua3lf8.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd5ukaky7.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpd5ukaky7.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result] == nil\
    \ then\n      result[#result] = v\n    else\n      result[#result] = v\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv3c7glp9.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {0=4}\\nstack traceback:\\n\\t/tmp/tmpv3c7glp9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local last_seen = {}\n  for _, number in ipairs(numbers) do\n\
    \    if last_seen[number] then\n      result[#result + 1] = number\n      last_seen[number]\
    \ = nil\n    else\n      last_seen[number] = number\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpll17cqtt.lua:23:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpll17cqtt.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, value in ipairs(numbers) do\n    if seen[value] then\n \
    \     table.insert(numbers, value)\n    else\n      seen[value] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = number\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8k_ebbea.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmp8k_ebbea.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1] = 1\n    else\n      result[#result + 1] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8b5ziofw.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 2, 4, 3, 5}\\nstack traceback:\\n\\\
    t/tmp/tmp8b5ziofw.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in pairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1huahl77.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp1huahl77.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1] = v\n    else\n      result[#result + 1] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd5x036o5.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 2, 4, 3, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpd5x036o5.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in pairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwrv51c9.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpwwrv51c9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp76lfhy5w.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp76lfhy5w.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpukf3n9j4.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpukf3n9j4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjvpiy6k9.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpjvpiy6k9.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeo00ju4p.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpeo00ju4p.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2enod4wo.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp2enod4wo.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      result[#result + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp811v4uc6.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp811v4uc6.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ ~= value and result[value] or value\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbr9g2lco.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmpbr9g2lco.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwq05jtc0.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpwq05jtc0.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_is9r3_p.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp_is9r3_p.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5mkiis8v.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp5mkiis8v.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp23k7kow4.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp23k7kow4.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = true\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpff1g0du7.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, true, true, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpff1g0du7.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ ~= value and result[value] or value\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64p4ku6x.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmp64p4ku6x.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in pairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcbu6kem8.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcbu6kem8.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = nil\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplu1p3c4t.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 4=4, 5=5}\\nstack traceback:\\n\\t/tmp/tmplu1p3c4t.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqzojjxo_.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpqzojjxo_.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps6eundjw.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmps6eundjw.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9x5exef2.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9x5exef2.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpidot26mk.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpidot26mk.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6wpdu7u.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpe6wpdu7u.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl56tr7ng.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpl56tr7ng.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkoq_a2wb.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpkoq_a2wb.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqvz3fmb1.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqvz3fmb1.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ ~= value and result[value] or value\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6am_nsxj.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmp6am_nsxj.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in pairs(numbers) do\n    if seen[v] then\n      table.remove(numbers,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfnidnpm.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 3, 4, 3, 5}\\nstack traceback:\\n\\t/tmp/tmppfnidnpm.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfgv3ijy.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpjfgv3ijy.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7v_xey4x.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7v_xey4x.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzfwwzkx7.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpzfwwzkx7.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5x7ogmq1.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp5x7ogmq1.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.remove(numbers, num)\n    else\n      seen[num] = true\n    end\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpceu1436o.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 3, 4, 3, 5}\\nstack traceback:\\n\\t/tmp/tmpceu1436o.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsx1p4zq9.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpsx1p4zq9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo4ma85tq.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpo4ma85tq.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] then\n      table.insert(numbers,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppc5pnfhv.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmppc5pnfhv.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzybk08lj.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpzybk08lj.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp977bf0rt.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp977bf0rt.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzigsuq90.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpzigsuq90.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7y3rpmmv.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7y3rpmmv.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7s8ttwir.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2,2\", \"3,3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmp7s8ttwir.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ then\n      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4krfm3ys.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp4krfm3ys.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphbknvzj4.lua:20:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmphbknvzj4.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdiqbmhrc.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpdiqbmhrc.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfzdzrixu.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfzdzrixu.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd24pquzw.lua:20:\
    \ expected: {}\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpd24pquzw.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpayazovpw.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpayazovpw.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxred3igq.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpxred3igq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hsryka9.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp_hsryka9.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy239e21z.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpy239e21z.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = number\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcnfm8vpl.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmpcnfm8vpl.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfr0ug2aq.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpfr0ug2aq.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.remove(numbers, num)\n    else\n      seen[num] = true\n    end\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpto5uikia.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 3, 4, 3, 5}\\nstack traceback:\\n\\t/tmp/tmpto5uikia.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] then\n      table.insert(numbers,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5jvkr_u.lua:20:\
    \ expected: {}\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpa5jvkr_u.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsl48ewam.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpsl48ewam.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9u670k1j.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9u670k1j.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuei56s3k.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpuei56s3k.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpogcltzzo.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpogcltzzo.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnohfmntx.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnohfmntx.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpty6p4nis.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpty6p4nis.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp13prebky.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmp13prebky.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj418je2a.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpj418je2a.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsmbbtcep.lua:20:\
    \ expected: {}\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpsmbbtcep.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_1jumb6.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpl_1jumb6.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplxjp6tak.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmplxjp6tak.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, value in ipairs(numbers) do\n    if seen[value] then\n \
    \     table.insert(numbers, seen[value])\n    else\n      seen[value] = true\n\
    \    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfjn_xa7r.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfjn_xa7r.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ef3cmga.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2ef3cmga.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = nil\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnltve6_4.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 4=4, 5=5}\\nstack traceback:\\n\\t/tmp/tmpnltve6_4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpotob8r59.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpotob8r59.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp646__6w3.lua:20:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmp646__6w3.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7oicdyp.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpo7oicdyp.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3pe3mtz.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpt3pe3mtz.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps14gzo22.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmps14gzo22.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnrfw1map.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnrfw1map.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, value in pairs(numbers) do\n    if\
    \ seen[value] then\n      result[#result + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb40gkr69.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpb40gkr69.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1]\n    else\n      result[#result + 1] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpxfrk7f76.lua:10: '=' expected near 'else'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvn_u3ch.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpbvn_u3ch.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7bx6elx.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpz7bx6elx.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpooj99v47.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpooj99v47.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp22s1os7t.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp22s1os7t.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4dvbo6rs.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp4dvbo6rs.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1]\n    else\n      result[#result + 1] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpf_su1b3n.lua:10: '=' expected near 'else'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02q80jz0.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmp02q80jz0.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48kn813z.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp48kn813z.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, number in ipairs(numbers) do\n    if seen[number] then\n\
    \      table.insert(numbers, seen[number])\n    else\n      seen[number] = true\n\
    \    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcl1_31gj.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpcl1_31gj.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpknbwjb6y.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpknbwjb6y.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwlx2nava.lua:19:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 2, 3, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpwlx2nava.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3bk7swxm.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp3bk7swxm.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4g5vz5dj.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp4g5vz5dj.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3qx5luj_.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp3qx5luj_.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfgb_y4uu.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfgb_y4uu.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2qb9zq1j.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2qb9zq1j.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyai9u3xc.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpyai9u3xc.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ then\n      table.insert(output, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xw5mq1l.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2xw5mq1l.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7r3xajnr.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7r3xajnr.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, v in ipairs(numbers) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      output[#output + 1] = v\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4bchno7.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmpd4bchno7.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1u42twet.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp1u42twet.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, value in ipairs(numbers) do\n    if seen[value] then\n \
    \     table.insert(numbers, value)\n    end\n    seen[value] = true\n  end\n \
    \ return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7w54l8gf.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7w54l8gf.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6r6pw8w.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpd6r6pw8w.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_w1dbi1.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmps_w1dbi1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sl9c6s5.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9sl9c6s5.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrisy3cd.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpzrisy3cd.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6vbvvyr.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpe6vbvvyr.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeeepj0id.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpeeepj0id.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5oefb8eh.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp5oefb8eh.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplfafvc89.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmplfafvc89.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = true\n    else\n      result[number] = number\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxiio90et.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, true, true, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpxiio90et.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.remove(numbers, num)\n    else\n      seen[num] = true\n    end\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpul2msnuc.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 3, 4, 3, 5}\\nstack traceback:\\n\\t/tmp/tmpul2msnuc.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsjumer4a.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpsjumer4a.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa2c_20z4.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpa2c_20z4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps4zuzh56.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmps4zuzh56.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_bb1txi.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpw_bb1txi.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local last_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    if number ~= last_number then\n      result[#result + 1] = number\n     \
    \ last_number = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxf1vk4ml.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 2, 4, 3, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpxf1vk4ml.lua:22: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_3j2br5.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpf_3j2br5.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result] == nil\
    \ then\n      result[#result] = v\n    else\n      result[#result] = v\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxfta2yfo.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {0=4}\\nstack traceback:\\n\\t/tmp/tmpxfta2yfo.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd1qdop3r.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpd1qdop3r.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      result[#result + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifmr78tu.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpifmr78tu.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqpd27vz8.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2,2\", \"3,3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpqpd27vz8.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpooymx5q6.lua:18:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 2, 4, 3, 5}\\nstack traceback:\\n\\\
    t/tmp/tmpooymx5q6.lua:18: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      output[#output + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3rw2ryhb.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp3rw2ryhb.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ks_xajz.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp5ks_xajz.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwa08s1o.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmprwa08s1o.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsapwh1m4.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpsapwh1m4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgi8dy_54.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpgi8dy_54.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp894ngz3g.lua:20:\
    \ expected: {}\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp894ngz3g.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      table.insert(output, value)\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyq38m3_r.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpyq38m3_r.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n     \
    \ table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sicqt52.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9sicqt52.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, number in ipairs(numbers) do\n    if seen[number] then\n\
    \      table.remove(numbers, seen[number])\n    else\n      seen[number] = true\n\
    \    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0kkxe2nu.lua:9:\
    \ bad argument #2 to 'remove' (number expected, got boolean)\\nstack traceback:\\\
    n\\t/tmp/tmp0kkxe2nu.lua:9: in function 'candidate'\\n\\t/tmp/tmp0kkxe2nu.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ik64u5n.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0ik64u5n.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphprgp9az.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmphprgp9az.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjuhjzgi_.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpjuhjzgi_.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9p25zc2.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmpv9p25zc2.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      output[#output + 1] = number\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnpmz7aim.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnpmz7aim.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2jcuid1i.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2jcuid1i.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyj7txwsc.lua:20:\
    \ expected: {1, 4, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\t/tmp/tmpyj7txwsc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if result[number] ==\
    \ nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1n4920k6.lua:21:\
    \ expected: {1, 2, 3, 4}\\nactual: {true, true, true, true}\\nstack traceback:\\\
    n\\t/tmp/tmp1n4920k6.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] then\n      table.insert(numbers,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      result[#result + 1] = num\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxwoa0p3x.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpxwoa0p3x.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ seen[number] then\n      table.insert(output, number)\n    else\n      seen[number]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp17m8xhr5.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp17m8xhr5.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ seen[value] then\n      table.insert(output, value)\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzzel8eeu.lua:22:\
    \ expected: {1, 2, 3, 4}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpzzel8eeu.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. ',' .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_vxrf8h7.lua:22:\
    \ expected: {1, 4, 5}\\nactual: {1, \"2,2\", \"3,3\", 4, 5}\\nstack traceback:\\\
    n\\t/tmp/tmp_vxrf8h7.lua:22: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
