name: HumanEval_22_filter_integers
language: lua
results:
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q98fu81.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp1q98fu81.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktz7bgte.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpktz7bgte.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws138dz1.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpws138dz1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzvctmkj.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpnzvctmkj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3a923ta.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpc3a923ta.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3mrcr1m.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpl3mrcr1m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgw6ed97.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpsgw6ed97.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4z0q89x.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpb4z0q89x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bpuyaue.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp0bpuyaue.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3il257w7.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp3il257w7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7ky7brt.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpr7ky7brt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2ut3hfp.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpq2ut3hfp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoddcz9p.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpzoddcz9p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigfi_5pb.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpigfi_5pb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkqwe4v2.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprkqwe4v2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zbjp07y.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp7zbjp07y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli4j152e.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpli4j152e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcvx0cjg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmptcvx0cjg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98q_e83p.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp98q_e83p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ze0rr26.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp3ze0rr26.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8hlnhl7.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpv8hlnhl7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g5ml5f5.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp7g5ml5f5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpciy_m7zd.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpciy_m7zd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg4d0k8s.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpyg4d0k8s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde9klsze.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpde9klsze.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp_98u0t.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpbp_98u0t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj765gbz.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpfj765gbz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0op6l66y.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp0op6l66y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96bzwtw6.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp96bzwtw6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfzzj6mq.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprfzzj6mq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      result[#result + 1] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi80hbnpu.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpi80hbnpu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg21jb9hp.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpg21jb9hp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmkqfk0x.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpcmkqfk0x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsueiaphv.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpsueiaphv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3fdwgis.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp_3fdwgis.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03xu1izc.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp03xu1izc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ai6hh_j.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp7ai6hh_j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptexuf132.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmptexuf132.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbeie_yb.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpgbeie_yb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprayc1zz1.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprayc1zz1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph603v49y.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmph603v49y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbqpw67v.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpfbqpw67v.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fzne78i.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp9fzne78i.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qz02emq.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1qz02emq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq49l5j0c.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpq49l5j0c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc_ud0w0.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpgc_ud0w0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaj7_odv.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpiaj7_odv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokbbqg00.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpokbbqg00.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowqo_ya4.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpowqo_ya4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zwgn0_y.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp4zwgn0_y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a8dfo23.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5a8dfo23.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4e54yv3.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpa4e54yv3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa66wpkdz.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpa66wpkdz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpequ6hb60.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpequ6hb60.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2vzumhf.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpo2vzumhf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml02humo.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpml02humo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_mhz4ii.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpt_mhz4ii.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6bnrr4u.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpw6bnrr4u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshxjwiok.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpshxjwiok.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnmz1k7m.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmplnmz1k7m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hozq3oa.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp6hozq3oa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn7l9czo.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpwn7l9czo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ybggh8k.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5ybggh8k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc21w4hun.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpc21w4hun.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprniq_d4r.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprniq_d4r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16vcpbk6.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp16vcpbk6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgckkhp_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpfgckkhp_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqhusyd0.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmphqhusyd0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7tp45db.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpu7tp45db.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpermu90_1.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpermu90_1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ucx5s1o.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1ucx5s1o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2cry1k7.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpn2cry1k7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiefv1fli.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpiefv1fli.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptun4ns7y.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmptun4ns7y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3r897pa.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpd3r897pa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fwijf5i.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp4fwijf5i.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyhat2fd.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpvyhat2fd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqxrrxka.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpsqxrrxka.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1ml0n53.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpj1ml0n53.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71z63691.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp71z63691.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrx9st_m.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpmrx9st_m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx285vwx.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmphx285vwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zvys7xo.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1zvys7xo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8zz080f.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp_8zz080f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r618nvu.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp2r618nvu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aqkcmxj.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1aqkcmxj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzkfex33.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpmzkfex33.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h6o13wa.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5h6o13wa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx90kf13_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpx90kf13_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_7k541_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpf_7k541_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuss6tl6n.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpuss6tl6n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8djdu92i.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp8djdu92i.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7vkpakl.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpb7vkpakl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtuagu6h.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpdtuagu6h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt64oj4kk.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpt64oj4kk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k4fabwp.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp2k4fabwp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s1pff71.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp0s1pff71.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyay0sses.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpyay0sses.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjw4ysnmg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpjw4ysnmg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv1q01_4.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmplv1q01_4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7spzfpm.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpo7spzfpm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6hnlmeo.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm6hnlmeo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wseizoy.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp0wseizoy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xg2br0k.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5xg2br0k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7luvx5jw.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp7luvx5jw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphixxn5hl.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmphixxn5hl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87ruaxd4.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp87ruaxd4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz_nmyy2.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpvz_nmyy2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon4arb5z.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpon4arb5z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyacjkh.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpemyacjkh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4sbf9ky.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpt4sbf9ky.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpbpwc87.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpmpbpwc87.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl0s3fvr.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprl0s3fvr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey3gn79w.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpey3gn79w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u4cntgg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp9u4cntgg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_413b5su.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp_413b5su.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu33aacg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmphu33aacg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvs5xjxh.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpcvs5xjxh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus64qpve.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpus64qpve.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbw3yw0z.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprbw3yw0z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq4hb_bc.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpcq4hb_bc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz1wri8j.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpyz1wri8j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9r_lph.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpea9r_lph.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3c3oeh_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpv3c3oeh_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkviyvf7l.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpkviyvf7l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitvncg9l.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpitvncg9l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmljqkbz5.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpmljqkbz5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobb9l1o3.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpobb9l1o3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqtpa2u1.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkqtpa2u1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5gx8eic.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpc5gx8eic.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5m6lsay1.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5m6lsay1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmn6ijp_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpjmn6ijp_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtjcu5xs.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpxtjcu5xs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos9afba5.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpos9afba5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8lfy8au.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpv8lfy8au.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdn3spc7.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpcdn3spc7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6i0sl0a.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpr6i0sl0a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe3ryyjv.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpwe3ryyjv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tdh2myg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1tdh2myg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ze0futt.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp2ze0futt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw__o1q2m.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpw__o1q2m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybg6oi4n.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpybg6oi4n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vi8l0bf.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5vi8l0bf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu82_5uz.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpbu82_5uz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_sgiiwe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpl_sgiiwe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf57pfmt2.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpf57pfmt2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3m0u6ff.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpp3m0u6ff.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdggzn671.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpdggzn671.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqokokwu.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmplqokokwu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhbhawt9.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpuhbhawt9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmqk32j6.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpfmqk32j6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux8vwa_t.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpux8vwa_t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdhejxqg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpgdhejxqg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(results, value)\n    end\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdxkwlpf.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpgdxkwlpf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcphwpgxq.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpcphwpgxq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_4xcj4p.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp5_4xcj4p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv2n78bn.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpnv2n78bn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvad_mxm2.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpvad_mxm2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_6e0s0o.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa_6e0s0o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8oqk3e8.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpu8oqk3e8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71mt5tkq.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp71mt5tkq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_w_liwu.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpo_w_liwu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvsf05n.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpgwvsf05n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgfao5eu.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpkgfao5eu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuv9gzun.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmptuv9gzun.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvonkm5he.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpvonkm5he.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3l0homg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz3l0homg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18pwosn1.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp18pwosn1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmixc490l.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpmixc490l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik3lc6me.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpik3lc6me.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y10h11g.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp4y10h11g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxjctibo.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzxjctibo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivqvzhll.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpivqvzhll.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobetwrjp.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpobetwrjp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqwfckx2.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmphqwfckx2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx4ltrmg.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpmx4ltrmg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n7gzqe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpn4n7gzqe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hhqc5bb.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp8hhqc5bb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy367j6h.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmphy367j6h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuvaejkm.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpuuvaejkm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m3nzvb2.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp2m3nzvb2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu8tvfd3.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpsu8tvfd3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qchtv_d.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp4qchtv_d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb4zv25b.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpqb4zv25b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64vt2c01.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp64vt2c01.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjtrb1a5.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpqjtrb1a5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysrt228_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpysrt228_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj77iwbz.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpvj77iwbz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_duswado.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp_duswado.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf0prch1.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmppf0prch1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p_3rn84.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp4p_3rn84.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q4x46oa.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp6q4x46oa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8zyhpx9.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpd8zyhpx9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmd2nnaw.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzmd2nnaw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkrd9bbs.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpnkrd9bbs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz0hci4s.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmppz0hci4s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tyi5w_k.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4tyi5w_k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_amjxgg.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpr_amjxgg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
