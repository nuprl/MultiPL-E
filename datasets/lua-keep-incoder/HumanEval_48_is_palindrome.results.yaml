name: HumanEval_48_is_palindrome
language: lua
results:
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsebau9ch.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsebau9ch.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0so2e5z7.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmp0so2e5z7.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp0so2e5z7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg73n45jl.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg73n45jl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i <= j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr3tbfkb.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmpfr3tbfkb.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpfr3tbfkb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mjjx8wh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0mjjx8wh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7b3yurm.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw7b3yurm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4j8131x.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw4j8131x.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text[i]\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yl34dpu.lua:14:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp7yl34dpu.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp7yl34dpu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt8lgtp3.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppt8lgtp3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwazmi0dv.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwazmi0dv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp9yw_oh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwp9yw_oh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qbyne8_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8qbyne8_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aj1_t33.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6aj1_t33.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaynohdtc.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaynohdtc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu9psdp0.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyu9psdp0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr4l1n5s.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkr4l1n5s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2v12rjo.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt2v12rjo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8ntzcqc.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv8ntzcqc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmgd4wqb.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcmgd4wqb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xs5dvn2.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2xs5dvn2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph47_qyzh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph47_qyzh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsq97gkd.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbsq97gkd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yks6008.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4yks6008.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv4yb_mq.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiv4yb_mq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojot27l9.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpojot27l9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzk8zf9o.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptzk8zf9o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gaez4yj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4gaez4yj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k8e_yqt.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8k8e_yqt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i < j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf65h69ky.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf65h69ky.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4niopb3.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi4niopb3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 and text:sub(i, i) == text:sub(j, j) do\n    i = i - 1\n    j = j - 1\n\
    \  end\n  return i == 0 and j == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y6o0wb8.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2y6o0wb8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp23kmi1t.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp23kmi1t.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml_xpwrt.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpml_xpwrt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k8x0n7.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp2k8x0n7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p9d6d0u.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1p9d6d0u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc3l1vb0.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnc3l1vb0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07xhijnk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp07xhijnk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwbql1pj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjwbql1pj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2p_lay6u.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2p_lay6u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjerf1ifa.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjerf1ifa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv7s2tr1.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprv7s2tr1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6toce_q.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi6toce_q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjcwj0p0.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsjcwj0p0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ ~= 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5mj1om.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5mj1om.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyxqfvew.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppyxqfvew.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i <= j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhn67xvb.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmpyhn67xvb.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpyhn67xvb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fnade73.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0fnade73.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2oq8awuq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2oq8awuq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgxdq9fa.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxgxdq9fa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text[i]\n    end\n    return reversed\n\
    \  end\n  local function is_palindrome_helper(text, start, end)\n    if start\
    \ > end then\n      return true\n    end\n    if start == end then\n      return\
    \ text[start] == text[start]\n    end\n    return is_palindrome_helper(text, start\
    \ + 1, end - 1)\n  end\n  return is_palindrome_helper(text, 1, #text - 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyvl0mdjk.lua:18: <name> or '...' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks_b9phq.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpks_b9phq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1do1kf4.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf1do1kf4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tl5_4yd.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1tl5_4yd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7thnjrs.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl7thnjrs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e3b1kua.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5e3b1kua.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js__9db.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3js__9db.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfisj3y30.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfisj3y30.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjvgzq80.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwjvgzq80.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s8p92at.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0s8p92at.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uy0d400.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8uy0d400.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ ~= 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpu26uu5.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgpu26uu5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4xhhjp8.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz4xhhjp8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyi3rq7h.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphyi3rq7h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa5i_96x.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaa5i_96x.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx9c9gpj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbx9c9gpj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), 1\n  while i <= j do\n\
    \    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n \
    \   i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudxit88y.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpudxit88y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zi7_vdu.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2zi7_vdu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp465f82qu.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp465f82qu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8j_7md9s.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8j_7md9s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ > 0 and j > 0 and text:sub(i, i) == text:sub(j, j) do\n    i, j = i - 1, j -\
    \ 1\n  end\n  return i == 0 and j == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokosmpj7.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpokosmpj7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local s, i, j = text:reverse():find(text)\n    return s == i and j == text:len()\
    \ - i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbb5h9tz.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplbb5h9tz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzeygf8f.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvzeygf8f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn0d8c1l.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqn0d8c1l.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnu3wurz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjnu3wurz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaq4amr8w.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaq4amr8w.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ > 0 and j > 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return\
    \ false\n    end\n    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0z6k3r7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo0z6k3r7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdnyy37r.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgdnyy37r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mtci8s6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0mtci8s6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr3mbj5q.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzr3mbj5q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6vmlk9k.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr6vmlk9k.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwza2_i9.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphwza2_i9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ygnfdxj.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ygnfdxj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), 1\n  while i <= j do\n\
    \    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n \
    \   i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxnt7l8n.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgxnt7l8n.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz0qvn9l.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmpiz0qvn9l.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpiz0qvn9l.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local reversed = text:reverse()\n    return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkrsfoz2.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmkrsfoz2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i < j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvzf5jwv.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqvzf5jwv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbswm32rz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbswm32rz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text[i]\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbunc_9g9.lua:14:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpbunc_9g9.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpbunc_9g9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka5c6zpd.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpka5c6zpd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local temp = text[i]\n      text[i] = text[j]\n      text[j] = temp\n \
    \     i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hq9iwlg.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmp_hq9iwlg.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_hq9iwlg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyvryleh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplyvryleh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13ebzgmp.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp13ebzgmp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i < j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0gecgzj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd0gecgzj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wi5tedj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_wi5tedj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscco_45c.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpscco_45c.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g3aeptb.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8g3aeptb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4zh2l1f.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq4zh2l1f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo1ga163.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoo1ga163.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d626l82.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4d626l82.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqd6h08r.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsqd6h08r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text = text:lower()\n    local text_length = text:len()\n    local\
    \ text_reverse = text:reverse()\n    local text_reverse_length = text_reverse:len()\n\
    \    return text_length == text_reverse_length and text == text_reverse\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjp3y33k.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkjp3y33k.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9opgvg_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm9opgvg_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 and text:sub(i, i) == text:sub(j, j) do\n    i, j = i - 1, j - 1\n  end\n\
    \  return i == 0 and j == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwh4dfgm9.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwh4dfgm9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text[i]\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcp0j2sx.lua:14:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmptcp0j2sx.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmptcp0j2sx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm_y882y.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcm_y882y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyfa29yh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppyfa29yh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu66li06q.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu66li06q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyas6yrqm.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyas6yrqm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hmat3u6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4hmat3u6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4yu17pw.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi4yu17pw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzyky33u.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvzyky33u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpik75ac.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwpik75ac.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60q78pp9.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp60q78pp9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ppymosp.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ppymosp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i = text:len()\n  while i ~= 0 do\n    if\
    \ text:sub(i, i) ~= text:sub(i-1, i-1) then\n      return false\n    end\n   \
    \ i = i - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc_wna90.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprc_wna90.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6c8ue9b.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi6c8ue9b.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph854bbs2.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph854bbs2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i < j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxvx06fz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvxvx06fz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30af3dkd.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp30af3dkd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aw1aq2q.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6aw1aq2q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpotf5ew.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmpotf5ew.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttkkn8qm.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpttkkn8qm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz4u3tqs.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppz4u3tqs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), 1\n  while i ~= 0 do\n    if\
    \ text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n    i =\
    \ i - 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdegx0y75.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdegx0y75.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qutp_2c.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1qutp_2c.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ > 0 and j > 0 do\n    if text:sub(i, i) == text:sub(j, j) then\n      i = i\
    \ - 1\n      j = j - 1\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lf71qif.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8lf71qif.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b9sbnil.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4b9sbnil.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13wu53hf.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp13wu53hf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6r3m9lr.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx6r3m9lr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn364porb.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn364porb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0yyy_cr.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp0yyy_cr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbg9ljjs.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplbg9ljjs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmbhi2jv.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdmbhi2jv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = text:reverse()\n  return text == reversed_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb9rsxni.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeb9rsxni.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss_g60pb.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpss_g60pb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1dpj8yw.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1dpj8yw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text[i]\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl17vkgvi.lua:14:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpl17vkgvi.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpl17vkgvi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fab99dx.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fab99dx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ws4ghp4.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ws4ghp4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba41aoon.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpba41aoon.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp723m3v61.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp723m3v61.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc77phj7x.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc77phj7x.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), text:len()\n  while i\
    \ > 0 and j > 0 and text:sub(i, i) == text:sub(j, j) do\n    i = i - 1\n    j\
    \ = j - 1\n  end\n  return i == 0 and j == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb7cy3fh.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqb7cy3fh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsogi9w0p.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsogi9w0p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed..text[i]\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88uc8r9u.lua:14:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp88uc8r9u.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp88uc8r9u.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfts077e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyfts077e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmybcutpa.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmybcutpa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7z8j08.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprm7z8j08.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), 1\n  while i <= j do\n    if\
    \ text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxfrlrid.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmxfrlrid.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed = text:reverse()\n  return text == reversed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjw3mazuz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjw3mazuz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdktfu89d.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmpdktfu89d.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdktfu89d.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  local result\
    \ = reverse(text)\n  return result == text and text ~= reverse(result) and text\
    \ ~= reverse(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxohekjdi.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxohekjdi.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky1htt_k.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpky1htt_k.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local text = text:lower()\n  local i, j = text:len(), 1\n  while i <= j do\n\
    \    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n \
    \   i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fja9qc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp33fja9qc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptycogr55.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptycogr55.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsetdi0ul.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsetdi0ul.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1g4y0sk.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1g4y0sk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_rq9hvy.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy_rq9hvy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmph82d65.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmph82d65.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma1r7rq2.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpma1r7rq2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglc01lda.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpglc01lda.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i > 0 do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i, j = i - 1, j - 1\n    end\n    return text\n  end\n  return reverse(text)\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4egekd3o.lua:15:\
    \ attempt to index local 'text' (a string value)\nstack traceback:\n\t/tmp/tmp4egekd3o.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp4egekd3o.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gx6ddlt.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4gx6ddlt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i > 0 and\
    \ j > 0 do\n    if text:sub(i, i) == text:sub(j, j) then\n      i = i - 1\n  \
    \    j = j - 1\n    else\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuchalc1.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnuchalc1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfmjnlzp.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnfmjnlzp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local i, j = 1, #text\n    while i < j do\n\
    \      local tmp = text[i]\n      text[i] = text[j]\n      text[j] = tmp\n   \
    \   i = i + 1\n      j = j - 1\n    end\n    return text\n  end\n  local i, j\
    \ = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgx67wzp.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjgx67wzp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i, j = i - 1, j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzobdet4.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnzobdet4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11y0sruz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp11y0sruz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), text:len()\n  while i ~= 0\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i - 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpausc4dn7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpausc4dn7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw4vn6gv.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkw4vn6gv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l4qvxkr.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9l4qvxkr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r18xh9e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2r18xh9e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i, j = text:len(), 1\n  while i ~= 0 do\n    if\
    \ text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n    i =\
    \ i - 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local reversed = \"\"\n    for i = #text,\
    \ 1, -1 do\n      reversed = reversed .. text:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe_iy50d.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwe_iy50d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i <= j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5youpbc.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw5youpbc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
