name: HumanEval_19_sort_numbers
language: lua
results:
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)(\
    \ |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers\
    \ = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)(\
    \ |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers\
    \ = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphrtv7m9u.lua:17: unfinished string near ''( )(.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = numbers.table\n  local\
    \ numbers_length = numbers_table:len()\n  local numbers_sorted = {}\n  local numbers_sorted_length\
    \ = 0\n  local numbers_sorted_index = 0\n  local numbers_sorted_key\n  local numbers_sorted_value\n\
    \  local numbers_sorted_key_length\n  local numbers_sorted_value_length\n  local\
    \ numbers_sorted_key_index\n  local numbers_sorted_value_index\n  local numbers_sorted_key_value\n\
    \  local numbers_sorted_key_value_length\n  local numbers_sorted_key_value_length_index\n\
    \  local numbers_sorted_key_value_length_value\n  local numbers_sorted_key_value_length_value_length\n\
    \  local numbers_sorted_key_value_length_value_length_index\n  local numbers_sorted_key_value_length_value_length_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_index\n  local numbers_sorted_key_value_length_value_length_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_index\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value\n  local numbers_sorted_key_value_length_value_length_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value_index\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value_value\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value_index\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value_value\n  local\
    \ numbers_sorted_key_value_length_value_length_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value_value_value\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value_value_value_value_index\n\
    \  local numbers_sorted_key_value_length_value_length_value_value_value_value_value\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmvv097z6.lua:58: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpznlemxek.lua:7: unfinished string near ''(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsqb3ahz2.lua:7: unfinished string near ''(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%4'):gsub('(^|\
    \ )(.-)( |$)','%5'):gsub('(^| )(.-)( |$)','%6'):gsub('(^| )(.-)( |$)','%7'):gsub('(^|\
    \ )(.-)( |$)','%8'):gsub('(^| )(.-)( |$)','%9'):gsub('(^| )(.-)( |$)','%0'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%3'):gsub('(^|\
    \ )(.-)( |$)','%4'):gsub('(^| )(.-)( |$)','%5'):gsub('(^| )(.-)( |$)','%6'):gsub('(^|\
    \ )(.-)( |$)','%7'):gsub('(^| )(.-)( |$)','%8'):gsub('(^| )(.-)( |$)','%9'):gsub('(^|\
    \ )(.-)( |$)','%0'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%4'):gsub('(^| )(.-)( |$)','%5'):gsub('(^|\
    \ )(.-)( |$)','%6'):gsub('(^| )(.-)( |$)','%7'):gsub('(^| )(.-)( |$)','%8'):gsub('(^|\
    \ )(.-)( |$)','%9'):gsub('(^| )(.-)( |$)','%0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc8zbcx8r.lua:7: unfinished string near ''%0'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxaypam66.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]+\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq80h8cjn.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpq80h8cjn.lua:8: in function 'candidate'\n\t/tmp/tmpq80h8cjn.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local number\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw0t8ghpy.lua:49: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4u2rz1lm.lua:30: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_tibjy0s.lua:55: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits, number)\n    return tonumber(number) or tonumber(digits)\n\
    \  end)\n  table.sort(numbers)\n  return table.concat(numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgqqa4kq.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmptgqqa4kq.lua:10: in function 'candidate'\n\t/tmp/tmptgqqa4kq.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(' ')\n\
    \  local sorted_numbers = ''\n  local i = 0\n  while i < #numbers_array do\n \
    \   local number = tonumber(numbers_array[i])\n    if number ~= nil then\n   \
    \   if number < 10 then\n        sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \      else\n        sorted_numbers = sorted_numbers + string.format('%0d', number)\n\
    \      end\n    end\n    i = i + 1\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36h025kb.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp36h025kb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6w6gghyt.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmz_kyp7n.lua:23: unfinished string near ''(^|[%z])'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\
    \\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5_ulr_8j.lua:22: unfinished string near ''(^|[%z])('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('[^0-9]', '')\n\
    \    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)',\
    \ '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\\
    1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n\
    \    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)',\
    \ '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\\
    1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n\
    \    local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\1\\\\2')\n    local numbers = numbers:gsub('(^| )([0-9]+)( |$)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfzatx7_5.lua:27: unfinished string near ''(^| )([0-9]+)( |$)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4v5mvbu.lua:35: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphldywclr.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmphldywclr.lua:8: in function 'candidate'\n\t/tmp/tmphldywclr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, last)\n    local first = tonumber(first)\n    local last\
    \ = tonumber(last)\n    if first > last then\n      return first .. ' ' .. last\n\
    \    else\n      return last .. ' ' .. first\n    end\n  end)\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtx3dm81.lua:25:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmphtx3dm81.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2')\n  local numbers = numbers:gsub('( )','%2')\n  local numbers = numbers:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxuysyq5_.lua:39: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %2$3')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxi0fh4p6.lua:34: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpve5dyuam.lua:17: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqhzwz0et.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp69c9ua4d.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n  local numbers = string.gsub(numbers, '0', '') -- Remove zeros\n \
    \ local numbers = string.gsub(numbers, '1', '') -- Remove ones\n  local numbers\
    \ = string.gsub(numbers, '2', '') -- Remove twos\n  local numbers = string.gsub(numbers,\
    \ '3', '') -- Remove threes\n  local numbers = string.gsub(numbers, '4', '') --\
    \ Remove fours\n  local numbers = string.gsub(numbers, '5', '') -- Remove fives\n\
    \  local numbers = string.gsub(numbers, '6', '') -- Remove sixes\n  local numbers\
    \ = string.gsub(numbers, '7', '') -- Remove sevens\n  local numbers = string.gsub(numbers,\
    \ '8', '') -- Remove eights\n  local numbers = string.gsub(numbers, '9', '') --\
    \ Remove nines\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '*', '') -- Remove asterisks\n  local numbers = string.gsub(numbers,\
    \ '$', '') -- Remove dollar signs\n  local numbers = string.gsub(numbers, '&',\
    \ '') -- Remove ampersands\n  local numbers = string.gsub(numbers, '!', '') --\
    \ Remove exclamation marks\n  local numbers = string.gsub(numbers, '#', '') --\
    \ Remove hash marks\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '@', '') -- Remove at signs\n\
    \  local numbers = string.gsub(numbers, '(', '') -- Remove parentheses\n  local\
    \ numbers = string.gsub(numbers, ')', '') -- Remove parentheses\n  local numbers\
    \ = string.gsub(numbers, '<', '') -- Remove less-than signs\n  local numbers =\
    \ string.gsub(numbers, '=', '') -- Remove equals signs\n  local numbers = string.gsub(numbers,\
    \ '?', '') -- Remove question marks\n  local numbers = string.gsub(numbers, '!',\
    \ '') -- Remove exclamation marks\n  local numbers = string.gsub(numbers, '#',\
    \ '') -- Remove hash marks\n  local numbers = string.gsub(numbers, '%', '') --\
    \ Remove percents\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsg40ej_4.lua:47: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ch8nzfr.lua:28: unfinished string near ''('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- remove\
    \ hyphens\n  local numbers = string.gsub(numbers, '0', '') -- remove zeros\n \
    \ local numbers = string.gsub(numbers, '1', '') -- remove ones\n  local numbers\
    \ = string.gsub(numbers, '2', '') -- remove twos\n  local numbers = string.gsub(numbers,\
    \ '3', '') -- remove threes\n  local numbers = string.gsub(numbers, '4', '') --\
    \ remove fours\n  local numbers = string.gsub(numbers, '5', '') -- remove fives\n\
    \  local numbers = string.gsub(numbers, '6', '') -- remove sixes\n  local numbers\
    \ = string.gsub(numbers, '7', '') -- remove sevens\n  local numbers = string.gsub(numbers,\
    \ '8', '') -- remove eights\n  local numbers = string.gsub(numbers, '9', '') --\
    \ remove nines\n  local numbers = string.gsub(numbers, ',', '') -- remove commas\n\
    \  local numbers = string.gsub(numbers, '-', '') -- remove hyphens\n  local numbers\
    \ = string.gsub(numbers, '/', '') -- remove slashes\n  local numbers = string.gsub(numbers,\
    \ '\\\\', '') -- remove backslashes\n  local numbers = string.gsub(numbers, '%',\
    \ '') -- remove percents\n  local numbers = string.gsub(numbers, '&', '') -- remove\
    \ ampersands\n  local numbers = string.gsub(numbers, '=', '') -- remove equals\n\
    \  local numbers = string.gsub(numbers, '<', '') -- remove less-thans\n  local\
    \ numbers = string.gsub(numbers, '>', '') -- remove greater-thans\n  local numbers\
    \ = string.gsub(numbers, '?', '') -- remove question-marks\n  local numbers =\
    \ string.gsub(numbers, '!', '') -- remove exclamation-marks\n  local numbers =\
    \ string.gsub(numbers, '|', '') -- remove pipes\n  local numbers = string.gsub(numbers,\
    \ '*', '') -- remove asterisks\n  local numbers = string.gsub(numbers, '(', '')\
    \ -- remove parentheses\n  local numbers = string.gsub(numbers, ')', '') -- remove\
    \ parentheses\n  local numbers = string.gsub(numbers, '[', '') -- remove brackets\n\
    \  local numbers = string.gsub(numbers, ']', '') -- remove brackets\n  local numbers\
    \ = string.gsub(number\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkvkoez2x.lua:37: ')' expected (to close '(' at line 36) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_n63knvh.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpejf2swru.lua:83: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpva4a0abj.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12s0rk2a.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp12s0rk2a.lua:8: in function 'candidate'\n\t/tmp/tmp12s0rk2a.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^| )' ..\
    \ sort_numbers.numbers_string .. '( |$)','\\\\2\\\\1')\n    local numbers_array\
    \ = numbers:gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%1'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%2'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%3'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%4'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%5'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%6'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%7'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%8'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%9'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%10'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%11'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%12'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%13'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%14'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%15'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%16'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |$)','%17'):gsub('(^| )' .. sort_numbers.numbers_string\
    \ .. '( |$)','%18'):gsub('(^| )' .. sort_numbers.numbers_string .. '( |$)','%19'):gsub('(^|\
    \ )' .. sort_numbers.numbers_string .. '( |\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaeftipe6.lua:8: unfinished string near ''( |'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1l8qfk8h.lua:36: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7jgiv7e.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local\
    \ numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local\
    \ numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d', ''):gsub('%w+', ''):\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgs06os_t.lua:26: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0tlw5ml_.lua:8: unfinished string near ''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeirnckm_.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2i3u9oj.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpp2i3u9oj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyb7_xpsv.lua:27: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxfrlcrge.lua:7: unfinished string near ''%d+%d+%d+%w+%d+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgo_sv7dl.lua:7: unfinished string near ''(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkfj8z2ne.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpetzii21f.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-',\
    \ '%%d-')\n  sorted_numbers = sorted_numbers:gsub('%d*', '%%d*')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d?', '%%d?')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-', '%%d-')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d*', '%%d*')\n  sorted_numbers = sorted_numbers:gsub('%d?',\
    \ '%%d?')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d-', '%%d-')\n  sorted_numbers = sorted_numbers:gsub('%d*',\
    \ '%%d*')\n  sorted_numbers = sorted_numbers:gsub('%d?', '%%d?')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-',\
    \ '%%d-')\n  sorted_numbers = sorted_numbers:gsub('%d*', '%%d*')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d?', '%%d?')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-', '%%d-')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d*', '%%d*')\n  sorted_numbers = sorted_numbers:gsub('%d?',\
    \ '%%d?')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d-', '%%d-')\n  sorted_numbers = sorted_numbers:gsub('%d*',\
    \ '%%d*')\n  sorted_numbers = sorted_numbers:gsub('%d?', '%%d?')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-',\
    \ '%%d-')\n  sorted_numbers = sorted_numbers:gsub('%d*', '%%d*')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d?', '%%d?')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%%d+')\n  sorted_numbers = sorted_numbers:gsub('%d-', '%%d-')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d*', '%%d*')\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjwrrophb.lua:51: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphlxyli72.lua:7: unfinished string near ''%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local number\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpecwi7ah1.lua:49: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(.-)( |$)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe8txb8rl.lua:24: unfinished string near ''(^| )(.-)( |$)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp340495og.lua:28: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)( %w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)(\
    \ %w+)','%2$1 %3 %4')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)(\
    \ %w+)','%2$1 %3 %4 %5')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)(\
    \ %w+)( %w+)','%2$1 %3 %4 %5 %6')\n  local numbers = numbers:gsub('( %w+)(%w+)(\
    \ %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7 %8')\n \
    \ local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)(\
    \ %w+)','%2$1 %3 %4 %5 %6 %7 %8 %9')\n  local numbers = numbers:gsub('( %w+)(%w+)(\
    \ %w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7 %8 %9 %10')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)(\
    \ %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt10slp77.lua:17: unfinished string near ''%2$1 %3 %4 %5 %6\
    \ '\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgkc6ipw.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpmgkc6ipw.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm0a3anq5.lua:7: unfinished string near ''(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5s1apw74.lua:7: unfinished string near ''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\\
    3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  \
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\\
    3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  \
    \  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbj6erunx.lua:23: unfinished string near ''(^|[%z])'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%3'):gsub('( )(.-)( )','%4'):gsub('( )(.-)(\
    \ )','%5'):gsub('( )(.-)( )','%6'):gsub('( )(.-)( )','%7'):gsub('( )(.-)( )','%8'):gsub('(\
    \ )(.-)( )','%9'):gsub('( )(.-)( )','%10'):gsub('( )(.-)( )','%11'):gsub('( )(.-)(\
    \ )','%12'):gsub('( )(.-)( )','%13'):gsub('( )(.-)( )','%14'):gsub('( )(.-)( )','%15'):gsub('(\
    \ )(.-)( )','%16'):gsub('( )(.-)( )','%17'):gsub('( )(.-)( )','%18'):gsub('( )(.-)(\
    \ )','%19'):gsub('( )(.-)( )','%20'):gsub('( )(.-)( )','%21'):gsub('( )(.-)( )','%22'):gsub('(\
    \ )(.-)( )','%23'):gsub('( )(.-)( )','%24'):gsub('( )(.-)( )','%25'):gsub('( )(.-)(\
    \ )','%26'):gsub('( )(.-)( )','%27'):gsub('( )(.-)( )','%28'):gsub('( )(.-)( )','%29'):gsub('(\
    \ )(.-)( )','%30'):gsub('( )(.-)( )','%31'):gsub('( )(.-)( )','%32'):gsub('( )(.-)(\
    \ )','%33'):gsub('( )(.-)( )','%34'):gsub('( )(.-)( )','%35'):gsub('( )(.-)( )','%36'):gsub('(\
    \ )(.-)( )','%37'):gsub('( )(.-)( )','%38'):gsub('( )(.-)( )','\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdc78z8_a.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9hxfc8rl.lua:36: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg9hpsmiu.lua:24: unfinished string near ''(^|[%z])(%d+)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. \" \"\
    \n  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqno57tjj.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpqno57tjj.lua:8: in function 'candidate'\n\t/tmp/tmpqno57tjj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxufmmkpp.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnkrmikqw.lua:24: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv11jwrpx.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpv11jwrpx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7x05j_3.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpf7x05j_3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd49a8j1f.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zuj40mn.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(' ')\n\
    \  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcjljev8.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmptcjljev8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9dmmldf4.lua:7: unfinished string near ''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngcn9ypa.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpngcn9ypa.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmparcibdjo.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpljjpxhye.lua:35: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fv45bif.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0fv45bif.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%4'):gsub('(^|\
    \ )(.-)( |$)','%5'):gsub('(^| )(.-)( |$)','%6'):gsub('(^| )(.-)( |$)','%7'):gsub('(^|\
    \ )(.-)( |$)','%8'):gsub('(^| )(.-)( |$)','%9'):gsub('(^| )(.-)( |$)','%0'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%3'):gsub('(^|\
    \ )(.-)( |$)','%4'):gsub('(^| )(.-)( |$)','%5'):gsub('(^| )(.-)( |$)','%6'):gsub('(^|\
    \ )(.-)( |$)','%7'):gsub('(^| )(.-)( |$)','%8'):gsub('(^| )(.-)( |$)','%9'):gsub('(^|\
    \ )(.-)( |$)','%0'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%4'):gsub('(^| )(.-)( |$)','%5'):gsub('(^|\
    \ )(.-)( |$)','%6'):gsub('(^| )(.-)( |$)','%7'):gsub('(^| )(.-)( |$)','%8'):gsub('(^|\
    \ )(.-)( |$)','%9'):gsub('(^| )(.-)( |$)','%0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjr4lvt10.lua:7: unfinished string near ''%0'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return first .. second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return second .. first\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return first ..\
    \ second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return first .. second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return second .. first\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return first ..\
    \ second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return first .. second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return second .. first\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return first ..\
    \ second\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp67e3olye.lua:59: ')' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb42uoi5l.lua:7: unfinished string near ''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 '):gsub('%w+( %w+)?', '\\1 \\2'):gsub('%w+( %w+)?%w+', '\\1 \\2 \\3'):gsub('%w+(\
    \ %w+)?%w+( %w+)?', '\\1 \\2 \\3 \\4'):gsub('%w+( %w+)?%w+( %w+)?%w+', '\\1 \\\
    2 \\3 \\4 \\5'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?', '\\1 \\2 \\3 \\4 \\5 \\\
    6'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+', '\\1 \\2 \\3 \\4 \\5 \\6 \\7'):gsub('%w+(\
    \ %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?', '\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8'):gsub('%w+(\
    \ %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+', '\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\\
    9'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+', '\\1 \\2 \\3 \\4 \\5 \\\
    6 \\7 \\8 \\9 \\10'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?',\
    \ '\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+(\
    \ %w+)?%w+( %w+)?%w+', '\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\10'):gsub('%w+(\
    \ %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+', '\\1 \\2 \\3 \\4 \\5 \\6\
    \ \\7 \\8 \\9 \\10'):gsub('%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( %w+)?%w+( \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_jjjs1wk.lua:7: unfinished string near ''%w+( %w+)?%w+( %w+)?%w+(\
    \ %w+)?%w+( %w+)?%w+( '\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp86gb8ker.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3\
    \ %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local\
    \ numbers = numbers:gsub('(^| )(%z+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )(%z+)( |$)','%2$1 %3 %4')\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi267g9re.lua:36: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpusmrnfca.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwg8hp53b.lua:31: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%w]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(numbers, '[%W]', '') --\
    \ Remove all non-digits\n  local numbers = string.gsub(number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmk05q0hf.lua:33: ')' expected (to close '(' at line 32) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkhu07waf.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  table.sort(numbers_array, function(a, b)\n\
    \    return a < b\n  end)\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku6lffa3.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpku6lffa3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1\
    \ %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1\
    \ %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1\
    \ %3 %2')\n  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %2')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcra_1gbc.lua:36: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpob1bqguv.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpddd4suuy.lua:9: unfinished string near ''(%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2a4mfuw1.lua:31: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej2h4p1s.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpej2h4p1s.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfrb2z1e.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '%', '')\
    \ -- Remove percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local number\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu9rkjexn.lua:49: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\
    \\2'):gsub('(%w+)( )', '\\\\2'):gsub('(%w+)( )', '\\\\2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ur33oy5.lua:7: unfinished string near ''\\2'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm2h_dqof.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpin7r_9xc.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw4m5snmc.lua:7: unfinished string near ''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_ktcma9.lua:7: unfinished string near ''( )(.-)( '\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptb7ny113.lua:30: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n\
    \    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1 %3 %4')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^|\
    \ )(%d+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n\
    \    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1 %3 %4')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^|\
    \ )(%d+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n\
    \    local numbers = numbers:gsub('(^| )(%d+)( |$)','%2$1 %3 %4')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzhyfp7sl.lua:24: unfinished string near ''('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqzfuqn_c.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntq8hzdg.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpntq8hzdg.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.-)','%2'):gsub('(.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkr5tuzio.lua:7: unfinished string near ''(.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)', '\\2\\3')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\\
    2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local\
    \ numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)',\
    \ '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n\
    \    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)',\
    \ '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n\
    \    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)',\
    \ '\\1\\2')\n    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n\
    \    local numbers = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(^| )([%d]+)( |$)', '\\1\\2')\n    local numbers = numbers:gsub('(^|\
    \ )([%d]+)( |$\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg0qh_yox.lua:26: unfinished string near ''(^| )([%d]+)( |$'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, '[^0-9]',\
    \ '')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$',\
    \ '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\\
    2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$',\
    \ '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\\
    2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)%s*(%d+)%s*$', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)%s*(%d+)%s*$',\
    \ '\\\\2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptxe51qb_.lua:27: unfinished string near ''\\2'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp8a2rwz6.lua:24: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mru_o2b.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp2mru_o2b.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptwokcy8d.lua:31: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpku8y0hyv.lua:35: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl3nqdxtx.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleh6wvfq.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpleh6wvfq.lua:8: in function 'candidate'\n\t/tmp/tmpleh6wvfq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = numbers_array[i]\n\
    \    local number_array = number.split(\".\")\n    local number_string = \"\"\n\
    \    for j = 1, #number_array do\n      number_string = number_string .. number_array[j]\n\
    \    end\n    local number_string_array = number_string.split(\" \")\n    local\
    \ number_string_array_sorted = {}\n    for j = 1, #number_string_array do\n  \
    \    table.insert(number_string_array_sorted, number_string_array[j])\n    end\n\
    \    table.sort(number_string_array_sorted)\n    for j = 1, #number_string_array_sorted\
    \ do\n      table.insert(sorted_numbers, number_string_array_sorted[j])\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp481zk17a.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp481zk17a.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxa4ij7ol.lua:17: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkpz4x1y0.lua:35: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxpx0od3w.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ds_58u1.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpba9v1u_t.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuqw961jv.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpenyyuhpn.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for i = 1, #numbers\
    \ do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n   \
    \   sorted_numbers = sorted_numbers + numbers[i]\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag5qxb0i.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpag5qxb0i.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdw8skkzd.lua:27: unfinished string near ''(%w+)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg36u1mf4.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpg36u1mf4.lua:8: in function 'candidate'\n\t/tmp/tmpg36u1mf4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([1-9])$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing minus sign\n  local numbers = number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4t44kl0a.lua:40: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    2'):gsub('(%w+)( )', '\\1'):gsub('( )', ''):gsub('(%w+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\3'):gsub('(%w+)(%w+)',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl3415ny5.lua:20: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8mxx2pte.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptl2wa_bj.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpev8xbn0g.lua:7: unfinished string near ''(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu00qqch0.lua:47: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxbp_3i_s.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3eqf2yva.lua:7: unfinished string near ''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqzpy3bpj.lua:51: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppm3tw424.lua:27: unfinished string near ''(%w+)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2iriaroj.lua:7: unfinished string near ''( )(.-)( '\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4abfsf48.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0ubclx4b.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxyn539w2.lua:7: unfinished string near ''%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ function(_, digits, number)\n    local digits = tonumber(digits)\n    if digits\
    \ == nil then\n      digits = tonumber(number)\n    end\n    if digits == nil\
    \ then\n      error('Invalid number')\n    end\n    return tonumber(number)\n\
    \  end)\n  table.sort(numbers)\n  return table.concat(numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdka1czc_.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpdka1czc_.lua:17: in function 'candidate'\n\t/tmp/tmpdka1czc_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):gsub('(.-)( )','%2'):gsub('(.-)','%2')\n  local\
    \ numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2'):\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppqkumexs.lua:14: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers:gsub('\
    \ ' .. number .. ' ', number .. ' ')\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4trh487i.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4trh487i.lua:8: in function 'candidate'\n\t/tmp/tmp4trh487i.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%+', '') -- Remove plus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percent signs\n  local numbers = string.gsub(numbers,\
    \ '%+%+', '') -- Remove double plus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local number\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkrh_rsjg.lua:45: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)',\
    \ '')\n  local numbers = numbers:gsub('([%z]+)$', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)$', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ '')\n  local numbers = numbers:gsub('(%z\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj6f9n9zc.lua:40: unfinished string near ''(%z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)',\
    \ '')\n  local numbers = numbers:gsub('([%z]+)$', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)', '')\n  local numbers = numbers:gsub('(%z+)',\
    \ ''):gsub('(%z)', ''):gsub('(%z+)', ''):gsub('(%z)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy3nb0ws6.lua:20: unfinished string near ''(%z)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', '%1\
    \ %2')\n    local numbers = numbers:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvqhhmt5p.lua:8: unfinished string near ''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n    local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- remove non-numbers\n    local numbers = string.gsub(numbers, '[%z\\- ]+',\
    \ '') -- remove multiple spaces\n    local numbers = string.gsub(numbers, '[%z\\\
    - ]+$', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '^%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z$', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z+', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove leading spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '') -- remove trailing spaces\n    local numbers = string.gsub(numbers,\
    \ '%z', '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv1lgjhrr.lua:34: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d', ''):gsub('%+d',\
    \ ''):gsub('%+d', ''):gsub('%+d', ''):gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7946twy9.lua:9: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yp671_4.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp1yp671_4.lua:8: in function 'candidate'\n\t/tmp/tmp1yp671_4.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwsecsvj.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpkwsecsvj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjz2u8nbl.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3gzcn8as.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf81dsujh.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpf81dsujh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2mhgohs3.lua:22: unfinished string near ''(^|[%z])('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', '')\n  local numbers = numbers:gsub('%d+%d+',\
    \ ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', '')\n  local numbers = numbers:gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', '')\n  local numbers = numbers:gsub('%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+',\
    \ '')\n  local numbers = numbers:gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', '')\n  local numbers = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmg0vxukm.lua:14: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0hl2vqv5.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxcwzapbt.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvzb5l8e.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpjvzb5l8e.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub('(^| )' .. sort_numbers\
    \ .. '( |$)','\\\\2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe0vv6ihv.lua:26: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy24zi9q3.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp24jkcz7j.lua:51: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = string.gsub(numbers, \" \", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \",\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \" \", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"-\", \"\")\n  local numbers = string.gsub(numbers, \"-\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"-\", \"\")\n  local numbers = string.g\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp23ep9iyu.lua:61: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n    local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- Remove non-numeric characters\n    local numbers = string.gsub(numbers, '%z',\
    \ '') -- Remove leading zeroes\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeroes\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z??',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z*',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z?',\
    \ '') -- Remove trailing zeros\n    local numbers = string.gsub(numbers, '%z+',\
    \ '') -- Remove trailing zeros\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa29ljzcp.lua:46: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_table do\n    local number\
    \ = tonumber(numbers_table[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + numbers_table[i]\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnf3r5gz.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpgnf3r5gz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplxmjzjyn.lua:7: unfinished string near ''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(' ')\n\
    \  local sorted_numbers = ''\n  for _, number in ipairs(numbers_array) do\n  \
    \  sorted_numbers = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6sk0jni.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpk6sk0jni.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5qlcss80.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_102pein.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpadvcp03_.lua:28: unfinished string near ''(^'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w',\
    \ '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n \
    \   local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n  \
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n   \
    \ local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n    local\
    \ numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n    local numbers =\
    \ numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w',\
    \ '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n \
    \   local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n  \
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n   \
    \ local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w', '')\n    local\
    \ numbers = numbers:gsub('%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm8wsfyro.lua:26: unfinished string near ''%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppnx3s9xj.lua:23: unfinished string near ''(^|[%z])'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers:gsub('%w',\
    \ number):gsub('%d', '%a')\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccdm_l_d.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpccdm_l_d.lua:8: in function 'candidate'\n\t/tmp/tmpccdm_l_d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvw98nt4.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpuvw98nt4.lua:8: in function 'candidate'\n\t/tmp/tmpuvw98nt4.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)', '\\\\2\\\
    \\1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4156_lh.lua:23: unfinished string near ''(^|[%z])(%d+)([%z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])$', '\\\\2\\\\3')\n  local \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5m1f8iy5.lua:36: 'end' expected (to close 'function' at line\
    \ 6) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjqliqq14.lua:23: unfinished string near ''(^| )([%z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:g\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph0x0hp_p.lua:29: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7bby2h9j.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1s7jbojf.lua:30: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnmav0i5l.lua:24: unfinished string near ''(^|[%z])(%d+)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers .. number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy5qur71.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpyy5qur71.lua:8: in function 'candidate'\n\t/tmp/tmpyy5qur71.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers_sorted = {}\n  for i = 1,\
    \ #numbers do\n    table.insert(numbers_sorted, tonumber(numbers[i]))\n  end\n\
    \  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73ymf1hi.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp73ymf1hi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpopmyghkz.lua:30: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmo0ijoke.lua:30: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplg0mmjx7.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.+)( |$)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8wkfznjw.lua:27: unfinished string near ''(^| )('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxtt3on3l.lua:28: unfinished string near ''(^'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, '[^0-9]+',\
    \ '')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers\
    \ = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers,\
    \ '(^|-)%w+', '\\1')\n  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n\
    \  local numbers = string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers =\
    \ string.gsub(numbers, '(^|-)%w+', '\\1')\n  local numbers = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8t80c9k1.lua:35: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n  local numbers = numbers:gsub('%d+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%1 %2', '%1')\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojjqkyv.lua:9:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpsojjqkyv.lua:9: in function\
    \ 'candidate'\n\t/tmp/tmpsojjqkyv.lua:16: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt2zawcmu.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):g\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7b_cl7kz.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mwawsi7.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4mwawsi7.lua:8: in function 'candidate'\n\t/tmp/tmp4mwawsi7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptx2yirkk.lua:7: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpie5x_6q4.lua:24: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    2'):gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(%w+)(%w+)', '\\2\\\
    3'):gsub('(%w+)%w+', '\\1')\n  local numbers = numbers:gsub('(%w+)%w+', '\\1')\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojecf5t9.lua:17:\
    \ expected: \"three\"\nactual: \"\x02\x03\"\nstack traceback:\n\t/tmp/tmpojecf5t9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5hlw5r2n.lua:24: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    sorted_numbers = sorted_numbers\
    \ + numbers_array[i]\n  end\n  table.sort(numbers_array)\n  for i = 1, #numbers_array\
    \ do\n    sorted_numbers = sorted_numbers + numbers_array[i]\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc22g3gd3.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpc22g3gd3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdgc9oyc3.lua:30: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp791bm33r.lua:7: unfinished string near ''%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + numbers_array[i]\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8ftomuu.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpp8ftomuu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1bepcmjq.lua:7: unfinished string near ''%d+%d+%d+%d+%d+%d+%d+%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_d4n2r8.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpq_d4n2r8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('(\
    \ )%w+','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1')\n  local numbers\
    \ = numbers:gsub('( )%w+( )','%2$1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp45rry8p_.lua:32: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for i = 1,\
    \ #numbers do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n\
    \      sorted_numbers = sorted_numbers + numbers[i]\n    end\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib6a6vn4.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpib6a6vn4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%w+%d+%d+%w+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjaqgiv8g.lua:7: unfinished string near ''%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03pi483s.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp03pi483s.lua:8: in function 'candidate'\n\t/tmp/tmp03pi483s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp99fkdggo.lua:8: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local numbers_array\
    \ = numbers.split(\" \")\n    for _, number in ipairs(numbers_array) do\n    \
    \    sorted_numbers = sorted_numbers .. number\n    end\n    return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb8ugpli.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmppb8ugpli.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjes1s9kw.lua:7: unfinished string near ''(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])'\n"
  exit_code: 1
  status: SyntaxError
