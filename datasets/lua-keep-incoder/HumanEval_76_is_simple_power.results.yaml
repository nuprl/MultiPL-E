name: HumanEval_76_is_simple_power
language: lua
results:
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnns_xtt.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfnns_xtt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4chmh_19.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4chmh_19.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tnrsyp1.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7tnrsyp1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    local is_simple_power_of_n = is_simple_power(x,\
    \ n-1)\n    return is_simple_power_of_n and x == n*n\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_a1t6t7.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_a1t6t7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfsou27q6.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    n = n / 2\n  end\n  return r == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  if x % n == 0 then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1it4ztfd.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1it4ztfd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxax8kfp.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgxax8kfp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    local m\
    \ = math.floor(x/n)\n    if m == n then\n      return true\n    end\n    if m\
    \ > n then\n      return false\n    end\n    x = m\n    i = i + 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewgdjg3n.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpewgdjg3n.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikwbaw3x.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpikwbaw3x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx_jygtv.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdx_jygtv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpslq1cc04.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x %\
    \ n == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_xm6ynr.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7_xm6ynr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylt0ydx_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpylt0ydx_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  if n % 3\
    \ == 0 then\n    return is_simple_power(x, n / 3)\n  end\n  if n % 5 == 0 then\n\
    \    return is_simple_power(x, n / 5)\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbxo5p8x.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvbxo5p8x.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6j8bx2z.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq6j8bx2z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ob72gez.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ob72gez.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 2\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt574tioj.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt574tioj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ x == 1 end\n  if n == 2 then return x == x end\n  if n % 2 == 0 then\n    return\
    \ is_simple_power(x, n / 2) and\n           is_simple_power(x, n / 2)\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iw2rs24.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3iw2rs24.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return x == n\
    \ end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return is_simple_power(x\
    \ * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i1zcaxb.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_i1zcaxb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ x == n^int(x)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa05ktj_u.lua:15:\
    \ attempt to call global 'int' (a nil value)\nstack traceback:\n\t/tmp/tmpa05ktj_u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujuq1ok9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpujuq1ok9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (is_simple_power(x, n-1) and is_simple_power(x, n-1))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzca13bk.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvzca13bk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.006 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo2y1orc_.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n < 0 then\n    return false\n  end\n  local\
    \ x_pow = math.pow(x, n)\n  return x_pow == x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ojnqzqs.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ojnqzqs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n > 1 do\n    r = r *\
    \ x\n    n = n - 1\n  end\n  return r == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt68go67.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjt68go67.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * 2\n  end\n  return x == power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48061v94.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp48061v94.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ef6rfp5.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3ef6rfp5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t15cy26.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5t15cy26.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.pow(x, n)==x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdibtr38.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkdibtr38.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return is_simple_power(x\
    \ / n, n)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4g9jdbh.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd4g9jdbh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n ~= x\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * 2\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tarfctl.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1tarfctl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjslc71k3.lua:168: 'end' expected (to close 'if' at line 150)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa76cik0d.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa76cik0d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8qyms734.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return is_simple_power(x\
    \ / n, n)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6c8yi3q.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu6c8yi3q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ * x, n / 2)\n  end\n  return is_simple_power(x * x, (n - 1) / 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3s21nlh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi3s21nlh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqr6h303k.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy44wns2v.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy44wns2v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x ~= n then\n    return false\n  end\n \
    \ if n % 2 == 1 then\n    return false\n  end\n  if n % 4 == 1 then\n    return\
    \ false\n  end\n  if n % 8 == 1 then\n    return false\n  end\n  if n % 16 ==\
    \ 1 then\n    return false\n  end\n  if n % 32 == 1 then\n    return false\n \
    \ end\n  if n % 64 == 1 then\n    return false\n  end\n  if n % 128 == 1 then\n\
    \    return false\n  end\n  if n % 256 == 1 then\n    return false\n  end\n  if\
    \ n % 512 == 1 then\n    return false\n  end\n  if n % 1024 == 1 then\n    return\
    \ false\n  end\n  if n % 2048 == 1 then\n    return false\n  end\n  if n % 4096\
    \ == 1 then\n    return false\n  end\n  if n % 8192 == 1 then\n    return false\n\
    \  end\n  if n % 16384 == 1 then\n    return false\n  end\n  if n % 32768 == 1\
    \ then\n    return false\n  end\n  if n % 65536 == 1 then\n    return false\n\
    \  end\n  if n % 131072 == 1 then\n    return false\n  end\n  if n % 262144 ==\
    \ 1 then\n    return false\n  end\n  if n % 524288 == 1 then\n    return false\n\
    \  end\n  if n % 1048576 == 1 then\n    return false\n  end\n  if n % 2097152\
    \ == 1 then\n    return false\n  end\n  if n % 4194304 == 1 then\n    return false\n\
    \  end\n  if n % 8388608 == 1 then\n    return false\n  end\n  if n % 16777216\
    \ == 1 then\n    return false\n  end\n  if n % 33554432 == 1 then\n    return\
    \ false\n  end\n  if n % 67108864 == 1 then\n    return false\n  end\n  if n %\
    \ 134217728 == 1 then\n    return false\n  end\n  if n % 268435456 == 1 then\n\
    \    return false\n  end\n  if n % 536870912 == 1 then\n    return false\n  end\n\
    \  if n % 1073741824 == 1 then\n    return false\n  end\n  if n % 2147483648 ==\
    \ 1 then\n    return false\n  end\n  if n % 4294967296 == 1 then\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklzp82dg.lua:123:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpklzp82dg.lua:123:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == 1 then\n    return x == 1\n  end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x * x, n / 2)\n  end\n  return\
    \ is_simple_power(x * x, (n - 1) / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyd8m9u22.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyd8m9u22.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yj8htpt.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4yj8htpt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44ho3mra.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp44ho3mra.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if n == 1 then return true end\n \
    \ if n == 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9836ssg3.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return not n or x == n^n or x == n*n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslhwveax.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpslhwveax.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp991i6bji.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp991i6bji.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x % n == 0 then\n    return false\n  end\n\
    \  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3778bsi_.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3778bsi_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  elseif n == 0 then\n    return false\n  else\n    return\
    \ is_simple_power(x, n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5iq1rot.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk5iq1rot.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu_zybis.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxu_zybis.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x^n, n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtn4banr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqtn4banr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then return true end\n \
    \ if x == 0 then return false end\n  if n == 0 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpei7xc91x.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * 2\n  end\n  return x == power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0cvthht.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn0cvthht.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsl8js9vm.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then return true end\n \
    \ if x == 0 then return false end\n  if n == 0 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zmrw10u.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x * x, n)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s5xht_7.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5s5xht_7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfvp7h5o3.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9euwh_t.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu9euwh_t.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67ukdi8t.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp67ukdi8t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a35vint.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0a35vint.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == -1 then return false end\n  if n == -2 then return false\
    \ end\n  if n == -3 then return false end\n  if n == -4 then return false end\n\
    \  if n == -5 then return false end\n  if n == -6 then return false end\n  if\
    \ n == -7 then return false end\n  if n == -8 then return false end\n  if n ==\
    \ -9 then return false end\n  if n == -10 then return false end\n  if n == -11\
    \ then return false end\n  if n == -12 then return false end\n  if n == -13 then\
    \ return false end\n  if n == -14 then return false end\n  if n == -15 then return\
    \ false end\n  if n == -16 then return false end\n  if n == -17 then return false\
    \ end\n  if n == -18 then return false end\n  if n == -19 then return false end\n\
    \  if n == -20 then return false end\n  if n == -21 then return false end\n  if\
    \ n == -22 then return false end\n  if n == -23 then return false end\n  if n\
    \ == -24 then return false end\n  if n == -25 then return false end\n  if n ==\
    \ -26 then return false end\n  if n == -27 then return false end\n  if n == -28\
    \ then return false end\n  if n == -29 then return false end\n  if n == -30 then\
    \ return false end\n  if n == -31 then return false end\n  if n == -32 then return\
    \ false end\n  if n == -33 then return false end\n  if n == -34 then return false\
    \ end\n  if n == -35 then return false end\n  if n == -36 then return false end\n\
    \  if n == -37 then return false end\n  if n == -38 then return false end\n  if\
    \ n == -39 then return false end\n  if n == -40 then return false end\n  if n\
    \ == -41 then return false end\n  if n == -42 then return false end\n  if n ==\
    \ -43 then return false end\n  if n == -44 then return false end\n  if n == -45\
    \ then return false end\n  if n == -46 then return false end\n  if n == -47 then\
    \ return false end\n  if n == -48 then return false end\n  if n == -49 then return\
    \ false end\n  if n == -50 then return false end\n  if n == -51 then return false\
    \ end\n  if n == -52 then return false end\n  if n == -53 then return false end\n\
    \  if n == -54 then return false end\n  if n == -\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphw3f5i31.lua:69: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x^n, n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x48o9ud.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5x48o9ud.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n < 0 then\n    return false\n  end\n  if x == 0 then\n    return false\n\
    \  end\n  if x == 1 then\n    return true\n  end\n  if x == -1 then\n    return\
    \ false\n  end\n  if x == -2 then\n    return true\n  end\n  if x == -3 then\n\
    \    return false\n  end\n  if x == -4 then\n    return true\n  end\n  if x ==\
    \ -5 then\n    return false\n  end\n  if x == -6 then\n    return true\n  end\n\
    \  if x == -7 then\n    return false\n  end\n  if x == -8 then\n    return true\n\
    \  end\n  if x == -9 then\n    return false\n  end\n  if x == -10 then\n    return\
    \ true\n  end\n  if x == -11 then\n    return false\n  end\n  if x == -12 then\n\
    \    return true\n  end\n  if x == -13 then\n    return false\n  end\n  if x ==\
    \ -14 then\n    return true\n  end\n  if x == -15 then\n    return false\n  end\n\
    \  if x == -16 then\n    return true\n  end\n  if x == -17 then\n    return false\n\
    \  end\n  if x == -18 then\n    return true\n  end\n  if x == -19 then\n    return\
    \ false\n  end\n  if x == -20 then\n    return true\n  end\n  if x == -21 then\n\
    \    return false\n  end\n  if x == -22 then\n    return true\n  end\n  if x ==\
    \ -23 then\n    return false\n  end\n  if x == -24 then\n    return true\n  end\n\
    \  if x == -25 then\n    return false\n  end\n  if x == -26 then\n    return true\n\
    \  end\n  if x == -27 then\n    return false\n  end\n  if x == -28 then\n    return\
    \ true\n  end\n  if x == -29 then\n    return false\n  end\n  if x == -30 then\n\
    \    return true\n  end\n  if x == -31 then\n    return false\n  end\n  if x ==\
    \ -32 then\n    return true\n  end\n  if x == -33 then\n    return false\n  end\n\
    \  if x == -34 then\n    return true\n  end\n  if x == -35 then\n    return false\n\
    \  end\n  if x == -36 then\n    return true\n  end\n  if x == -37 then\n    return\
    \ false\n  end\n  if x == -38 then\n    return true\n  end\n  if x == -39 then\n\
    \    return false\n  end\n  if x == -40 then\n    return true\n  end\n  if x ==\
    \ -41 then\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfhivt494.lua:169: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == 0\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if n == 1 then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfou60qu.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqfou60qu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmput4iwdbf.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (x%n == 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7_o1ssz.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps7_o1ssz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ n\n    n = n / 2\n  end\n  return x == r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc81brg3b.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc81brg3b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg56aa210.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg56aa210.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l9m453a.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9l9m453a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ * x, n / 2)\n  else\n    return is_simple_power(x * x, (n - 1) / 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo1h0qq1.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjo1h0qq1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x * x, n)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4akbxcs.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4akbxcs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihwsq5e9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpihwsq5e9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n % 2 == 1 then\n    return false\n  end\n\
    \  local i = 3\n  while i <= n do\n    if x % i == 0 then\n      return false\n\
    \    end\n    i = i * 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5hk9mk5.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv5hk9mk5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2arovpf3.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2arovpf3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x^n, n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7mu3w73.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj7mu3w73.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while n > power do\n   \
    \ power = power * 2\n  end\n  local result = true\n  local i = 1\n  while i <=\
    \ power do\n    if x % i == 0 then\n      result = false\n      break\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr21oobqw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr21oobqw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq_w1bc9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsq_w1bc9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2mfcf1p.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm2mfcf1p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n == x or (n <= x and n%x == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fd_rxzw.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9fd_rxzw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == n\
    \ then\n    return true\n  end\n  if n <= 0 then\n    return false\n  end\n  if\
    \ n == 1 then\n    return true\n  end\n  if x == x then\n    return true\n  end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyypqjxgq.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyypqjxgq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  return\
    \ is_simple_power(x, n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwpn3mbo.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbwpn3mbo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n < 0 then\n    return false\n  end\n  if x < 1 then\n    return false\n\
    \  end\n  if x == 1 then\n    return true\n  end\n  if x == 0 then\n    return\
    \ false\n  end\n  if x == -1 then\n    return false\n  end\n  if x == -2 then\n\
    \    return false\n  end\n  if x == -3 then\n    return false\n  end\n  if x ==\
    \ -4 then\n    return false\n  end\n  if x == -5 then\n    return false\n  end\n\
    \  if x == -6 then\n    return false\n  end\n  if x == -7 then\n    return false\n\
    \  end\n  if x == -8 then\n    return false\n  end\n  if x == -9 then\n    return\
    \ false\n  end\n  if x == -10 then\n    return false\n  end\n  if x == -11 then\n\
    \    return false\n  end\n  if x == -12 then\n    return false\n  end\n  if x\
    \ == -13 then\n    return false\n  end\n  if x == -14 then\n    return false\n\
    \  end\n  if x == -15 then\n    return false\n  end\n  if x == -16 then\n    return\
    \ false\n  end\n  if x == -17 then\n    return false\n  end\n  if x == -18 then\n\
    \    return false\n  end\n  if x == -19 then\n    return false\n  end\n  if x\
    \ == -20 then\n    return false\n  end\n  if x == -21 then\n    return false\n\
    \  end\n  if x == -22 then\n    return false\n  end\n  if x == -23 then\n    return\
    \ false\n  end\n  if x == -24 then\n    return false\n  end\n  if x == -25 then\n\
    \    return false\n  end\n  if x == -26 then\n    return false\n  end\n  if x\
    \ == -27 then\n    return false\n  end\n  if x == -28 then\n    return false\n\
    \  end\n  if x == -29 then\n    return false\n  end\n  if x == -30 then\n    return\
    \ false\n  end\n  if x == -31 then\n    return false\n  end\n  if x == -32 then\n\
    \    return false\n  end\n  if x == -33 then\n    return false\n  end\n  if x\
    \ == -34 then\n    return false\n  end\n  if x == -35 then\n    return false\n\
    \  end\n  if x == -36 then\n    return false\n  end\n  if x == -37 then\n    return\
    \ false\n  end\n  if x == -38 then\n    return false\n  end\n  if x == -39 then\n\
    \    return false\n  end\n  if x == -40 then\n    return false\n  end\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnmd0jyzc.lua:170: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7mv9zkz.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo7mv9zkz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == 0\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if n == 1 then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusvril2w.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpusvril2w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x\
    \ * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce7eulxd.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpce7eulxd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i < n do\n    if x%n ==\
    \ 0 then\n      return false\n    end\n    x = x/n\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg32z16t5.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg32z16t5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z3n15ea.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2z3n15ea.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n % 2 == 0 then return is_simple_power(x^n, n/2) end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4ldgnc_.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe4ldgnc_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return n == 1\n\
    \  elseif x == n then\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnn2v8jq1.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == 0\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if n == 1 then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtllr385.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprtllr385.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local y = 1\n  while y < n do\n    if x % n\
    \ == 0 then\n      return false\n    end\n    y = y * n\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgrz_k5e.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppgrz_k5e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    local t\
    \ = x * x\n    if t < n then\n      return false\n    end\n    x = t\n    i =\
    \ i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbriciuk5.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbriciuk5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ / 2, n) or is_simple_power(x, n / 2)\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1qxwb2a.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\
    \t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\t/tmp/tmpj1qxwb2a.lua:19:\
    \ in function 'is_simple_power'\n\t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\
    \t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\t/tmp/tmpj1qxwb2a.lua:19:\
    \ in function 'is_simple_power'\n\t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\
    \t/tmp/tmpj1qxwb2a.lua:19: in function 'is_simple_power'\n\t/tmp/tmpj1qxwb2a.lua:19:\
    \ in function 'is_simple_power'\n\t...\n\nRan 1 tests in 0.152 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3w5kl5e.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm3w5kl5e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if x == 0 then\n    return false\n  end\n  if x == 1 then\n    return true\n\
    \  end\n  if x == -1 then\n    return false\n  end\n  if x == -2 then\n    return\
    \ false\n  end\n  if x == -3 then\n    return false\n  end\n  if x == -4 then\n\
    \    return false\n  end\n  if x == -5 then\n    return false\n  end\n  if x ==\
    \ -6 then\n    return false\n  end\n  if x == -7 then\n    return false\n  end\n\
    \  if x == -8 then\n    return false\n  end\n  if x == -9 then\n    return false\n\
    \  end\n  if x == -10 then\n    return false\n  end\n  if x == -11 then\n    return\
    \ false\n  end\n  if x == -12 then\n    return false\n  end\n  if x == -13 then\n\
    \    return false\n  end\n  if x == -14 then\n    return false\n  end\n  if x\
    \ == -15 then\n    return false\n  end\n  if x == -16 then\n    return false\n\
    \  end\n  if x == -17 then\n    return false\n  end\n  if x == -18 then\n    return\
    \ false\n  end\n  if x == -19 then\n    return false\n  end\n  if x == -20 then\n\
    \    return false\n  end\n  if x == -21 then\n    return false\n  end\n  if x\
    \ == -22 then\n    return false\n  end\n  if x == -23 then\n    return false\n\
    \  end\n  if x == -24 then\n    return false\n  end\n  if x == -25 then\n    return\
    \ false\n  end\n  if x == -26 then\n    return false\n  end\n  if x == -27 then\n\
    \    return false\n  end\n  if x == -28 then\n    return false\n  end\n  if x\
    \ == -29 then\n    return false\n  end\n  if x == -30 then\n    return false\n\
    \  end\n  if x == -31 then\n    return false\n  end\n  if x == -32 then\n    return\
    \ false\n  end\n  if x == -33 then\n    return false\n  end\n  if x == -34 then\n\
    \    return false\n  end\n  if x == -35 then\n    return false\n  end\n  if x\
    \ == -36 then\n    return false\n  end\n  if x == -37 then\n    return false\n\
    \  end\n  if x == -38 then\n    return false\n  end\n  if x == -39 then\n    return\
    \ false\n  end\n  if x == -40 then\n    return false\n  end\n  if x == -41 then\n\
    \    return false\n  end\n  if x == -42 then\n    return false\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6_5r1r2g.lua:153: 'end' expected (to close 'if' at line 150)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return is_simple_power(x\
    \ / n, n)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa62y3vx4.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa62y3vx4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n == 0 then\n    return false\n  end\n  if n < 0 then\n    return false\n  end\n\
    \  local i = 1\n  while i <= n do\n    if x % n == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpircjipph.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpircjipph.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    local x_squared = x * x\n    return x_squared\
    \ % n == 0 and x_squared / n == x\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0080czg.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0080czg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  elseif x == n then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ddf2bm_.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ddf2bm_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return x == n\
    \ end\n  if n == -1 then return x == n end\n  if n == -1 then return x == n end\n\
    \  if n == -2 then return x == n end\n  if n == -3 then return x == n end\n  if\
    \ n == -4 then return x == n end\n  if n == -5 then return x == n end\n  if n\
    \ == -6 then return x == n end\n  if n == -7 then return x == n end\n  if n ==\
    \ -8 then return x == n end\n  if n == -9 then return x == n end\n  if n == -10\
    \ then return x == n end\n  if n == -11 then return x == n end\n  if n == -12\
    \ then return x == n end\n  if n == -13 then return x == n end\n  if n == -14\
    \ then return x == n end\n  if n == -15 then return x == n end\n  if n == -16\
    \ then return x == n end\n  if n == -17 then return x == n end\n  if n == -18\
    \ then return x == n end\n  if n == -19 then return x == n end\n  if n == -20\
    \ then return x == n end\n  if n == -21 then return x == n end\n  if n == -22\
    \ then return x == n end\n  if n == -23 then return x == n end\n  if n == -24\
    \ then return x == n end\n  if n == -25 then return x == n end\n  if n == -26\
    \ then return x == n end\n  if n == -27 then return x == n end\n  if n == -28\
    \ then return x == n end\n  if n == -29 then return x == n end\n  if n == -30\
    \ then return x == n end\n  if n == -31 then return x == n end\n  if n == -32\
    \ then return x == n end\n  if n == -33 then return x == n end\n  if n == -34\
    \ then return x == n end\n  if n == -35 then return x == n end\n  if n == -36\
    \ then return x == n end\n  if n == -37 then return x == n end\n  if n == -38\
    \ then return x == n end\n  if n == -39 then return x == n end\n  if n == -40\
    \ then return x == n end\n  if n == -41 then return x == n end\n  if n == -42\
    \ then return x == n end\n  if n == -43 then return x == n end\n  if n == -44\
    \ then return x == n end\n  if n == -45 then return x == n end\n  if n == -46\
    \ then return x == n end\n  if n == -47 then return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdhrs69y6.lua:64: 'end' expected (to close 'if' at line 63)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then return true end\n \
    \ if x == 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfnz0t5zj.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if x == 1 then return\
    \ false end\n  if x == n then return true end\n  if n % 2 == 0 then\n    return\
    \ is_simple_power(x, n / 2)\n  else\n    return is_simple_power(x * x, n / 2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqlismhe.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkqlismhe.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ true end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  if x\
    \ % n == 0 then return true end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mg3yy4q.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0mg3yy4q.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == n\
    \ then\n    return true\n  end\n  if x % n == 0 then\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2cy8g0y.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm2cy8g0y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnu4_a66t.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x^n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y16oq59.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3y16oq59.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhsm2r1g.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjhsm2r1g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjpf4b3_.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptjpf4b3_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if n == 1\
    \ then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9ieid_8.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_9ieid_8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then return true end\n \
    \ if x == 0 then return false end\n  if n == 0 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpne87dijf.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik5rkj3p.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpik5rkj3p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i * i <= x do\n    if\
    \ x % i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50n0fwsd.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp50n0fwsd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n == 2 then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb71v7mom.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb71v7mom.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == 1 then return x == n end\n  if n % 2 == 0 then return is_simple_power(x\
    \ * x, n / 2) end\n  return is_simple_power(x * x, n / 2) or is_simple_power(x\
    \ * x, n / 2) or is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u0m47pe.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_u0m47pe.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qu_gjs_.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9qu_gjs_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x%n, n-1) or is_simple_power(x,\
    \ n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohoee79b.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpohoee79b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5yfjf2e.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj5yfjf2e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkbpm19q.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkkbpm19q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x%n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqiivsoy.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiqiivsoy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1881hzm3.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1881hzm3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82jl4vhe.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp82jl4vhe.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if x == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ / 2, n-1)\n  end\n  return is_simple_power(x, n-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tiblsqx.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2tiblsqx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x^n, n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdz3f80s.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvdz3f80s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if x == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wyoy2mn.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9wyoy2mn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ x == n**int(x) and is_simple_power(x, n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm4mirqk7.lua:15: unexpected symbol near '*'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if x == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  if n % 3 == 0 then\n    return is_simple_power(x, n / 3)\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e6c7_1v.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1e6c7_1v.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lwl4smk.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3lwl4smk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n <= 1 then\n    return x == 1\n  end\n\
    \  if x == 1 then\n    return false\n  end\n  if x == 0 then\n    return false\n\
    \  end\n  if n % 2 == 1 then\n    return false\n  end\n  local i = 1\n  while\
    \ i * i <= n do\n    if x % i == 0 then\n      return false\n    end\n    i =\
    \ i * 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ekjwdk2.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ekjwdk2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 2\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhzkbhqf.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxhzkbhqf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * 2\n  end\n  return x == power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvmxfbfg.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuvmxfbfg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == -1 then return false end\n  if n % 2 == 0 then return is_simple_power(x,\
    \ n / 2) end\n  if n % 3 == 0 then return is_simple_power(x, n / 3) end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnu9mndb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgnu9mndb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 1 then\n    return false\n  end\n\
    \  if x % n == 0 then\n    return true\n  end\n  return is_simple_power(x / n,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz3drzhb.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiz3drzhb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3sy0o8e.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe3sy0o8e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawga7_ic.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpawga7_ic.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * 2\n  end\n  return x == power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0s6ac3m.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe0s6ac3m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfsbt3cj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwfsbt3cj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ n\n    n = n / 2\n  end\n  return x == r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fq49cqv.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0fq49cqv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n > 1 do\n    r = r *\
    \ x\n    n = n - 1\n  end\n  return r == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2dba8ns.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv2dba8ns.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (is_simple_power(x, n-1) and is_simple_power(x, n-2))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb_zdkpa.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\
    \t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\t/tmp/tmpzb_zdkpa.lua:15:\
    \ in function 'is_simple_power'\n\t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\
    \t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\t/tmp/tmpzb_zdkpa.lua:15:\
    \ in function 'is_simple_power'\n\t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\
    \t/tmp/tmpzb_zdkpa.lua:15: in function 'is_simple_power'\n\t/tmp/tmpzb_zdkpa.lua:15:\
    \ in function 'is_simple_power'\n\t...\n\nRan 1 tests in 0.151 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_ili0zw.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq_ili0zw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return n == 1\n\
    \  elseif x == 0 then\n    return false\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp68b2xys5.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x\
    \ * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx81ykjn.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwx81ykjn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbmjy2l75.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr85n5sfo.lua:168: 'end' expected (to close 'if' at line 150)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n ~= x\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu02o9dh9.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu02o9dh9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8y414h2b.lua:168: 'end' expected (to close 'if' at line 150)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcstc05x.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphcstc05x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpha0so8k2.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpha0so8k2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6vp9lo9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf6vp9lo9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == 1) or (x == n) or (x == n*n)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_9xntn8.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9_9xntn8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  if n % 3 == 0 then\n    return is_simple_power(x, n / 3)\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d_qhy51.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3d_qhy51.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhukn9op.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplhukn9op.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  else\n    return is_simple_power(x^n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return true end\n\
    \  if n % 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n\
    \  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n\
    \  if n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 123 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzyqx1ihu.lua:65: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvswylbtp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvswylbtp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    i = i *\
    \ 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3mg7480.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg3mg7480.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q3q6cm0.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_q3q6cm0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5v3p1m.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3s5v3p1m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz65x70j1.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz65x70j1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjtutvf9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwjtutvf9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2qyfjoc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz2qyfjoc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    x = n / x\n    n = x\n  end\n  return r == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi4cipjt.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyi4cipjt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  else\n    return is_simple_power(x * x, n)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqujct6ty.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqujct6ty.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return true end\n  if n == 1 then return\
    \ x == 1 end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0y10j9b.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv0y10j9b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  if x % n\
    \ == 0 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8_dk_j_.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj8_dk_j_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return n == 1\n\
    \  elseif x == 0 then\n    return false\n  else\n    -- Recursion\n    return\
    \ is_simple_power(x^n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
