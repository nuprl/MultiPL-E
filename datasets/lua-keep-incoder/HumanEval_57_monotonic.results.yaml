name: HumanEval_57_monotonic
language: lua
results:
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] > l[j] then\n      return helper(l, i + 1, j)\n    elseif l[i]\
    \ < l[j] then\n      return helper(l, i, j - 1)\n    else\n      return helper(l,\
    \ i + 1, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9f3u11oc.lua:29:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9f3u11oc.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[j-1] < l[i] then\n      return true\n \
    \   end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2ancgeq.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpj2ancgeq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    while j <= n do\n      if l[j] < l[i] then\n        j\
    \ = j + 1\n      elseif l[j] > l[i] then\n        k = k + 1\n      else\n    \
    \    i = i + 1\n        j = j + 1\n      end\n    end\n    if k > m then\n   \
    \   m = k\n    end\n    k = k + 1\n  end\n  return m <= n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp84ne5vq.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpp84ne5vq.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if x > y\
    \ then\n      if w < m then\n        m = w\n      end\n      k = j + 1\n    elseif\
    \ x < y then\n      if w > m then\n        m = w\n      end\n      k = j + 1\n\
    \    else\n      k = j + 1\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return\
    \ m == l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7whhgfcl.lua:41:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7whhgfcl.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      m = v\n  \
    \  elseif v > m then\n      j = j + 1\n      m = v\n    end\n    i = i + 1\n \
    \ end\n  return k > j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx96cz0m9.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx96cz0m9.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    local m = m + 1\n        n = n + 1\n      end\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphq5n339h.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmphq5n339h.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsn1e_llm.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpsn1e_llm.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while m > k do\n      k = k - 1\n      if l[k] < l[m] then return\
    \ false end\n      m = m - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp28hs9jsh.lua:16:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmp28hs9jsh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    if x > m then\n      k = k + 1\n      if k > 1 then\n\
    \        if l[j] < m then\n          return false\n        end\n      else\n \
    \       if l[j] == m then\n          return true\n        end\n      end\n   \
    \ end\n    i = i + 1\n    j = j + 1\n    m = x\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetovfw2l.lua:37:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpetovfw2l.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n    elseif v > m\
    \ then\n      j = j + 1\n    else\n      if k < j then\n        k = k + 1\n  \
    \    else\n        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ k == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjtvqjamr.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjtvqjamr.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = 0\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxar3ug_v.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxar3ug_v.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ last_monotonic = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j\
    \ = nil\n  local last_monotonic_k = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monoton\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp06e98ycx.lua:82: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if x > y\
    \ then\n      if w < x then\n        return false\n      else\n        j = k\n\
    \      end\n    else\n      if w > x then\n        return false\n      else\n\
    \        k = k + 1\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz4ctzv0.lua:41:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpfz4ctzv0.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < first then\n      return false\n    end\n    first = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj9i632yt.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj9i632yt.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzahzk9kz.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpzahzk9kz.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        local t = l[k]\n        l[k]\
    \ = l[k + 1]\n        l[k + 1] = t\n      end\n      k = k + 1\n    end\n    i\
    \ = i + 1\n  end\n  return l[1] < l[2]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyy_m333l.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpyy_m333l.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_l4vgt6d.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp_l4vgt6d.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6c6ncona.lua:26:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6c6ncona.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then return false end\n\
    \      m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpresmngkn.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmpresmngkn.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl03p9_6t.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpl03p9_6t.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  while i <= #l do\n    local element = l[i]\n    if element < l[j]\
    \ then\n      j = k\n    elseif element > l[j] then\n      if monotonic == false\
    \ then\n        -- Return false if list elements are not monotonically increasing\
    \ or decreasing.\n        return false\n      end\n      k = j\n    else\n   \
    \   i = j + 1\n      j = k + 1\n      k = j + 1\n      monotonic = monotonic\n\
    \    end\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09p6ohxq.lua:15:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp09p6ohxq.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~=\
    \ 0 then\n      if x < y then\n        return false\n      elseif x > y then\n\
    \        return true\n      elseif w < m then\n        return true\n      else\n\
    \        return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k\
    \ = k + 1\n    m = m + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpufdqx2ov.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpufdqx2ov.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      if k > 1 then\n\
    \        if l[j] < m then\n          k = k - 1\n        end\n      end\n     \
    \ j = j + 1\n    end\n    i = i + 1\n    m = v\n  end\n  return j > k\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpajroq2zt.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpajroq2zt.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n      end\n      if l[n] >\
    \ l[m] then\n        local t = l[n]\n        l[n] = l[m]\n        l[m] = t\n \
    \     end\n      m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return l[1] < l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk4xbf7mw.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpk4xbf7mw.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjd7iuvgz.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpjd7iuvgz.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp54tg_h_f.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp54tg_h_f.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ min_value = nil\n  local max_value = nil\n  local min_element = nil\n  local\
    \ max_element = nil\n  local min_element_value = nil\n  local max_element_value\
    \ = nil\n  local min_element_index = nil\n  local max_element_index = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_count\
    \ = nil\n  local max_element_count = nil\n  local min_element_count = nil\n  local\
    \ max_element_count = nil\n  local min_element_count = nil\n  local max_element_count\
    \ = nil\n  local min_element_count = nil\n  local max_element_count = nil\n  local\
    \ min_element_count = nil\n  local max_element_count = nil\n  local min_element_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpihlpskkb.lua:98: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnpli388.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmphnpli388.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppgosjuyd.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmppgosjuyd.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      if k > 1 then\n\
    \        local m = l[j]\n      end\n      m = v\n    end\n    i = i + 1\n    j\
    \ = j + 1\n  end\n  return k > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4t8_em44.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4t8_em44.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      k = k + 1\n      if k < #l then\n        local m = l[k]\n\
    \        local n = l[k]\n        if m > n then\n          return false\n     \
    \   end\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw0vu6166.lua:42:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpw0vu6166.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j + 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60q4_tut.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp60q4_tut.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmw6zyfz.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmphmw6zyfz.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    if x > m then\n      k = k + 1\n      m = x\n  \
    \  elseif x < m then\n      if k ~= j then\n        return false\n      end\n\
    \      k = k + 1\n      m = x\n    else\n      j = j + 1\n    end\n    i = i +\
    \ 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5zytr_mz.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5zytr_mz.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_decreasing(a, b)\n    return a < b\n  end\n  local function\
    \ is_increasing(a, b)\n    return a > b\n  end\n  local function is_monotonic(a,\
    \ b)\n    return is_decreasing(a, b) or is_increasing(a, b)\n  end\n  local function\
    \ is_strictly_increasing(a, b)\n    return a <= b\n  end\n  local function is_strictly_decreasing(a,\
    \ b)\n    return a >= b\n  end\n  local function is_strictly_monotonic(a, b)\n\
    \    return is_strictly_decreasing(a, b) or is_strictly_increasing(a, b)\n  end\n\
    \  local function is_strictly_monotonic_strictly_decreasing(a, b)\n    return\
    \ is_strictly_decreasing(a, b) and is_strictly_increasing(a, b)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_increasing(a, b)\n    return is_strictly_increasing(a,\
    \ b) and is_strictly_decreasing(a, b)\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(a,\
    \ b)\n    return is_strictly_decreasing(a, b) and is_strictly_increasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(a,\
    \ b)\n    return is_strictly_increasing(a, b) and is_strictly_decreasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(a,\
    \ b)\n    return is_strictly_decreasing(a, b) and is_strictly_increasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing(a,\
    \ b)\n    return is_strictly_increasing(a, b) and is_strictly_decreasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing_strictly_decreasing(a,\
    \ b)\n    return is_strictly_decreasing(a, b) and is_strictly_increasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing(a,\
    \ b)\n    return is_strictly_increasing(a, b) and is_strictly_decreasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing_strictly_decreasing(a,\
    \ b)\n    return is_strictly_decreasing(a, b) and is_strictly_increasing(a, b)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_incre\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmptro9mfji.lua:55: '(' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwz_hhh6.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpgwz_hhh6.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k < l[j] then\n      i = i + 1\n    elseif k > l[j] then\n      j = j -\
    \ 1\n    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj6sfyhj3.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpj6sfyhj3.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      return true\n      end\n    else\n      if y < z then\n        return true\n\
    \      else\n        return false\n      end\n    end\n    i = i + 1\n    j =\
    \ j + 1\n    k = k + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxejarclz.lua:41:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxejarclz.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_l = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic_i = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_j = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_k = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_l = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0y4s57s0.lua:52: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i, j) end\n    if l[i] > l[j] then return\
    \ helper(l, j, i) end\n    return helper(l, j, i)\n  end\n  return helper(l, 1,\
    \ #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp95k7sokn.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp95k7sokn.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if w < x then\n      k = k + 1\n      if k > m then\n        m = k\n    \
    \  end\n    elseif w > x then\n      k = k - 1\n      if k < 1 then\n        m\
    \ = m\n      end\n    else\n      if w == x then\n        if i == j then\n   \
    \       i = i + 1\n          j = j + 1\n        else\n          i = i + 1\n  \
    \      end\n      else\n        i = i + 1\n      end\n    end\n  end\n  return\
    \ m == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < first then\n      return false\n    end\n    first = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7i2d9a_.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_7i2d9a_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn823joor.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpn823joor.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiftxz8zh.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpiftxz8zh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then\n      return false\n    end\n    if m ==\
    \ k then\n      if i == j then\n        return true\n      end\n      i = i +\
    \ 1\n      j = j - 1\n    else\n      i = i + 1\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9b3cieeu.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp9b3cieeu.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x == y then\n      k = k + 1\n      if k > m then\n        m = k\n   \
    \   end\n      i = i + 1\n      j = j + 1\n    elseif x < y then\n      k = k\
    \ + 1\n      if k > m then\n        m = k\n      end\n      i = i + 1\n    else\n\
    \      m = m + 1\n      j = j + 1\n    end\n  end\n  return m <= n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5_su84y.lua:42:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa5_su84y.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  local o = l[1]\n  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n\
    \    local z = l[k]\n    local c = x - m\n    local d = y - n\n    local e = z\
    \ - o\n    if c < 0 and d < 0 and e < 0 then\n      return false\n    elseif c\
    \ > 0 and d > 0 and e > 0 then\n      return true\n    elseif c < 0 and d > 0\
    \ and e < 0 then\n      return false\n    elseif c > 0 and d < 0 and e > 0 then\n\
    \      return true\n    else\n      m = x\n      n = y\n      o = z\n      i =\
    \ i + 1\n      j = j + 1\n      k = k + 1\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp73bcixsr.lua:47:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp73bcixsr.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n      if k > #l then\n        return false\n      end\n\
    \    elseif w > x then\n      k = k - 1\n      if k < 1 then\n        return false\n\
    \      end\n    elseif w == x then\n      if m > y then\n        m = m\n     \
    \ else\n        m = m\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return m > y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7gyw7lbq.lua:37:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp7gyw7lbq.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_decreasing(a, b)\n    return b < a or b == a and a < b\n\
    \  end\n  local function is_increasing(a, b)\n    return b > a or b == a and a\
    \ > b\n  end\n  local function is_monotonic(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(a, b)\n  end\n  local function is_monotonic_upwards(a, b)\n\
    \    return is_decreasing(a, b) or is_increasing(b, a)\n  end\n  local function\
    \ is_monotonic_downwards(a, b)\n    return is_increasing(a, b) or is_decreasing(b,\
    \ a)\n  end\n  local function is_monotonic_upwards_or_downwards(a, b)\n    return\
    \ is_decreasing(a, b) or is_increasing(b, a)\n  end\n  local function is_monotonic_downwards_or_upwards(a,\
    \ b)\n    return is_increasing(a, b) or is_decreasing(b, a)\n  end\n  local function\
    \ is_monotonic_upwards_or_downwards_or_equal(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(b, a) or a == b\n  end\n  local function is_monotonic_downwards_or_upwards_or_equal(a,\
    \ b)\n    return is_increasing(a, b) or is_decreasing(b, a) or a == b\n  end\n\
    \  local function is_monotonic_upwards_or_equal(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(b, a) or a == b\n  end\n  local function is_monotonic_downwards_or_equal(a,\
    \ b)\n    return is_increasing(a, b) or is_decreasing(b, a) or a == b\n  end\n\
    \  local function is_monotonic_upwards_or_equal(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(b, a) or a == b\n  end\n  local function is_monotonic_downwards_or_equal(a,\
    \ b)\n    return is_increasing(a, b) or is_decreasing(b, a) or a == b\n  end\n\
    \  local function is_monotonic_upwards_or_equal(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(b, a) or a == b\n  end\n  local function is_monotonic_upwards_or_equal(a,\
    \ b)\n    return is_decreasing(a, b) or is_increasing(b, a) or a == b\n  end\n\
    \  local function is_monotonic_upwards_or_equal(a, b)\n    return is_decreasing(a,\
    \ b) or is_increasing(b, a) or a == b\n  end\n  local function is_monot\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdtwq7nci.lua:58: '(' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n    elseif w > x then\n      if y > m then\n        m\
    \ = y\n      end\n      j = j + 1\n    elseif w == x then\n      if y > m then\n\
    \        m = y\n      end\n      i = i + 1\n      j = j + 1\n    else\n      k\
    \ = k + 1\n    end\n  end\n  return m == l[1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuup_iw3e.lua:40:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpuup_iw3e.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnsvczt7_.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpnsvczt7_.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpomsd81o9.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpomsd81o9.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpymplvpjb.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpymplvpjb.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpusb1231u.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpusb1231u.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  local last = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovgnemnm.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpovgnemnm.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i, j) else return helper(l, j, i) end\n  end\n\
    \  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1v8y_1uz.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp1v8y_1uz.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbj40nl4_.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpbj40nl4_.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3zxp_p0.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpx3zxp_p0.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        local t = l[k]\n        l[k]\
    \ = l[k + 1]\n        l[k + 1] = t\n      end\n      k = k + 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqcxoti8c.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpqcxoti8c.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      if m ~= 0 then\n     \
    \   return false\n      end\n      i = i + 1\n      j = j + 1\n      k = k + 1\n\
    \    else\n      if m > n then\n        j = j + 1\n      else\n        i = i +\
    \ 1\n      end\n      k = k + 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi6bx9hd3.lua:42:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpi6bx9hd3.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then return false end\n      k = k + 1\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9hhu_m5.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmps9hhu_m5.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_d = 1 -- Default to 1\n  local last_monotonic_r\
    \ = 1 -- Default to 1\n  local last_monotonic_f = 1 -- Default to 1\n  local last_monotonic_s\
    \ = 1 -- Default to 1\n  local last_monotonic_y = 1 -- Default to 1\n  local last_monotonic_x\
    \ = 1 -- Default to 1\n  local last_monotonic_z = 1 -- Default to 1\n  local last_monotonic_u\
    \ = 1 -- Default to 1\n  local last_monotonic_v = 1 -- Default to 1\n  local last_monotonic_w\
    \ = 1 -- Default to 1\n  local last_monotonic_x = 1 -- Default to 1\n  local last_monotonic_y\
    \ = 1 -- Default to 1\n  local last_monotonic_z = 1 -- Default to 1\n  local last_monotonic_u\
    \ = 1 -- Default to 1\n  local last_monotonic_v = 1 -- Default to 1\n  local last_monotonic_w\
    \ = 1 -- Default to 1\n  local last_monotonic_x = 1 -- Default to 1\n  local last_monotonic_y\
    \ = 1 -- Default to 1\n  local last_monotonic_z = 1 -- Default to 1\n  local last_monotonic_u\
    \ = 1 -- Default to 1\n  local last_monotonic_v = 1 -- Default to 1\n  local last_monotonic_w\
    \ = 1 -- Default to 1\n  local last_monotonic_x = 1 -- Default to 1\n  local last_monotonic_y\
    \ = 1 -- Default to 1\n  local last_monotonic_z = 1 -- Default to 1\n  local last_monotonic_u\
    \ = 1 -- Default to 1\n  local last_monotonic_v = 1 -- Default to 1\n  local last_monotonic_w\
    \ = 1 -- Default to 1\n  local last_monotonic_x = 1 -- Default to 1\n  local last_monotonic_y\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpfiz6fbox.lua:51: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return true end\n  local i = 1\n  local j = #l - 1\n  while\
    \ i <= j do\n    if l[i] < l[j] then return false end\n    if l[i] > l[j] then\
    \ return true end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxttulfa9.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxttulfa9.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    if x > m then\n      k = k + 1\n      m = x\n  \
    \  elseif x < m then\n      j = j + 1\n      m = x\n    end\n    i = i + 1\n \
    \ end\n  return j - k > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zy1o6kt.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6zy1o6kt.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgv5iz5nd.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpgv5iz5nd.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ elseif l[m] > l[n] then\n        i = m\n      else\n        return true\n  \
    \    end\n      m = m + 1\n      n = n + 1\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppu3l_dlc.lua:15:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmppu3l_dlc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3auhkkuw.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp3auhkkuw.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local m = i - 1\n    local k = j\n    while k <= m do\n\
    \      if l[k] < l[m] then\n        local t = l[k]\n        l[k] = l[m]\n    \
    \    l[m] = t\n      end\n      k = k + 1\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj43vgena.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpj43vgena.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = True\n  while\
    \ i < #l do\n    if l[i] < l[j] then\n      k = k + 1\n      if k < i then\n \
    \       monotonic = false\n      end\n    else\n      k = k - 1\n      if k <\
    \ j then\n        monotonic = false\n      end\n    end\n    i = i + 1\n    j\
    \ = j + 1\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpehddqq41.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpehddqq41.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp81udkv5r.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp81udkv5r.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  while i < #l do\n    if l[i] < l[j] then\n      k = k + 1\n      if k > 1 then\n\
    \        if l[i] < l[j] then\n          monotonic_flag = false\n        end\n\
    \      else\n        monotonic_flag = true\n      end\n    else\n      k = k -\
    \ 1\n      if k < 1 then\n        if l[i] > l[j] then\n          monotonic_flag\
    \ = false\n        end\n      else\n        monotonic_flag = true\n      end\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return monotonic_flag\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9l_iqa8.lua:44:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_9l_iqa8.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        i, m\
    \ = m, i - 1\n      elseif l[m] > l[i] then\n        j = j - 1\n      else\n \
    \       i, j = i + 1, j + 1\n      end\n    end\n  end\n  return i == j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmtu0o8id.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpmtu0o8id.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[j-1] < l[i] then\n      return true\n \
    \   end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdjxnm58c.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpdjxnm58c.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local v = l[i]\n    k = k + 1\n    if v < m then\n      m = v\n    \
    \  j = i\n    end\n    i = i + 1\n  end\n  return j - k == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7y07mnsl.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7y07mnsl.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 1 then return true end\n  local i = 1\n  while i < #l do\n    local\
    \ j = i\n    while j < #l and l[j] < l[i] do\n      j = j + 1\n    end\n    if\
    \ j > i then\n      local k = i\n      while k < j and l[k] > l[i] do\n      \
    \  k = k + 1\n      end\n      if k > i then\n        return false\n      else\n\
    \        i = k\n      end\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxkz7fex6.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxkz7fex6.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low > high then\n      return false\n\
    \    end\n    local mid = math.floor((low + high) / 2)\n    return helper(l, low,\
    \ mid) or helper(l, mid + 1, high)\n  end\n  return helper(l, 0, #l - 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmjv9f7wd.lua:13:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpmjv9f7wd.lua:14: in function\
    \ 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14: in function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14:\
    \ in function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14: in function 'helper'\\n\\\
    t/tmp/tmpmjv9f7wd.lua:14: in function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14: in\
    \ function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14: in function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14:\
    \ in function 'helper'\\n\\t/tmp/tmpmjv9f7wd.lua:14: in function 'helper'\\n\\\
    t...\\n\\nRan 1 tests in 0.219 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] ~= l[i] then return false end\n    if l[m] > l[i] then j = m else\
    \ i = m end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm5tgb1ww.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpm5tgb1ww.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x < y then\n      l[i] = y\n      i = i + 1\n    elseif\
    \ x > y then\n      l[j] = x\n      j = j - 1\n    else\n      return true\n \
    \   end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2tv2j8d9.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp2tv2j8d9.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoegxsnwv.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpoegxsnwv.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpelzf3ur3.lua:26:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpelzf3ur3.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then return false end\n\
    \      m = m + 1\n      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6545vfbq.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmp6545vfbq.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n      if k > #l then\n        return false\n      end\n\
    \    elseif w > x then\n      k = k - 1\n      if k < 1 then\n        return false\n\
    \      end\n    else\n      if w == x then\n        if m > y then\n          return\
    \ false\n        else\n          m = m + 1\n        end\n      else\n        if\
    \ m > y then\n          return false\n        else\n          m = m + 1\n    \
    \    end\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp17cq6tep.lua:53:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp17cq6tep.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n        j = m\n      elseif\
    \ l[m] > l[i] then\n        local t = l[m]\n        l[m] = l[i]\n        l[i]\
    \ = t\n        i = m\n      else\n        i = m + 1\n      end\n    end\n    i\
    \ = i + 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt837d5sb.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpt837d5sb.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[2]\n\
    \  while i <= n do\n    if l[i] < m then\n      k = k + 1\n      if k > 1 then\n\
    \        if l[j] < m then\n          k = k - 1\n        end\n      end\n     \
    \ m = l[i]\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return k > 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp77buf7gc.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp77buf7gc.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      j = k\n    else\n      i = k + 1\n    end\n  end\n  return i <= j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnel5xn2x.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpnel5xn2x.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local min_value = l[1]\n  local max_value = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] < min_value then\n      min_value = l[i]\n      k = i\n    end\n\
    \    if l[i] > max_value then\n      max_value = l[i]\n      j = i\n    end\n\
    \  end\n  if min_value == max_value then\n    return false\n  end\n  if min_value\
    \ < max_value then\n    monotonic = false\n  end\n  if j - k <= 1 then\n    return\
    \ true\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp44dapbwo.lua:40:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp44dapbwo.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ tmp = l[m]\n        l[m] = l[n]\n        l[n] = tmp\n      end\n      m = m\
    \ + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ l[1] < l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_a6m29cl.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmp_a6m29cl.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x > y then\n      if w < x then\n        k = k + 1\n      else\n     \
    \   i = i + 1\n      end\n    elseif x < y then\n      if w > x then\n       \
    \ k = k + 1\n      else\n        j = j + 1\n      end\n    else\n      if w ==\
    \ x then\n        i = i + 1\n        j = j + 1\n      else\n        k = k + 1\n\
    \      end\n    end\n    m = m + 1\n  end\n  return m == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd9t6avdm.lua:46:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd9t6avdm.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3ho1g26.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpa3ho1g26.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvq1p2g97.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpvq1p2g97.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low > high then\n      return false\n\
    \    end\n    if low == high then\n      return true\n    end\n    if l[low] <=\
    \ l[high] then\n      return helper(l, low + 1, high)\n    else\n      return\
    \ helper(l, low, high - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnem3op91.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnem3op91.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptl2feo1q.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmptl2feo1q.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m < n then\n      k = k - 1\n    end\n    i = i +\
    \ 1\n    j = j + 1\n  end\n  return k == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3rf5c2o.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf3rf5c2o.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  while i < #l do\n\
    \    if l[i] > l[j] then\n      k = k + 1\n      if k > m then\n        m = k\n\
    \      end\n    else\n      k = k - 1\n      if k < m then\n        m = k\n  \
    \    end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return m == k\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnh_8uga4.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnh_8uga4.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuywj67xu.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpuywj67xu.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if x > y\
    \ then\n      if x < m then\n        m = x\n      end\n      i = i + 1\n     \
    \ j = j + 1\n    elseif x < y then\n      if y < m then\n        m = y\n     \
    \ end\n      k = k + 1\n    elseif x == y then\n      if w < m then\n        m\
    \ = w\n      end\n      i = i + 1\n      j = j + 1\n      k = k + 1\n    end\n\
    \  end\n  return m == l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1nnxyu6.lua:45:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpj1nnxyu6.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    local mid = math.floor(low + (high\
    \ - low) / 2)\n    if low < mid and mid < high then\n      return helper(l, low,\
    \ mid)\n    elseif low > mid and mid < high then\n      return helper(l, mid,\
    \ high)\n    elseif low > mid and high > mid then\n      return helper(l, mid,\
    \ high)\n    elseif low < mid and high < mid then\n      return helper(l, low,\
    \ mid)\n    else\n      return low < mid\n    end\n  end\n  return helper(l, 1,\
    \ #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwy04ngu6.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwy04ngu6.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  while i <= #l do\n    local\
    \ j = i\n    while j <= #l do\n      if l[j] < l[j - 1] then\n        return false\n\
    \      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkbrs4ds0.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpkbrs4ds0.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      k = k + 1\n      end\n    elseif x < y then\n      if x > z then\n    \
    \    return false\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x < z then\n        k = k + 1\n      else\n        i = i + 1\n        j = j\
    \ + 1\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmo7yfmi.lua:47:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphmo7yfmi.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = True\n  while\
    \ i < #l do\n    local v = l[i]\n    if v < l[j] then\n      j = k\n    elseif\
    \ v > l[j] then\n      k = j\n    else\n      i = j + 1\n      j = k + 1\n   \
    \   k = j + 1\n      monotonic = monotonic and (j > i)\n    end\n  end\n  return\
    \ monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppsjkehot.lua:15:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmppsjkehot.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low < high and l[low] <= l[high]\
    \ then\n      return true\n    end\n    if low > high then\n      return false\n\
    \    end\n    local mid = math.floor((low + high) / 2)\n    return helper(l, low,\
    \ mid) or helper(l, mid + 1, high)\n  end\n  return helper(l, 1, #l)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiygf9w8y.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpiygf9w8y.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i <= j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn8j3xjq_.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpn8j3xjq_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5i7onxtb.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp5i7onxtb.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      return false\n    end\n    if l[i] > l[j] then\n      return true\n   \
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3k5lq9v.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpb3k5lq9v.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      k = k + 1\n      if k\
    \ > 1 then\n        j = j + 1\n      end\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9xz9vnsk.lua:17:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp9xz9vnsk.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local first = l[1]\n  for i = 2, #l do\n\
    \    if l[i] < first then return false end\n    first = l[i]\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1x1dnkj7.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1x1dnkj7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkqytb9vf.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkqytb9vf.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48m_7qbh.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp48m_7qbh.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then\n      return false\n    end\n    if m ==\
    \ k then\n      i = i + 1\n      j = j - 1\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgf6jzsny.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpgf6jzsny.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local monotonic_flag2 = true\n  local monotonic_flag3 = true\n  local monotonic_flag4\
    \ = true\n  local monotonic_flag5 = true\n  local monotonic_flag6 = true\n  local\
    \ monotonic_flag7 = true\n  local monotonic_flag8 = true\n  local monotonic_flag9\
    \ = true\n  local monotonic_flag10 = true\n  local monotonic_flag11 = true\n \
    \ local monotonic_flag12 = true\n  local monotonic_flag13 = true\n  local monotonic_flag14\
    \ = true\n  local monotonic_flag15 = true\n  local monotonic_flag16 = true\n \
    \ local monotonic_flag17 = true\n  local monotonic_flag18 = true\n  local monotonic_flag19\
    \ = true\n  local monotonic_flag20 = true\n  local monotonic_flag21 = true\n \
    \ local monotonic_flag22 = true\n  local monotonic_flag23 = true\n  local monotonic_flag24\
    \ = true\n  local monotonic_flag25 = true\n  local monotonic_flag26 = true\n \
    \ local monotonic_flag27 = true\n  local monotonic_flag28 = true\n  local monotonic_flag29\
    \ = true\n  local monotonic_flag30 = true\n  local monotonic_flag31 = true\n \
    \ local monotonic_flag32 = true\n  local monotonic_flag33 = true\n  local monotonic_flag34\
    \ = true\n  local monotonic_flag35 = true\n  local monotonic_flag36 = true\n \
    \ local monotonic_flag37 = true\n  local monotonic_flag38 = true\n  local monotonic_flag39\
    \ = true\n  local monotonic_flag40 = true\n  local monotonic_flag41 = true\n \
    \ local monotonic_flag42 = true\n  local monotonic_flag43 = true\n  local monotonic_flag44\
    \ = true\n  local monotonic_flag45 = true\n  local monotonic_flag46 = true\n \
    \ local monotonic_flag47 = true\n  local monotonic_flag48 = true\n  local monotonic_flag49\
    \ = true\n  local monotonic_flag50 = true\n  local monotonic_flag51 = true\n \
    \ local monotonic_flag52 = true\n  local monotonic_flag53 = true\n  local monotonic_flag54\
    \ = true\n  local monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpaoqnc1lx.lua:81: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        i, m\
    \ = m, i - 1\n      elseif l[m] > l[i] then\n        j = j - 1\n      else\n \
    \       return true\n      end\n    end\n    i = i + 1\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt72ourr_.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpt72ourr_.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m == n then\n      if m > m then\n        k = k +\
    \ 1\n      else\n        k = k\n      end\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return k == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy8l1o_bi.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpy8l1o_bi.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45l0u7wy.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp45l0u7wy.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j + 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0t51a56f.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp0t51a56f.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp613h464m.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp613h464m.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpih2celgt.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpih2celgt.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd11h72yt.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpd11h72yt.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    while\
    \ m <= j and l[m] <= l[m+1] do\n      m = m + 1\n    end\n    if m > i then\n\
    \      j = m\n    else\n      i = m + 1\n    end\n  end\n  return i <= j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeo963frp.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpeo963frp.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  while i < #l do\n    local\
    \ j = i\n    while j < #l and l[j] < l[j+1] do\n      j = j + 1\n    end\n   \
    \ if j > i then\n      local k = i\n      while k < j and l[k] > l[k+1] do\n \
    \       k = k + 1\n      end\n      if k > i then\n        local m = i\n     \
    \   while m < k and l[m] > l[m+1] do\n          m = m + 1\n        end\n     \
    \   if m > i then\n          i = m\n        else\n          i = k\n        end\n\
    \      else\n        i = k\n      end\n    else\n      i = j\n    end\n  end\n\
    \  return l[i] == l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ is_decreasing = false\n  local is_increasing = false\n  local is_monotonic =\
    \ false\n  local is_decreasing_or_nondecreasing = false\n  local is_increasing_or_nonincreasing\
    \ = false\n  local is_monotonic_or_nonmonotonic = false\n  local is_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nondecreasing = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nondecreasing = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nondecreasing = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nondecreasing = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nondecreasing = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonincreas\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpaq29n6x5.lua:65: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpai0tbuyt.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpai0tbuyt.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    k = k + 1\n    local m = m and l[i]\n    local n = n and\
    \ l[i]\n    if m ~= n then\n      if m > n then\n        return false\n      elseif\
    \ m < n then\n        return true\n      else\n        return false\n      end\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkad097cu.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpkad097cu.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy9m_zz5m.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpy9m_zz5m.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    k = k + 1\n    local m = m and l[i]\n    local n = n\
    \ and l[j]\n    if m ~= n then\n      if m > n then\n        return false\n  \
    \    else\n        return true\n      end\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitf5e5e0.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpitf5e5e0.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  while i <= #l do\n\
    \    while k <= #l and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k\
    \ > #l then\n      k = k - 1\n      while j <= #l and l[j] < l[j + 1] do\n   \
    \     j = j + 1\n      end\n      if j > #l then\n        j = j - 1\n      else\n\
    \        if l[j] < l[j + 1] then\n          m = m + 1\n        end\n      end\n\
    \    end\n    if m > 1 then\n      return false\n    end\n    i = i + 1\n    j\
    \ = j + 1\n    k = k + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8k66v56x.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp8k66v56x.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpagam4shc.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpagam4shc.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zl8o1dd.lua:15:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp8zl8o1dd.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      i = i + 1\n    else\n   \
    \   j = j - 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvakpz6wx.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpvakpz6wx.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k < l[j] then\n      j = k\n    else\n      i = k + 1\n    end\n  end\n\
    \  return i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa1xsxz_3.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpa1xsxz_3.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local v = l[i]\n    k = k + 1\n    if v < m then\n      j = j + 1\n\
    \      if j < k then\n        m = v\n      end\n    end\n    i = i + 1\n  end\n\
    \  return m == l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3jw1sa8n.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3jw1sa8n.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local m = i - 1\n    local k = j\n    while k <= m do\n\
    \      if l[k] < l[m] then\n        return false\n      elseif l[k] > l[m] then\n\
    \        return true\n      elseif l[k] == l[m] then\n        k = k + 1\n    \
    \  else\n        i = i + 1\n      end\n    end\n    j = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local last_monotonic_flag = false\n  local last_monotonic_value = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_step = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monoton\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9c7z8g3g.lua:85: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[j-1] < l[i] then\n      return true\n \
    \   end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6lwm9e3.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmph6lwm9e3.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  while i < #l do\n    local\
    \ v = l[i]\n    if v < l[i-1] then return false end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_o7mhc2j.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp_o7mhc2j.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpglwgyc66.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpglwgyc66.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local m = i - 1\n    local k = j\n    while k <= m do\n\
    \      if l[k] < l[i] then\n        local t = l[k]\n        l[k] = l[i]\n    \
    \    l[i] = t\n      end\n      k = k + 1\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8pb5ixgu.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8pb5ixgu.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcjbpja_k.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcjbpja_k.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    k = k + 1\n    if k > 1 then\n      if m ~=\
    \ l[k - 1] then\n        return false\n      end\n    end\n    i = i + 1\n   \
    \ j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps5ydlfm7.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps5ydlfm7.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_val\
    \ = nil -- Default to nil\n  local last_monotonic_i = nil -- Default to nil\n\
    \  local last_monotonic_j = nil -- Default to nil\n  local last_monotonic_k =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_count = nil -- Default to nil\n  local last_monotonic_count_i\
    \ = nil -- Default to nil\n  local last_monotonic_count_j = nil -- Default to\
    \ nil\n  local last_monotonic_count_k = nil -- Default to nil\n  local last_monotonic_count_l\
    \ = nil -- Default to nil\n  local last_monotonic_count_i = nil -- Default to\
    \ nil\n  local last_monotonic_count_j = nil -- Default to nil\n  local last_monotonic_count_k\
    \ = nil -- Default to nil\n  local last_monotonic_count_l = nil -- Default to\
    \ nil\n  local last_monotonic_count_i = nil -- Default to nil\n  local last_monotonic_count_j\
    \ = nil -- Default to nil\n  local last_monotonic_count_k = nil -- Default to\
    \ nil\n  local last_monotonic_count_l = nil -- Default to nil\n  local last_monotonic_count_i\
    \ = nil -- Default to nil\n  local last_monotonic_count_j = nil -- Default to\
    \ nil\n  local last_monotonic_count_k = nil -- Default to nil\n  local last_monotonic_count_l\
    \ = nil -- Default to nil\n  local last_monotonic_count_i = nil -- Default to\
    \ nil\n  local last_monotonic_count_j = nil -- Default to nil\n  local last_monotonic_count_k\
    \ = nil -- Default to nil\n  local last_monotonic_count_l = nil -- Default to\
    \ nil\n  local last_monotonic_count_i = nil -- Default to nil\n  local last_monotonic_count_j\
    \ = nil -- Default to nil\n  local last_monotonic_count_k = nil -- Default to\
    \ nil\n  local last_monotonic_count_l = nil -- Default to nil\n  local last_monotonic_count_i\
    \ = nil -- Default to nil\n  local last_monotonic_count_j = nil -- Default to\
    \ nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp__3w_60x.lua:61: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local m = i - 1\n    local k = j\n    local j = i\n  \
    \  local while j <= m do\n      if l[j] < l[k] then\n        local t = l[j]\n\
    \        l[j] = l[k]\n        l[k] = t\n      end\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  return l[1] < l[n]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpc8xuv9m8.lua:18: '<name>' expected near 'while'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n        local t\
    \ = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7i_r3_0.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmpc7i_r3_0.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxm_8va_r.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxm_8va_r.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n    elseif v > m\
    \ then\n      j = j + 1\n    else\n      if k ~= j then\n        return false\n\
    \      end\n      k = k + 1\n      j = j + 1\n    end\n    i = i + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9g3rau_.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmph9g3rau_.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    k = k + 1\n    if v < m then\n      m = v\n    \
    \  j = i\n    end\n    i = i + 1\n  end\n  return j - k == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxdrnzaq.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsxdrnzaq.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  while i < #l do\n    local\
    \ v = l[i]\n    if v < l[i-1] then\n      return false\n    end\n    i = i + 1\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu9n8usip.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpu9n8usip.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplfpwyoxh.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplfpwyoxh.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc9zyxvi_.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpc9zyxvi_.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg1hphx4x.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpg1hphx4x.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvm3zkxrg.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpvm3zkxrg.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcuo35a5s.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcuo35a5s.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    m = m + 1\n        n = n + 1\n      end\n    end\n    i = i + 1\n    j =\
    \ j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpje5lz6in.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmpje5lz6in.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    i\
    \ = j\n    j = k\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1enbhm7y.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp1enbhm7y.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      k = k + 1\n      end\n    elseif x < y then\n      if x > z then\n    \
    \    return false\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x < z then\n        i = i + 1\n      else\n        j = j + 1\n      end\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8xuwisl6.lua:25:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp8xuwisl6.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local max_i = #l - 1\n  local max_j = #l - 1\n  local max_k = #l - 1\n  while\
    \ i <= max_i and j <= max_j and k <= max_k do\n    if l[i] < l[j] then\n     \
    \ i = i + 1\n      k = k + 1\n    elseif l[i] > l[j] then\n      j = j + 1\n \
    \     k = k + 1\n    else\n      i = i + 1\n      j = j + 1\n      k = k + 1\n\
    \    end\n    if k > max_k then\n      monotonic_flag = false\n    end\n  end\n\
    \  return monotonic_flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3731i_x.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpb3731i_x.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr3qgdk0h.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpr3qgdk0h.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  local curr = {}\n  for i = 1, #l do\n    curr[i] = l[i]\n\
    \    prev[i] = l[i-1]\n  end\n  local i = 1\n  while i <= #l do\n    local cur\
    \ = curr[i]\n    local prev = prev[i]\n    if prev > cur then\n      return false\n\
    \    end\n    curr[i] = prev\n    prev[i] = cur\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7mfcvhm.lua:19:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpb7mfcvhm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then\n      return false\n    elseif m == k then\n\
    \      if i < j then\n        i = i + 1\n      else\n        j = j - 1\n     \
    \ end\n    else\n      return true\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgbk0jyxp.lua:14:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpgbk0jyxp.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    if x > m then\n      k = k + 1\n      m = x\n  \
    \  elseif x < m then\n      j = j + 1\n      m = x\n    end\n    i = i + 1\n \
    \ end\n  return k == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4pvqwi_l.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4pvqwi_l.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    end\n    if i ==\
    \ j then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ryntmmm.lua:14:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp0ryntmmm.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bb59oei.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp9bb59oei.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      k = k + 1\n      end\n    elseif x < y then\n      if x > z then\n    \
    \    return false\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x < z then\n        return true\n      else\n        i = i + 1\n      end\n\
    \    end\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgvjnt2vu.lua:47:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgvjnt2vu.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbk6wysh.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmppbk6wysh.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9cbj14p.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn9cbj14p.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpicad3tb_.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpicad3tb_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    local m = m + 1\n        n = n + 1\n      end\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg82dvv44.lua:15:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmpg82dvv44.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      k = k + 1\n      if k < #l then\n        n = l[k]\n   \
    \   else\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbetz159i.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbetz159i.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7akpcafa.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp7akpcafa.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xdr3kvh.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp_xdr3kvh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m == n then\n      if m ~= 0 then\n        k = k\
    \ + 1\n      end\n      i = i + 1\n      j = j + 1\n    else\n      k = k + 1\n\
    \    end\n  end\n  return k == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa0ry2kzs.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa0ry2kzs.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then\n      j = m\n    else\n      i = m\n    end\n  end\n\
    \  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzj5j921t.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpzj5j921t.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      if i == j then\n     \
    \   return true\n      end\n      j = j + 1\n    end\n    i = i + 1\n    k = k\
    \ + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tswr37w.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3tswr37w.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n\
    \  local last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpmlvg482o.lua:62: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzxfzbkw_.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpzxfzbkw_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return is_increasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_decreasing(v)\n    return is_decreasing(v) and is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_monotonic(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return is_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic(v)\n    return is_monotonic(v) and is_strictly_decreasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return is_increasing(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return is_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic(v)\n    return is_monotonic(v) and is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return is_increasing(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return is_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic(v)\n    return is_monotonic(v) and is_strictly_decreasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return is_increasing(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return is_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic(v)\n    return is_monotonic(v) and is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return is_increasing(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return is_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic(v)\n    return is_monotonic(v) and is_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpyyhyozc0.lua:68: 'end' expected (to close 'function' at\
    \ line 66) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = 0\n  for i, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemcddzbm.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpemcddzbm.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_w_70bmd.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp_w_70bmd.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjrt3_my6.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpjrt3_my6.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    k = k + 1\n    if l[i] < m then\n      m = l[i]\n   \
    \   j = i\n    end\n    if l[i] > n then\n      n = l[i]\n      i = i\n    end\n\
    \    i = i + 1\n  end\n  if m > n then\n    return false\n  else\n    return true\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp457_byul.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp457_byul.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8w808pag.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp8w808pag.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5y9i0icy.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp5y9i0icy.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then return false end\n   \
    \   if l[k] > l[m] then m = m - 1; k = k + 1 end\n    end\n    if m > i then return\
    \ false end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb8wu5guk.lua:15:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpb8wu5guk.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe0y2f9w8.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpe0y2f9w8.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i, j) end\n    return helper(l, j, i)\n  end\n\
    \  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg6idqg9i.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpg6idqg9i.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  while i <= #l do\n    local\
    \ j = i\n    while j < #l and l[j] < l[j+1] do\n      j = j + 1\n    end\n   \
    \ if j > i then\n      local k = i\n      while k < j do\n        if l[k] > l[k+1]\
    \ then\n          l[k], l[k+1] = l[k+1], l[k]\n        end\n        k = k + 1\n\
    \      end\n    end\n    i = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn7qdpg91.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpn7qdpg91.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt79rgc6p.lua:13:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpt79rgc6p.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        i, m\
    \ = m, i - 1\n      elseif l[m] > l[i] then\n        j = j - 1\n      else\n \
    \       i, j = i + 1, j + 1\n      end\n    end\n  end\n  return i == j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo5nes93e.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpo5nes93e.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp40l5dict.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp40l5dict.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local monotonic_flag2 = true\n  local monotonic_flag3 = true\n  local monotonic_flag4\
    \ = true\n  local monotonic_flag5 = true\n  local monotonic_flag6 = true\n  local\
    \ monotonic_flag7 = true\n  local monotonic_flag8 = true\n  local monotonic_flag9\
    \ = true\n  local monotonic_flag10 = true\n  local monotonic_flag11 = true\n \
    \ local monotonic_flag12 = true\n  local monotonic_flag13 = true\n  local monotonic_flag14\
    \ = true\n  local monotonic_flag15 = true\n  local monotonic_flag16 = true\n \
    \ local monotonic_flag17 = true\n  local monotonic_flag18 = true\n  local monotonic_flag19\
    \ = true\n  local monotonic_flag20 = true\n  local monotonic_flag21 = true\n \
    \ local monotonic_flag22 = true\n  local monotonic_flag23 = true\n  local monotonic_flag24\
    \ = true\n  local monotonic_flag25 = true\n  local monotonic_flag26 = true\n \
    \ local monotonic_flag27 = true\n  local monotonic_flag28 = true\n  local monotonic_flag29\
    \ = true\n  local monotonic_flag30 = true\n  local monotonic_flag31 = true\n \
    \ local monotonic_flag32 = true\n  local monotonic_flag33 = true\n  local monotonic_flag34\
    \ = true\n  local monotonic_flag35 = true\n  local monotonic_flag36 = true\n \
    \ local monotonic_flag37 = true\n  local monotonic_flag38 = true\n  local monotonic_flag39\
    \ = true\n  local monotonic_flag40 = true\n  local monotonic_flag41 = true\n \
    \ local monotonic_flag42 = true\n  local monotonic_flag43 = true\n  local monotonic_flag44\
    \ = true\n  local monotonic_flag45 = true\n  local monotonic_flag46 = true\n \
    \ local monotonic_flag47 = true\n  local monotonic_flag48 = true\n  local monotonic_flag49\
    \ = true\n  local monotonic_flag50 = true\n  local monotonic_flag51 = true\n \
    \ local monotonic_flag52 = true\n  local monotonic_flag53 = true\n  local monotonic_flag54\
    \ = true\n  local monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp42wv9gis.lua:81: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppkw2z_i1.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppkw2z_i1.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp54x625ti.lua:12:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp54x625ti.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    end\n    if i ==\
    \ j then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo66fvatm.lua:14:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpo66fvatm.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprdpifwq_.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmprdpifwq_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- default\
    \ return value\n  local min_value = l[1]\n  local max_value = l[1]\n  local min_value_i\
    \ = l[1]\n  local max_value_i = l[1]\n  local min_value_j = l[1]\n  local max_value_j\
    \ = l[1]\n  local min_value_k = l[1]\n  local max_value_k = l[1]\n  while i <=\
    \ #l do\n    local value = l[i]\n    if value < min_value then\n      min_value\
    \ = value\n      min_value_i = i\n      min_value_j = j\n      min_value_k = k\n\
    \    end\n    if value > max_value then\n      max_value = value\n      max_value_i\
    \ = i\n      max_value_j = j\n      max_value_k = k\n    end\n    i = i + 1\n\
    \    j = j + 1\n    k = k + 1\n    if i == #l then\n      if min_value < max_value\
    \ then\n        monotonic = true\n      else\n        monotonic = false\n    \
    \  end\n      break\n    end\n    if j == #l then\n      if min_value < max_value\
    \ then\n        monotonic = true\n      else\n        monotonic = false\n    \
    \  end\n      break\n    end\n    if k == #l then\n      if min_value < max_value\
    \ then\n        monotonic = true\n      else\n        monotonic = false\n    \
    \  end\n      break\n    end\n    if value < min_value then\n      min_value =\
    \ value\n      min_value_i = i\n      min_value_j = j\n      min_value_k = k\n\
    \    end\n    if value > max_value then\n      max_value = value\n      max_value_i\
    \ = i\n      max_value_j = j\n      max_value_k = k\n    end\n    i = i + 1\n\
    \    j = j + 1\n    k = k + 1\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfpswck3.lua:86:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpyfpswck3.lua:86:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k < l[j] then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0oxd3le6.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp0oxd3le6.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x == y then\n      if i == j then\n        if i == k then\n          return\
    \ true\n        end\n      else\n        if z < y then\n          return false\n\
    \        end\n      end\n    end\n    i = j\n    j = k\n    k = m\n    m = x +\
    \ 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpff4hhw4a.lua:42:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpff4hhw4a.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7kzfuk5b.lua:15:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp7kzfuk5b.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    while\
    \ m <= j and l[m] <= l[m+1] do\n      m = m + 1\n    end\n    if m > i then\n\
    \      j = m\n    else\n      i = m + 1\n    end\n  end\n  return i <= j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0s4i_oc.lua:13:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpk0s4i_oc.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
