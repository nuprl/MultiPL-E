name: HumanEval_118_get_closest_vowel
language: rust
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
  quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  let mut distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut vowels = Vec::new();\n    let mut consonants = Vec::new();\n    let\
    \ mut result = String::new();\n    let mut word_chars = word.chars();\n    let\
    \ mut last_char = word_chars.next().unwrap();\n    for c in word_chars {\n   \
    \     if is_vowel(last_char) {\n            vowels.push(last_char);\n        }\
    \ else {\n            consonants.push(last_char);\n        }\n        last_char\
    \ = c;\n    }\n    if is_vowel(last_char) {\n        vowels.push(last_char);\n\
    \    } else {\n        consonants.push(last_char);\n    }\n    if consonants.len()\
    \ < 2 {\n        return result;\n    }\n    let mut i = consonants.len() - 2;\n\
    \    while i >= 0 {\n        if is_vowel(consonants[i]) {\n            i -= 1;\n\
    \            continue;\n        }\n        let mut j = vowels.len() - 1;\n   \
    \     while j >= 0 {\n            if is_vowel(vowels[j]) {\n                result.push(vowels[j]);\n\
    \                break;\n            }\n            j -= 1;\n        }\n     \
    \   break;\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_consonant = false;\n    let mut last_vowel = false;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_char = '\
    \ ';\n    let mut last_consonant_char = ' ';\n    let mut vowel_index = 0;\n \
    \   let mut consonant_index = 0;\n    let mut vowel_char = ' ';\n    let mut consonant_char\
    \ = ' ';\n    let mut vowel_distance = 0;\n    let mut consonant_distance = 0;\n\
    \    let mut vowel_distance_min = 0;\n    let mut consonant_distance_min = 0;\n\
    \    let mut vowel_distance_min_index = 0;\n    let mut consonant_distance_min_index\
    \ = 0;\n    let mut vowel_distance_min_char = ' ';\n    let mut consonant_distance_min_char\
    \ = ' ';\n    let mut vowel_distance_min_found = false;\n    let mut consonant_distance_min_found\
    \ = false;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    let mut vowel_found_first = false;\n    let mut consonant_found_first = false;\n\
    \    let mut vowel_found_last = false;\n    let mut consonant_found_last = false;\n\
    \    let mut vowel_found_last_index = 0;\n    let mut consonant_found_last_index\
    \ = 0;\n    let mut vowel_found_last_char = ' ';\n    let mut consonant_found_last_char\
    \ = ' ';\n    let mut vowel_found_first_index = 0;\n    let mut consonant_found_first_index\
    \ = 0;\n    let mut vowel_found_first_char = ' ';\n    let mut consonant_found_first_char\
    \ = ' ';\n    let mut vowel_found_first_distance = 0;\n    let mut consonant_found_first_distance\
    \ = 0;\n    let mut vowel_found_last_distance = 0;\n    let mut consonant_", " \
    \   let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_char = ' ';\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char != ' ' && prev_char != c {\n                if i\
    \ < closest_vowel_index {\n                    closest_vowel_index = i;\n    \
    \                closest_vowel = c.to_string();\n                }\n         \
    \   }\n        }\n        prev_char = c;\n    }\n    closest_vowel", "    let\
    \ mut result = String::new();\n    let mut last_consonant = false;\n    let mut\
    \ last_vowel = false;\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let\
    \ mut vowel_distance = 0;\n    let mut consonant_distance = 0;\n    let mut min_distance\
    \ = 0;\n    let mut min_distance_index = 0;\n    let mut min_distance_vowel =\
    \ false;\n    let mut min_distance_consonant = false;\n    let mut first_vowel\
    \ = false;\n    let mut first_consonant = false;\n    let mut first_vowel_index\
    \ = 0;\n    let mut first_consonant_index = 0;\n    let mut first_vowel_distance\
    \ = 0;\n    let mut first_consonant_distance = 0;\n    let mut first_min_distance\
    \ = 0;\n    let mut first_min_distance_index = 0;\n    let mut first_min_distance_vowel\
    \ = false;\n    let mut first_min_distance_consonant = false;\n    let mut first_vowel_found\
    \ = false;\n    let mut first_consonant_found = false;\n    let mut first_min_distance_found\
    \ = false;\n    let mut first_min_distance_index_found = false;\n    let mut first_min_distance_vowel_found\
    \ = false;\n    let mut first_min_distance_consonant_found = false;\n    let mut\
    \ first_vowel_distance_found = false;\n    let mut first_consonant_distance_found\
    \ = false;\n    let mut first_vowel_index_found = false;\n    let mut first_consonant_index_found\
    \ = false;\n    let mut first_vowel_found_found = false;\n    let mut first_consonant_found_found\
    \ = false;\n    let mut first_vowel_found_found_found = false;\n    let mut first_consonant_found_",
  "    let vowels = \"aeiou\";\n    let mut closest_vowel = String::new();\n    let\
    \ mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            let mut is_between_consonants\
    \ = false;\n            if i > 0 {\n                let prev_char = word.chars().nth(i\
    \ - 1).unwrap();\n                if !vowels.contains(prev_char) {\n         \
    \           is_between_consonants = true;\n                }\n            }\n\
    \            if i < word.len() - 1 {\n                let next_char = word.chars().nth(i\
    \ + 1).unwrap();\n                if !vowels.contains(next_char) {\n         \
    \           is_between_consonants = true;\n                }\n            }\n\
    \            if is_between_consonants {\n                let distance = word.len()\
    \ - i;\n                if distance < closest_distance {\n                   \
    \ closest_distance = distance;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    let mut\
    \ last_consonant = false;\n    for c in word.chars().rev() {\n        if vowels.contains(c)\
    \ {\n            if last_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n        } else {\n            last_consonant\
    \ = true;\n        }\n    }\n    result.chars().rev().collect()", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < last_consonant && last_consonant - i < closest_distance\
    \ {\n                closest_vowel = c.to_string();\n                closest_distance\
    \ = last_consonant - i;\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                let left_char\
    \ = word.chars().nth(i - 1).unwrap();\n                let right_char = word.chars().nth(i\
    \ + 1).unwrap();\n                if !vowels.contains(&left_char) && !vowels.contains(&right_char)\
    \ {\n                    let distance = word.len() - i;\n                    if\
    \ distance < closest_distance {\n                        closest_distance = distance;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut result = String::new();\n    let mut vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut\
    \ chars = word.chars().collect::<Vec<char>>();\n    let mut i = chars.len() -\
    \ 1;\n    while i > 0 {\n        if vowels.contains(&chars[i]) {\n           \
    \ if consonants.contains(&chars[i - 1]) {\n                result.push(chars[i]);\n\
    \                break;\n            }\n        }\n        i -= 1;\n    }\n  \
    \  result", "    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(c) {\n           \
    \ last_vowel = i;\n        } else {\n            last_consonant = i;\n       \
    \ }\n        if last_consonant > last_vowel {\n            result = word[last_vowel..last_consonant].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut index = word.len() - 1;\n  \
    \  let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let\
    \ mut last_vowel = ' ';\n    let mut last_consonant = ' ';\n    while index >\
    \ 0 {\n        let letter = word.chars().nth(index).unwrap();\n        if vowels.contains(&letter)\
    \ {\n            last_vowel = letter;\n            last_vowel_index = index;\n\
    \        } else {\n            last_consonant = letter;\n            last_consonant_index\
    \ = index;\n        }\n        if last_vowel != ' ' && last_consonant != ' ' {\n\
    \            break;\n        }\n        index -= 1;\n    }\n    if last_vowel\
    \ != ' ' && last_consonant != ' ' {\n        result.push(last_vowel);\n    }\n\
    \    result", "    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(c) {\n           \
    \ last_vowel = i;\n        } else {\n            last_consonant = i;\n       \
    \ }\n        if last_vowel < last_consonant {\n            result = word[last_vowel..last_vowel\
    \ + 1].to_string();\n        }\n    }\n    result", "    let mut vowels = String::new();\n\
    \    let mut consonants = String::new();\n    for c in word.chars() {\n      \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n           \
    \ vowels.push(c);\n        } else {\n            consonants.push(c);\n       \
    \ }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n        return\
    \ String::new();\n    }\n    let mut result = String::new();\n    for c in consonants.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           break;\n        }\n        result.push(c);\n    }\n    result.chars().rev().collect::<String>()",
  "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index = 0;\n    let mut\
    \ consonant_index = 0;\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    for (i, c) in word.iter().enumerate() {\n        if vowels.contains(c)\
    \ {\n            vowel_index = i;\n            vowel_found = true;\n        }\n\
    \        if !vowels.contains(c) && vowel_found {\n            consonant_index\
    \ = i;\n            consonant_found = true;\n            break;\n        }\n \
    \   }\n    if vowel_found && consonant_found {\n        return word[vowel_index].to_string();\n\
    \    }\n    String::new()", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = \"aeiouAEIOU\";\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(c) {\n\
    \            prev_vowel = c;\n        } else if prev_char != ' ' {\n         \
    \   return prev_vowel.to_string();\n        }\n        prev_char = c;\n    }\n\
    \    \"\".to_string()", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n   \
    \ let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if vowels.contains(&c) {\n            if last_consonant {\n             \
    \   result.push(c);\n                break;\n            }\n        } else {\n\
    \            last_consonant = true;\n        }\n    }\n    result", "    let mut\
    \ closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    let mut first_vowel = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n    \
    \        if i < first_vowel {\n                first_vowel = i;\n            }\n\
    \            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    if closest_distance == word.len() || first_vowel == word.len() {\n  \
    \      return String::new();\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    while index > 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            result.push(c);\n            break;\n\
    \        }\n        index -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if prev_char != ' ' && prev_prev_char != ' ' {\n\
    \                result.push(c);\n                break;\n            }\n    \
    \    }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n \
    \   result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = String::new();\n    let mut found = false;\n    let mut prev_is_vowel = false;\n\
    \    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n       \
    \     if !prev_is_vowel {\n                result.push(c);\n                found\
    \ = true;\n                break;\n            }\n            prev_is_vowel =\
    \ true;\n        } else {\n            prev_is_vowel = false;\n        }\n   \
    \ }\n    if found {\n        result.chars().rev().collect()\n    } else {\n  \
    \      String::new()\n    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < closest_index {\n                closest_index = i;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            if !closest_vowel.is_empty() {\n                break;\n    \
    \        }\n        }\n    }\n    closest_vowel", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i - last_consonant_index\
    \ < closest_vowel_distance {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_distance = i - last_consonant_index;\n        \
    \    }\n        } else {\n            last_consonant_index = i;\n        }\n \
    \   }\n    closest_vowel", "    let mut result = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n            if last_vowel > last_consonant {\n                result.push(c);\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ vowels = \"aeiou\";\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut closest_vowel = String::new();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            last_vowel = i;\n        } else\
    \ {\n            last_consonant = i;\n        }\n        if last_vowel > last_consonant\
    \ {\n            closest_vowel = c.to_string();\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < closest_vowel_index && i > last_consonant_index {\n  \
    \              closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            last_consonant_index = i;\n    \
    \    }\n    }\n    closest_vowel", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let mut j = i;\n            while j > 0 {\n                if\
    \ vowels.contains(&word.chars().nth(j - 1).unwrap()) {\n                    break;\n\
    \                }\n                j -= 1;\n            }\n            if j >\
    \ 0 && i - j < closest_distance {\n                closest_distance = i - j;\n\
    \                closest_vowel = c.to_string();\n            }\n        }\n  \
    \  }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i - last_consonant_index\
    \ > 1 && i - last_consonant_index < closest_vowel_distance {\n               \
    \ closest_vowel = c.to_string();\n                closest_vowel_distance = i -\
    \ last_consonant_index;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = 0;\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = index;\n     \
    \   } else {\n            last_consonant = index;\n            if last_vowel >\
    \ last_consonant {\n                result.push(c);\n                break;\n\
    \            }\n        }\n        index += 1;\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut index = word.len();\n    let mut\
    \ vowel_index = word.len();\n    let mut prev_is_vowel = false;\n    for (i, c)\
    \ in word.chars().rev().enumerate() {\n        if vowels.contains(&c) {\n    \
    \        if prev_is_vowel {\n                break;\n            }\n         \
    \   vowel_index = index - i;\n            prev_is_vowel = true;\n        } else\
    \ {\n            prev_is_vowel = false;\n        }\n    }\n    if vowel_index\
    \ == word.len() {\n        return String::new();\n    }\n    word.chars().nth(vowel_index).unwrap().to_string()",
  "    let mut result = String::new();\n    let mut prev_is_consonant = false;\n \
    \   let mut prev_is_vowel = false;\n    for c in word.chars().rev() {\n      \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n           \
    \ if prev_is_consonant {\n                result.push(c);\n                break;\n\
    \            }\n            prev_is_vowel = true;\n        } else {\n        \
    \    if prev_is_vowel {\n                result.push(c);\n                break;\n\
    \            }\n            prev_is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut vowel_index = 0;\n    let mut\
    \ vowel_found = false;\n    while index > 0 {\n        if vowels.contains(&word.chars().nth(index).unwrap())\
    \ {\n            vowel_index = index;\n            vowel_found = true;\n     \
    \   } else if vowel_found {\n            result.push(word.chars().nth(vowel_index).unwrap());\n\
    \            break;\n        }\n        index -= 1;\n    }\n    result", "   \
    \ let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n \
    \   let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            if i < closest_vowel_index {\n\
    \                closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if !closest_vowel.is_empty() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let mut distance = 0;\n                for j in (i +\
    \ 1)..word.len() {\n                    if vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                        break;\n                    }\n                 \
    \   distance += 1;\n                }\n                if distance < closest_distance\
    \ {\n                    closest_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowel\
    \ = String::new();\n    let mut vowel_idx = 0;\n    let mut consonant_idx = 0;\n\
    \    let mut is_consonant = false;\n    let mut is_vowel = false;\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in word.iter().enumerate()\
    \ {\n        if vowels.contains(c) {\n            vowel_idx = i;\n           \
    \ vowel.push(*c);\n            is_vowel = true;\n        } else {\n          \
    \  consonant_idx = i;\n            is_consonant = true;\n        }\n        if\
    \ is_vowel && is_consonant {\n            break;\n        }\n    }\n    if vowel_idx\
    \ > consonant_idx {\n        vowel\n    } else {\n        String::new()\n    }",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = \"\
    \".to_string();\n    let mut closest_distance = word.len();\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            let\
    \ mut distance = word.len() - i;\n            if distance < closest_distance {\n\
    \                closest_distance = distance;\n                closest_vowel =\
    \ c.to_string();\n            }\n        }\n    }\n    closest_vowel", "    let\
    \ vowels = \"aeiou\";\n    let mut result = String::new();\n    let mut prev_is_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(c) {\n\
    \            if prev_is_consonant {\n                result.push(c);\n       \
    \         break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let\
    \ mut result = String::new();\n    let mut index = word.len() - 1;\n    let mut\
    \ found_consonant = false;\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(c) {\n            if found_consonant {\n         \
    \       result.push(c);\n                break;\n            }\n        } else\
    \ {\n            found_consonant = true;\n        }\n        index -= 1;\n   \
    \ }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel\
    \ = \"\";\n    let mut distance = word.len();\n    let mut prev_vowel = false;\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(c)\
    \ {\n            if prev_vowel {\n                break;\n            }\n    \
    \        prev_vowel = true;\n            closest_vowel = c.to_string().as_str();\n\
    \            distance = i;\n        } else {\n            prev_vowel = false;\n\
    \        }\n    }\n    if distance == word.len() {\n        return \"\".to_string();\n\
    \    }\n    closest_vowel.to_string()", "    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if c.is_vowel() {\n            if last_consonant {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        } else {\n            last_consonant\
    \ = true;\n        }\n    }\n    closest_vowel", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut\
    \ last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n        if\
    \ vowels.contains(c) {\n            last_vowel = i;\n        } else {\n      \
    \      last_consonant = i;\n        }\n        if last_vowel > last_consonant\
    \ {\n            result = word[last_vowel..last_vowel + 1].to_string();\n    \
    \    }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut vowel_idx = word.len();\n    let mut vowel_char = ' ';\n    for (idx,\
    \ c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n \
    \           vowel_idx = idx;\n            vowel_char = c;\n            break;\n\
    \        }\n    }\n    if vowel_idx == word.len() {\n        return String::from(\"\
    \");\n    }\n    for (idx, c) in word.chars().enumerate().rev() {\n        if\
    \ !vowels.contains(&c) && idx < vowel_idx {\n            return vowel_char.to_string();\n\
    \        }\n    }\n    String::from(\"\")", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let\
    \ mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if prev_char\
    \ != ' ' && prev_prev_char != ' ' {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut index = word.len();\n    let mut result =\
    \ String::new();\n    for i in (0..word.len()).rev() {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            index = i;\n            break;\n        }\n    }\n    for i in\
    \ (0..index).rev() {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            result = word.chars().nth(index).unwrap().to_string();\n    \
    \        break;\n        }\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                if !vowels.contains(&word.chars().nth(i\
    \ - 1).unwrap()) && !vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n  \
    \                  if distance > i {\n                        distance = i;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut result = String::new();\n    let mut consonants = 0;\n    let mut vowels\
    \ = 0;\n    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let\
    \ mut last_index = 0;\n    let mut last_char = ' ';\n    for (index, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            vowels += 1;\n            last_vowel\
    \ = index;\n        } else {\n            consonants += 1;\n            last_consonant\
    \ = index;\n        }\n        if consonants > 0 && vowels > 0 && last_vowel >\
    \ last_consonant {\n            if last_index == 0 {\n                last_index\
    \ = index;\n                last_char = c;\n            } else if index - last_index\
    \ < last_index - last_char {\n                last_index = index;\n          \
    \      last_char = c;\n            }\n        }\n    }\n    if last_index > 0\
    \ {\n        result.push(last_char);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n\
    \    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            if prev_char != ' ' && prev_char != 'a'\
    \ && prev_char != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char !=\
    \ 'u' {\n                result.push(c);\n                break;\n           \
    \ }\n            prev_vowel = c;\n        }\n        prev_char = c;\n    }\n \
    \   if result.is_empty() {\n        result.push(prev_vowel);\n    }\n    result",
  "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i > 0 && !vowels.contains(word.chars().nth(i\
    \ - 1).unwrap()) {\n                if i < closest_distance {\n              \
    \      closest_distance = i;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    let mut distance\
    \ = 0;\n    let mut is_consonant = false;\n    let mut is_vowel = false;\n   \
    \ for (i, c) in word.chars().enumerate() {\n        if is_vowel_char(c) {\n  \
    \          is_vowel = true;\n            last_vowel = i;\n            if is_consonant\
    \ {\n                distance = i - last_consonant;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n        } else {\n            is_consonant = true;\n            last_consonant\
    \ = i;\n        }\n    }\n    if !is_vowel || !is_consonant {\n        return\
    \ String::new();\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = ' ';\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            closest_vowel = c;\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if !vowels.contains(&c) && i < closest_vowel_index {\n          \
    \  return closest_vowel.to_string();\n        }\n    }\n    \"\".to_string()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    while index > 0 {\n        if !is_consonant && !is_vowel\
    \ {\n            if vowels.contains(&word.chars().nth(index).unwrap()) {\n   \
    \             is_vowel = true;\n            } else {\n                is_consonant\
    \ = true;\n            }\n        } else if is_consonant && !is_vowel {\n    \
    \        if vowels.contains(&word.chars().nth(index).unwrap()) {\n           \
    \     result.push(word.chars().nth(index).unwrap());\n                break;\n\
    \            }\n        }\n        index -= 1;\n    }\n    result", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut result = String::new();\n    let mut index =\
    \ word.len() - 1;\n    let mut found_vowel = false;\n    while index > 0 {\n \
    \       let c = word.chars().nth(index).unwrap();\n        if vowels.contains(c)\
    \ {\n            found_vowel = true;\n        } else if found_vowel {\n      \
    \      result.push(c);\n            break;\n        }\n        index -= 1;\n \
    \   }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    let mut prev_char = ' ';\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && prev_char\
    \ != c {\n                if i < closest_vowel_index {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n        } else {\n            prev_char = c;\n        }\n    }\n\
    \    closest_vowel", "    let vowels = \"aeiou\";\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(c) {\n     \
    \       last_vowel = i;\n            if last_consonant > 0 {\n               \
    \ result.push(word.chars().nth(last_vowel).unwrap());\n                break;\n\
    \            }\n        } else {\n            last_consonant = i;\n        }\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_distance = word.len();\n\
    \    let mut prev_char = ' ';\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && prev_char\
    \ != c {\n                if i < closest_vowel_distance {\n                  \
    \  closest_vowel_distance = i;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n        }\n        prev_char = c;\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                if word.chars().nth(i\
    \ - 1).unwrap().is_ascii_lowercase() && word.chars().nth(i + 1).unwrap().is_ascii_lowercase()\
    \ {\n                    let distance = word.len() - i;\n                    if\
    \ distance < closest_distance {\n                        closest_distance = distance;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            vowel_index = i;\n        \
    \    break;\n        }\n    }\n    if vowel_index < word.len() {\n        for\
    \ (i, c) in word.chars().enumerate().rev() {\n            if i < vowel_index &&\
    \ !vowels.contains(&c) {\n                closest_vowel.push(word.chars().nth(vowel_index).unwrap());\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ prev_prev_char = ' ';\n    let mut prev_prev_prev_char = ' ';\n    let mut found_vowel\
    \ = false;\n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            if prev_char != ' ' && prev_prev_char\
    \ != ' ' && prev_prev_prev_char != ' ' {\n                if prev_char != 'a'\
    \ && prev_char != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char !=\
    \ 'u' && prev_prev_char != 'a' && prev_prev_char != 'e' && prev_prev_char != 'i'\
    \ && prev_prev_char != 'o' && prev_prev_char != 'u' {\n                    result.push(c);\n\
    \                    found_vowel = true;\n                    break;\n       \
    \         }\n            }\n        }\n        prev_prev_prev_char = prev_prev_char;\n\
    \        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n    if !found_vowel\
    \ {\n        result = String::new();\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut index = word.len();\n    let mut result =\
    \ \"\".to_string();\n    for i in (0..word.len()).rev() {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if index - i > 1 {\n                result = word.chars().nth(i).unwrap().to_string();\n\
    \            }\n            index = i;\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut last_consonant = false;\n    let mut\
    \ last_vowel = false;\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut last_vowel_char = ' ';\n    let mut last_consonant_char =\
    \ ' ';\n    let mut last_vowel_distance = 0;\n    let mut last_consonant_distance\
    \ = 0;\n    let mut distance = 0;\n    let mut index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_distance =\
    \ 0;\n    let mut consonant_distance = 0;\n    let mut vowel_index = 0;\n    let\
    \ mut consonant_index = 0;\n    let mut vowel_char = ' ';\n    let mut consonant_char\
    \ = ' ';\n    for c in word.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            if last_consonant {\n           \
    \     vowel_found = true;\n                vowel_distance = distance;\n      \
    \          vowel_index = index;\n                vowel_char = c;\n           \
    \ }\n            last_vowel = true;\n            last_consonant = false;\n   \
    \         last_vowel_distance = distance;\n            last_vowel_index = index;\n\
    \            last_vowel_char = c;\n        } else {\n            if last_vowel\
    \ {\n                consonant_found = true;\n                consonant_distance\
    \ = distance;\n                consonant_index = index;\n                consonant_char\
    \ = c;\n            }\n            last_consonant = true;\n            last_vowel\
    \ = false;\n            last_consonant_distance = distance;\n            last_consonant_index\
    \ = index;\n            last_consonant_char = c;\n        }\n        distance\
    \ += 1;\n        index += 1;\n    }\n    if vowel_found && consonant_found {\n\
    \        if vowel_distance <", "    let vowels = \"aeiouAEIOU\";\n    let mut\
    \ closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(c)\
    \ {\n            if i < closest_vowel_index {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = c.to_string();\n            }\n      \
    \  } else {\n            if !closest_vowel.is_empty() {\n                break;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = word[last_vowel..=last_vowel].to_string();\n\
    \        }\n    }\n    result", "    let mut res = String::new();\n    let mut\
    \ flag = false;\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for i in (0..word.len()).rev()\
    \ {\n        let c = word.chars().nth(i).unwrap();\n        if vowels.contains(&c)\
    \ {\n            if flag {\n                res.push(c);\n                break;\n\
    \            }\n        } else if consonants.contains(&c) {\n            flag\
    \ = true;\n        }\n    }\n    res", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut last_consonant = 0;\n\
    \    let mut last_vowel = 0;\n    for (i, c) in word.chars().enumerate() {\n \
    \       if vowels.contains(&c) {\n            last_vowel = i;\n        } else\
    \ {\n            last_consonant = i;\n        }\n        if last_vowel > last_consonant\
    \ {\n            result = c.to_string();\n        }\n    }\n    result", "   \
    \ let mut vowels = String::new();\n    for c in word.chars().rev() {\n       \
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n\
    \        } else if vowels.len() > 0 {\n            return vowels;\n        }\n\
    \    }\n    String::new()", "    let mut word_chars = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance\
    \ = 0;\n    let mut consonant_count = 0;\n    let mut vowel_count = 0;\n    let\
    \ mut vowel_index = 0;\n    let mut vowel_distance = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    for (index, letter) in word_chars.iter().enumerate()\
    \ {\n        if vowels.contains(letter) {\n            vowel_count += 1;\n   \
    \         vowel_index = index;\n            vowel_distance = vowel_count - consonant_count;\n\
    \            vowel_found = true;\n        } else {\n            consonant_count\
    \ += 1;\n            consonant_found = true;\n        }\n        if vowel_found\
    \ && consonant_found {\n            if closest_vowel_distance == 0 {\n       \
    \         closest_vowel_distance = vowel_distance;\n                closest_vowel_index\
    \ = vowel_index;\n            } else if vowel_distance < closest_vowel_distance\
    \ {\n                closest_vowel_distance = vowel_distance;\n              \
    \  closest_vowel_index = vowel_index;\n            }\n            vowel_found\
    \ = false;\n            consonant_found = false;\n            vowel_count = 0;\n\
    \            consonant_count = 0;\n        }\n    }\n    if closest_vowel_distance\
    \ != 0 {\n        closest_vowel.push(word_chars[closest_vowel_index]);\n    }\n\
    \    closest_vowel", "    let mut vowels = String::new();\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           vowels.push(c);\n        } else if vowels.len() > 0 {\n          \
    \  return vowels;\n        }\n    }\n    vowels", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut vowel_index = 0;\n    let mut vowel_distance = 0;\n    let mut closest_vowel\
    \ = \"\";\n    for i in (0..word_chars.len()).rev() {\n        if vowels.contains(&word_chars[i])\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    for\
    \ i in (0..word_chars.len()).rev() {\n        if !vowels.contains(&word_chars[i])\
    \ {\n            vowel_distance = vowel_index - i;\n            break;\n     \
    \   }\n    }\n    if vowel_distance > 1 {\n        closest_vowel = &word_chars[vowel_index].to_string();\n\
    \    }\n    closest_vowel.to_string()", "    let vowels = \"aeiouAEIOU\";\n  \
    \  let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(c) {\n            last_vowel_index = i;\n        }\
    \ else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut i = word.len() - 1;\n    let mut prev_vowel = false;\n    while i\
    \ > 0 {\n        let c = word.chars().nth(i).unwrap();\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if prev_vowel {\n\
    \                break;\n            }\n            result = c.to_string();\n\
    \            prev_vowel = true;\n        } else {\n            prev_vowel = false;\n\
    \        }\n        i -= 1;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut prev_vowel = false;\n    while index > 0 {\n        let letter\
    \ = word.chars().nth(index).unwrap();\n        if vowels.contains(&letter) {\n\
    \            if prev_vowel {\n                break;\n            }\n        \
    \    result = letter.to_string();\n            prev_vowel = true;\n        } else\
    \ {\n            prev_vowel = false;\n        }\n        index -= 1;\n    }\n\
    \    result", "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            if i < closest_vowel_index {\n\
    \                closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                return closest_vowel;\n            }\n        }\n    }\n\
    \    String::new()", "    let vowels = \"aeiou\";\n    let mut vowel_index = 0;\n\
    \    let mut prev_index = 0;\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for (index, c) in word.chars().rev().enumerate() {\n        if vowels.contains(c)\
    \ {\n            vowel_index = index;\n            prev_vowel = c;\n         \
    \   break;\n        }\n    }\n    for (index, c) in word.chars().rev().enumerate()\
    \ {\n        if !vowels.contains(c) && prev_char != ' ' && !vowels.contains(prev_char)\
    \ {\n            prev_index = index;\n            break;\n        }\n        prev_char\
    \ = c;\n    }\n    if vowel_index > prev_index {\n        return String::new();\n\
    \    }\n    prev_vowel.to_string()", "    let mut result = String::new();\n  \
    \  let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut vowel_found = false;\n    let mut consonant_found = false;\n    let\
    \ mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut last_index\
    \ = 0;\n    let mut vowel_distance = 0;\n    let mut consonant_distance = 0;\n\
    \    let mut last_distance = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for (index, letter)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&letter) {\n     \
    \       vowel_found = true;\n            vowel_index = index;\n            vowel_distance\
    \ = vowel_index - consonant_index;\n            if vowel_distance > last_distance\
    \ {\n                last_distance = vowel_distance;\n                last_vowel\
    \ = letter.to_string();\n                last_index = index;\n            }\n\
    \        }\n        if consonants.contains(&letter) {\n            consonant_found\
    \ = true;\n            consonant_index = index;\n            consonant_distance\
    \ = consonant_index - vowel_index;\n            if consonant_distance > last_distance\
    \ {\n                last_distance = consonant_distance;\n                last_consonant\
    \ = letter.to_string();\n                last_index = index;\n            }\n\
    \        }\n    }\n    if vowel_found && consonant_found {\n        result = last_vowel;\n\
    \    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut prev_vowel = false;\n    while\
    \ index > 0 {\n        if vowels.contains(word.chars().nth(index).unwrap()) {\n\
    \            if prev_vowel {\n                break;\n            }\n        \
    \    result = word.chars().nth(index).unwrap().to_string();\n            prev_vowel\
    \ = true;\n        } else {\n            prev_vowel = false;\n        }\n    \
    \    index -= 1;\n    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c) {\n\
    \            let mut distance = word.len() - i;\n            if i > 0 {\n    \
    \            distance -= 1;\n            }\n            if distance < closest_vowel_distance\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut vowel_index = 0;\n    let mut\
    \ found_vowel = false;\n    let mut found_consonant = false;\n    while index\
    \ > 0 {\n        if vowels.contains(&word.chars().nth(index).unwrap()) {\n   \
    \         vowel_index = index;\n            found_vowel = true;\n        } else\
    \ if found_vowel {\n            found_consonant = true;\n            break;\n\
    \        }\n        index -= 1;\n    }\n    if found_vowel && found_consonant\
    \ {\n        result.push(word.chars().nth(vowel_index).unwrap());\n    }\n   \
    \ result", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n  \
    \  let mut vowel = String::new();\n    let mut flag = false;\n    for i in 0..word.len()\
    \ {\n        if word[i].is_vowel() {\n            vowel.push(word[i]);\n     \
    \       if flag {\n                break;\n            }\n        } else {\n \
    \           flag = true;\n        }\n    }\n    vowel.chars().rev().collect::<String>()",
  "    let vowels = \"aeiou\";\n    let mut result = String::new();\n    let mut last_consonant\
    \ = false;\n    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(c)\
    \ {\n            if last_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n        } else {\n            last_consonant\
    \ = true;\n        }\n    }\n    result.chars().rev().collect()", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index = -1;\n    let mut\
    \ word_chars: Vec<char> = word.chars().collect();\n    word_chars.reverse();\n\
    \    for (i, c) in word_chars.iter().enumerate() {\n        if vowels.contains(c)\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    if\
    \ vowel_index == -1 {\n        return String::from(\"\");\n    }\n    let mut\
    \ closest_vowel = String::from(\"\");\n    for (i, c) in word_chars.iter().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i > vowel_index {\n     \
    \           break;\n            }\n            closest_vowel = c.to_string();\n\
    \        }\n    }\n    closest_vowel", "    let mut vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    vowels.extend(vec!['A', 'E', 'I', 'O', 'U']);\n    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && !vowels.contains(&prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = \"\".to_string();\n    let\
    \ mut closest_distance = word.len();\n    let mut last_consonant = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < last_consonant && last_consonant - i < closest_distance\
    \ {\n                closest_vowel = c.to_string();\n                closest_distance\
    \ = last_consonant - i;\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut last_vowel = None;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = Some(c);\n   \
    \     } else if last_vowel.is_some() {\n            return last_vowel.unwrap().to_string();\n\
    \        }\n    }\n    String::new()", "    let mut closest_vowel = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_consonant =\
    \ false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if last_consonant {\n                closest_vowel.push(c);\n   \
    \             break;\n            }\n        } else {\n            last_consonant\
    \ = true;\n        }\n    }\n    closest_vowel.chars().rev().collect()", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if word.chars().nth(i - 1).unwrap().is_ascii_lowercase()\
    \ &&\n                    word.chars().nth(i + 1).unwrap().is_ascii_lowercase()\
    \ {\n                    if i < distance {\n                        distance =\
    \ i;\n                        closest_vowel = c.to_string();\n               \
    \     }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut prev\
    \ = ' ';\n    let mut vowel = ' ';\n    for c in word.iter() {\n        if c.is_vowel()\
    \ {\n            vowel = *c;\n            if prev.is_consonant() {\n         \
    \       break;\n            }\n        }\n        prev = *c;\n    }\n    if vowel\
    \ == ' ' {\n        String::new()\n    } else {\n        vowel.to_string()\n \
    \   }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  if i > 0 && i < word.len() - 1 {\n                if word.chars().nth(i - 1).unwrap().is_ascii_lowercase()\
    \ &&\n                    word.chars().nth(i + 1).unwrap().is_ascii_lowercase()\
    \ {\n                    if i < closest_distance {\n                        closest_distance\
    \ = i;\n                        closest_vowel = c.to_string();\n             \
    \       }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance = 0;\n\
    \    let mut last_consonant_index = 0;\n    let mut last_consonant_distance =\
    \ 0;\n    let mut vowel_found = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            vowel_found = true;\n     \
    \       closest_vowel_index = i;\n            closest_vowel_distance = last_consonant_index\
    \ - closest_vowel_index;\n            closest_vowel = c.to_string();\n       \
    \ } else {\n            if vowel_found {\n                last_consonant_index\
    \ = i;\n                last_consonant_distance = last_consonant_index - closest_vowel_index;\n\
    \                if last_consonant_distance < closest_vowel_distance {\n     \
    \               closest_vowel = word.chars().nth(closest_vowel_index).unwrap().to_string();\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = \"aeiou\";\n    let mut closest_vowel = \"\";\n    let mut closest_vowel_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let mut distance = word.len() - i;\n            for (j, d) in\
    \ word.chars().enumerate().rev() {\n                if j < i {\n             \
    \       if !vowels.contains(d) {\n                        distance = i - j;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            if distance < closest_vowel_distance {\n           \
    \     closest_vowel_distance = distance;\n                closest_vowel = c.to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut last_consonant = 0;\n    let mut last_vowel\
    \ = 0;\n    let mut result = String::new();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", "    let mut closest_vowel = String::new();\n    let mut vowel_index\
    \ = 0;\n    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    let\
    \ mut prev_vowel_index = 0;\n    let mut prev_prev_vowel_index = 0;\n    let mut\
    \ vowel_found = false;\n    let mut prev_vowel_found = false;\n    let mut prev_prev_vowel_found\
    \ = false;\n    let mut prev_consonant_found = false;\n    let mut prev_prev_consonant_found\
    \ = false;\n    let mut prev_prev_prev_consonant_found = false;\n    let mut prev_prev_prev_vowel_found\
    \ = false;\n    let mut prev_prev_prev_vowel_index = 0;\n    let mut prev_prev_prev_char\
    \ = ' ';\n    let mut prev_prev_prev_prev_char = ' ';\n    let mut prev_prev_prev_prev_vowel_found\
    \ = false;\n    let mut prev_prev_prev_prev_vowel_index = 0;\n    let mut prev_prev_prev_prev_prev_char\
    \ = ' ';\n    let mut prev_prev_prev_prev_prev_vowel_found = false;\n    let mut\
    \ prev_prev_prev_prev_prev_vowel_index = 0;\n    let mut prev_prev_prev_prev_prev_prev_char\
    \ = ' ';\n    let mut prev_prev_prev_prev_prev_prev_vowel_found = false;\n   \
    \ let mut prev_prev_prev_prev_prev_prev_vowel_index = 0;\n    let mut prev_prev_prev_prev_prev_prev_prev_char\
    \ = ' ';\n    let mut prev_prev_prev_prev_prev_prev_prev_vowel_found = false;\n\
    \    let mut prev_prev_prev_prev_prev_prev_prev_vowel_index = 0;\n    let mut\
    \ prev_prev_prev_prev_prev_prev_prev_prev_char = ' ';\n    let mut prev_", " \
    \   let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = \"\";\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut last_consonant_index = 0;\n \
    \   for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c) {\n\
    \            if i > last_consonant_index && i - last_consonant_index < closest_vowel_index\
    \ {\n                closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i - last_consonant_index;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut prev_vowel = false;\n    while index >= 0 {\n        let c\
    \ = word.chars().nth(index).unwrap();\n        if vowels.contains(&c) {\n    \
    \        if prev_vowel {\n                break;\n            }\n            result\
    \ = c.to_string();\n            prev_vowel = true;\n        } else {\n       \
    \     prev_vowel = false;\n        }\n        index -= 1;\n    }\n    result",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_char_is_vowel\
    \ = false;\n    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if !prev_char_is_vowel {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_index = i;\n            }\n            prev_char_is_vowel\
    \ = true;\n        } else {\n            prev_char_is_vowel = false;\n       \
    \ }\n    }\n    if closest_vowel_index == word.len() {\n        String::new()\n\
    \    } else {\n        closest_vowel\n    }", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut closest_vowel = String::new();\n    let mut closest_distance =\
    \ word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let mut distance = word.len() - i;\n            if i > 0 {\n\
    \                if !vowels.contains(word.chars().nth(i - 1).unwrap()) {\n   \
    \                 if distance < closest_distance {\n                        closest_distance\
    \ = distance;\n                        closest_vowel = c.to_string();\n      \
    \              }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut res = String::new();\n    let mut vowel_pos = 0;\n    let mut vowel_dist\
    \ = 0;\n    let mut last_consonant_pos = 0;\n    let mut found_vowel = false;\n\
    \    let mut found_consonant = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if \"aeiou\".contains(c) {\n            if found_consonant {\n  \
    \              if !found_vowel {\n                    vowel_pos = i;\n       \
    \             vowel_dist = last_consonant_pos - i;\n                    found_vowel\
    \ = true;\n                } else if last_consonant_pos - i < vowel_dist {\n \
    \                   vowel_pos = i;\n                    vowel_dist = last_consonant_pos\
    \ - i;\n                }\n            }\n        } else {\n            if found_vowel\
    \ {\n                last_consonant_pos = i;\n                found_consonant\
    \ = true;\n            }\n        }\n    }\n    if found_vowel {\n        res.push(word.chars().nth(vowel_pos).unwrap());\n\
    \    }\n    res", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let mut\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ 0;\n    let mut closest_consonant_index = 0;\n    let mut closest_consonant_index_2\
    \ = 0;\n    let mut closest_vowel_distance = 0;\n    let mut closest_consonant_distance\
    \ = 0;\n    let mut closest_consonant_distance_2 = 0;\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut consonant_index_2 = 0;\n\
    \    let mut vowel_distance = 0;\n    let mut consonant_distance = 0;\n    let\
    \ mut consonant_distance_2 = 0;\n    let mut vowel_found = false;\n    let mut\
    \ consonant_found = false;\n    let mut consonant_found_2 = false;\n    let mut\
    \ vowel_found_first = false;\n    let mut consonant_found_first = false;\n   \
    \ let mut consonant_found_first_2 = false;\n    let mut vowel_found_last = false;\n\
    \    let mut consonant_found_last = false;\n    let mut consonant_found_last_2\
    \ = false;\n    let mut vowel_found_first_index = 0;\n    let mut consonant_found_first_index\
    \ = 0;\n    let mut consonant_found_first_index_2 = 0;\n    let mut vowel_found_last_index\
    \ = 0;\n    let mut consonant_found_last_index = 0;\n    let mut consonant_found_last_index_2\
    \ = 0;\n    let mut vowel_found_first_distance = 0;\n    let", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < word.len() {\n        if vowels.contains(&word[i])\
    \ {\n            if i == 0 {\n                return String::new();\n        \
    \    }\n            if vowels.contains(&word[i - 1]) {\n                i += 1;\n\
    \                continue;\n            }\n            return word[i].to_string();\n\
    \        }\n        i += 1;\n    }\n    String::new()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut found_vowel\
    \ = false;\n    let mut found_consonant = false;\n    for c in word.chars() {\n\
    \        if vowels.contains(&c) {\n            last_vowel = c.to_string();\n \
    \           found_vowel = true;\n        } else {\n            last_consonant\
    \ = c.to_string();\n            found_consonant = true;\n        }\n        if\
    \ found_vowel && found_consonant {\n            result = last_vowel;\n       \
    \     break;\n        }\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut found_vowel = false;\n    let mut found_consonant = false;\n\
    \    while index > 0 {\n        let c = word.chars().nth(index).unwrap();\n  \
    \      if vowels.contains(&c) {\n            if found_consonant {\n          \
    \      result.push(c);\n                found_vowel = true;\n                break;\n\
    \            }\n        } else {\n            if found_vowel {\n             \
    \   found_consonant = true;\n            }\n        }\n        index -= 1;\n \
    \   }\n    result", "    let vowels = \"aeiou\";\n    let mut result = String::new();\n\
    \    let mut prev_vowel = false;\n    for c in word.chars().rev() {\n        if\
    \ vowels.contains(c) {\n            if prev_vowel {\n                break;\n\
    \            }\n            result.push(c);\n            prev_vowel = true;\n\
    \        } else {\n            prev_vowel = false;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return String::new();\n    }\n    let mut result = String::new();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < vowels.len() && j < consonants.len()\
    \ {\n        if vowels.chars().nth(i).unwrap() == consonants.chars().nth(j).unwrap()\
    \ {\n            i += 1;\n            j += 1;\n        } else {\n            result.push(vowels.chars().nth(i).unwrap());\n\
    \            i += 1;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n   \
    \ vowels.extend(vec!['A', 'E', 'I', 'O', 'U']);\n    let mut closest_vowel = String::new();\n\
    \    let mut prev_char = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char != ' ' && !vowels.contains(&prev_char) {\n     \
    \           closest_vowel.push(c);\n                break;\n            }\n  \
    \      }\n        prev_char = c;\n    }\n    closest_vowel", "    let mut result\
    \ = String::new();\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_chars:\
    \ Vec<char> = word.chars().collect();\n    let mut word_chars_len = word_chars.len();\n\
    \    let mut word_chars_rev: Vec<char> = word_chars.clone();\n    word_chars_rev.reverse();\n\
    \    let mut word_chars_rev_len = word_chars_rev.len();\n    let mut i = 0;\n\
    \    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n\
    \    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n\
    \    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n\
    \    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut e = 0;\n    let mut i = 0;\n\
    \    let mut o = 0;\n    let mut u = 0;\n    let mut a_index = 0;\n    let mut\
    \ e_index = 0;\n    let mut i_index = 0;\n    let mut o_index = 0;\n    let mut\
    \ u_index = 0;\n    let mut a_index_rev = 0;\n    let mut e_index_rev = 0;\n \
    \   let mut i_index_rev = 0;\n    let mut o_index_rev = 0;\n    let mut u_index_rev\
    \ = 0;\n    let mut b_index = 0;\n    let mut c", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut index\
    \ = word.len();\n    let mut vowel_index = word.len();\n    let mut found_vowel\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            vowel_index = index;\n            found_vowel = true;\n     \
    \   } else if found_vowel {\n            break;\n        }\n        index -= 1;\n\
    \    }\n    if vowel_index == word.len() {\n        return String::new();\n  \
    \  }\n    let mut result = String::new();\n    result.push(word.chars().nth(vowel_index).unwrap());\n\
    \    result", "    let mut closest_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_char\
    \ = String::new();\n    let mut vowels = String::from(\"aeiou\");\n    let mut\
    \ consonants = String::from(\"bcdfghjklmnpqrstvwxyz\");\n    for c in word.chars()\
    \ {\n        if vowels.contains(c) {\n            last_vowel = c.to_string();\n\
    \        } else if consonants.contains(c) {\n            last_consonant = c.to_string();\n\
    \        }\n        if last_consonant != \"\" && last_vowel != \"\" && last_char\
    \ != last_vowel {\n            closest_vowel = last_vowel.clone();\n        }\n\
    \        last_char = c.to_string();\n    }\n    closest_vowel", "    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n\
    \    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            if prev_char != ' ' && prev_char != 'a'\
    \ && prev_char != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char !=\
    \ 'u' {\n                result.push(c);\n                break;\n           \
    \ }\n            prev_vowel = c;\n        }\n        prev_char = c;\n    }\n \
    \   if result.is_empty() {\n        result.push(prev_vowel);\n    }\n    result",
  "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut result\
    \ = String::new();\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    for i in (0..word_chars.len()).rev() {\n        if vowels.contains(&word_chars[i])\
    \ {\n            vowel_index = i;\n            vowel_found = true;\n        }\n\
    \        if consonants.contains(&word_chars[i]) {\n            consonant_index\
    \ = i;\n            consonant_found = true;\n        }\n        if vowel_found\
    \ && consonant_found {\n            result.push(word_chars[vowel_index]);\n  \
    \          break;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants =\
    \ vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut word_chars_len = word_chars.len();\n    let mut word_chars_rev: Vec<char>\
    \ = word_chars.clone();\n    word_chars_rev.reverse();\n    let mut word_chars_rev_len\
    \ = word_chars_rev.len();\n    let mut index = 0;\n    let mut index_rev = 0;\n\
    \    let mut found = false;\n    let mut found_rev = false;\n    let mut found_vowel\
    \ = false;\n    let mut found_vowel_rev = false;\n    let mut found_consonant\
    \ = false;\n    let mut found_consonant_rev = false;\n    let mut vowel_index\
    \ = 0;\n    let mut vowel_index_rev = 0;\n    let mut consonant_index = 0;\n \
    \   let mut consonant_index_rev = 0;\n    let mut vowel_index_found = false;\n\
    \    let mut vowel_index_rev_found = false;\n    let mut consonant_index_found\
    \ = false;\n    let mut consonant_index_rev_found = false;\n    let mut vowel_index_found_rev\
    \ = false;\n    let mut vowel_index_rev_found_rev = false;\n    let mut consonant_index_found_rev\
    \ = false;\n    let mut consonant_index_rev_found_rev = false;\n    let mut vowel_index_found_rev_rev\
    \ = false;\n    let mut vowel_index_rev_found_rev_rev = false;\n    let mut consonant_index_found_rev_rev\
    \ = false;\n    let mut consonant_index", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n    \
    \        if i < last_consonant_index {\n                if i < closest_vowel_index\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant_index = i;\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let distance = word.len() -\
    \ i;\n            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = c.to_string();\n            }\n\
    \        }\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    for c in word.iter() {\n        if c.is_ascii_alphabetic() {\n          \
    \  if c.is_ascii_vowel() {\n                vowels.push(*c);\n            } else\
    \ {\n                consonants.push(*c);\n            }\n        }\n    }\n \
    \   if vowels.len() > 0 && consonants.len() > 0 {\n        vowels.chars().next().unwrap().to_string()\n\
    \    } else {\n        String::new()\n    }", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut result = String::new();\n    let mut prev_char = ' ';\n    for\
    \ c in word.chars().rev() {\n        if vowels.contains(c) {\n            if prev_char\
    \ != ' ' && !vowels.contains(prev_char) {\n                result.push(c);\n \
    \               break;\n            }\n        }\n        prev_char = c;\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    let mut consonants = String::from(\"bcdfghjklmnpqrstvwxyz\");\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(c) {\n            if consonants.contains(prev_char)\
    \ && consonants.contains(prev_prev_char) {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut is_consonant = false;\n    while index > 0 {\n        let\
    \ c = word.chars().nth(index).unwrap();\n        if vowels.contains(&c) {\n  \
    \          if is_consonant {\n                result.push(c);\n              \
    \  break;\n            }\n        } else {\n            is_consonant = true;\n\
    \        }\n        index -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let\
    \ mut last_vowel_index = 0;\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    let mut vowel_distance = 0;\n    let mut consonant_distance =\
    \ 0;\n    let mut word_chars = word.chars();\n    let mut word_chars_rev = word.chars().rev();\n\
    \    let mut last_char = word_chars_rev.next().unwrap();\n    let mut first_char\
    \ = word_chars.next().unwrap();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n   \
    \ let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n\
    \    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n\
    \    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll\
    \ = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let\
    \ mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n\
    \    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww\
    \ = 0;\n    let mut xx = 0;\n    let mut yy", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if prev_char != ' ' && !vowels.contains(&prev_char) {\n         \
    \       result.push(c);\n                break;\n            }\n        }\n  \
    \      prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut index = word.len();\n    let mut result = String::new();\n\
    \    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n       \
    \     result = c.to_string();\n            break;\n        }\n        index -=\
    \ 1;\n    }\n    if index == 0 {\n        return String::new();\n    }\n    for\
    \ c in word.chars().rev().skip(index) {\n        if !vowels.contains(&c) {\n \
    \           return result;\n        }\n    }\n    String::new()", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            if i > 0 && word.chars().nth(i - 1).unwrap().is_alphabetic()\
    \ &&\n                i < word.len() - 1 && word.chars().nth(i + 1).unwrap().is_alphabetic()\
    \ {\n                if i < closest_distance {\n                    closest_distance\
    \ = i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut res = String::new();\n    let mut i = word.len()\
    \ - 1;\n    while i > 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if vowels.contains(&word.chars().nth(i - 1).unwrap()) {\n   \
    \             i -= 1;\n            } else {\n                res.push(word.chars().nth(i).unwrap());\n\
    \                break;\n            }\n        }\n        i -= 1;\n    }\n  \
    \  res", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_pos = 0;\n  \
    \  let mut consonant_pos = 0;\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    let mut closest_vowel = String::new();\n    for (i, c) in word.iter().enumerate()\
    \ {\n        if vowels.contains(c) {\n            vowel_pos = i;\n           \
    \ vowel_found = true;\n        }\n        if !vowels.contains(c) && vowel_found\
    \ {\n            consonant_pos = i;\n            consonant_found = true;\n   \
    \         break;\n        }\n    }\n    if vowel_found && consonant_found {\n\
    \        closest_vowel.push(word[vowel_pos]);\n    }\n    closest_vowel", "  \
    \  let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_idx = 0;\n \
    \   let mut vowel_dist = 0;\n    let mut last_consonant_idx = 0;\n    let mut\
    \ last_consonant_dist = 0;\n    let mut last_vowel_idx = 0;\n    let mut last_vowel_dist\
    \ = 0;\n    let mut result = \"\".to_string();\n    let mut idx = word.len() -\
    \ 1;\n    let mut dist = 0;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if vowel_idx == 0 {\n                vowel_idx = idx;\n     \
    \           vowel_dist = dist;\n            }\n            last_vowel_idx = idx;\n\
    \            last_vowel_dist = dist;\n        } else {\n            if last_vowel_idx\
    \ != 0 {\n                if last_consonant_idx == 0 {\n                    last_consonant_idx\
    \ = idx;\n                    last_consonant_dist = dist;\n                }\n\
    \                if vowel_idx != 0 {\n                    if last_consonant_dist\
    \ < vowel_dist {\n                        result = word[vowel_idx..vowel_idx +\
    \ 1].to_string();\n                    } else {\n                        result\
    \ = word[last_vowel_idx..last_vowel_idx + 1].to_string();\n                  \
    \  }\n                    break;\n                }\n            }\n        }\n\
    \        idx -= 1;\n        dist += 1;\n    }\n    result", "    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant_index > 1 && i - last_consonant_index <\
    \ closest_vowel_distance {\n                closest_vowel = c.to_string();\n \
    \               closest_vowel_distance = i - last_consonant_index;\n         \
    \   }\n        } else {\n            last_consonant_index = i;\n        }\n  \
    \  }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut prev_is_consonant = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_is_consonant {\n  \
    \              if i < closest_distance {\n                    closest_distance\
    \ = i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n            prev_is_consonant = false;\n        } else {\n   \
    \         prev_is_consonant = true;\n        }\n    }\n    closest_vowel", " \
    \   let mut closest_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_vowel = String::new();\n    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c.to_string();\n            if !last_consonant.is_empty()\
    \ {\n                closest_vowel = last_vowel.clone();\n                break;\n\
    \            }\n        } else {\n            last_consonant = c.to_string();\n\
    \        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut index = word.len() -\
    \ 1;\n    let mut found_consonant = false;\n    while index > 0 {\n        let\
    \ c = word.chars().nth(index).unwrap();\n        if vowels.contains(&c) {\n  \
    \          if found_consonant {\n                result.push(c);\n           \
    \     break;\n            }\n        } else {\n            found_consonant = true;\n\
    \        }\n        index -= 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    let mut last_consonant = 0;\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut found = false;\n    for i in 0..word.len() {\n        if vowels.contains(&word[i])\
    \ {\n            if i + 1 < word.len() && !vowels.contains(&word[i + 1]) {\n \
    \               result.push(word[i]);\n                found = true;\n       \
    \         break;\n            }\n        }\n    }\n    if found {\n        result\n\
    \    } else {\n        result\n    }", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowels = String::new();\n    for i in 0..word.len() {\n        if\
    \ word[i].is_vowel() {\n            vowels.push(word[i]);\n        } else if vowels.len()\
    \ > 0 {\n            return vowels.chars().rev().collect::<String>();\n      \
    \  }\n    }\n    String::new()", "    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if last_consonant {\n            if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n                closest_vowel.push(c);\n                break;\n        \
    \    }\n        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U'\
    \ {\n                last_consonant = true;\n            }\n        }\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel > last_consonant {\n            result\
    \ = c.to_string();\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let mut closest_vowel = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       if prev_char != ' ' && prev_prev_char != ' ' {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_distance = word.len();\n    let mut prev_char_is_consonant = false;\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char_is_consonant {\n                closest_vowel =\
    \ c.to_string();\n                closest_vowel_distance = i;\n              \
    \  break;\n            }\n        } else {\n            prev_char_is_consonant\
    \ = true;\n        }\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < word.len() {\n        if !word[i].is_alphabetic()\
    \ {\n            word.remove(i);\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    let mut i = 0;\n    while i < word.len() {\n        if word[i].is_alphabetic()\
    \ {\n            break;\n        }\n        i += 1;\n    }\n    let mut j = i;\n\
    \    while j < word.len() {\n        if word[j].is_alphabetic() {\n          \
    \  break;\n        }\n        j += 1;\n    }\n    let mut k = j;\n    while k\
    \ < word.len() {\n        if word[k].is_alphabetic() {\n            break;\n \
    \       }\n        k += 1;\n    }\n    if i == word.len() || j == word.len() ||\
    \ k == word.len() {\n        return String::new();\n    }\n    let mut min_dist\
    \ = word.len();\n    let mut min_vowel = ' ';\n    for l in i..j {\n        if\
    \ word[l].is_alphabetic() {\n            continue;\n        }\n        let dist\
    \ = j - l;\n        if dist < min_dist {\n            min_dist = dist;\n     \
    \       min_vowel = word[l];\n        }\n    }\n    for l in j..k {\n        if\
    \ word[l].is_alphabetic() {\n            continue;\n        }\n        let dist\
    \ = l - j;\n        if dist < min_dist {\n            min_dist = dist;\n     \
    \       min_vowel = word[l];\n        }\n    }\n    min_vowel.to_string()", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let distance = word.len() - i;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut is_consonant = false;\n    for\
    \ i in 0..word.len() {\n        if vowels.contains(&word[i]) {\n            if\
    \ is_consonant {\n                result.push(word[i]);\n                break;\n\
    \            }\n        } else {\n            is_consonant = true;\n        }\n\
    \    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    let mut last_consonant\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  let mut closest_vowel = String::new();\n    let mut closest_distance = 0;\n\
    \    let mut last_consonant_index = 0;\n    let mut last_vowel_index = 0;\n  \
    \  let mut found_vowel = false;\n    for (index, character) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&character) {\n            last_vowel_index =\
    \ index;\n            if found_vowel {\n                if index - last_consonant_index\
    \ < closest_distance {\n                    closest_distance = index - last_consonant_index;\n\
    \                    closest_vowel = character.to_string();\n                }\n\
    \            }\n        } else {\n            found_vowel = true;\n          \
    \  last_consonant_index = index;\n        }\n    }\n    if last_vowel_index ==\
    \ word.len() - 1 {\n        return String::new();\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut last_consonant = false;\n    let\
    \ mut last_vowel = false;\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut current_index = 0;\n    let mut last_index = 0;\n    let mut\
    \ last_char = ' ';\n    for c in word.chars() {\n        if !c.is_alphabetic()\
    \ {\n            continue;\n        }\n        if is_vowel(c) {\n            last_vowel\
    \ = true;\n            last_vowel_index = current_index;\n            if last_consonant\
    \ {\n                last_index = last_consonant_index;\n                last_char\
    \ = word.chars().nth(last_index).unwrap();\n                break;\n         \
    \   }\n        } else {\n            last_consonant = true;\n            last_consonant_index\
    \ = current_index;\n        }\n        current_index += 1;\n    }\n    if last_vowel\
    \ && last_consonant {\n        result.push(last_char);\n    }\n    result", " \
    \   let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = \"\";\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut prev_char = ' ';\n    for (i,\
    \ c) in word.chars().enumerate().rev() {\n        if vowels.contains(c) {\n  \
    \          if prev_char != ' ' && prev_char != c {\n                closest_vowel\
    \ = c.to_string();\n                closest_vowel_index = i;\n               \
    \ break;\n            }\n        }\n        prev_char = c;\n    }\n    if closest_vowel_index\
    \ == word.len() {\n        return \"\".to_string();\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    let mut first_vowel = 0;\n    let\
    \ mut found_vowel = false;\n    for (i, c) in word.chars().enumerate() {\n   \
    \     if is_vowel(c) {\n            if !found_vowel {\n                first_vowel\
    \ = i;\n                found_vowel = true;\n            }\n            if i -\
    \ last_consonant < closest_distance {\n                closest_distance = i -\
    \ last_consonant;\n                closest_vowel = c.to_string();\n          \
    \  }\n        } else {\n            last_consonant = i;\n        }\n    }\n  \
    \  if closest_distance == word.len() - first_vowel {\n        String::new()\n\
    \    } else {\n        closest_vowel\n    }", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut last_consonant_index\
    \ = word.len();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let consonants\
    \ = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < last_consonant_index\
    \ && i < closest_vowel_index {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_index = i;\n            }\n        } else if consonants.contains(&c)\
    \ {\n            last_consonant_index = i;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut prev_char = ' ';\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char != ' ' && prev_char != c {\n                if i\
    \ < closest_vowel_distance {\n                    closest_vowel_distance = i;\n\
    \                    closest_vowel = c.to_string();\n                }\n     \
    \       }\n        }\n        prev_char = c;\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let mut left_consonant = false;\n\
    \            let mut right_consonant = false;\n            for j in (0..i).rev()\
    \ {\n                if !vowels.contains(&word.chars().nth(j).unwrap()) {\n  \
    \                  left_consonant = true;\n                    break;\n      \
    \          }\n            }\n            for j in (i + 1)..word.len() {\n    \
    \            if !vowels.contains(&word.chars().nth(j).unwrap()) {\n          \
    \          right_consonant = true;\n                    break;\n             \
    \   }\n            }\n            if left_consonant && right_consonant {\n   \
    \             if i < closest_distance {\n                    closest_distance\
    \ = i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel = String::new();\n    let mut consonant = false;\n    for c\
    \ in word.iter() {\n        if is_vowel(*c) {\n            if consonant {\n  \
    \              vowel.push(*c);\n                break;\n            }\n      \
    \  } else {\n            consonant = true;\n        }\n    }\n    vowel.chars().rev().collect::<String>()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if !vowels.contains(&word.chars().nth(i - 1).unwrap())\
    \ && !vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n                 \
    \   if i < distance {\n                        distance = i;\n               \
    \         closest_vowel = c.to_string();\n                    }\n            \
    \    }\n            }\n        }\n    }\n    closest_vowel", "    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_consonant = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if last_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n        } else {\n            last_consonant\
    \ = true;\n        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let\
    \ mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            last_vowel = i;\n        } else\
    \ {\n            last_consonant = i;\n            break;\n        }\n    }\n \
    \   if last_consonant == 0 || last_vowel == 0 {\n        return \"\".to_string();\n\
    \    }\n    word.chars().skip(last_consonant + 1).take(last_vowel - last_consonant\
    \ - 1).collect()", "    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..last_vowel_index + 1].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n         \
    \   if last_consonant {\n                closest_vowel.push(c);\n            \
    \    break;\n            }\n        } else {\n            last_consonant = true;\n\
    \        }\n    }\n    closest_vowel.chars().rev().collect()", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let mut left_consonant = false;\n\
    \            let mut right_consonant = false;\n            for j in (0..i).rev()\
    \ {\n                if !vowels.contains(&word.chars().nth(j).unwrap()) {\n  \
    \                  left_consonant = true;\n                    break;\n      \
    \          }\n            }\n            for j in (i+1)..word.len() {\n      \
    \          if !vowels.contains(&word.chars().nth(j).unwrap()) {\n            \
    \        right_consonant = true;\n                    break;\n               \
    \ }\n            }\n            if left_consonant && right_consonant {\n     \
    \           if i < closest_distance {\n                    closest_distance =\
    \ i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    let mut last_consonant = 0;\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < last_consonant && last_consonant\
    \ - i < closest_distance {\n                closest_vowel = c.to_string();\n \
    \               closest_distance = last_consonant - i;\n            }\n      \
    \  } else {\n            last_consonant = i;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut previous_char_is_vowel\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if previous_char_is_vowel {\n                break;\n       \
    \     }\n            previous_char_is_vowel = true;\n            if i < closest_vowel_distance\
    \ {\n                closest_vowel_distance = i;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            previous_char_is_vowel\
    \ = false;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i > 0 && i < word.len() - 1\
    \ {\n                if word.chars().nth(i - 1).unwrap().is_ascii_lowercase()\
    \ &&\n                    word.chars().nth(i + 1).unwrap().is_ascii_lowercase()\
    \ {\n                    if i < closest_distance {\n                        closest_distance\
    \ = i;\n                        closest_vowel = c.to_string();\n             \
    \       }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < word.len() {\n        if vowels.contains(&word[i])\
    \ {\n            if i == 0 {\n                return \"\".to_string();\n     \
    \       }\n            if i == word.len() - 1 {\n                return \"\".to_string();\n\
    \            }\n            if !vowels.contains(&word[i - 1]) && !vowels.contains(&word[i\
    \ + 1]) {\n                return word[i].to_string();\n            }\n      \
    \  }\n        i += 1;\n    }\n    \"\".to_string()", "    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_index = word.len();\n    let mut\
    \ prev_char_is_consonant = false;\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char_is_consonant {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_index = i;\n                break;\n          \
    \  }\n        } else {\n            prev_char_is_consonant = true;\n        }\n\
    \    }\n    if closest_vowel_index == word.len() {\n        String::new()\n  \
    \  } else {\n        closest_vowel\n    }", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n \
    \   for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n            break;\n        }\n    }\n    if last_consonant < last_vowel\
    \ {\n        word[last_consonant..last_vowel].to_string()\n    } else {\n    \
    \    \"\".to_string()\n    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ word.len();\n    for (index, character) in word.chars().enumerate().rev() {\n\
    \        if vowels.contains(&character) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel_index = index;\n                closest_vowel\
    \ = character.to_string();\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i > 0 && i < word.len() -\
    \ 1 {\n                if word.chars().nth(i - 1).unwrap().is_alphabetic() &&\n\
    \                    word.chars().nth(i + 1).unwrap().is_alphabetic() {\n    \
    \                if i < closest_distance {\n                        closest_distance\
    \ = i;\n                        closest_vowel = c.to_string();\n             \
    \       }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_index = 0;\n    let mut\
    \ last_vowel_found = false;\n    let mut last_consonant_found = false;\n    let\
    \ mut word_chars: Vec<char> = word.chars().collect();\n    let mut word_chars_len\
    \ = word_chars.len();\n    let mut i = 0;\n    while i < word_chars_len {\n  \
    \      if word_chars[i] == 'a' || word_chars[i] == 'e' || word_chars[i] == 'i'\
    \ || word_chars[i] == 'o' || word_chars[i] == 'u' {\n            last_vowel_found\
    \ = true;\n            last_vowel_index = i;\n            if last_consonant_found\
    \ {\n                if last_vowel_index - last_consonant_index < vowel_index\
    \ - last_consonant_index {\n                    vowel_index = last_vowel_index;\n\
    \                }\n            }\n        } else {\n            last_consonant_found\
    \ = true;\n            last_consonant_index = i;\n        }\n        i += 1;\n\
    \    }\n    if last_consonant_found && last_vowel_found {\n        closest_vowel.push(word_chars[vowel_index]);\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ word.len();\n    let mut previous_char_is_vowel = false;\n    for (i, c) in\
    \ word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n       \
    \     if previous_char_is_vowel {\n                break;\n            }\n   \
    \         closest_vowel = c.to_string();\n            closest_vowel_index = i;\n\
    \            previous_char_is_vowel = true;\n        } else {\n            previous_char_is_vowel\
    \ = false;\n        }\n    }\n    if closest_vowel_index == word.len() {\n   \
    \     String::new()\n    } else {\n        closest_vowel\n    }", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut consonant_index =\
    \ word.len();\n    for (index, character) in word.chars().enumerate().rev() {\n\
    \        if vowels.contains(&character) {\n            if index < consonant_index\
    \ {\n                closest_vowel = character.to_string();\n                closest_vowel_index\
    \ = index;\n            }\n        } else {\n            if index < closest_vowel_index\
    \ {\n                consonant_index = index;\n            }\n        }\n    }\n\
    \    if closest_vowel_index < consonant_index {\n        closest_vowel\n    }\
    \ else {\n        String::new()\n    }", "    let mut vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let mut word_chars: Vec<char> = word.chars().collect();\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_index = 0;\n    let mut closest_consonant_index\
    \ = 0;\n    let mut consonant_found = false;\n    let mut vowel_found = false;\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut closest_distance\
    \ = 0;\n    let mut distance = 0;\n    let mut index = 0;\n    let mut vowel_count\
    \ = 0;\n    let mut consonant_count = 0;\n    let mut vowel_index_vec = Vec::new();\n\
    \    let mut consonant_index_vec = Vec::new();\n    let mut vowel_index_vec_count\
    \ = 0;\n    let mut consonant_index_vec_count = 0;\n    let mut vowel_index_vec_index\
    \ = 0;\n    let mut consonant_index_vec_index = 0;\n    let mut vowel_index_vec_index_count\
    \ = 0;\n    let mut consonant_index_vec_index_count = 0;\n    let mut vowel_index_vec_index_count_count\
    \ = 0;\n    let mut consonant_index_vec_index_count_count = 0;\n    let mut vowel_index_vec_index_count_count_count\
    \ = 0;\n    let mut consonant_index_vec_index_count_count_count = 0;\n    let\
    \ mut vowel_index_vec_index_count_count_count_count = 0;\n    let mut consonant_index_vec_index_count_count_count_count\
    \ = 0;\n    let mut vowel_index_vec_index_count_count_count_count", "    let mut\
    \ result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = i;\n        } else {\n            last_consonant = i;\n        }\n       \
    \ if last_vowel > last_consonant {\n            result = c.to_string();\n    \
    \    }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_consonant = 0;\n    let\
    \ mut last_vowel = 0;\n    for (i, c) in word.chars().enumerate() {\n        if\
    \ vowels.contains(&c) {\n            if last_consonant != 0 {\n              \
    \  last_vowel = i;\n            }\n        } else {\n            if last_vowel\
    \ != 0 {\n                last_consonant = i;\n            }\n        }\n    }\n\
    \    if last_consonant != 0 && last_vowel != 0 {\n        result.push(word.chars().nth(last_vowel).unwrap());\n\
    \    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_index = word.len();\n    for (i,\
    \ ch) in word.chars().enumerate().rev() {\n        if vowels.contains(ch) {\n\
    \            if i < closest_vowel_index {\n                closest_vowel = ch.to_string();\n\
    \                closest_vowel_index = i;\n            }\n        } else {\n \
    \           if closest_vowel_index < word.len() {\n                break;\n  \
    \          }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut last_consonant = false;\n    let mut last_vowel = false;\n    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in word.chars().rev() {\n   \
    \     if vowels.contains(&c) {\n            if last_consonant {\n            \
    \    result.push(c);\n                break;\n            }\n            last_vowel\
    \ = true;\n        } else {\n            if last_vowel {\n                last_consonant\
    \ = true;\n            }\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ prev_is_vowel = false;\n    let mut prev_is_consonant = false;\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(&c) {\n            if prev_is_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \            prev_is_vowel = true;\n        } else {\n            if prev_is_vowel\
    \ {\n                prev_is_consonant = true;\n            }\n        }\n   \
    \ }\n    result", "    let mut closest_vowel = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < last_consonant_index {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel = i;\n            last_vowel_index = i;\n        } else\
    \ {\n            last_consonant = i;\n            last_consonant_index = i;\n\
    \        }\n        if last_vowel > last_consonant {\n            break;\n   \
    \     }\n    }\n    if last_vowel > last_consonant {\n        return word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n    }\n    return \"\".to_string();", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    let mut prev_is_consonant = false;\n    while index >\
    \ 0 {\n        let c = word.chars().nth(index).unwrap();\n        if vowels.contains(&c)\
    \ {\n            if prev_is_consonant {\n                result.push(c);\n   \
    \             break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    result", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let distance = word.len() - i;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let mut distance = word.len() - i;\n            if i > 0 {\n\
    \                distance -= 1;\n            }\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut index = word.len() - 1;\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            last_vowel_index = index;\n   \
    \     } else {\n            last_consonant_index = index;\n            if last_vowel_index\
    \ > last_consonant_index {\n                result = word.chars().nth(last_vowel_index).unwrap().to_string();\n\
    \                break;\n            }\n        }\n        index -= 1;\n    }\n\
    \    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_vowel\
    \ = ' ';\n    let mut last_consonant = ' ';\n    let mut last_vowel_index = 0;\n\
    \    let mut last_consonant_index = 0;\n    let mut result = String::new();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n            last_vowel_index = i;\n        }\
    \ else {\n            last_consonant = c;\n            last_consonant_index =\
    \ i;\n        }\n        if last_vowel_index > last_consonant_index {\n      \
    \      result = last_vowel.to_string();\n        }\n    }\n    result", "    let\
    \ mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    for (index, letter) in word.iter().enumerate() {\n        if vowels.contains(letter)\
    \ {\n            vowel_index = index;\n            vowel_found = true;\n     \
    \   }\n        if !vowels.contains(letter) && vowel_found {\n            consonant_index\
    \ = index;\n            consonant_found = true;\n            break;\n        }\n\
    \    }\n    if vowel_found && consonant_found {\n        word[vowel_index..consonant_index].iter().cloned().collect()\n\
    \    } else {\n        String::new()\n    }", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut closest_vowel = String::new();\n    let mut closest_distance =\
    \ word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let mut distance = word.len() - i;\n            if distance <\
    \ closest_distance {\n                closest_distance = distance;\n         \
    \       closest_vowel = c.to_string();\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let distance = word.len() - i;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n        }\n    }\n    closest_vowel", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut closest_vowel = \"\";\n    let mut closest_vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(c)\
    \ {\n            if i < closest_vowel_index {\n                closest_vowel =\
    \ c.to_string().as_str();\n                closest_vowel_index = i;\n        \
    \    }\n        } else {\n            if closest_vowel_index < word.len() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel.to_string()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel\
    \ = 0;\n    let mut is_consonant = false;\n    let mut is_vowel = false;\n   \
    \ for c in word.chars().rev() {\n        if vowels.contains(&c) {\n          \
    \  if is_consonant {\n                last_vowel = index;\n                is_vowel\
    \ = true;\n            }\n        } else {\n            if is_vowel {\n      \
    \          last_consonant = index;\n                is_consonant = true;\n   \
    \         }\n        }\n        index += 1;\n    }\n    if is_consonant && is_vowel\
    \ {\n        result.push(word.chars().rev().nth(last_vowel).unwrap());\n    }\n\
    \    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = \"\".to_string();\n    let mut closest_distance = word.len();\n    let mut\
    \ last_consonant = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < last_consonant && last_consonant\
    \ - i < closest_distance {\n                closest_vowel = c.to_string();\n \
    \               closest_distance = last_consonant - i;\n            }\n      \
    \  } else {\n            last_consonant = i;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let mut distance = word.len()\
    \ - i;\n            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = c.to_string();\n            }\n\
    \        }\n    }\n    closest_vowel", "    let vowels = \"aeiou\";\n    let mut\
    \ closest_vowel = \"\";\n    let mut closest_vowel_distance = 0;\n    let mut\
    \ last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            if last_consonant_index > 0\
    \ {\n                let distance = last_consonant_index - i;\n              \
    \  if closest_vowel_distance == 0 || distance < closest_vowel_distance {\n   \
    \                 closest_vowel_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant_index = i;\n        }\n    }\n    closest_vowel.to_string()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_vowel > last_consonant {\n            result = c.to_string();\n\
    \        }\n    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let mut\
    \ result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel > last_consonant {\n            result\
    \ = c.to_string();\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < word.len() - 1 {\n        if vowels.contains(&word[i])\
    \ && !vowels.contains(&word[i + 1]) {\n            return word[i].to_string();\n\
    \        }\n        i += 1;\n    }\n    String::new()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            let mut distance = 0;\n       \
    \     for j in (i + 1)..word.len() {\n                if vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                    break;\n                }\n                distance +=\
    \ 1;\n            }\n            if distance < closest_distance {\n          \
    \      closest_distance = distance;\n                closest_vowel = c.to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut closest_vowel\
    \ = String::new();\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let mut vowel_index_list\
    \ = Vec::new();\n    let mut consonant_index_list = Vec::new();\n    let mut vowel_list\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut consonant_list = vec![\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ mut word_list = word.split(\"\");\n    for (index, letter) in word_list.enumerate()\
    \ {\n        if vowel_list.contains(&letter) {\n            vowel_count += 1;\n\
    \            vowel_index_list.push(index);\n        }\n        if consonant_list.contains(&letter)\
    \ {\n            consonant_count += 1;\n            consonant_index_list.push(index);\n\
    \        }\n    }\n    if vowel_count == 0 || consonant_count == 0 {\n       \
    \ return String::from(\"\");\n    }\n    if vowel_count == 1 && consonant_count\
    \ == 1 {\n        return String::from(\"\");\n    }\n    for (index, vowel) in\
    \ vowel_index_list.iter().enumerate() {\n        if index == vowel_index_list.len()\
    \ - 1 {\n            break;\n        }\n        if vowel_index_list[index + 1]\
    \ - vowel > closest_vowel.len() {\n            closest_vowel = word_list.nth(vowel_index_list[index\
    \ + 1]).unwrap().to_string();\n            vowel_index = vowel_index_list[index\
    \ + 1];\n            vowel_found = true;\n        }\n    }\n    for (index, consonant"]
stop_tokens:
- "\n}"
