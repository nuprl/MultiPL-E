name: HumanEval_131_digits
language: rust
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n/// digits(4)\
  \  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ["    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n  \
    \      let digit = n % 10;\n        if digit % 2 == 1 {\n            result *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    result", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    let\
    \ mut result = 1;\n    for c in n.to_string().chars() {\n        if let Some(d)\
    \ = c.to_digit(10) {\n            if d % 2 == 1 {\n                result *= d\
    \ as isize;\n            }\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&x| x % 2 == 1)\n        .product()", "    let mut result = 1;\n \
    \   for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c|\
    \ c.to_digit(10).unwrap() as isize)\n        .filter(|&x| x % 2 == 1)\n      \
    \  .product()", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut res\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            res *= d as isize;\n        }\n    }\n \
    \   res", "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap() as\
    \ isize)\n        .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            product *= digit as isize;\n       \
    \ }\n    }\n    product", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .product()", "  \
    \  let mut product = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n            product\
    \ *= digit as isize;\n        }\n    }\n    product", "    let mut n = n;\n  \
    \  let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n     \
    \   if digit % 2 == 1 {\n            result *= digit;\n        }\n        n /=\
    \ 10;\n    }\n    result", "    let mut product = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            product *= digit as isize;\n        }\n    }\n    product", "   \
    \ let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n         \
    \   result *= digit;\n        }\n    }\n    result", "    n.to_string()\n    \
    \    .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d\
    \ % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n       \
    \ .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d %\
    \ 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result =\
    \ 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .product() as isize",
  "    n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap() as\
    \ isize)\n        .filter(|x| x % 2 != 0)\n        .product()", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            result *= d as isize;\n        }\n    }\n\
    \    result", "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n            result\
    \ *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n    \
    \    .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n        .filter(|&x|\
    \ x % 2 == 1)\n        .product()", "    n.to_string()\n        .chars()\n   \
    \     .filter_map(|c| c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n     \
    \   .fold(1, |acc, d| acc * d as isize)", "    let mut result = 1;\n    for c\
    \ in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap() as isize;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n    }\n\
    \    result", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            result *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    result", "    n.to_string()\n        .chars()\n       \
    \ .filter_map(|c| c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1,\
    \ |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n        .map(|c|\
    \ c.to_digit(10).unwrap() as isize)\n        .filter(|&d| d % 2 == 1)\n      \
    \  .product()", "    let mut result = 1;\n    for c in n.to_string().chars() {\n\
    \        let digit = c.to_digit(10).unwrap() as isize;\n        if digit % 2 ==\
    \ 1 {\n            result *= digit;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    let\
    \ mut result = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit =\
    \ n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n       \
    \ }\n        n /= 10;\n    }\n    result", "    n.to_string()\n        .chars()\n\
    \        .map(|c| c.to_digit(10).unwrap() as isize)\n        .filter(|&d| d %\
    \ 2 == 1)\n        .product()", "    n.to_string()\n        .chars()\n       \
    \ .filter_map(|c| c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1,\
    \ |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut product = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap() as isize;\n        if digit %\
    \ 2 == 1 {\n            product *= digit;\n        }\n    }\n    product", " \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n         \
    \   result *= digit;\n        }\n    }\n    result", "    let mut result = 1;\n\
    \    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if\
    \ digit % 2 == 1 {\n            result *= digit;\n        }\n        n /= 10;\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|x|\
    \ x.to_digit(10))\n        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, x|\
    \ acc * x as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap() as isize;\n        if digit %\
    \ 2 == 1 {\n            result *= digit;\n        }\n    }\n    result", "   \
    \ n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n \
    \       .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap() as\
    \ isize)\n        .filter(|&n| n % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|c|\
    \ c % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .map(|d| d as isize)\n        .filter(|d| d % 2 ==\
    \ 1)\n        .product()", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    let\
    \ mut result = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit =\
    \ n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n       \
    \ }\n        n /= 10;\n    }\n    result", "    n.to_string()\n        .chars()\n\
    \        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n \
    \       .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n\
    \        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n \
    \       .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n\
    \        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n \
    \       .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n\
    \        .map(|c| c.to_digit(10).unwrap() as isize)\n        .filter(|&d| d %\
    \ 2 == 1)\n        .product()", "    n.to_string()\n        .chars()\n       \
    \ .filter_map(|c| c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1,\
    \ |acc, d| acc * d as isize)", "    let mut result = 1;\n    let mut n = n;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            result *= digit;\n        }\n        n /= 10;\n    }\n    result",
  "    n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)",
  "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap() as\
    \ isize)\n        .filter(|&x| x % 2 == 1)\n        .product()", "    let mut\
    \ result = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    let mut res = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            res *= digit as isize;\n        }\n    }\n    res", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|d| d\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()", "    let mut\
    \ result = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut n =\
    \ n;\n    let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    result", "    n.to_string()\n        .chars()\n      \
    \  .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n       \
    \ .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n        .chars()\n\
    \        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n \
    \       .fold(1, |acc, d| acc * d as isize)", "    let mut result = 1;\n    for\
    \ c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap() as\
    \ isize;\n        if digit % 2 == 1 {\n            result *= digit;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut n = n;\n    let mut result = 1;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n        n /= 10;\n    }\n    result", "    let\
    \ mut result = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap()\
    \ as isize;\n        if d % 2 == 1 {\n            result *= d;\n        }\n  \
    \  }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    let mut n = n;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n        n /= 10;\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|d| d\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()", "    let mut\
    \ product = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            product *= digit as isize;\n       \
    \ }\n    }\n    product", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c|\
    \ c.to_digit(10).unwrap() as isize)\n        .filter(|&x| x % 2 == 1)\n      \
    \  .product()", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut result = 1;\n    let mut n = n;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n        n /= 10;\n    }\n    result", "    let\
    \ mut result = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&x| x % 2 == 1)\n        .product()", "    let mut result = 1;\n \
    \   for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .map(|d| d as isize)\n        .filter(|d| d % 2 ==\
    \ 1)\n        .product()", "    let mut result = 1;\n    let mut n = n;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n        n /= 10;\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&d| d % 2 == 1)\n        .product()", "    n.to_string()\n       \
    \ .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d %\
    \ 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|c| c\
    \ as isize)\n        .filter(|&c| c % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n       \
    \ .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d| d % 2\
    \ == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut product =\
    \ 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n    }\n    product", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            result *= digit as isize;\n        }\n    }\n    result", "    let\
    \ mut result = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    let mut result = 1;\n    for c in n.to_string().chars()\
    \ {\n        let d = c.to_digit(10).unwrap();\n        if d % 2 == 1 {\n     \
    \       result *= d as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|&x| x % 2 == 1)\n        .product()", "    n.to_string()\n       \
    \ .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d %\
    \ 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut product = 1;\n    for c in n.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n\
    \            product *= digit as isize;\n        }\n    }\n    product", "   \
    \ let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n         \
    \   result *= digit;\n        }\n    }\n    result", "    let mut n = n;\n   \
    \ let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n      \
    \  if digit % 2 == 1 {\n            result *= digit;\n        }\n        n /=\
    \ 10;\n    }\n    result", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    n.to_string()\n        .chars()\n        .filter_map(|c|\
    \ c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d|\
    \ acc * d as isize)", "    let mut n = n;\n    let mut result = 1;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n        n /= 10;\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d|\
    \ d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)", "    let mut result\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            result *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    result", "    n.to_string()\n        .chars()\n       \
    \ .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 == 1)\n        .fold(1,\
    \ |acc, d| acc * d as isize)", "    let mut result = 1;\n    let mut n = n;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            result *= digit;\n        }\n        n /= 10;\n    }\n    result",
  "    let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n            result\
    \ *= digit as isize;\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
