name: HumanEval_69_search
language: rust
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// search([4, 1, 2, 2, 3, 1]) == 2\n/// search([1, 2, 2, 3, 3, 3,\
  \ 4, 4, 4]) == 3\n/// search([5, 5, 4, 4, 4]) == -1\nfn search(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut max_freq = 0;\n    let mut max_freq_num = -1;\n    let\
    \ mut freq_map = HashMap::new();\n    for num in lst {\n        let count = freq_map.entry(num).or_insert(0);\n\
    \        *count += 1;\n        if *count >= num && *count > max_freq {\n     \
    \       max_freq = *count;\n            max_freq_num = num;\n        }\n    }\n\
    \    max_freq_num", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n \
    \   for (k, v) in counts {\n        if k <= v && k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n   \
    \         max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, value) in freq {\n        if key <= value && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = 0;\n    for (k, v) in freq {\n        if k >\
    \ v {\n            continue;\n        }\n        if k > max {\n            max\
    \ = k;\n        }\n    }\n    if max == 0 {\n        return -1;\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ v >= k && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (key, value) in map {\n        if\
    \ key <= value && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n        if v >=\
    \ k && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max_key = -1;\n    for (key, value) in map.iter() {\n        if *key <= *value\
    \ && *key > max_key {\n            max_key = *key;\n        }\n    }\n    max_key",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq {\n      \
    \  if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut map = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n       \
    \     max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i in\
    \ lst {\n        let count = counts.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (i, count) in counts\
    \ {\n        if i <= count && i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut max = -1;\n    let mut freq = 0;\n    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n        if i > max && *count >= i {\n            max =\
    \ i;\n            freq = *count;\n        }\n    }\n    max", "    let mut counts\
    \ = HashMap::new();\n    for &x in &lst {\n        let count = counts.entry(x).or_insert(0);\n\
    \        *count += 1;\n    }\n    for &x in &lst {\n        if let Some(count)\
    \ = counts.get(&x) {\n            if x <= *count {\n                return x;\n\
    \            }\n        }\n    }\n    -1", "    let mut max = -1;\n    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n        if *count >= i && i > max {\n            max =\
    \ i;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq {\n      \
    \  if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut map = HashMap::new();\n    for i in lst\
    \ {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in map {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut max = -1;\n    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n        if *count >= i && i > max {\n            max = i;\n        }\n\
    \    }\n    max", "    let mut map = HashMap::new();\n    for i in lst {\n   \
    \     let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (key, value) in map {\n        if key <= value &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut max = 0;\n    let mut count = 0;\n    for i in lst {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    for i in 1..max + 1 {\n     \
    \   let mut c = 0;\n        for j in lst {\n            if i == j {\n        \
    \        c += 1;\n            }\n        }\n        if c >= i {\n            count\
    \ = i;\n        }\n    }\n    if count == 0 {\n        return -1;\n    }\n   \
    \ count", "    let mut counts = HashMap::new();\n    for i in lst {\n        let\
    \ count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n    for\
    \ i in lst {\n        if let Some(count) = counts.get(&i) {\n            if *count\
    \ >= i {\n                return i;\n            }\n        }\n    }\n    -1",
  "    let mut map = HashMap::new();\n    for n in lst {\n        let count = map.entry(n).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    for i in lst {\n        if let Some(c) = count.get(&i)\
    \ {\n            if i <= *c {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for num in lst {\n        let count = map.entry(num).or_insert(0);\n    \
    \    *count += 1;\n    }\n    for (key, value) in map {\n        if key <= value\
    \ {\n            return key;\n        }\n    }\n    -1", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq: HashMap<isize, isize> = HashMap::new();\n    let mut max = -1;\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n        if *count >= i && i > max {\n            max = i;\n  \
    \      }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k > v {\n            continue;\n       \
    \ }\n        if k > res {\n            res = k;\n        }\n    }\n    res", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ > max && k <= v {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut map = HashMap::new();\n    for i in lst {\n   \
    \     let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in map\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k > v {\n            continue;\n        }\n   \
    \     if k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut m = HashMap::new();\n    for i in lst {\n     \
    \   *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for (k,\
    \ v) in m {\n        if k <= v && k > max {\n            max = k;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n   \
    \ }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k\
    \ > max {\n            max = k;\n        }\n    }\n    max", "    let mut counts\
    \ = HashMap::new();\n    for num in lst {\n        let count = counts.entry(num).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (num, count) in counts\
    \ {\n        if num <= count && num > max {\n            max = num;\n        }\n\
    \    }\n    max", "    let mut result = -1;\n    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    for (key, value) in counts {\n        if key <= value\
    \ && key > result {\n            result = key;\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ > 0 && v >= k && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, val) in map {\n        if key <= val &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n       \
    \     max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, value) in map {\n        if key <= value && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v >=\
    \ k && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ m = HashMap::new();\n    for i in lst {\n        if let Some(x) = m.get_mut(&i)\
    \ {\n            *x += 1;\n        } else {\n            m.insert(i, 1);\n   \
    \     }\n    }\n    let mut max = -1;\n    for (k, v) in m {\n        if k > 0\
    \ && k <= v && k > max {\n            max = k;\n        }\n    }\n    max", " \
    \   let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for &i in &lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n  \
    \  let mut max = -1;\n    for (&i, &count) in &counts {\n        if i <= count\
    \ && i > max {\n            max = i;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = HashMap::new();\n    for i in lst {\n        let c = m.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n     \
    \   if k > v {\n            continue;\n        }\n        if k > max {\n     \
    \       max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n\
    \        if n <= count && n > max {\n            max = n;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    //\
    \ TODO\n    -1", "    let mut map: HashMap<isize, isize> = HashMap::new();\n \
    \   for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map {\n        if v >= k && k > max {\n       \
    \     max = k;\n        }\n    }\n    max", "    let mut map: HashMap<isize, isize>\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut result = -1;\n    for (k, v) in map {\n        if k <= v && k > result\
    \ {\n            result = k;\n        }\n    }\n    result", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if v >=\
    \ k && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ m = HashMap::new();\n    for i in lst {\n        let c = m.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (k, v) in freq {\n        if k <= v && k > res {\n  \
    \          res = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for &i in &lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (&i, &count) in &counts {\n\
    \        if i <= count && i > result {\n            result = i;\n        }\n \
    \   }\n    result", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map {\n       \
    \ if key <= value && key > max {\n            max = key;\n        }\n    }\n \
    \   max", "    let mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (key, value) in freq {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (key, val) in freq {\n        if val >= key && key > max {\n            max\
    \ = key;\n        }\n    }\n    max", "    let mut map: HashMap<isize, isize>\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n     \
    \   let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, value) in map {\n        if key <= value && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut freq:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let count\
    \ = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > max {\n            max\
    \ = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n  \
    \  for i in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut result = -1;\n \
    \   let mut max_freq = 0;\n    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n \
    \       if i > max_freq && *count >= i {\n            max_freq = i;\n        \
    \    result = i;\n        }\n    }\n    result", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = HashMap::new();\n    for i in lst {\n        let count = m.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *map.entry(i).or_insert(0) += 1;\n    }\n    let mut result = -1;\n \
    \   for (k, v) in map {\n        if k <= v && k > result {\n            result\
    \ = k;\n        }\n    }\n    result", "    let mut freq: HashMap<isize, isize>\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k > v {\n            continue;\n        }\n   \
    \     if k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if v >= k && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    for i in (1..).rev()\
    \ {\n        if let Some(f) = freq.get(&i) {\n            if *f >= i {\n     \
    \           return i;\n            }\n        }\n    }\n    -1", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k > v {\n            continue;\n        }\n        if k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut count = HashMap::new();\n\
    \    for i in lst {\n        *count.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut result = -1;\n    for (k, v) in count {\n        if k <= v && k > result\
    \ {\n            result = k;\n        }\n    }\n    result", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, value) in map {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut result = -1;\n    for (key, val) in counts {\n        if val >= key && key\
    \ > result {\n            result = key;\n        }\n    }\n    result", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut map = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for item in lst {\n      \
    \  let count = map.entry(item).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (key, value) in map {\n        if key <= value &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n   \
    \         max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ max = 0;\n    let mut map = HashMap::new();\n    for i in lst {\n        if\
    \ i > max {\n            max = i;\n        }\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for i in (1..=max).rev() {\n        if let Some(count)\
    \ = map.get(&i) {\n            if i <= *count {\n                return i;\n \
    \           }\n        }\n    }\n    -1", "    let mut counts = HashMap::new();\n\
    \    for num in lst {\n        let count = counts.entry(num).or_insert(0);\n \
    \       *count += 1;\n    }\n    let mut max = -1;\n    for (num, count) in counts\
    \ {\n        if num <= count && num > max {\n            max = num;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let counter = freq.entry(i).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (i, f) in freq {\n        if f\
    \ >= i && i > max {\n            max = i;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut count = HashMap::new();\n\
    \    for i in lst {\n        let c = count.entry(i).or_insert(0);\n        *c\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut max = 0;\n    let mut freq = 0;\n    let mut map = HashMap::new();\n   \
    \ for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n        if *count >= i && i > max {\n            max = i;\n         \
    \   freq = *count;\n        }\n    }\n    if freq >= max {\n        max\n    }\
    \ else {\n        -1\n    }", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (k, v) in map.iter() {\n       \
    \ if *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    if max\
    \ == 0 {\n        return -1;\n    }\n    max", "    let mut m = HashMap::new();\n\
    \    for i in lst {\n        let count = m.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut result = -1;\n    let mut max_count = 0;\n    let\
    \ mut counts = HashMap::new();\n    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n\
    \        *count += 1;\n        if *count >= n && *count > max_count {\n      \
    \      max_count = *count;\n            result = n;\n        }\n    }\n    result",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map {\n       \
    \ if key <= value && key > max {\n            max = key;\n        }\n    }\n \
    \   max", "    let mut result = -1;\n    let mut map = HashMap::new();\n    for\
    \ i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    for (key, value) in map {\n        if key <= value && key > result\
    \ {\n            result = key;\n        }\n    }\n    result", "    let mut counts\
    \ = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut dic: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *dic.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (k, v) in dic {\n        if k <= v && k > res {\n   \
    \         res = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max_freq = 0;\n    let mut max_val = 0;\n \
    \   for (k, v) in freq {\n        if v >= k && v > max_freq {\n            max_freq\
    \ = v;\n            max_val = k;\n        }\n    }\n    if max_freq == 0 {\n \
    \       -1\n    } else {\n        max_val\n    }", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n   \
    \         max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, val) in freq {\n        if key <= val && key >\
    \ max {\n            max = key;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for num in lst {\n        *counts.entry(num).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (num, count) in counts {\n    \
    \    if num <= count && num > max {\n            max = num;\n        }\n    }\n\
    \    max", "    let mut map = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (key, value) in map {\n        if key <= value && key > max\
    \ {\n            max = key;\n        }\n    }\n    max", "    let mut counts =\
    \ HashMap::new();\n    for item in lst {\n        let count = counts.entry(item).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in\
    \ counts {\n        if key <= value && key > result {\n            result = key;\n\
    \        }\n    }\n    result", "    let mut freq = HashMap::new();\n    for i\
    \ in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res\
    \ = -1;\n    for (k, v) in freq {\n        if v >= k && k > res {\n          \
    \  res = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = HashMap::new();\n    for i in lst {\n        let count = m.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > res {\n            res\
    \ = k;\n        }\n    }\n    res", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if v >= k && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map {\n       \
    \ if key <= value && key > max {\n            max = key;\n        }\n    }\n \
    \   max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut counts = HashMap::new();\n    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n\
    \        *count += 1;\n    }\n    for n in lst {\n        if n == 0 {\n      \
    \      continue;\n        }\n        if let Some(count) = counts.get(&n) {\n \
    \           if *count >= n {\n                return n;\n            }\n     \
    \   }\n    }\n    -1", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = 0;\n    let mut max_num = 0;\n    for (k, v) in freq {\n    \
    \    if k <= v && v >= max_freq {\n            max_freq = v;\n            max_num\
    \ = k;\n        }\n    }\n    if max_freq == 0 {\n        -1\n    } else {\n \
    \       max_num\n    }", "    let mut max = 0;\n    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n        if *count >= i && i > max {\n            max = i;\n        }\n\
    \    }\n    if max == 0 {\n        -1\n    } else {\n        max\n    }", "  \
    \  let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if v >= k && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = 0;\n    let mut max_val = 0;\n    for (key, val) in freq {\n\
    \        if val >= key && val >= max_freq {\n            max_freq = val;\n   \
    \         max_val = key;\n        }\n    }\n    if max_freq == 0 {\n        -1\n\
    \    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut map: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut max_freq = 0;\n\
    \    let mut max_val = 0;\n    let mut freq_map = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq_map.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n        if *count >= i && *count > max_freq {\n            max_freq = *count;\n\
    \            max_val = i;\n        }\n    }\n    if max_freq == 0 {\n        -1\n\
    \    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > res {\n            res = key;\n        }\n    }\n    res",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > res {\n            res\
    \ = k;\n        }\n    }\n    res", "    let mut max = 0;\n    let mut count =\
    \ 0;\n    let mut map = HashMap::new();\n    for i in lst {\n        let c = map.entry(i).or_insert(0);\n\
    \        *c += 1;\n        if *c >= i && i > max {\n            max = i;\n   \
    \         count = *c;\n        }\n    }\n    if count >= max {\n        max\n\
    \    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize, isize>\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ lst = lst;\n    lst.sort();\n    let mut count = 1;\n    let mut max = 0;\n\
    \    for i in 1..lst.len() {\n        if lst[i] == lst[i - 1] {\n            count\
    \ += 1;\n        } else {\n            if lst[i - 1] == count {\n            \
    \    max = lst[i - 1];\n            }\n            count = 1;\n        }\n   \
    \ }\n    if lst[lst.len() - 1] == count {\n        max = lst[lst.len() - 1];\n\
    \    }\n    if max == 0 {\n        -1\n    } else {\n        max\n    }", "  \
    \  let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k > v {\n            continue;\n        }\n        if k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n\
    \        if n <= count && n > max {\n            max = n;\n        }\n    }\n\
    \    max", "    let mut max = 0;\n    let mut map = HashMap::new();\n    for i\
    \ in lst {\n        *map.entry(i).or_insert(0) += 1;\n        if i > max {\n \
    \           max = i;\n        }\n    }\n    for i in 1..=max {\n        if let\
    \ Some(x) = map.get(&i) {\n            if *x >= i {\n                return i;\n\
    \            }\n        }\n    }\n    -1"]
stop_tokens:
- "\n}"
