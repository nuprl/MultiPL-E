name: HumanEval_161_solve
language: rust
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n/// solve(\"\
  ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
  AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
  )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
  ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
  ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
  \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
  \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n"
completions: ["    let mut result = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.chars().all(|c| !c.is_alphabetic())\
    \ {\n        result.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.chars().all(|c|\
    \ !c.is_alphabetic()) {\n        result.chars().rev().collect()\n    } else {\n\
    \        result\n    }", '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase()
    } else { c }).collect()', "    s.chars().rev().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if result.is_empty() {\n        s.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    s.chars().rev().map(|c| {\n        if c.is_alphabetic()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c\n   \
    \     }\n    }).collect()", "    let mut result = String::new();\n    for c in\
    \ s.chars() {\n        match c {\n            'a'...'z' => result.push(c.to_ascii_uppercase()),\n\
    \            'A'...'Z' => result.push(c.to_ascii_lowercase()),\n            _\
    \ => result.push(c),\n        }\n    }\n    if result.chars().all(|c| !c.is_alphabetic())\
    \ {\n        result.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    s.chars().rev().map(|c| {\n        if c.is_alphabetic() {\n      \
    \      c.to_ascii_uppercase()\n        } else {\n            c\n        }\n  \
    \  }).collect()", "    s.chars().rev().map(|c| {\n        match c {\n        \
    \    'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase()
    } else { c }).collect()', "    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        return s.chars().rev().collect();\n    }\n    res", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    s.chars().rev().map(|c| match c {\n \
    \       'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", '    s.chars().rev().map(|c| if c.is_alphabetic()
    { c.to_ascii_uppercase() } else { c }).collect()', "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    let mut is_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            is_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if is_letter {\n        result\n \
    \   } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if res.chars().all(|c| !c.is_alphabetic())\
    \ {\n        res.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    let mut is_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            is_letter = true;\n         \
    \   result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if is_letter {\n        result\n    } else {\n        result.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_uppercase().next().unwrap());\n        } else\
    \ {\n            result.push(c);\n        }\n    }\n    if result.len() == 0 {\n\
    \        s.chars().rev().collect()\n    } else {\n        result\n    }", "  \
    \  let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if result.is_empty() {\n        s.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if result.chars().any(|c| c.is_alphabetic()) {\n        result\n    }\
    \ else {\n        result.chars().rev().collect()\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        result\n    }", '    s.chars().rev().map(|c| if c.is_alphabetic()
    { c.to_ascii_uppercase() } else { c }).collect()', "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  "    s.chars().rev().map(|c| {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_ascii_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()',
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", '    s.chars().rev().map(|c| if c.is_alphabetic()
    { c.to_ascii_uppercase() } else { c }).collect()', "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_uppercase() {\n                res.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                res.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            res.push(c);\n        }\n    }\n\
    \    if res.is_empty() {\n        s.chars().rev().collect()\n    } else {\n  \
    \      res\n    }", "    s.chars().rev().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()", '    s.chars().rev().map(|c| if c.is_alphabetic()
    { c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    s.chars().rev().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if res.len() == 0 {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        s.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            if c.is_lowercase() {\n               \
    \ result.push(c.to_uppercase().next().unwrap());\n            } else {\n     \
    \           result.push(c.to_lowercase().next().unwrap());\n            }\n  \
    \      } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        return s.chars().rev().collect();\n    }\n    result", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_ascii_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n\
    \            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   }\n    }).collect()", "    s.chars().rev().map(|c| if c.is_ascii_alphabetic()\
    \ {\n        c.to_ascii_uppercase()\n    } else {\n        c\n    }).collect()",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    let mut result = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| {\n        if c.is_ascii_alphabetic() {\n         \
    \   c.to_ascii_uppercase()\n        } else {\n            c\n        }\n    }).collect()",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()", '    s.chars().rev().map(|c| if c.is_ascii_alphabetic() {
    c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_lowercase().next().unwrap());\n        } else {\n\
    \            res.push(c);\n        }\n    }\n    if res.is_empty() {\n       \
    \ s.chars().rev().collect()\n    } else {\n        res\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.len() == 0 {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ let mut is_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut is_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if is_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c\n        }\n    }).collect()", "    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        match c\
    \ {\n            'a'..='z' => result.push(c.to_ascii_uppercase()),\n         \
    \   'A'..='Z' => result.push(c.to_ascii_lowercase()),\n            _ => result.push(c),\n\
    \        }\n    }\n    if result.chars().all(|c| !c.is_alphabetic()) {\n     \
    \   result.chars().rev().collect()\n    } else {\n        result\n    }", "  \
    \  let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.len() == 0 {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.chars().all(|c| !c.is_alphabetic())\
    \ {\n        result.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            result.push(c);\n        }\n    }\n    if result.is_empty() {\n\
    \        s.chars().rev().collect()\n    } else {\n        result\n    }", "  \
    \  let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.chars().all(|c| !c.is_alphabetic())\
    \ {\n        res.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   s.chars().rev().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  '    s.chars().rev().map(|c| if c.is_ascii_alphabetic() { c.to_ascii_uppercase()
    } else { c }).collect()', "    s.chars().rev().map(|c| {\n        if c.is_alphabetic()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c\n   \
    \     }\n    }).collect()", "    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        s.chars().rev().collect()\n    } else {\n        res\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            result.push(c);\n        }\n    }\n    if result.is_empty() {\n\
    \        s.chars().rev().collect()\n    } else {\n        result\n    }", "  \
    \  let mut result = String::new();\n    for c in s.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    s.chars().rev().map(|c|\
    \ {\n        if c.is_ascii_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    s.chars().rev().map(|c| if c.is_ascii_alphabetic()\
    \ {\n        c.to_ascii_uppercase()\n    } else {\n        c\n    }).collect()",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| {\n        if c.is_ascii_alphabetic() {\n         \
    \   c.to_ascii_uppercase()\n        } else {\n            c\n        }\n    }).collect()",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    s.chars().rev().map(|c| match c {\n \
    \       'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    s.chars().rev().map(|c| match c {\n\
    \        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    let mut result = String::new();\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    s.chars().rev().map(|c| {\n        match\
    \ c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z'\
    \ => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
  "    s.chars().rev().map(|c| {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    s.chars().rev().map(|c| {\n        if\
    \ c.is_alphabetic() {\n            c.to_ascii_uppercase()\n        } else {\n\
    \            c\n        }\n    }).collect()", "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    for c in s.chars() {\n        match c\
    \ {\n            'a'...'z' => result.push(c.to_ascii_uppercase()),\n         \
    \   'A'...'Z' => result.push(c.to_ascii_lowercase()),\n            _ => result.push(c),\n\
    \        }\n    }\n    if result.chars().any(|c| c.is_alphabetic()) {\n      \
    \  result\n    } else {\n        result.chars().rev().collect()\n    }", "   \
    \ s.chars().rev().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut res = String::new();\n    let mut is_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            is_letter = true;\n         \
    \   res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if is_letter {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    let mut is_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if is_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if res.chars().all(|c| !c.is_alphabetic())\
    \ {\n        res.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   return s.chars().rev().collect();\n    }\n    result", "    s.chars().rev().map(|c|\
    \ if c.is_alphabetic() {\n        c.to_ascii_uppercase()\n    } else {\n     \
    \   c\n    }).collect()", "    let mut result = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    s.chars().rev().map(|c| {\n        if c.is_ascii_alphabetic()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c\n   \
    \     }\n    }).collect()", "    let mut result = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    s.chars().rev().map(|c| match c {\n \
    \       'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    let mut result = String::new();\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        return s.chars().rev().collect();\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut is_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            is_letter = true;\n         \
    \   result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if is_letter {\n        result\n    } else {\n        result.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_ascii_alphabetic() { c.to_ascii_uppercase()
    } else { c }).collect()', "    let mut s = s.chars().collect::<Vec<char>>();\n\
    \    let mut has_letter = false;\n    for i in 0..s.len() {\n        if s[i].is_alphabetic()\
    \ {\n            has_letter = true;\n            s[i] = if s[i].is_lowercase()\
    \ {\n                s[i].to_uppercase().next().unwrap()\n            } else {\n\
    \                s[i].to_lowercase().next().unwrap()\n            };\n       \
    \ }\n    }\n    if !has_letter {\n        s.reverse();\n    }\n    s.into_iter().collect()",
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    let mut result = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    s.chars().rev().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  '    s.chars().rev().map(|c| if c.is_ascii_alphabetic() { c.to_ascii_uppercase()
    } else { c }).collect()', '    s.chars().rev().map(|c| if c.is_alphabetic() {
    c.to_ascii_uppercase() } else { c }).collect()', '    s.chars().rev().map(|c|
    if c.is_alphabetic() { c.to_ascii_uppercase() } else { c }).collect()', "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            res.push(c.to_ascii_uppercase());\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    let mut result = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  '    s.chars().rev().map(|c| if c.is_alphabetic() { c.to_ascii_uppercase() } else
    { c }).collect()', "    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   s.chars().rev().map(|c| if c.is_alphabetic() {\n        c.to_ascii_uppercase()\n\
    \    } else {\n        c\n    }).collect()", "    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   s.chars().rev().map(|c| if c.is_ascii_alphabetic() {\n        c.to_ascii_uppercase()\n\
    \    } else {\n        c\n    }).collect()", "    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }"]
stop_tokens:
- "\n}"
