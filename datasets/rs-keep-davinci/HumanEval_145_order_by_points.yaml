name: HumanEval_145_order_by_points
language: rust
prompt: "/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
  \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
  \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
  \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
  \ 23, 6, 6]);\n}\n"
completions: ["    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum\
    \ = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs() / 10 + b.abs() %\
    \ 10;\n        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n \
    \           a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10 + a.abs()\
    \ % 10;\n        let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = a.abs()\n            .to_string()\n            .chars()\n \
    \           .map(|c| c.to_digit(10).unwrap() as isize)\n            .sum::<isize>();\n\
    \        let b_sum = b.abs()\n            .to_string()\n            .chars()\n\
    \            .map(|c| c.to_digit(10).unwrap() as isize)\n            .sum::<isize>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.abs() as usize / 10 + a.abs()\
    \ as usize % 10;\n        let b_sum = b.abs() as usize / 10 + b.abs() as usize\
    \ % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n\
    \        let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n    \
    \    if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n           \
    \ a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n\
    \        let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs() /\
    \ 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10\
    \ + a.abs() % 10;\n        let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs() /\
    \ 10 + b.abs() % 10;\n        if a_sum == b_sum {\n            a.cmp(b)\n    \
    \    } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs()\
    \ as usize / 10 + a.abs() as usize % 10;\n        let b_sum = b.abs() as usize\
    \ / 10 + b.abs() as usize % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums",
  "    let mut nums_with_points: Vec<(isize, isize)> = nums.iter().map(|x| (*x, sum_digits(*x))).collect();\n\
    \    nums_with_points.sort_by(|a, b| a.1.cmp(&b.1));\n    nums_with_points.iter().map(|x|\
    \ x.0).collect()", "    let mut nums = nums;\n    nums.sort_by_key(|n| n.abs()\
    \ as usize % 10 + n.abs() as usize / 10);\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs() as usize / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| sum_of_digits(x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| sum_digits(*n));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += (x % 10).abs();\n            x /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as u64).sum_digits());\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ x.abs() as usize);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&num| {\n        num.abs()\n  \
    \          .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap())\n\
    \            .sum::<u32>()\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n \
    \       let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs() /\
    \ 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| x.abs() as usize);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += (x % 10).abs();\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&n| (n.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs()\
    \ as usize % 10 + x.abs() as usize / 10);\n    nums", '    nums.into_iter().enumerate().sorted_by_key(|&(i,
    n)| (sum_digits(n), i)).map(|(_, n)| n).collect()', "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs()\
    \ as usize / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_of_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize\
    \ % 10 + x.abs() as usize / 10);\n    nums", "    nums.iter().enumerate().sorted_by(|a,\
    \ b| {\n        let (i, x) = *a;\n        let (j, y) = *b;\n        let x_sum\
    \ = x.abs() / 10 + x.abs() % 10;\n        let y_sum = y.abs() / 10 + y.abs() %\
    \ 10;\n        if x_sum == y_sum {\n            i.cmp(&j)\n        } else {\n\
    \            x_sum.cmp(&y_sum)\n        }\n    }).map(|(_, x)| *x).collect()",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        if x < 0 {\n            x = -x;\n        }\n      \
    \  while x > 0 {\n            sum += x % 10;\n            x /= 10;\n        }\n\
    \        sum\n    });\n    nums", '    nums.iter().enumerate().map(|(i, n)| (i,
    n, n.abs() / 10 + n.abs() % 10)).collect::<Vec<_>>().sort_by(|a, b| a.2.cmp(&b.2)).map(|(_,
    n, _)| *n).collect()', "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", '    unimplemented!();',
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let\
    \ mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n            sum\
    \ += (n % 10).abs();\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    nums.iter().enumerate().map(|(i, &n)| (n, i)).sorted_by_key(|&(n,\
    \ _)| {\n        n.abs().to_string().chars().map(|c| c.to_digit(10).unwrap() as\
    \ isize).sum::<isize>()\n    }).map(|(n, _)| n).collect()", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    nums.iter().enumerate().sorted_by(|a,\
    \ b| {\n        let (i, x) = *a;\n        let (j, y) = *b;\n        let x_sum\
    \ = x.abs() / 10 + x.abs() % 10;\n        let y_sum = y.abs() / 10 + y.abs() %\
    \ 10;\n        if x_sum == y_sum {\n            i.cmp(&j)\n        } else {\n\
    \            x_sum.cmp(&y_sum)\n        }\n    }).map(|(_, x)| *x).collect()",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs() as usize / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_of_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut n = *n;\n        let mut sum = 0;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut num = *x;\n        while num != 0 {\n        \
    \    sum += num % 10;\n            num /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += (x % 10).abs();\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += (x % 10).abs();\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| (n.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs());\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n  \
    \      let mut n = n;\n        while n != 0 {\n            sum += (n % 10).abs();\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize % 10 + x.abs() as usize\
    \ / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n\
    \        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n  \
    \          sum += (x % 10).abs();\n            x /= 10;\n        }\n        sum\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs()\
    \ % 10 + x.abs() / 10);\n    nums", "    let mut result = nums.clone();\n    result.sort_by(|a,\
    \ b| {\n        let a_sum = sum_of_digits(*a);\n        let b_sum = sum_of_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    result", "    let mut nums_with_points:\
    \ Vec<(isize, usize)> = nums\n        .iter()\n        .map(|&num| (num, num.abs()\
    \ as usize))\n        .collect();\n    nums_with_points.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    nums_with_points.iter().map(|&(num, _)| num).collect()", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|num| {\n        let mut sum = 0;\n        let\
    \ mut num = *num;\n        while num != 0 {\n            sum += num % 10;\n  \
    \          num /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ let mut n = *x;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += (x % 10).abs();\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| sum_digits(*n));\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += (x % 10).abs();\n            x /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs() as usize / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let mut sum = 0;\n\
    \        let mut n = n;\n        while n != 0 {\n            sum += (n % 10).abs();\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n\
    \        let b_sum = b.abs() / 10 + b.abs() % 10;\n        if a_sum == b_sum {\n\
    \            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n     \
    \   }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b|\
    \ {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum = b.abs()\
    \ / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs() / 10\
    \ + a.abs() % 10;\n        let b_sum = b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n \
    \       let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n  \
    \          sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += (n % 10).abs();\n            n /= 10;\n        }\n       \
    \ sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += (x % 10).abs();\n            x /= 10;\n        }\n       \
    \ sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ sum_digits(*n));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs());\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| sum_digits(*n));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs()\
    \ / 10 + a.abs() % 10;\n        let b_sum = b.abs() / 10 + b.abs() % 10;\n   \
    \     a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.abs() / 10 + a.abs() % 10;\n        let b_sum =\
    \ b.abs() / 10 + b.abs() % 10;\n        a_sum.cmp(&b_sum)\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs()\
    \ as usize / 10 + a.abs() as usize % 10;\n        let b_sum = b.abs() as usize\
    \ / 10 + b.abs() as usize % 10;\n        if a_sum == b_sum {\n            a.cmp(b)\n\
    \        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&n| (n.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| n.abs() % 10 +\
    \ n.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    nums.iter().enumerate().sorted_by(|a, b| {\n        let (i, x) = *a;\n    \
    \    let (j, y) = *b;\n        let x_sum = x.abs().to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let y_sum = y.abs().to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        x_sum.cmp(&y_sum).then(i.cmp(&j))\n\
    \    }).map(|(_, x)| *x).collect()", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| sum_digits(*n));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        n.abs()\n\
    \            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap())\n\
    \            .sum::<u32>()\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|num|\
    \ num.abs() / 10 + num.abs() % 10);\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs() as usize / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs() as usize / 10);\n \
    \   nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&num|\
    \ {\n        let mut sum = 0;\n        let mut num = num;\n        while num !=\
    \ 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n     \
    \   sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    nums.iter().enumerate().sorted_by(|a, b| {\n        let (i, x)\
    \ = *a;\n        let (j, y) = *b;\n        let x = x.abs();\n        let y = y.abs();\n\
    \        let x = x / 10 + x % 10;\n        let y = y / 10 + y % 10;\n        if\
    \ x == y {\n            i.cmp(&j)\n        } else {\n            x.cmp(&y)\n \
    \       }\n    }).map(|(_, x)| *x).collect()", "    let mut nums = nums;\n   \
    \ nums.sort_by_key(|n| n.abs() as usize);\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| x.abs() as usize % 10 + x.abs()\
    \ as usize / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums"]
stop_tokens:
- "\n}"
