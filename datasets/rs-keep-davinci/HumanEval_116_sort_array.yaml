name: HumanEval_116_sort_array
language: rust
prompt: "/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1, 0, 2, 3, 4])\
  \ [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
  \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
  \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3,\
  \ 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4,\
  \ 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]),\
  \ vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
  \ vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2,\
  \ 4, 8, 16, 32]);\n}\n"
completions: ["    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones\
    \ = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr =\
    \ arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n     \
    \   let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n\
    \        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  match a_ones.cmp(&b_ones) {\n            Ordering::Equal => a.cmp(b),\n   \
    \         Ordering::Less => Ordering::Less,\n            Ordering::Greater =>\
    \ Ordering::Greater,\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr: Vec<_>\
    \ = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n    arr.sort_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    arr.into_iter().map(|x| x.0).collect()",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a = a.abs();\n  \
    \      let b = b.abs();\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(&b)\n  \
    \      } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    arr.iter()\n        .map(|&x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| match a.1.cmp(&b.1) {\n            Ordering::Equal =>\
    \ a.0.cmp(&b.0),\n            other => other,\n        })\n        .into_iter()\n\
    \        .map(|x| x.0)\n        .collect()", "    let mut arr = arr;\n    arr.sort_by(|a,\
    \ b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n\
    \        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n     \
    \       a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr =\
    \ arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n     \
    \   let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n\
    \        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr: Vec<(usize,\
    \ isize)> = arr.into_iter().map(|x| (x.count_ones(), x)).collect();\n    arr.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)));\n    arr.into_iter().map(|x| x.1).collect()",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones != b_ones {\n            a_ones.cmp(&b_ones)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    arr", "    let\
    \ mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a = a.abs();\n        let b = b.abs();\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(&b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  a_ones.cmp(&b_ones).then(a.cmp(b))\n    });\n    arr", "    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones\
    \ = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n   \
    \     } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr",
  "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    arr", "    let mut arr = arr;\n    arr.sort_by(|a, b| {\n      \
    \  let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n      \
    \  if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n           \
    \ a_ones.cmp(&b_ones)\n        }\n    });\n    arr", "    arr.into_iter()\n  \
    \      .map(|x| (x, x.count_ones()))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|x| x.0)\n        .collect()"]
stop_tokens:
- "\n}"
