name: HumanEval_120_maximum
language: rust
prompt: "/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example 2:\n///\
  \ Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n/// Input:\
  \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n/// 1. The\
  \ length of the array will be in the range of [1, 1000].\n/// 2. The elements in\
  \ the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\n\
  fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
  \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
  \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n \
  \   assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
  \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
  \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0,\
  \ 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n\
  \    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
  \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
  \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()", " \
    \   let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut result = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n   \
    \ for i in 0..k {\n        result.push(arr[arr.len() - 1 - i as usize]);\n   \
    \ }\n    result", "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n\
    \        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as isize\
    \ {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut res =\
    \ vec![];\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n\
    \    }\n    res.reverse();\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if\
    \ arr[j] > arr[i] {\n                arr.swap(i, j);\n            }\n        \
    \    j += 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n\
    \            break;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr\
    \ = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut heap = BinaryHeap::new();\n    for i in 0..k\
    \ {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut result\
    \ = vec![];\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut result = Vec::with_capacity(k\
    \ as usize);\n    let mut max_heap = BinaryHeap::new();\n    for i in 0..k {\n\
    \        max_heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > max_heap.peek().unwrap() {\n         \
    \   max_heap.pop();\n            max_heap.push(arr[i as usize]);\n        }\n\
    \    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut res =\
    \ arr.clone();\n    res.sort();\n    res.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.into_iter().rev().take(k as usize).collect()", "    let mut result = Vec::with_capacity(k\
    \ as usize);\n    let mut min_heap = BinaryHeap::new();\n    for i in 0..k {\n\
    \        min_heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > min_heap.peek().unwrap() {\n         \
    \   min_heap.pop();\n            min_heap.push(arr[i as usize]);\n        }\n\
    \    }\n    for _ in 0..k {\n        result.push(min_heap.pop().unwrap());\n \
    \   }\n    result.reverse();\n    result", "    let mut heap = BinaryHeap::new();\n\
    \    for i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in\
    \ k..arr.len() as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n\
    \            heap.pop();\n            heap.push(arr[i as usize]);\n        }\n\
    \    }\n    let mut res = vec![];\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n\
    \    }\n    res.reverse();\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut heap\
    \ = BinaryHeap::new();\n    for &x in arr.iter() {\n        heap.push(x);\n  \
    \      if heap.len() > k as usize {\n            heap.pop();\n        }\n    }\n\
    \    heap.into_sorted_vec()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()", " \
    \   let mut res = Vec::new();\n    let mut max = std::isize::MIN;\n    let mut\
    \ max_index = 0;\n    let mut k = k as usize;\n    let mut arr = arr;\n    while\
    \ k > 0 {\n        max = std::isize::MIN;\n        max_index = 0;\n        for\
    \ (i, &v) in arr.iter().enumerate() {\n            if v > max {\n            \
    \    max = v;\n                max_index = i;\n            }\n        }\n    \
    \    res.push(max);\n        arr.remove(max_index);\n        k -= 1;\n    }\n\
    \    res", "    let mut result = Vec::with_capacity(k as usize);\n    let mut\
    \ heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i as usize]);\n\
    \    }\n    for i in k..arr.len() as isize {\n        if arr[i as usize] > heap.peek().unwrap()\
    \ {\n            heap.pop();\n            heap.push(arr[i as usize]);\n      \
    \  }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while\
    \ i < j {\n        let mut l = i;\n        let mut r = j;\n        let pivot =\
    \ arr[(l + r) / 2];\n        while l <= r {\n            while l <= r && arr[l]\
    \ > pivot {\n                l += 1;\n            }\n            while l <= r\
    \ && arr[r] < pivot {\n                r -= 1;\n            }\n            if\
    \ l <= r {\n                arr.swap(l, r);\n                l += 1;\n       \
    \         r -= 1;\n            }\n        }\n        if k <= l {\n           \
    \ j = l - 1;\n        } else {\n            i = l;\n            k -= l;\n    \
    \    }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[j]\
    \ > arr[i] {\n                arr.swap(i, j);\n            }\n            j +=\
    \ 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n     \
    \       break;\n        }\n    }\n    arr[0..k].to_vec()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut res = Vec::new();\n    for _ in 0..k {\n  \
    \      let mut max = std::isize::MIN;\n        let mut max_idx = 0;\n        for\
    \ (i, &v) in arr.iter().enumerate() {\n            if v > max {\n            \
    \    max = v;\n                max_idx = i;\n            }\n        }\n      \
    \  res.push(max);\n        arr.remove(max_idx);\n    }\n    res", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut res = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n    for\
    \ i in 0..k {\n        res.push(arr[arr.len() - 1 - i as usize]);\n    }\n   \
    \ res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut heap = BinaryHeap::new();\n    for\
    \ i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n          \
    \  heap.pop();\n            heap.push(arr[i as usize]);\n        }\n    }\n  \
    \  let mut res = vec![];\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n\
    \    }\n    res.reverse();\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut res = Vec::new();\n    let mut k = k as usize;\n    while k > 0 {\n\
    \        let mut max = 0;\n        for i in 1..k {\n            if arr[i] > arr[max]\
    \ {\n                max = i;\n            }\n        }\n        res.push(arr[max]);\n\
    \        arr.remove(max);\n        k -= 1;\n    }\n    res", "    let mut heap\
    \ = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i as usize]);\n\
    \    }\n    for i in k..arr.len() as isize {\n        if arr[i as usize] > heap.peek().unwrap()\
    \ {\n            heap.pop();\n            heap.push(arr[i as usize]);\n      \
    \  }\n    }\n    let mut res = vec![];\n    while !heap.is_empty() {\n       \
    \ res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    heap.into_sorted_vec()", "    let mut arr\
    \ = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut res = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n    for\
    \ i in 0..k {\n        res.push(arr[arr.len() - 1 - i as usize]);\n    }\n   \
    \ res", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()", " \
    \   let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    heap.into_sorted_vec()", "    let mut arr\
    \ = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        let mut j = i + 1;\n        while j < arr.len() {\n            if\
    \ arr[j] > arr[i] {\n                arr.swap(i, j);\n            }\n        \
    \    j += 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n\
    \            break;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr\
    \ = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut heap = BinaryHeap::new();\n    for\
    \ num in arr {\n        heap.push(num);\n        if heap.len() > k as usize {\n\
    \            heap.pop();\n        }\n    }\n    heap.into_sorted_vec()", "   \
    \ let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    let mut res = Vec::new();\n    let mut i = 0;\n   \
    \ while i < k {\n        let mut max = arr[0];\n        let mut max_index = 0;\n\
    \        for j in 1..arr.len() {\n            if arr[j] > max {\n            \
    \    max = arr[j];\n                max_index = j;\n            }\n        }\n\
    \        res.push(max);\n        arr.remove(max_index);\n        i += 1;\n   \
    \ }\n    res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut heap = BinaryHeap::new();\n\
    \    for i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in\
    \ k..arr.len() as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n\
    \            heap.pop();\n            heap.push(arr[i as usize]);\n        }\n\
    \    }\n    let mut result = vec![];\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut result = Vec::new();\n    while !heap.is_empty()\
    \ {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n  \
    \  for i in 0..k {\n        let max_index = arr.iter().enumerate().max_by_key(|(_,\
    \ &x)| x).unwrap().0;\n        result.push(arr[max_index]);\n        arr.remove(max_index);\n\
    \    }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.iter().rev().take(k as usize).cloned().collect()", "    let mut res = Vec::new();\n\
    \    let mut arr = arr;\n    arr.sort();\n    for i in 0..k {\n        res.push(arr[arr.len()\
    \ - 1 - i as usize]);\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut heap = BinaryHeap::new();\n    for\
    \ i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n          \
    \  heap.pop();\n            heap.push(arr[i as usize]);\n        }\n    }\n  \
    \  heap.into_sorted_vec()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut sorted = arr.clone();\n    sorted.sort();\n\
    \    sorted.into_iter().rev().take(k as usize).collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut result = Vec::new();\n    while !heap.is_empty()\
    \ {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut res = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n\
    \    for i in 0..k {\n        res.push(arr[arr.len() - 1 - i as usize]);\n   \
    \ }\n    res", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    while i < arr.len() {\n        let\
    \ mut j = i + 1;\n        while j < arr.len() && arr[j] > arr[i] {\n         \
    \   j += 1;\n        }\n        if j - i > k {\n            arr.remove(i);\n \
    \       } else {\n            res.push(arr[i]);\n            i += 1;\n       \
    \     k -= j - i;\n        }\n    }\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while i\
    \ < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n \
    \           if arr[j] > arr[i] {\n                arr.swap(i, j);\n          \
    \  }\n            j += 1;\n        }\n        i += 1;\n        k -= 1;\n     \
    \   if k == 0 {\n            break;\n        }\n    }\n    arr[0..k].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    let mut res = Vec::new();\n\
    \    for _ in 0..k {\n        let max = arr.iter().max().unwrap();\n        res.push(*max);\n\
    \        arr.remove_item(max);\n    }\n    res", "    let mut arr = arr;\n   \
    \ arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()", "    let\
    \ mut result = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n    for\
    \ i in 0..k {\n        max_heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > max_heap.peek().unwrap() {\n      \
    \      max_heap.pop();\n            max_heap.push(arr[i as usize]);\n        }\n\
    \    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut heap = BinaryHeap::new();\n    for &x in arr.iter() {\n        heap.push(x);\n\
    \        if heap.len() > k as usize {\n            heap.pop();\n        }\n  \
    \  }\n    heap.into_sorted_vec()", "    let mut arr = arr;\n    let mut k = k\
    \ as usize;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j\
    \ = i + 1;\n        while j < arr.len() {\n            if arr[j] > arr[i] {\n\
    \                arr.swap(i, j);\n            }\n            j += 1;\n       \
    \ }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut result = Vec::with_capacity(k);\n    for i in 0..k\
    \ {\n        let mut max_index = i;\n        for j in i+1..arr.len() {\n     \
    \       if arr[j] > arr[max_index] {\n                max_index = j;\n       \
    \     }\n        }\n        result.push(arr[max_index]);\n        arr.swap(i,\
    \ max_index);\n    }\n    result", "    let mut max_heap = BinaryHeap::new();\n\
    \    for i in 0..k {\n        max_heap.push(arr[i as usize]);\n    }\n    for\
    \ i in k..arr.len() as isize {\n        if arr[i as usize] > max_heap.peek().unwrap()\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i as usize]);\n\
    \        }\n    }\n    let mut result = vec![];\n    while !max_heap.is_empty()\
    \ {\n        result.push(max_heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut\
    \ res = Vec::new();\n    if arr.len() == 0 {\n        return res;\n    }\n   \
    \ if arr.len() == k {\n        return arr;\n    }\n    let mut left = 0;\n   \
    \ let mut right = arr.len() - 1;\n    while left < right {\n        let mut i\
    \ = left;\n        let mut j = right;\n        let pivot = arr[(left + right)\
    \ / 2];\n        while i <= j {\n            while i <= j && arr[i] > pivot {\n\
    \                i += 1;\n            }\n            while i <= j && arr[j] <\
    \ pivot {\n                j -= 1;\n            }\n            if i <= j {\n \
    \               arr.swap(i, j);\n                i += 1;\n                j -=\
    \ 1;\n            }\n        }\n        if k <= j - left + 1 {\n            right\
    \ = j;\n        } else {\n            k -= j - left + 1;\n            left = i;\n\
    \        }\n    }\n    for i in 0..k {\n        res.push(arr[i]);\n    }\n   \
    \ res", "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut res = vec![];\n    while let Some(x)\
    \ = heap.pop() {\n        res.push(x);\n    }\n    res.reverse();\n    res", " \
    \   let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut k = k as usize;\n    let mut result = Vec::with_capacity(k);\n\
    \    arr.sort();\n    for i in (0..k).rev() {\n        result.push(arr[i]);\n\
    \    }\n    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[j]\
    \ > arr[i] {\n                arr.swap(i, j);\n            }\n            j +=\
    \ 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n     \
    \       break;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[j]\
    \ > arr[i] {\n                arr.swap(i, j);\n            }\n            j +=\
    \ 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n     \
    \       break;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i + 1;\n        while j < arr.len() {\n            if arr[j]\
    \ > arr[i] {\n                arr.swap(i, j);\n            }\n            j +=\
    \ 1;\n        }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n     \
    \       break;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut result = Vec::new();\n    for i in 0..k {\n        let mut max = arr[i\
    \ as usize];\n        let mut max_index = i;\n        for j in (i + 1)..arr.len()\
    \ as isize {\n            if arr[j as usize] > max {\n                max = arr[j\
    \ as usize];\n                max_index = j;\n            }\n        }\n     \
    \   result.push(max);\n        arr.swap(i as usize, max_index as usize);\n   \
    \ }\n    result", "    let mut heap = BinaryHeap::new();\n    for &x in arr.iter()\
    \ {\n        heap.push(x);\n        if heap.len() > k as usize {\n           \
    \ heap.pop();\n        }\n    }\n    heap.into_sorted_vec()", "    let mut arr\
    \ = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut result = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n \
    \   for i in 0..k {\n        max_heap.push(arr[i as usize]);\n    }\n    for i\
    \ in k..arr.len() as isize {\n        if arr[i as usize] > max_heap.peek().unwrap()\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i as usize]);\n\
    \        }\n    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\
    \    while left < right {\n        let pivot = partition(&mut arr, left, right);\n\
    \        if pivot == k {\n            break;\n        } else if pivot < k {\n\
    \            left = pivot + 1;\n        } else {\n            right = pivot -\
    \ 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut res = Vec::new();\n    while !heap.is_empty()\
    \ {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut heap = BinaryHeap::new();\n    for\
    \ i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n          \
    \  heap.pop();\n            heap.push(arr[i as usize]);\n        }\n    }\n  \
    \  let mut result = vec![];\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n        let\
    \ mut j = i + 1;\n        while j < arr.len() {\n            if arr[j] > arr[i]\
    \ {\n                arr.swap(i, j);\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()", " \
    \   let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in\
    \ arr {\n        heap.push(Reverse(i));\n        if heap.len() > k as usize {\n\
    \            heap.pop();\n        }\n    }\n    while let Some(Reverse(i)) = heap.pop()\
    \ {\n        res.push(i);\n    }\n    res.reverse();\n    res", "    let mut arr\
    \ = arr;\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i <\
    \ k {\n        let mut max = i;\n        for j in i+1..arr.len() {\n         \
    \   if arr[j] > arr[max] {\n                max = j;\n            }\n        }\n\
    \        result.push(arr[max]);\n        arr.remove(max);\n        i += 1;\n \
    \   }\n    result", "    let mut heap = BinaryHeap::new();\n    for i in 0..k\
    \ {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    heap.into_sorted_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut result = Vec::with_capacity(k as usize);\n    let mut arr = arr;\n\
    \    arr.sort();\n    for i in (0..k).rev() {\n        result.push(arr[i as usize]);\n\
    \    }\n    result", "    let mut heap = BinaryHeap::new();\n    for i in 0..k\
    \ {\n        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as\
    \ isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut res =\
    \ vec![];\n    while let Some(x) = heap.pop() {\n        res.push(x);\n    }\n\
    \    res.reverse();\n    res", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut result = Vec::with_capacity(k);\n    for i in 0..k {\n        let\
    \ mut max_index = i;\n        for j in i+1..arr.len() {\n            if arr[j]\
    \ > arr[max_index] {\n                max_index = j;\n            }\n        }\n\
    \        result.push(arr[max_index]);\n        arr.swap(i, max_index);\n    }\n\
    \    result", "    let mut res = Vec::new();\n    let mut arr = arr;\n    arr.sort();\n\
    \    for i in 0..k {\n        res.push(arr[arr.len() - 1 - i as usize]);\n   \
    \ }\n    res", "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n\
    \    arr.into_iter().take(k as usize).collect()", "    let mut arr = arr;\n  \
    \  let mut k = k as usize;\n    let mut i = 0;\n    while i < arr.len() && k >\
    \ 0 {\n        let mut j = i + 1;\n        while j < arr.len() && arr[j] > arr[i]\
    \ {\n            j += 1;\n        }\n        if j == arr.len() {\n           \
    \ arr.swap(i, j - 1);\n            k -= 1;\n        }\n        i += 1;\n    }\n\
    \    arr.into_iter().take(k).collect()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.into_iter().rev().take(k as usize).collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    arr.sort();\n    arr.reverse();\n    arr.truncate(k);\n\
    \    arr", "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n     \
    \   heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as isize {\n\
    \        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut result\
    \ = Vec::new();\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    let mut res = Vec::new();\n    let mut i = 0;\n   \
    \ while i < k {\n        let mut max = i;\n        for j in i + 1..arr.len() {\n\
    \            if arr[j] > arr[max] {\n                max = j;\n            }\n\
    \        }\n        res.push(arr[max]);\n        arr.remove(max);\n        i +=\
    \ 1;\n    }\n    res", "    let mut result = Vec::new();\n    let mut max_heap\
    \ = BinaryHeap::new();\n    for i in 0..k {\n        max_heap.push(arr[i as usize]);\n\
    \    }\n    for i in k..arr.len() as isize {\n        if arr[i as usize] > max_heap.peek().unwrap()\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i as usize]);\n\
    \        }\n    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut heap = BinaryHeap::new();\n\
    \    for i in 0..k {\n        heap.push(arr[i as usize]);\n    }\n    for i in\
    \ k..arr.len() as isize {\n        if arr[i as usize] > heap.peek().unwrap() {\n\
    \            heap.pop();\n            heap.push(arr[i as usize]);\n        }\n\
    \    }\n    let mut res = Vec::new();\n    while let Some(x) = heap.pop() {\n\
    \        res.push(x);\n    }\n    res.reverse();\n    res", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut result = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n \
    \   for num in arr {\n        max_heap.push(num);\n        if max_heap.len() >\
    \ k as usize {\n            max_heap.pop();\n        }\n    }\n    while !max_heap.is_empty()\
    \ {\n        result.push(max_heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i\
    \ + 1;\n        while j < arr.len() {\n            if arr[j] > arr[i] {\n    \
    \            arr.swap(i, j);\n            }\n            j += 1;\n        }\n\
    \        i += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n \
    \       }\n    }\n    arr[0..k].to_vec()", "    let mut arr = arr;\n    let mut\
    \ k = k as usize;\n    let mut i = 0;\n    while i < arr.len() {\n        let\
    \ mut j = i + 1;\n        while j < arr.len() {\n            if arr[j] > arr[i]\
    \ {\n                arr.swap(i, j);\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n\
    \        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).map(|x|\
    \ *x).collect()", "    let mut heap = BinaryHeap::new();\n    for i in 0..k {\n\
    \        heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len() as isize\
    \ {\n        if arr[i as usize] > heap.peek().unwrap() {\n            heap.pop();\n\
    \            heap.push(arr[i as usize]);\n        }\n    }\n    let mut res =\
    \ vec![];\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap());\n\
    \    }\n    res.reverse();\n    res", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut max_heap = BinaryHeap::new();\n    for i in 0..k {\n        max_heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > max_heap.peek().unwrap() {\n            max_heap.pop();\n         \
    \   max_heap.push(arr[i as usize]);\n        }\n    }\n    let mut result = Vec::new();\n\
    \    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr =\
    \ arr;\n    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr = arr;\n\
    \    let mut k = k as usize;\n    let mut left = 0;\n    let mut right = arr.len()\
    \ - 1;\n    while left < right {\n        let pivot = partition(&mut arr, left,\
    \ right);\n        if pivot == k {\n            break;\n        } else if pivot\
    \ < k {\n            left = pivot + 1;\n        } else {\n            right =\
    \ pivot - 1;\n        }\n    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()", "   \
    \ let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n \
    \       while j < arr.len() {\n            if arr[j] > arr[i] {\n            \
    \    arr.swap(i, j);\n            }\n            j += 1;\n        }\n        i\
    \ += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n        }\n\
    \    }\n    arr[0..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().rev().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    let mut k = k as usize;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i + 1;\n \
    \       while j < arr.len() {\n            if arr[j] > arr[i] {\n            \
    \    arr.swap(i, j);\n            }\n            j += 1;\n        }\n        i\
    \ += 1;\n        k -= 1;\n        if k == 0 {\n            break;\n        }\n\
    \    }\n    arr[..k].to_vec()", "    let mut arr = arr;\n    arr.sort();\n   \
    \ arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k as usize).cloned().collect()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let mut\
    \ result = Vec::new();\n    let mut max_heap = BinaryHeap::new();\n    for i in\
    \ 0..k {\n        max_heap.push(arr[i as usize]);\n    }\n    for i in k..arr.len()\
    \ as isize {\n        if arr[i as usize] > max_heap.peek().unwrap() {\n      \
    \      max_heap.pop();\n            max_heap.push(arr[i as usize]);\n        }\n\
    \    }\n    while !max_heap.is_empty() {\n        result.push(max_heap.pop().unwrap());\n\
    \    }\n    result.reverse();\n    result", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.reverse();\n    arr.into_iter().take(k as usize).collect()", "    let\
    \ mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut result = Vec::new();\n    while !heap.is_empty()\
    \ {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut result = Vec::with_capacity(k as usize);\n    for &n\
    \ in arr.iter() {\n        if result.len() < k as usize {\n            result.push(n);\n\
    \            result.sort();\n        } else if n > result[0] {\n            result[0]\
    \ = n;\n            result.sort();\n        }\n    }\n    result", "    let mut\
    \ heap = BinaryHeap::new();\n    for &x in arr.iter() {\n        heap.push(x);\n\
    \        if heap.len() > k as usize {\n            heap.pop();\n        }\n  \
    \  }\n    heap.into_sorted_vec()", "    let mut arr = arr;\n    arr.sort();\n\
    \    arr.iter().rev().take(k as usize).cloned().collect()", "    let mut res =\
    \ Vec::new();\n    let mut arr = arr;\n    arr.sort();\n    for i in 0..k {\n\
    \        res.push(arr[arr.len() - 1 - i as usize]);\n    }\n    res", "    let\
    \ mut arr = arr;\n    let mut k = k as usize;\n    let mut i = 0;\n    while i\
    \ < arr.len() {\n        let mut j = i + 1;\n        while j < arr.len() {\n \
    \           if arr[j] > arr[i] {\n                arr.swap(i, j);\n          \
    \  }\n            j += 1;\n        }\n        i += 1;\n        k -= 1;\n     \
    \   if k == 0 {\n            break;\n        }\n    }\n    arr[..k].to_vec()",
  "    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.into_iter().take(k\
    \ as usize).collect()", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    let mut k = k as\
    \ usize;\n    let mut result = Vec::with_capacity(k);\n    for i in 0..k {\n \
    \       let mut max_index = i;\n        for j in i+1..arr.len() {\n          \
    \  if arr[j] > arr[max_index] {\n                max_index = j;\n            }\n\
    \        }\n        result.push(arr[max_index]);\n        arr.swap(i, max_index);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n\
    \    for i in 0..arr.len() {\n        heap.push(arr[i]);\n        if heap.len()\
    \ > k as usize {\n            heap.pop();\n        }\n    }\n    while !heap.is_empty()\
    \ {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n\
    \    result", "    let mut arr = arr;\n    arr.sort();\n    arr.iter().rev().take(k\
    \ as usize).cloned().collect()", "    let mut arr = arr;\n    arr.sort();\n  \
    \  arr.iter().rev().take(k as usize).cloned().collect()", "    let mut arr = arr;\n\
    \    arr.sort();\n    arr.into_iter().rev().take(k as usize).collect()", "   \
    \ let mut heap = BinaryHeap::new();\n    for i in 0..k {\n        heap.push(arr[i\
    \ as usize]);\n    }\n    for i in k..arr.len() as isize {\n        if arr[i as\
    \ usize] > heap.peek().unwrap() {\n            heap.pop();\n            heap.push(arr[i\
    \ as usize]);\n        }\n    }\n    let mut res = vec![];\n    while !heap.is_empty()\
    \ {\n        res.push(heap.pop().unwrap());\n    }\n    res.reverse();\n    res"]
stop_tokens:
- "\n}"
