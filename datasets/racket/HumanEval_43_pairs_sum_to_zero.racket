#lang racket

;; pairs_sum_to_zero takes a list of integers as an input.
;; it returns True if there are two distinct elements in the list that
;; sum to zero, and False otherwise.
;; >>> pairs_sum_to_zero([1, 3, 5, 0])
;; False
;; >>> pairs_sum_to_zero([1, 3, -2, 1])
;; False
;; >>> pairs_sum_to_zero([1, 2, 3, 7])
;; False
;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
;; True
;; >>> pairs_sum_to_zero([1])
;; False
(define (pairs_sum_to_zero l)
  (cond [(null? l) #f]
        [(= (length l) 1) #f]
        [else (or (pairs_sum_to_zero_helper (filter (lambda (x) (not (= x 0))) l))
                  (pairs_sum_to_zero_helper (filter (lambda (x) (not (= x 0))) (reverse l))))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate pairs_sum_to_zero))
    (check-equal? (candidate (list 1 3 5 0)) #f)
    (check-equal? (candidate (list 1 3 -2 1)) #f)
    (check-equal? (candidate (list 1 2 3 7)) #f)
    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)
    (check-equal? (candidate (list 1)) #f)
    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)
    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)
    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)
    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)
))

(test-humaneval)