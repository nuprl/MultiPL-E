#lang racket

;; Implement a function that takes an non-negative integer and returns an array of the first n
;; integers that are prime numbers and less than n.
;; for example:
;; count_up_to(5) => [2,3]
;; count_up_to(11) => [2,3,5,7]
;; count_up_to(0) => []
;; count_up_to(20) => [2,3,5,7,11,13,17,19]
;; count_up_to(1) => []
;; count_up_to(18) => [2,3,5,7,11,13,17]
(define (count_up_to n)
  (define (count_up_to_helper i)
    (if (<= i n)
        (cons i (count_up_to_helper (+ i 2)))
        (list)))
  (count_up_to_helper 2))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_up_to))
    (check-equal? (candidate 5) '(2 3))
    (check-equal? (candidate 6) '(2 3 5))
    (check-equal? (candidate 7) '(2 3 5))
    (check-equal? (candidate 10) '(2 3 5 7))
    (check-equal? (candidate 0) '())
    (check-equal? (candidate 22) '(2 3 5 7 11 13 17 19))
    (check-equal? (candidate 1) '())
    (check-equal? (candidate 18) '(2 3 5 7 11 13 17))
    (check-equal? (candidate 47) '(2 3 5 7 11 13 17 19 23 29 31 37 41 43))
    (check-equal? (candidate 101) '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97))
))

(test-humaneval)