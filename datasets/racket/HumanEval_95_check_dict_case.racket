#lang racket

;; Given a dictionary, return True if all keys are strings in lower 
;; case or all keys are strings in upper case, else return False.
;; The function should return False is the given dictionary is empty.
;; Examples:
;; check_dict_case({"a":"apple", "b":"banana"}) should return True.
;; check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
;; check_dict_case({"a":"apple", "8":"banana", "a":"apple"}) should return False.
;; check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
;; check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
(define (check_dict_case dict)
  (cond [(empty? dict) #t]
        [(all? (lambda (k) (string? k)) (keys dict)) #t]
        [(all? (lambda (k) (string? k)) (values dict)) #t]
        [else #f]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate check_dict_case))
    (check-equal? (candidate '#hash(("p" .  "pineapple") ("b" .  "banana"))) #t)
    (check-equal? (candidate '#hash(("p" .  "pineapple") ("A" .  "banana") ("B" .  "banana"))) #f)
    (check-equal? (candidate '#hash(("p" .  "pineapple") ("5" .  "banana") ("a" .  "apple"))) #f)
    (check-equal? (candidate '#hash(("Name" .  "John") ("Age" .  "36") ("City" .  "Houston"))) #f)
    (check-equal? (candidate '#hash(("STATE" .  "NC") ("ZIP" .  "12345"))) #t)
    (check-equal? (candidate '#hash(("fruit" .  "Orange") ("taste" .  "Sweet"))) #t)
    (check-equal? (candidate '#hash()) #f)
))

(test-humaneval)