#lang racket

;; Given a positive integer n, you have to make a pile of n levels of stones.
;; The first level has n stones.
;; The number of stones in the next level is:
;; - the next odd number if n is odd.
;; - the next even number if n is even.
;; Return the number of stones in each level in a list, where element at index
;; i represents the number of stones in the level (i+1).
;; Examples:
;; >>> make_a_pile(3)
;; [3, 5, 7]
(define (make_a_pile n)
  (if (even? n)
      (cons n (make_a_pile (next-even n)))
      (cons n (make_a_pile (next-odd n)))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate make_a_pile))
    (check-equal? (candidate 3) (list 3 5 7))
    (check-equal? (candidate 4) (list 4 6 8 10))
    (check-equal? (candidate 5) (list 5 7 9 11 13))
    (check-equal? (candidate 6) (list 6 8 10 12 14 16))
    (check-equal? (candidate 8) (list 8 10 12 14 16 18 20 22))
))

(test-humaneval)