#lang racket

;; xs represent coefficients of a polynomial.
;; xs[0] + xs[1] * x + xs[2] * x^2 + ....
;; Return derivative of this polynomial in the same form.
;; >>> derivative([3, 1, 2, 4, 5])
;; [1, 4, 12, 20]
;; >>> derivative([1, 2, 3])
;; [2, 6]
(define (derivative xs)
  (define (derivative-recur xs)
    (if (null? xs)
        '()
        (cons (* (car xs) (car (cdr xs)))
              (derivative-recur (cdr (cdr xs))))))
  (derivative-recur xs))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate derivative))
    (check-equal? (candidate (list 3 1 2 4 5)) (list 1 4 12 20))
    (check-equal? (candidate (list 1 2 3)) (list 2 6))
    (check-equal? (candidate (list 3 2 1)) (list 2 2))
    (check-equal? (candidate (list 3 2 1 0 4)) (list 2 2 0 16))
    (check-equal? (candidate (list 1)) (list ))
))

(test-humaneval)