#lang racket

;; Given the lengths of the three sides of a triangle. Return the area of
;; the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
;; Otherwise return -1
;; Three sides make a valid triangle when the sum of any two sides is greater 
;; than the third side.
;; Example:
;; triangle_area(3, 4, 5) == 6.00
;; triangle_area(1, 2, 10) == -1
(define (triangle_area a, b, c)
  (if (and (<= a (+ b c))
           (<= b (+ a c))
           (<= c (+ a b)))
      (round (* (/ 1 2) (sqrt (- (square a) (* b c)))))
    -1))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate triangle_area))
    (check-equal? (candidate 3 4 5) 6.0)
    (check-equal? (candidate 1 2 10) -1)
    (check-equal? (candidate 4 8 5) 8.18)
    (check-equal? (candidate 2 2 2) 1.73)
    (check-equal? (candidate 1 2 3) -1)
    (check-equal? (candidate 10 5 7) 16.25)
    (check-equal? (candidate 2 6 3) -1)
    (check-equal? (candidate 1 1 1) 0.43)
    (check-equal? (candidate 2 2 10) -1)
))

(test-humaneval)