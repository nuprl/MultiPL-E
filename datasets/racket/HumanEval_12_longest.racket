#lang racket

;; Out of list of strings, return the longest one. Return the first one in case of multiple
;; strings of the same length. Return None in case the input list is empty.
;; >>> longest([])
;; >>> longest(['a', 'b', 'c'])
;; 'a'
;; >>> longest(['a', 'bb', 'ccc'])
;; 'ccc'
(define (longest strings)
  (cond [(null? strings) #f]
        [else (longest-aux (sort strings (lambda (x y) (> (string-length x) (string-length y)))))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate longest))
    (check-equal? (candidate (list )) #f)
    (check-equal? (candidate (list "x" "y" "z")) "x")
    (check-equal? (candidate (list "x" "yyy" "zzzz" "www" "kkkk" "abc")) "zzzz")
))

(test-humaneval)