#lang racket

;; Write a function count_nums which takes an array of integers and returns
;; the number of elements which has a sum of digits > 0.
;; If a number is negative, then its first signed digit will be negative:
;; e.g. -123 has signed digits -1, 2, and 3.
;; >>> count_nums([]) == 0
;; >>> count_nums([-1, 11, -11]) == 1
;; >>> count_nums([1, 1, 2]) == 3
(define (count_nums arr)
    (define (count_nums_acc arr acc)
        (if (null? arr)
            acc
            (count_nums_acc (cdr arr) (+ acc (if (< 0 (sum_digits (car arr))) 1 0)))))
    (count_nums_acc arr 0))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_nums))
    (check-equal? (candidate '()) 0)
    (check-equal? (candidate '(-1 -2 0)) 0)
    (check-equal? (candidate '(1 1 2 -2 3 4 5)) 6)
    (check-equal? (candidate '(1 6 9 -6 0 1 5)) 5)
    (check-equal? (candidate '(1 100 98 -7 1 -1)) 4)
    (check-equal? (candidate '(12 23 34 -45 -56 0)) 5)
    (check-equal? (candidate '(0 1)) 1)
    (check-equal? (candidate '(1)) 1)
))

(test-humaneval)