#lang racket

;; Your task is to write a function that returns true if a number x is a simple
;; power of n and false in other cases.
;; x is a simple power of n if n**int=x
;; For example:
;; is_simple_power(1, 4) => true
;; is_simple_power(2, 2) => true
;; is_simple_power(8, 2) => true
;; is_simple_power(3, 2) => false
;; is_simple_power(3, 1) => false
;; is_simple_power(5, 3) => false
(define (is_simple_power x, n)
  (define (is_simple_power_helper x n)
    (cond ((= x 1) #t)
          ((= x 0) #f)
          ((= (remainder x n) 0) (is_simple_power_helper (/ x n) n))
          (else #f)))
  (is_simple_power_helper x n))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_simple_power))
    (check-equal? (candidate 16 2) #t)
    (check-equal? (candidate 143214 16) #f)
    (check-equal? (candidate 4 2) #t)
    (check-equal? (candidate 9 3) #t)
    (check-equal? (candidate 16 4) #t)
    (check-equal? (candidate 24 2) #f)
    (check-equal? (candidate 128 4) #f)
    (check-equal? (candidate 12 6) #f)
    (check-equal? (candidate 1 1) #t)
    (check-equal? (candidate 1 12) #t)
))

(test-humaneval)