#lang racket

;; Return list of prime factors of given integer in the order from smallest to largest.
;; Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
;; Input number should be equal to the product of all factors
;; >>> factorize(8)
;; [2, 2, 2]
;; >>> factorize(25)
;; [5, 5]
;; >>> factorize(70)
;; [2, 5, 7]
(define (factorize n)
  (define (factorize-iter n acc)
    (if (= n 1)
        acc
        (let ((factor (find-factor n)))
          (factorize-iter (/ n factor) (append acc (list factor))))))
  (factorize-iter n '()))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate factorize))
    (check-equal? (candidate 2) '(2))
    (check-equal? (candidate 4) '(2 2))
    (check-equal? (candidate 8) '(2 2 2))
    (check-equal? (candidate 57) '(3 19))
    (check-equal? (candidate 3249) '(3 3 19 19))
    (check-equal? (candidate 185193) '(3 3 3 19 19 19))
    (check-equal? (candidate 20577) '(3 19 19 19))
    (check-equal? (candidate 18) '(2 3 3))
))

(test-humaneval)