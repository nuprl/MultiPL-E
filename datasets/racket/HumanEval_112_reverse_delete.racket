#lang racket

;; Task
;; We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
;; then check if the result string is palindrome.
;; A string is called palindrome if it reads the same backward as forward.
;; You should return a tuple containing the result string and True/False for the check.
;; Example
;; For s = "abcde", c = "ae", the result should be ('bcd',False)
;; For s = "abcdef", c = "b"  the result should be ('acdef',False)
;; For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
(define (reverse_delete s, c)
  (define (is_palindrome? s)
    (define (is_palindrome_rec? s acc)
      (if (null? s)
          acc
          (is_palindrome_rec? (cdr s) (if (equal? (car s) (car (cdr s)))
                                         acc
                                         (cons (car s) acc)))))
    (is_palindrome_rec? s '()))
  (define (reverse_delete_rec s c acc)
    (if (null? s)
        acc
        (if (member? (car s) c)
            (reverse_delete_rec (cdr s) c acc)
            (reverse_delete_rec (cdr s) c (cons (car s) acc)))))
  (cons (reverse_delete_rec s c '()) (is_palindrome? (reverse_delete_rec s c '()))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate reverse_delete))
    (check-equal? (candidate "abcde" "ae") (list "bcd" #f))
    (check-equal? (candidate "abcdef" "b") (list "acdef" #f))
    (check-equal? (candidate "abcdedcba" "ab") (list "cdedc" #t))
    (check-equal? (candidate "dwik" "w") (list "dik" #f))
    (check-equal? (candidate "a" "a") (list "" #t))
    (check-equal? (candidate "abcdedcba" "") (list "abcdedcba" #t))
    (check-equal? (candidate "abcdedcba" "v") (list "abcdedcba" #t))
    (check-equal? (candidate "vabba" "v") (list "abba" #t))
    (check-equal? (candidate "mamma" "mia") (list "" #t))
))

(test-humaneval)