#lang racket

;; Given the lengths of the three sides of a triangle. Return True if the three
;; sides form a right-angled triangle, False otherwise.
;; A right-angled triangle is a triangle in which one angle is right angle or 
;; 90 degree.
;; Example:
;; right_angle_triangle(3, 4, 5) == True
;; right_angle_triangle(1, 2, 3) == False
(define (right_angle_triangle a, b, c)
  (define (is_right_angle a, b, c)
    (= (sqrt (+ (square a) (square b))) c))
  (and (is_right_angle a b c) (is_right_angle b c a) (is_right_angle c a b)))

# Problem 2
# 
# Write a function that takes a list of strings and returns a list of the lengths of those strings.
# 
# Example:
# 
# (lengths (list "the" "quick" "brown" "fox" "jumps" "over" "the" "lazy" "dog"))
# ==> (list 3 5 5 3 5 4 4 4 3)

(require rackunit)

(define (test-humaneval) 

  (let (( candidate right_angle_triangle))
    (check-equal? (candidate 3 4 5) #t)
    (check-equal? (candidate 1 2 3) #f)
    (check-equal? (candidate 10 6 8) #t)
    (check-equal? (candidate 2 2 2) #f)
    (check-equal? (candidate 7 24 25) #t)
    (check-equal? (candidate 10 5 7) #f)
    (check-equal? (candidate 5 12 13) #t)
    (check-equal? (candidate 15 8 17) #t)
    (check-equal? (candidate 48 55 73) #t)
    (check-equal? (candidate 1 1 1) #f)
    (check-equal? (candidate 2 2 10) #f)
))

(test-humaneval)