#lang racket

;; Write a function that takes an array of numbers as input and returns 
;; the number of elements in the array that are greater than 10 and both 
;; first and last digits of a number are odd (1, 3, 5, 7, 9).
;; For example:
;; specialFilter([15, -73, 14, -15]) => 1 
;; specialFilter([33, -2, -3, 45, 21, 109]) => 2
(define (specialFilter nums)
  (define (filter-nums nums)
    (cond [(null? nums) #f]
          [(and (odd? (car nums)) (odd? (cadr nums))) (cons (car nums) (filter-nums (cdr nums))) ]
          [else (filter-nums (cdr nums))]))
  (length (filter-nums nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate specialFilter))
    (check-equal? (candidate '(5 -2 1 -5)) 0)
    (check-equal? (candidate '(15 -73 14 -15)) 1)
    (check-equal? (candidate '(33 -2 -3 45 21 109)) 2)
    (check-equal? (candidate '(43 -12 93 125 121 109)) 4)
    (check-equal? (candidate '(71 -2 -33 75 21 19)) 3)
    (check-equal? (candidate '(1)) 0)
    (check-equal? (candidate '()) 0)
))

(test-humaneval)