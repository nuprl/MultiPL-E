#lang racket

;; You are given a list of numbers.
;; You need to return the sum of squared numbers in the given list,
;; round each element in the list to the upper int(Ceiling) first.
;; Examples:
;; For lst = [1,2,3] the output should be 14
;; For lst = [1,4,9] the output should be 98
;; For lst = [1,3,5,7] the output should be 84
;; For lst = [1.4,4.2,0] the output should be 29
;; For lst = [-2.4,1,1] the output should be 6
(define (sum_squares lst)
  (define (ceiling x) (let ((i (int x))) (if (< x i) (add1 i) i)))
  (define (square x) (expt x 2))
  (define (sum_squares_acc lst acc)
    (if (null? lst) acc
        (sum_squares_acc (cdr lst) (+ acc (square (ceiling (car lst)))))))
  (sum_squares_acc lst 0))

# Problem 4
# 
# Write a function that takes a list of numbers and returns the sum of the list.
# 
# Examples:
# 
# For lst = [1,2,3] the output should be 6
# For lst = [1,4,9] the output should be 18
# For lst = [1,3,5,7] the output should be 16
# For lst = [1.4,4.2,0] the output should be 5.2
# For lst = [-2.4,1,1] the output should be -0.6

(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_squares))
    (check-equal? (candidate '(1 2 3)) 14)
    (check-equal? (candidate '(1.0 2 3)) 14)
    (check-equal? (candidate '(1 3 5 7)) 84)
    (check-equal? (candidate '(1.4 4.2 0)) 29)
    (check-equal? (candidate '(-2.4 1 1)) 6)
    (check-equal? (candidate '(100 1 15 2)) 10230)
    (check-equal? (candidate '(10000 10000)) 200000000)
    (check-equal? (candidate '(-1.4 4.6 6.3)) 75)
    (check-equal? (candidate '(-1.4 17.9 18.9 19.9)) 1086)
    (check-equal? (candidate '(0)) 0)
    (check-equal? (candidate '(-1)) 1)
    (check-equal? (candidate '(-1 1 0)) 2)
))

(test-humaneval)