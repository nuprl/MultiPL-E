#lang racket

;; Write a function that returns True if the object q will fly, and False otherwise.
;; The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
;; Example:
;; will_it_fly([1, 2], 5) ➞ False 
;; # 1+2 is less than the maximum possible weight, but it's unbalanced.
;; will_it_fly([3, 2, 3], 1) ➞ False
;; # it's balanced, but 3+2+3 is more than the maximum possible weight.
;; will_it_fly([3, 2, 3], 9) ➞ True
;; # 3+2+3 is less than the maximum possible weight, and it's balanced.
;; will_it_fly([3], 5) ➞ True
;; # 3 is less than the maximum possible weight, and it's balanced.
(define (will_it_fly q, w)
  (cond
   [(not (palindrome? q)) #f]
   [(> (sum_list q) w) #f]
   [else #t]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate will_it_fly))
    (check-equal? (candidate '(3 2 3) 9) #t)
    (check-equal? (candidate '(1 2) 5) #f)
    (check-equal? (candidate '(3) 5) #t)
    (check-equal? (candidate '(3 2 3) 1) #f)
    (check-equal? (candidate '(1 2 3) 6) #f)
    (check-equal? (candidate '(5) 5) #t)
))

(test-humaneval)