#lang racket

;; Create a function which returns the largest index of an element which
;; is not greater than or equal to the element immediately preceding it. If
;; no such element exists then return -1. The given array will not contain
;; duplicate values.
;; Examples:
;; can_arrange([1,2,4,3,5]) = 3
;; can_arrange([1,2,3]) = -1
(define (can_arrange arr)
  (define (can_arrange_helper arr index)
    (cond [(null? arr) -1]
          [(> (car arr) (car (cdr arr))) index]
          [else (can_arrange_helper (cdr arr) (+ index 1))]))
  (can_arrange_helper arr 0))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate can_arrange))
    (check-equal? (candidate '(1 2 4 3 5)) 3)
    (check-equal? (candidate '(1 2 4 5)) -1)
    (check-equal? (candidate '(1 4 2 5 6 7 8 9 10)) 2)
    (check-equal? (candidate '(4 8 5 7 3)) 4)
    (check-equal? (candidate '()) -1)
))

(test-humaneval)