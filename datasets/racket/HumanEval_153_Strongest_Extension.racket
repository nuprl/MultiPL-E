#lang racket

;; You will be given the name of a class (a string) and a list of extensions.
;; The extensions are to be used to load additional classes to the class. The
;; strength of the extension is as follows: Let CAP be the number of the uppercase
;; letters in the extension's name, and let SM be the number of lowercase letters 
;; in the extension's name, the strength is given by the fraction CAP - SM. 
;; You should find the strongest extension and return a string in this 
;; format: ClassName.StrongestExtensionName.
;; If there are two or more extensions with the same strength, you should
;; choose the one that comes first in the list.
;; For example, if you are given "Slices" as the class and a list of the
;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
;; (its strength is -1).
;; Example:
;; for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
(define (Strongest_Extension class_name, extensions)
  (define (strongest_extension_strength extension)
    (define (count_uppercase_letters extension)
      (define (count_uppercase_letters_helper extension accum)
        (if (null? extension)
            accum
            (count_uppercase_letters_helper (cdr extension) (+ accum (if (char-is-uppercase? (car extension)) 1 0)))))
      (count_uppercase_letters_helper extension 0))
    (define (count_lowercase_letters extension)
      (define (count_lowercase_letters_helper extension accum)
        (if (null? extension)
            accum
            (count_lowercase_letters_helper (cdr extension) (+ accum (if (char-is-lowercase? (car extension)) 1 0)))))
      (count_lowercase_letters_helper extension 0))
    (/ (count_uppercase_letters extension) (- (count_lowercase_letters extension) (count_uppercase_letters extension))))
  (define (strongest_extension extension)
    (define (strongest_extension_helper extension accum)
      (if (null? extension)
          accum
          (if (> (strongest_extension_strength (car extension)) (strongest_extension_strength accum))
              (strongest_extension_helper (cdr extension) (car extension))
              (strongest_extension_helper (cdr extension) accum))))
    (strongest_extension_helper extensions '()))
  (define (strongest_extension_name extension)
    (if (null? extension)
        '()
        (cons (car extension) (strongest_extension_name (cdr extension)))))
  (string-append class_name "." (string-append (strongest_extension_name (strongest_extension extensions)))))

# Problem 2
# 
# Write a function that takes a list of strings and returns a list of strings that are the names of the extensions in the same order as they appear in the list of strings.
# 
# Example:
# 
# for Extensions

(require rackunit)

(define (test-humaneval) 

  (let (( candidate Strongest_Extension))
    (check-equal? (candidate "Watashi" (list "tEN" "niNE" "eIGHt8OKe")) "Watashi.eIGHt8OKe")
    (check-equal? (candidate "Boku123" (list "nani" "NazeDa" "YEs.WeCaNe" "32145tggg")) "Boku123.YEs.WeCaNe")
    (check-equal? (candidate "__YESIMHERE" (list "t" "eMptY" "nothing" "zeR00" "NuLl__" "123NoooneB321")) "__YESIMHERE.NuLl__")
    (check-equal? (candidate "K" (list "Ta" "TAR" "t234An" "cosSo")) "K.TAR")
    (check-equal? (candidate "__HAHA" (list "Tab" "123" "781345" "-_-")) "__HAHA.123")
    (check-equal? (candidate "YameRore" (list "HhAas" "okIWILL123" "WorkOut" "Fails" "-_-")) "YameRore.okIWILL123")
    (check-equal? (candidate "finNNalLLly" (list "Die" "NowW" "Wow" "WoW")) "finNNalLLly.WoW")
    (check-equal? (candidate "_" (list "Bb" "91245")) "_.Bb")
    (check-equal? (candidate "Sp" (list "671235" "Bb")) "Sp.671235")
))

(test-humaneval)