#lang racket

;; Input are two strings a and b consisting only of 1s and 0s.
;; Perform binary XOR on these inputs and return result also as a string.
;; >>> string_xor('010', '110')
;; '100'
(define (string_xor a, b)
  (cond [(or (string=? a "") (string=? b "")) ""]
        [(string=? (substring a 0 1) "1")
         (string_xor (substring a 1) (substring b 1))
         (string-append "0" (string_xor (substring a 1) (substring b 1)))]
        [(string=? (substring a 0 1) "0")
         (string_xor (substring a 1) (substring b 1))
         (string-append "1" (string_xor (substring a 1) (substring b 1)))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_xor))
    (check-equal? (candidate "111000" "101010") "010010")
    (check-equal? (candidate "1" "1") "0")
    (check-equal? (candidate "0101" "0000") "0101")
))

(test-humaneval)