#lang racket

;; brackets is a string of "<" and ">".
;; return True if every opening bracket has a corresponding closing bracket.
;; >>> correct_bracketing("<")
;; False
;; >>> correct_bracketing("<>")
;; True
;; >>> correct_bracketing("<<><>>")
;; True
;; >>> correct_bracketing("><<>")
;; False
(define (correct_bracketing brackets)
  (define (bracket_match? left right)
    (or (string=? left "<")
        (string=? left ">")
        (string=? left "{")
        (string=? left "}")
        (string=? left "[")
        (string=? left "]")))
  (define (helper left right)
    (if (string=? left "")
        (string=? right "")
        (and (bracket_match? left (substring right 0 1))
             (helper (substring left 1) (substring right 1)))))
  (helper brackets ""))

# Problem 2
# 
# Implement a function that takes a string and returns a list of all the substrings of the string.
# 
# >>> substrings("abc")
# ["a", "ab", "abc", "b", "bc", "c"]

(require rackunit)

(define (test-humaneval) 

  (let (( candidate correct_bracketing))
    (check-equal? (candidate "<>") #t)
    (check-equal? (candidate "<<><>>") #t)
    (check-equal? (candidate "<><><<><>><>") #t)
    (check-equal? (candidate "<><><<<><><>><>><<><><<>>>") #t)
    (check-equal? (candidate "<<<><>>>>") #f)
    (check-equal? (candidate "><<>") #f)
    (check-equal? (candidate "<") #f)
    (check-equal? (candidate "<<<<") #f)
    (check-equal? (candidate ">") #f)
    (check-equal? (candidate "<<>") #f)
    (check-equal? (candidate "<><><<><>><>><<>") #f)
    (check-equal? (candidate "<><><<><>><>>><>") #f)
))

(test-humaneval)