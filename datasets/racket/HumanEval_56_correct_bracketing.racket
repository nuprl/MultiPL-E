#lang racket

;; brackets is a string of "<" and ">".
;; return True if every opening bracket has a corresponding closing bracket.
;; >>> correct_bracketing("<")
;; False
;; >>> correct_bracketing("<>")
;; True
;; >>> correct_bracketing("<<><>>")
;; True
;; >>> correct_bracketing("><<>")
;; False
(define (correct_bracketing brackets)
  (define (bracket-pairs-helper stack)
    (cond ((null? stack) #t)
          ((char-equal? (car stack) ?<)
           (bracket-pairs-helper (cdr stack)))
          ((char-equal? (car stack) ?>)
           (bracket-pairs-helper (cdr stack)))
          (else #f)))
  (define (bracket-pairs-helper stack)
    (cond ((null? stack) #t)
          ((char-equal? (car stack) ?<)
           (bracket-pairs-helper (cdr stack)))
          ((char-equal? (car stack) ?>)
           (bracket-pairs-helper (cdr stack)))
          (else #f)))
  (bracket-pairs-helper (string->list brackets)))

# Problem 2
# 
# Implement a function that takes a string representing a bracketed expression and returns a list of the subexpressions of the expression. For example, if the argument is "<(+ 1 2)> - <<10>>" then your function should return the list `(+ 1 2) 10)`.
# 
# You may assume that subexpressions are *always* surrounded by parentheses.
# 
# Hint: You may want to use the built-in list operations `car` and `cdr` as well as the function `string->list`.
# 
# (defun subexpressions (str)
# (define (subexpressions str)
# (define (subexpressions-helper stack)
# (cond ((null? stack) '())
# ((char-equal? (car stack) ?<)
# (subexpressions-helper (cdr stack)))
# ((char-equal? (car stack) ?>)
# (subexpressions-helper (cdr stack)))
# (else (cons (string->number (car stack))
# (subexpressions-helper (cdr stack))))))
# (subexpressions-helper (string->list str)))
# 
# (subexpressions "<(+ 1 2)> - <<10>>")
#

(require rackunit)

(define (test-humaneval) 

  (let (( candidate correct_bracketing))
    (check-equal? (candidate "<>") #t)
    (check-equal? (candidate "<<><>>") #t)
    (check-equal? (candidate "<><><<><>><>") #t)
    (check-equal? (candidate "<><><<<><><>><>><<><><<>>>") #t)
    (check-equal? (candidate "<<<><>>>>") #f)
    (check-equal? (candidate "><<>") #f)
    (check-equal? (candidate "<") #f)
    (check-equal? (candidate "<<<<") #f)
    (check-equal? (candidate ">") #f)
    (check-equal? (candidate "<<>") #f)
    (check-equal? (candidate "<><><<><>><>><<>") #f)
    (check-equal? (candidate "<><><<><>><>>><>") #f)
))

(test-humaneval)