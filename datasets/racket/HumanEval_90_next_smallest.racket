#lang racket

;; You are given a list of integers.
;; Write a function next_smallest() that returns the 2nd smallest element of the list.
;; Return None if there is no such element.
;; next_smallest([1, 2, 3, 4, 5]) == 2
;; next_smallest([5, 1, 4, 3, 2]) == 2
;; next_smallest([]) == None
;; next_smallest([1, 1]) == None
(define (next_smallest lst)
  (define (next_smallest_helper lst)
    (cond [(null? lst) #f]
          [(= (length lst) 1) #f]
          [(= (length lst) 2)
           (if (< (car lst) (cadr lst))
               (cadr lst)
               #f)]
          [else (next_smallest_helper (cdr lst))]))
  (next_smallest_helper lst))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate next_smallest))
    (check-equal? (candidate (list 1 2 3 4 5)) 2)
    (check-equal? (candidate (list 5 1 4 3 2)) 2)
    (check-equal? (candidate (list )) #f)
    (check-equal? (candidate (list 1 1)) #f)
    (check-equal? (candidate (list 1 1 1 1 0)) 1)
    (check-equal? (candidate (list 1 1)) #f)
    (check-equal? (candidate (list -35 34 12 -45)) -35)
))

(test-humaneval)