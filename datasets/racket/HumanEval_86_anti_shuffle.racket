#lang racket

;; Write a function that takes a string and returns an ordered version of it.
;; Ordered version of string, is a string where all words (separated by space)
;; are replaced by a new word where all the characters arranged in
;; ascending order based on ascii value.
;; Note: You should keep the order of words and blank spaces in the sentence.
;; For example:
;; anti_shuffle('Hi') returns 'Hi'
;; anti_shuffle('hello') returns 'ehllo'
;; anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
(define (anti_shuffle s)
  (define (anti_shuffle_help s acc)
    (if (null? s)
        acc
        (anti_shuffle_help (cdr s) (cons (string-ref (car s) 0) acc))))
  (map string-ref (reverse (anti_shuffle_help s '())) ""))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate anti_shuffle))
    (check-equal? (candidate "Hi") "Hi")
    (check-equal? (candidate "hello") "ehllo")
    (check-equal? (candidate "number") "bemnru")
    (check-equal? (candidate "abcd") "abcd")
    (check-equal? (candidate "Hello World!!!") "Hello !!!Wdlor")
    (check-equal? (candidate "") "")
    (check-equal? (candidate "Hi. My name is Mister Robot. How are you?") ".Hi My aemn is Meirst .Rboot How aer ?ouy")
))

(test-humaneval)