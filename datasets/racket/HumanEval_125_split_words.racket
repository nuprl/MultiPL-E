#lang racket

;; Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
;; should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
;; Examples
;; split_words("Hello world!") ➞ ["Hello", "world!"]
;; split_words("Hello,world!") ➞ ["Hello", "world!"]
;; split_words("abcdef") == 3
(define (split_words txt)
  (cond
   [(string-match "[[:space:]]" txt)
    (string-split "[[:space:]]" txt)]
   [(string-match "[[:punct:]]" txt)
    (string-split "[[:punct:]]" txt)]
   [else
    (let ((count 0))
      (for ([i (string-length txt)] [j 0])
        (if (odd? (+ j (char->integer (string-ref txt i))))
            (set! count (+ count 1))))
      count)]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate split_words))
    (check-equal? (candidate "Hello world!") (list "Hello" "world!"))
    (check-equal? (candidate "Hello,world!") (list "Hello" "world!"))
    (check-equal? (candidate "Hello world,!") (list "Hello" "world,!"))
    (check-equal? (candidate "Hello,Hello,world !") (list "Hello,Hello,world" "!"))
    (check-equal? (candidate "abcdef") 3)
    (check-equal? (candidate "aaabb") 2)
    (check-equal? (candidate "aaaBb") 1)
    (check-equal? (candidate "") 0)
))

(test-humaneval)