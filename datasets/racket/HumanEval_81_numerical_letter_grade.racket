#lang racket

;; It is the last week of the semester and the teacher has to give the grades
;; to students. The teacher has been making her own algorithm for grading.
;; The only problem is, she has lost the code she used for grading.
;; She has given you a list of GPAs for some students and you have to write 
;; a function that can output a list of letter grades using the following table:
;; GPA       |    Letter grade
;; 4.0                A+
;; > 3.7                A 
;; > 3.3                A- 
;; > 3.0                B+
;; > 2.7                B 
;; > 2.3                B-
;; > 2.0                C+
;; > 1.7                C
;; > 1.3                C-
;; > 1.0                D+ 
;; > 0.7                D 
;; > 0.0                D-
;; 0.0                E
;; Example:
;; grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
(define (numerical_letter_grade grades)
  (cond [(>= 4.0 (car grades)) 'A+]
        [(>= 3.7 (car grades)) 'A]
        [(>= 3.3 (car grades)) 'A-]
        [(>= 3.0 (car grades)) 'B+]
        [(>= 2.7 (car grades)) 'B]
        [(>= 2.3 (car grades)) 'B-]
        [(>= 2.0 (car grades)) 'C+]
        [(>= 1.7 (car grades)) 'C]
        [(>= 1.3 (car grades)) 'C-]
        [(>= 1.0 (car grades)) 'D+]
        [(>= 0.7 (car grades)) 'D]
        [(>= 0.0 (car grades)) 'D-]
        [else 'E]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate numerical_letter_grade))
    (check-equal? (candidate (list 4.0 3 1.7 2 3.5)) (list "A+" "B" "C-" "C" "A-"))
    (check-equal? (candidate (list 1.2)) (list "D+"))
    (check-equal? (candidate (list 0.5)) (list "D-"))
    (check-equal? (candidate (list 0.0)) (list "E"))
    (check-equal? (candidate (list 1 0.3 1.5 2.8 3.3)) (list "D" "D-" "C-" "B" "B+"))
    (check-equal? (candidate (list 0 0.7)) (list "E" "D-"))
))

(test-humaneval)