#lang racket

;; Given a list of numbers, return the sum of squares of the numbers
;; in the list that are odd. Ignore numbers that are negative or not integers.
;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
;; double_the_difference([-1, -2, 0]) == 0
;; double_the_difference([9, -2]) == 81
;; double_the_difference([0]) == 0  
;; If the input list is empty, return 0.
(define (double_the_difference lst)
  (cond [(null? lst) 0]
        [else (+ (square (car lst)) (double_the_difference (cdr lst)))])
  )


(require rackunit)

(define (test-humaneval) 

  (let (( candidate double_the_difference))
    (check-equal? (candidate '()) 0)
    (check-equal? (candidate '(5 4)) 25)
    (check-equal? (candidate '(0.1 0.2 0.3)) 0)
    (check-equal? (candidate '(-10 -20 -30)) 0)
    (check-equal? (candidate '(-1 -2 8)) 0)
    (check-equal? (candidate '(0.2 3 5)) 34)
    (check-equal? (candidate '(-9 -7 -5 -3 -1 1 3 5 7 9)) 165)
))

(test-humaneval)