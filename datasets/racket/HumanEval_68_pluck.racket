#lang racket

;; "Given an array representing a branch of a tree that has non-negative integer nodes
;; your task is to pluck one of the nodes and return it.
;; The plucked node should be the node with the smallest even value.
;; If multiple nodes with the same smallest even value are found return the node that has smallest index.
;; The plucked node should be returned in a list, [ smalest_value, its index ],
;; If there are no even values or the given array is empty, return [].
;; Example 1:
;; Input: [4,2,3]
;; Output: [2, 1]
;; Explanation: 2 has the smallest even value, and 2 has the smallest index.
;; Example 2:
;; Input: [1,2,3]
;; Output: [2, 1]
;; Explanation: 2 has the smallest even value, and 2 has the smallest index. 
;; Example 3:
;; Input: []
;; Output: []
;; Example 4:
;; Input: [5, 0, 3, 0, 4, 2]
;; Output: [0, 1]
;; Explanation: 0 is the smallest value, but  there are two zeros,
;; so we will choose the first zero, which has the smallest index.
;; Constraints:
;; * 1 <= nodes.length <= 10000
;; * 0 <= node.value
(define (pluck arr)
  (define (find-min-even-value arr)
    (define (find-min-even-value-helper arr min-even-value min-index)
      (cond [(null? arr) (list min-even-value min-index)]
            [(even? (car arr)) (find-min-even-value-helper (cdr arr) (car arr) (length arr))]
            [else (find-min-even-value-helper (cdr arr) min-even-value min-index)]))
    (find-min-even-value-helper arr 0 0))
  (find-min-even-value arr))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate pluck))
    (check-equal? (candidate (list 4 2 3)) (list 2 1))
    (check-equal? (candidate (list 1 2 3)) (list 2 1))
    (check-equal? (candidate (list )) (list ))
    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))
    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))
    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))
    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))
    (check-equal? (candidate (list 7 9 7 1)) (list ))
))

(test-humaneval)