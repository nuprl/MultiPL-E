#lang racket

;; Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
;; separate those group into separate strings and return the list of those.
;; Separate groups are balanced (each open brace is properly closed) and not nested within each other
;; Ignore any spaces in the input string.
;; >>> separate_paren_groups('( ) (( )) (( )( ))')
;; ['()', '(())', '(()())']
(define (separate_paren_groups paren_string)
  (define (recurse paren_string)
    (cond [(string-empty? paren_string) '()]
          [(string=? paren_string "()") '()]
          [else (append (recurse (substring paren_string 1))
                        (list (substring paren_string 0 1)))]))
  (recurse paren_string))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate separate_paren_groups))
    (check-equal? (candidate "(()()) ((())) () ((())()())") (list "(()())" "((()))" "()" "((())()())"))
    (check-equal? (candidate "() (()) ((())) (((())))") (list "()" "(())" "((()))" "(((())))"))
    (check-equal? (candidate "(()(())((())))") (list "(()(())((())))"))
    (check-equal? (candidate "( ) (( )) (( )( ))") (list "()" "(())" "(()())"))
))

(test-humaneval)