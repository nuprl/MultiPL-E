#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
;; 1.0
(define (mean_absolute_deviation numbers)
  (define (average xs)
    (/ (apply + xs) (length xs)))
  (define (absolute_difference x y)
    (if (> x y)
        (- x y)
        (+ x y)))
  (define (mad xs)
    (define (iter xs sum)
      (if (null? xs)
          sum
          (iter (cdr xs) (+ sum (absolute_difference (car xs) (average xs))))))
    (iter xs 0))
  (/ (mad numbers) (sqrt (length numbers))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate '(1.0 2.0)) 0.5)
    (check-equal? (candidate '(1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate '(1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)