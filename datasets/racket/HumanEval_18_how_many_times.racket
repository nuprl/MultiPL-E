#lang racket

;; Find how many times a given substring can be found in the original string. Count overlaping cases.
;; >>> how_many_times('', 'a')
;; 0
;; >>> how_many_times('aaa', 'a')
;; 3
;; >>> how_many_times('aaaa', 'aa')
;; 3
(define (how_many_times string, substring)
  (define (count_substring string, substring, index)
    (if (or (string-null? string) (string-null? substring))
        0
        (if (string-index-eq? string index substring)
            (+ 1 (count_substring string (substring substring 1) (+ 1 index)))
            (count_substring string substring (+ 1 index)))))
  (count_substring string substring 0))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate how_many_times))
    (check-equal? (candidate "" "x") 0)
    (check-equal? (candidate "xyxyxyx" "x") 4)
    (check-equal? (candidate "cacacacac" "cac") 4)
    (check-equal? (candidate "john doe" "john") 1)
))

(test-humaneval)