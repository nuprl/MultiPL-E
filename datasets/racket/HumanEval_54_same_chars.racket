#lang racket

;; Check if two words have the same characters.
;; >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
;; True
;; >>> same_chars('abcd', 'dddddddabc')
;; True
;; >>> same_chars('dddddddabc', 'abcd')
;; True
;; >>> same_chars('eabcd', 'dddddddabc')
;; False
;; >>> same_chars('abcd', 'dddddddabce')
;; False
;; >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
;; False
(define (same_chars s0, s1)
  (cond [(or (string=? s0 "") (string=? s1 "")) #t]
        [(string=? (string-ref s0 0) (string-ref s1 0)) (same_chars (string-drop s0 1) (string-drop s1 1))]
        [else #f]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate same_chars))
    (check-equal? (candidate "eabcdzzzz" "dddzzzzzzzddeddabc") #t)
    (check-equal? (candidate "abcd" "dddddddabc") #t)
    (check-equal? (candidate "dddddddabc" "abcd") #t)
    (check-equal? (candidate "eabcd" "dddddddabc") #f)
    (check-equal? (candidate "abcd" "dddddddabcf") #f)
    (check-equal? (candidate "eabcdzzzz" "dddzzzzzzzddddabc") #f)
    (check-equal? (candidate "aabb" "aaccc") #f)
))

(test-humaneval)