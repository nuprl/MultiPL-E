#lang racket

;; Return 2^n modulo p (be aware of numerics).
;; >>> modp(3, 5)
;; 3
;; >>> modp(1101, 101)
;; 2
;; >>> modp(0, 101)
;; 1
;; >>> modp(3, 11)
;; 8
;; >>> modp(100, 101)
;; 1
(define (modp n, p)
  (remainder n p))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate modp))
    (check-equal? (candidate 3 5) 3)
    (check-equal? (candidate 1101 101) 2)
    (check-equal? (candidate 0 101) 1)
    (check-equal? (candidate 3 11) 8)
    (check-equal? (candidate 100 101) 1)
    (check-equal? (candidate 30 5) 4)
    (check-equal? (candidate 31 5) 3)
))

(test-humaneval)