#lang racket

;; triples_sum_to_zero takes a list of integers as an input.
;; it returns True if there are three distinct elements in the list that
;; sum to zero, and False otherwise.
;; >>> triples_sum_to_zero([1, 3, 5, 0])
;; False
;; >>> triples_sum_to_zero([1, 3, -2, 1])
;; True
;; >>> triples_sum_to_zero([1, 2, 3, 7])
;; False
;; >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
;; True
;; >>> triples_sum_to_zero([1])
;; False
(define (triples_sum_to_zero l)
  (cond [(null? l) #f]
        [(null? (cdr l)) #f]
        [else (triples_sum_to_zero_helper (filter (lambda (x) (not (member? x l))) l))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate triples_sum_to_zero))
    (check-equal? (candidate (list 1 3 5 0)) #f)
    (check-equal? (candidate (list 1 3 5 -1)) #f)
    (check-equal? (candidate (list 1 3 -2 1)) #t)
    (check-equal? (candidate (list 1 2 3 7)) #f)
    (check-equal? (candidate (list 1 2 5 7)) #f)
    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)
    (check-equal? (candidate (list 1)) #f)
    (check-equal? (candidate (list 1 3 5 -100)) #f)
    (check-equal? (candidate (list 100 3 5 -100)) #f)
))

(test-humaneval)