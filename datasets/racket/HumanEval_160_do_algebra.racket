#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; array = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator, operand)
  (define (do_algebra_helper op1 op2)
    (cond [(= op1 '+) (+ op2 (car operand))]
          [(= op1 '-) (- op2 (car operand))]
          [(= op1 '*) (* op2 (car operand))]
          [(= op1 '//) (/ op2 (car operand))]
          [(= op1 '**) (expt op2 (car operand))]))
  (define (do_algebra_helper_helper op1 op2 op3)
    (cond [(= op1 '+) (+ op2 op3)]
          [(= op1 '-) (- op2 op3)]
          [(= op1 '*) (* op2 op3)]
          [(= op1 '//) (/ op2 op3)]
          [(= op1 '**) (expt op2 op3)]))
  (define (do_algebra_helper_helper_helper op1 op2 op3 op4)
    (cond [(= op1 '+) (+ op2 op3 op4)]
          [(= op1 '-) (- op2 op3 op4)]
          [(= op1 '*) (* op2 op3 op4)]
          [(= op1 '//) (/ op2 op3 op4)]
          [(= op1 '**) (expt op2 op3 op4)]))
  (define (do_algebra_helper_helper_helper_helper op1 op2 op3 op4 op5)
    (cond [(= op1 '+) (+ op2 op3 op4 op5)]
          [(= op1 '-) (- op2 op3 op4 op5)]
          [(= op1 '*) (* op2 op3 op4 op5)]
          [(= op1 '//) (/ op2 op3 op4 op5)]
          [(= op1 '**) (expt op2 op3 op4 op5)]))
  (define (do_algebra_helper_helper_helper_helper_helper op1 op2 op3 op4 op5 op6)
    (cond

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate '("**" "*" "+") '(2 3 4 5)) 37)
    (check-equal? (candidate '("+" "*" "-") '(2 3 4 5)) 9)
    (check-equal? (candidate '("//" "*") '(7 3 4)) 8)
))

(test-humaneval)