#lang racket

;; You are given an array arr of integers and you need to return
;; sum of magnitudes of integers multiplied by product of all signs
;; of each number in the array, represented by 1, -1 or 0.
;; Note: return None for empty arr.
;; Example:
;; >>> prod_signs([1, 2, 2, -4]) == -9
;; >>> prod_signs([0, 1]) == 0
;; >>> prod_signs([]) == None
(define (prod_signs arr)
  (if (null? arr)
      None
      (let ((magnitude (* (abs (car arr)) (prod_signs (cdr arr))))
            (sign (sign (car arr))))
        (* sign magnitude))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate prod_signs))
    (check-equal? (candidate (list 1 2 2 -4)) -9)
    (check-equal? (candidate (list 0 1)) 0)
    (check-equal? (candidate (list 1 1 1 2 3 -1 1)) -10)
    (check-equal? (candidate (list )) #f)
    (check-equal? (candidate (list 2 4 1 2 -1 -1 9)) 20)
    (check-equal? (candidate (list -1 1 -1 1)) 4)
    (check-equal? (candidate (list -1 1 1 1)) -4)
    (check-equal? (candidate (list -1 1 1 0)) 0)
))

(test-humaneval)