#lang racket

;; Write a function that accepts a list of strings.
;; The list contains different words. Return the word with maximum number
;; of unique characters. If multiple strings have maximum number of unique
;; characters, return the one which comes first in lexicographical order.
;; find_max(["name", "of", "string"]) == "string"
;; find_max(["name", "enam", "game"]) == "enam"
;; find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
(define (find_max words)
  (define (count_unique word)
    (define (count_unique_char word char)
      (if (null? word) 0
          (if (char? (car word))
              (if (char=? (car word) char) 1 0)
              (count_unique_char (cdr word) char))))
    (define (count_unique_chars word)
      (if (null? word) 0
          (+ (count_unique_char word (car word))
             (count_unique_chars (cdr word)))))
    (count_unique_chars word))
  (define (max_unique_word words)
    (define (max_unique_word_aux words)
      (if (null? words) '()
          (if (count_unique (car words))
              (cons (car words) (max_unique_word_aux (cdr words)))
              (max_unique_word_aux (cdr words)))))
    (max_unique_word_aux words))
  (define (lex_order word1 word2)
    (if (string< word1 word2) word1 word2))
  (define (lex_order_aux words)
    (if (null? words) '()
        (cons (car words) (lex_order_aux (cdr words)))))
  (define (lex_order_words words)
    (if (null? words) '()
        (cons (car words) (lex_order_words (cdr words)))))
  (define (lex_order_word_aux words)
    (if (null? words) '()
        (cons (car words) (lex_order_word_aux (cdr words)))))
  (define (lex_order_word words)
    (if (null? words) '()
        (cons (car words) (lex_order_word (cdr words)))))
  (define (lex_order_word_aux words)
    (if (null? words) '()
        (cons (car words) (lex_order_word_aux (cdr words)))))
  (define (lex_order_word

(require rackunit)

(define (test-humaneval) 

  (let (( candidate find_max))
    (check-equal? (candidate '("name" "of" "string")) "string")
    (check-equal? (candidate '("name" "enam" "game")) "enam")
    (check-equal? (candidate '("aaaaaaa" "bb" "cc")) "aaaaaaa")
    (check-equal? (candidate '("abc" "cba")) "abc")
    (check-equal? (candidate '("play" "this" "game" "of" "footbott")) "footbott")
    (check-equal? (candidate '("we" "are" "gonna" "rock")) "gonna")
    (check-equal? (candidate '("we" "are" "a" "mad" "nation")) "nation")
    (check-equal? (candidate '("this" "is" "a" "prrk")) "this")
    (check-equal? (candidate '("b")) "b")
    (check-equal? (candidate '("play" "play" "play")) "play")
))

(test-humaneval)