#lang racket

;; Return only positive numbers in the list.
;; >>> get_positive([-1, 2, -4, 5, 6])
;; [2, 5, 6]
;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
;; [5, 3, 2, 3, 9, 123, 1]
(define (get_positive l)
  (filter (lambda (x) (> x 0)) l))

# Racket has a built-in `filter` function.
# 
# ```scheme
# (filter predicate sequence)
# ```
# 
# The `filter` function takes two arguments: a predicate function and a sequence. It returns a new list containing all the elements in the sequence for which the predicate function returns `#t`.
# 
# ```scheme
# (define (greater-than-5 x)
# (> x 5))
# 
# (filter greater-than-5 '(1 2 3 4 5 6 7 8 9 10))
# ```
# 
# The predicate function can also be a lambda expression.
# 
# ```scheme
# (filter (lambda (x) (> x 5)) '(1 2 3 4 5 6 7 8 9 10))
# ```
# 
# The predicate function can also be a `(define)`d function.
# 
# ```scheme
# (define (greater-than-10 x)
# (> x 10))
# 
# (filter greater-than-10 '(1 2 3 4 5 6 7 8 9 10))
# ```
# 
# The predicate function can also be a function that returns a boolean value.
# 
# ```scheme
# (define (is-greater-than-10 x)
# (> x 10))
# 
# (filter is-greater-than-10 '(1 2 3 4 5 6 7 8 9 10))
# ```
# 
# The predicate function can also be a function that returns a boolean value.
# 
# ```scheme
# (define (is-greater-than-10 x)
# (> x 10))
# 
# (filter is-greater-than-10 '(1 2 3 4 5 6 7 8 9 10))
# ```
# 
# The predicate function can also be a function that returns a boolean value.
# 
# ```scheme
# (define (is-greater-than-10 x)
# (> x 10))
# 
# (filter is-greater-than

(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_positive))
    (check-equal? (candidate '(-1 -2 4 5 6)) '(4 5 6))
    (check-equal? (candidate '(5 3 -5 2 3 3 9 0 123 1 -10)) '(5 3 2 3 3 9 123 1))
    (check-equal? (candidate '(-1 -2)) '())
    (check-equal? (candidate '()) '())
))

(test-humaneval)