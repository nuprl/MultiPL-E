#lang racket

;; Given a positive floating point number, it can be decomposed into
;; and integer part (largest integer smaller than given number) and decimals
;; (leftover part always smaller than 1).
;; Return the decimal part of the number.
;; >>> truncate_number(3.5)
;; 0.5
(define (truncate_number number)
  (define (truncate_number_helper number result)
    (if (<= number 0)
        result
        (truncate_number_helper (- number 1) (+ result (/ number 10)))))
  (truncate_number_helper number 0))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate truncate_number))
    (check-equal? (candidate 3.5) 0.5)
    (check-equal? (candidate 1.25) 0.25)
    (check-equal? (candidate 123.0) 0.0)
))

(test-humaneval)