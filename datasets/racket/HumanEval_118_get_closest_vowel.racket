#lang racket

;; You are given a word. Your task is to find the closest vowel that stands between 
;; two consonants from the right side of the word (case sensitive).
;; Vowels in the beginning and ending doesn't count. Return empty string if you didn't
;; find any vowel met the above condition. 
;; You may assume that the given string contains English letter only.
;; Example:
;; get_closest_vowel("yogurt") ==> "u"
;; get_closest_vowel("FULL") ==> "U"
;; get_closest_vowel("quick") ==> ""
;; get_closest_vowel("ab") ==> ""
(define (get_closest_vowel word)
  (define vowels "aeiou")
  (define (is_vowel? c)
    (string-contains? vowels c))
  (define (is_consonant? c)
    (not (is_vowel? c)))
  (define (is_vowel_before_consonant? word)
    (define (is_vowel_before_consonant_recur? word index)
      (if (string-empty? word)
          #t
          (if (is_consonant? (string-ref word 0))
              (if (is_vowel? (string-ref word 1))
                  (is_vowel_before_consonant_recur? (substring word 1) 1)
                  #f)
              (is_vowel_before_consonant_recur? (substring word 1) 1))
          #f))
    (is_vowel_before_consonant_recur? word 0))
  (define (get_closest_vowel_recur word index)
    (if (string-empty? word)
        ""
        (if (is_vowel_before_consonant? word)
            (string-ref word index)
            (get_closest_vowel_recur (substring word 1) 1))))
  (get_closest_vowel_recur word 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_closest_vowel))
    (check-equal? (candidate "yogurt") "u")
    (check-equal? (candidate "full") "u")
    (check-equal? (candidate "easy") "")
    (check-equal? (candidate "eAsy") "")
    (check-equal? (candidate "ali") "")
    (check-equal? (candidate "bad") "a")
    (check-equal? (candidate "most") "o")
    (check-equal? (candidate "ab") "")
    (check-equal? (candidate "ba") "")
    (check-equal? (candidate "quick") "")
    (check-equal? (candidate "anime") "i")
    (check-equal? (candidate "Asia") "")
    (check-equal? (candidate "Above") "o")
))

(test-humaneval)