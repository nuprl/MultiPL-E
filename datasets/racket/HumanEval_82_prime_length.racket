#lang racket

;; Write a function that takes a string and returns True if the string
;; length is a prime number or False otherwise
;; Examples
;; prime_length('Hello') == True
;; prime_length('abcdcba') == True
;; prime_length('kittens') == True
;; prime_length('orange') == False
(define (prime_length string)
  (define (is_prime? n)
    (cond ((= n 1) #f)
          ((= n 2) #t)
          (else (or (is_prime? (- n 1))
                    (is_prime? (- n 2))))))
  (is_prime? (string-length string)))

# Problem 2
# 
# Write a function that takes a string and returns True if the string is a palindrome or False otherwise.
# 
# Examples
# 
# palindrome('racecar') == True
# palindrome('orange') == False

(require rackunit)

(define (test-humaneval) 

  (let (( candidate prime_length))
    (check-equal? (candidate "Hello") #t)
    (check-equal? (candidate "abcdcba") #t)
    (check-equal? (candidate "kittens") #t)
    (check-equal? (candidate "orange") #f)
    (check-equal? (candidate "wow") #t)
    (check-equal? (candidate "world") #t)
    (check-equal? (candidate "MadaM") #t)
    (check-equal? (candidate "Wow") #t)
    (check-equal? (candidate "") #f)
    (check-equal? (candidate "HI") #t)
    (check-equal? (candidate "go") #t)
    (check-equal? (candidate "gogo") #f)
    (check-equal? (candidate "aaaaaaaaaaaaaaa") #f)
    (check-equal? (candidate "Madam") #t)
    (check-equal? (candidate "M") #f)
    (check-equal? (candidate "0") #f)
))

(test-humaneval)