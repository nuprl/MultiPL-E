#lang racket

;; In this Kata, you have to sort an array of non-negative integers according to
;; number of ones in their binary representation in ascending order.
;; For similar number of ones, sort based on decimal value.
;; It must be implemented like this:
;; >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
;; >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
;; >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
(define (sort_array arr)
  (sort
   (lambda (a b)
     (cond
      ((and (> (count-ones a) (count-ones b))
            (= (count-ones a) (count-ones b)))
       (< a b))
      ((> (count-ones a) (count-ones b))
       t)
      (else
       nil)))
   arr))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_array))
    (check-equal? (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5))
    (check-equal? (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3))
    (check-equal? (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3))
    (check-equal? (candidate (list )) (list ))
    (check-equal? (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77))
    (check-equal? (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44))
    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32))
    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32))
))

(test-humaneval)