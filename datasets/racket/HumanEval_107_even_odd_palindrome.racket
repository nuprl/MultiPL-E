#lang racket

;; Given a positive integer n, return a tuple that has the number of even and odd
;; integer palindromes that fall within the range(1, n), inclusive.
;; Example 1:
;; Input: 3
;; Output: (1, 2)
;; Explanation:
;; Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
;; Example 2:
;; Input: 12
;; Output: (4, 6)
;; Explanation:
;; Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
;; Note:
;; 1. 1 <= n <= 10^3
;; 2. returned tuple has the number of even and odd integer palindromes respectively.
(define (even_odd_palindrome n)
  (define (even_odd_palindrome_helper n even_count odd_count)
    (if (= n 0) (list even_count odd_count)
        (if (even_odd_palindrome_helper (quotient n 10) (+ even_count (if (even_odd_palindrome_helper n 0 1) 1 0)) odd_count)
            (list even_count odd_count)
            '())))
  (even_odd_palindrome_helper n 0 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate even_odd_palindrome))
    (check-equal? (candidate 123) '(8 13))
    (check-equal? (candidate 12) '(4 6))
    (check-equal? (candidate 3) '(1 2))
    (check-equal? (candidate 63) '(6 8))
    (check-equal? (candidate 25) '(5 6))
    (check-equal? (candidate 19) '(4 6))
    (check-equal? (candidate 9) '(4 5))
    (check-equal? (candidate 1) '(0 1))
))

(test-humaneval)