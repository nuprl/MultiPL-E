#lang racket

;; You will be given a number in decimal form and your task is to convert it to
;; binary format. The function should return a string, with each character representing a binary
;; number. Each character in the string will be '0' or '1'.
;; There will be an extra couple of characters 'db' at the beginning and at the end of the string.
;; The extra characters are there to help with the format.
;; Examples:
;; decimal_to_binary(15)   # returns "db1111db"
;; decimal_to_binary(32)   # returns "db100000db"
(define (decimal_to_binary decimal)
  (define (decimal_to_binary_helper decimal result)
    (if (= decimal 0)
        result
        (decimal_to_binary_helper (- decimal 1) (string-append result (string (quotient decimal 2))))))
  (string-append "db" (decimal_to_binary_helper decimal "") "db"))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate decimal_to_binary))
    (check-equal? (candidate 0) "db0db")
    (check-equal? (candidate 32) "db100000db")
    (check-equal? (candidate 103) "db1100111db")
    (check-equal? (candidate 15) "db1111db")
))

(test-humaneval)