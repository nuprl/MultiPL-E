#lang racket

;; Return True is list elements are monotonically increasing or decreasing.
;; >>> monotonic([1, 2, 4, 20])
;; True
;; >>> monotonic([1, 20, 4, 10])
;; False
;; >>> monotonic([4, 1, 0, -10])
;; True
(define (monotonic l)
  (cond
    [(empty? l) #t]
    [(= (car l) (car (cdr l))) (monotonic (cdr l))]
    [(> (car l) (car (cdr l))) (monotonic (reverse (cdr l)))]
    [(< (car l) (car (cdr l))) (monotonic (reverse (cdr l)))]
    [else #f]
  )
)


(require rackunit)

(define (test-humaneval) 

  (let (( candidate monotonic))
    (check-equal? (candidate '(1 2 4 10)) #t)
    (check-equal? (candidate '(1 2 4 20)) #t)
    (check-equal? (candidate '(1 20 4 10)) #f)
    (check-equal? (candidate '(4 1 0 -10)) #t)
    (check-equal? (candidate '(4 1 1 0)) #t)
    (check-equal? (candidate '(1 2 3 2 5 60)) #f)
    (check-equal? (candidate '(1 2 3 4 5 60)) #t)
    (check-equal? (candidate '(9 9 9 9)) #t)
))

(test-humaneval)