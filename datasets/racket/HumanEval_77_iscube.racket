#lang racket

;; Write a function that takes an integer a and returns True 
;; if this ingeger is a cube of some integer number.
;; Note: you may assume the input is always valid.
;; Examples:
;; iscube(1) ==> True
;; iscube(2) ==> False
;; iscube(-1) ==> True
;; iscube(64) ==> True
;; iscube(0) ==> True
;; iscube(180) ==> False
(define (iscube a)
  (define (cube x) (* x x x))
  (define (is-cube? x) (= (cube x) a))
  (is-cube? (round (/ a (cube (round (/ a (cube 0))))))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate iscube))
    (check-equal? (candidate 1) #t)
    (check-equal? (candidate 2) #f)
    (check-equal? (candidate -1) #t)
    (check-equal? (candidate 64) #t)
    (check-equal? (candidate 180) #f)
    (check-equal? (candidate 1000) #t)
    (check-equal? (candidate 0) #t)
    (check-equal? (candidate 1729) #f)
))

(test-humaneval)