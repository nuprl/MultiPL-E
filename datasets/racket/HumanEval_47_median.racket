#lang racket

;; Return median of elements in the list l.
;; >>> median([3, 1, 2, 4, 5])
;; 3
;; >>> median([-10, 4, 6, 1000, 10, 20])
;; 15.0
(define (median l)
  (define (median-helper l1 l2)
    (if (= (length l1) 1)
        (car l1)
        (let ((l1-first (car l1))
              (l1-second (cadr l1))
              (l2-first (car l2))
              (l2-second (cadr l2)))
          (if (< l1-first l2-first)
              (median-helper (cdr l1) l2)
              (if (< l2-first l1-first)
                  (median-helper l1 (cdr l2))
                  (median-helper (cons l1-first (cons l2-first (cddr l1)))
                                 (cons l1-second (cons l2-second (cddr l2))))))))))
  (median-helper l nil))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate median))
    (check-equal? (candidate '(3 1 2 4 5)) 3)
    (check-equal? (candidate '(-10 4 6 1000 10 20)) 8.0)
    (check-equal? (candidate '(5)) 5)
    (check-equal? (candidate '(6 5)) 5.5)
    (check-equal? (candidate '(8 1 3 9 9 2 7)) 7)
))

(test-humaneval)