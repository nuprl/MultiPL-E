#lang racket

;; For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
;; Empty sum should be equal to 0 and empty product should be equal to 1.
;; >>> sum_product([])
;; (0, 1)
;; >>> sum_product([1, 2, 3, 4])
;; (10, 24)
(define (sum_product numbers)
  (cond [(null? numbers) (0, 1)]
        [else (sum_product_helper (car numbers) (sum_product (cdr numbers)))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_product))
    (check-equal? (candidate '()) '(0 1))
    (check-equal? (candidate '(1 1 1)) '(3 1))
    (check-equal? (candidate '(100 0)) '(100 0))
    (check-equal? (candidate '(3 5 7)) '(15 105))
    (check-equal? (candidate '(10)) '(10 10))
))

(test-humaneval)