#lang racket

;; You are given a string s.
;; Your task is to check if the string is happy or not.
;; A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
;; For example:
;; is_happy(a) => False
;; is_happy(aa) => False
;; is_happy(abcd) => True
;; is_happy(aabb) => False
;; is_happy(adb) => True
;; is_happy(xyy) => False
(define (is_happy s)
  (cond [(< (length s) 3) #f]
        [(not (distinct? (subseq s 0 3))) #f]
        [else (is_happy (subseq s 1))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_happy))
    (check-equal? (candidate "a") #f)
    (check-equal? (candidate "aa") #f)
    (check-equal? (candidate "abcd") #t)
    (check-equal? (candidate "aabb") #f)
    (check-equal? (candidate "adb") #t)
    (check-equal? (candidate "xyy") #f)
    (check-equal? (candidate "iopaxpoi") #t)
    (check-equal? (candidate "iopaxioi") #f)
))

(test-humaneval)