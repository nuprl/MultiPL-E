#lang racket

;; "
;; This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
;; multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
;; change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
;; Examples:
;; For lst = [1,2,3] the output should be 6
;; For lst = []  the output should be 0
;; For lst = [-1,-5,2,-1,-5]  the output should be -126
(define (sum_squares lst)
  (define (square x) (* x x))
  (define (cube x) (* x x x))
  (define (sum-squares lst)
    (cond ((null? lst) 0)
          ((zero? (modulo (car lst) 3)) (+ (square (car lst)) (sum-squares (cdr lst))))
          ((zero? (modulo (car lst) 4)) (+ (cube (car lst)) (sum-squares (cdr lst))))
          (else (sum-squares (cdr lst)))))
  (sum-squares lst))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_squares))
    (check-equal? (candidate '(1 2 3)) 6)
    (check-equal? (candidate '(1 4 9)) 14)
    (check-equal? (candidate '()) 0)
    (check-equal? (candidate '(1 1 1 1 1 1 1 1 1)) 9)
    (check-equal? (candidate '(-1 -1 -1 -1 -1 -1 -1 -1 -1)) -3)
    (check-equal? (candidate '(0)) 0)
    (check-equal? (candidate '(-1 -5 2 -1 -5)) -126)
    (check-equal? (candidate '(-56 -99 1 0 -2)) 3030)
    (check-equal? (candidate '(-1 0 0 0 0 0 0 0 -1)) 0)
    (check-equal? (candidate '(-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196)
    (check-equal? (candidate '(-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448)
))

(test-humaneval)