#lang racket

;; You are given a string representing a sentence,
;; the sentence contains some words separated by a space,
;; and you have to return a string that contains the words from the original sentence,
;; whose lengths are prime numbers,
;; the order of the words in the new string should be the same as the original one.
;; Example 1:
;; Input: sentence = "This is a test"
;; Output: "is"
;; Example 2:
;; Input: sentence = "lets go for swimming"
;; Output: "go for"
;; Constraints:
;; * 1 <= len(sentence) <= 100
;; * sentence contains only letters
(define (words_in_sentence sentence)
  (let loop ((sentence sentence) (words '()))
    (if (string=? "" sentence)
        words
        (let ((word (string-trim sentence)))
          (if (string=? "" word)
              words
              (let ((word-length (string-length word)))
                (if (prime? word-length)
                    (loop (string-trim (string-drop sentence word-length)) (cons word words))
                    (loop (string-drop sentence word-length) words))))))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate words_in_sentence))
    (check-equal? (candidate "This is a test") "is")
    (check-equal? (candidate "lets go for swimming") "go for")
    (check-equal? (candidate "there is no place available here") "there is no place")
    (check-equal? (candidate "Hi I am Hussein") "Hi am Hussein")
    (check-equal? (candidate "go for it") "go for it")
    (check-equal? (candidate "here") "")
    (check-equal? (candidate "here is") "is")
))

(test-humaneval)