#lang racket

;; This function takes a list l and returns a list l' such that
;; l' is identical to l in the odd indicies, while its values at the even indicies are equal
;; to the values of the even indicies of l, but sorted.
;; >>> sort_even([1, 2, 3])
;; [1, 2, 3]
;; >>> sort_even([5, 6, 3, 4])
;; [3, 6, 5, 4]
(define (sort_even l)
  (define (even? n)
    (= (modulo n 2) 0))
  (define (swap l i j)
    (let ([tmp (list-ref l i)])
      (set-list-ref! l i (list-ref l j))
      (set-list-ref! l j tmp)))
  (define (sort_even_rec l i)
    (if (= i (length l))
        l
        (if (even? i)
            (sort_even_rec l (add1 i))
            (if (even? (add1 i))
                (swap l i (add1 i))
                (sort_even_rec l (add1 i))))))
  (sort_even_rec l 0))

# Exercise 2.46
# 
# > The `accumulate` operation takes an operation `op`, a sequence `seq`, and an initial value `base` and returns a value obtained by applying `op` to the first two elements of `seq`, then applying `op` to the result and the third element, and so on, from left to right, with the final result being the value of applying `op` to `base` and the last element of `seq`. The sequence `seq` must be a proper list. The implementation of `accumulate` in terms of the `map` and `fold-left` procedures is given below.
# 
# > ```scheme
# (define (accumulate op initial sequence)
# (fold-left (lambda (x y) (op x y)) initial sequence))
# ```
# 
# > a. Show that the implementation of `accumulate` in terms of `map` and `fold-left` is equivalent to the one given in terms of `append` and `fold-right`.
# 
# > ```scheme
# (define (accumulate op initial sequence)
# (fold-right (lambda (x y) (op x y)) initial sequence))
# ```
# 
# > b. Show that the implementation of `accumulate` in terms of `map` and `fold-right` is equivalent to the one given in terms of `append` and `fold

(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_even))
    (check-equal? (candidate '(1 2 3)) '(1 2 3))
    (check-equal? (candidate '(5 3 -5 2 -3 3 9 0 123 1 -10)) '(-10 3 -5 2 -3 3 5 0 9 1 123))
    (check-equal? (candidate '(5 8 -12 4 23 2 3 11 12 -10)) '(-12 8 3 4 5 2 12 11 23 -10))
))

(test-humaneval)