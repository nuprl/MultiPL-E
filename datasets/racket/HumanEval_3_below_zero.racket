#lang racket

;; You're given a list of deposit and withdrawal operations on a bank account that starts with
;; zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
;; at that point function should return True. Otherwise it should return False.
;; >>> below_zero([1, 2, 3])
;; False
;; >>> below_zero([1, 2, -4, 5])
;; True
(define (below_zero operations)
    (define (iter acc)
        (cond [(null? operations) acc]
              [else (if (< acc 0) #t (iter (- acc (car operations)))])))
    (iter 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate below_zero))
    (check-equal? (candidate (list )) #f)
    (check-equal? (candidate (list 1 2 -3 1 2 -3)) #f)
    (check-equal? (candidate (list 1 2 -4 5 6)) #t)
    (check-equal? (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f)
    (check-equal? (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t)
    (check-equal? (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t)
))

(test-humaneval)