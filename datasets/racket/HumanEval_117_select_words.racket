#lang racket

;; Given a string s and a natural number n, you have been tasked to implement 
;; a function that returns a list of all words from string s that contain exactly 
;; n consonants, in order these words appear in the string s.
;; If the string s is empty then the function should return an empty list.
;; Note: you may assume the input string contains only letters and spaces.
;; Examples:
;; select_words("Mary had a little lamb", 4) ==> ["little"]
;; select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
;; select_words("simple white space", 2) ==> []
;; select_words("Hello world", 4) ==> ["world"]
;; select_words("Uncle sam", 3) ==> ["Uncle"]
(define (select_words s, n)
    (cond [(string-empty? s) '()]
          [else (filter (lambda (word) (select-consonants word n)) (split-string s))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate select_words))
    (check-equal? (candidate "Mary had a little lamb" 4) (list "little"))
    (check-equal? (candidate "Mary had a little lamb" 3) (list "Mary" "lamb"))
    (check-equal? (candidate "simple white space" 2) (list ))
    (check-equal? (candidate "Hello world" 4) (list "world"))
    (check-equal? (candidate "Uncle sam" 3) (list "Uncle"))
    (check-equal? (candidate "" 4) (list ))
    (check-equal? (candidate "a b c d e f" 1) (list "b" "c" "d" "f"))
))

(test-humaneval)