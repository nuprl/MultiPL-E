name: HumanEval_25_factorize
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = 1;\n    \
    \    while (p < n) {\n            while (n % p == 0) {\n                factors.add(p);\n\
    \                n /= p;\n            }\n            p++;\n        }\n       \
    \ return factors;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpexfhhfq4.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long factor = 1;\n        while (p != 1) {\n            while (p % factor\
    \ == 0) {\n                factors.add(factor);\n                p /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4wf8wir7.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        while (p != 1) {\n            while\
    \ (p % 2 == 0) {\n                p = p / 2;\n            }\n            while\
    \ (q % 2 == 0) {\n                q = q / 2;\n            }\n            while\
    \ (r % 2 == 0) {\n                r = r / 2;\n            }\n            if (p\
    \ > q && p > r) {\n                factors.add(p);\n                p = q;\n \
    \           } else if (q > p && q > r) {\n                factors.add(q);\n  \
    \              q = p;\n            } else if (r > p && r > q) {\n            \
    \    factors.add(r);\n                r = p;\n            }\n        }\n     \
    \   return factors;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9szackkm.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz814j_k3.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfbhk_jjb.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = 1;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgylc0p90.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    while (p != 1) {\n            factors.add(p);\n            long q = p / 2;\n\
    \            while (q != 1) {\n                if (n % q == 0) {\n           \
    \         factors.add(q);\n                    n /= q;\n                } else\
    \ {\n                    q--;\n                }\n            }\n            p--;\n\
    \        }\n        return factors;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfnhxdal.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long factor = 1;\n        while (p != 1) {\n            while (p % factor\
    \ == 0) {\n                factors.add(factor);\n                p /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n    \
    \    long q = n;\n        long r = n;\n        long s = n;\n        long t = n;\n\
    \        long u = n;\n        long v = n;\n        long w = n;\n        long x\
    \ = n;\n        long y = n;\n        long z = n;\n        long a = n;\n      \
    \  long b = n;\n        long c = n;\n        long d = n;\n        long e = n;\n\
    \        long f = n;\n        long g = n;\n        long h = n;\n        long i\
    \ = n;\n        long j = n;\n        long k = n;\n        long l = n;\n      \
    \  long m = n;\n        long n = n;\n        long o = n;\n        long p = n;\n\
    \        long q = n;\n        long r = n;\n        long s = n;\n        long t\
    \ = n;\n        long u = n;\n        long v = n;\n        long w = n;\n      \
    \  long x = n;\n        long y = n;\n        long z = n;\n        long a = n;\n\
    \        long b = n;\n        long c = n;\n        long d = n;\n        long e\
    \ = n;\n        long f = n;\n        long g = n;\n        long h = n;\n      \
    \  long i = n;\n        long j = n;\n        long k = n;\n        long l = n;\n\
    \        long m = n;\n        long n = n;\n        long o = n;\n        long p\
    \ = n;\n        long q = n;\n        long r = n;\n        long s = n;\n      \
    \  long t = n;\n        long u = n;\n        long v = n;\n        long w = n;\n\
    \        long x = n;\n        long y = n;\n        long z = n;\n        long a\
    \ = n;\n        long b = n;\n        long c = n;\n        long d = n;\n      \
    \  long e = n;\n        long f = n;\n        long g = n;\n        long h = n;\n\
    \        long i = n;\n        long j = n;\n        long k = n;\n        long l\
    \ = n;\n        long m = n;\n        long n = n;\n        long o = n;\n      \
    \  long p = n;\n        long q = n;\n        long r = n;\n        long s = n;\n\
    \        long t = n;\n        long u = n;\n        long v = n;\n        long w\
    \ = n;\n        long x = n;\n        long y = n;\n        long z = n;\n      \
    \  long a = n;\n        long b = n;\n        long c = n;\n        long d = n;\n\
    \        long e = n;\n        long f = n;\n        long g = n;\n        long h\
    \ = n;\n        long i = n;\n        long j = n;\n        long k = n;\n      \
    \  long l = \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoyhbhjrj.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Long> factorize(long n) {\n   \
    \     ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
