name: HumanEval_128_prod_signs
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewe6r3c9.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphv51eyub.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        for (long i : arr) {\n            sum += i;\n  \
    \      }\n        if (arr.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        long product = 1;\n        for (long i : arr) {\n        \
    \    product *= i;\n        }\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            sign *= i;\n        }\n        return Optional.of(sign * Math.pow(sum,\
    \ product));\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqi82ko7.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of(sign * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxg_lx9fl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkp6fsof_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpixk_sk3m.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? 1 : -1;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * Math.signum(product));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6_4fayk.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (Long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprjx8nhu1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.ofNullable(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2jjjizwe.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsach231x.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzduzb7l.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7o7_yww9.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0);\n\
    \        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n     \
    \       long magnitude = arr.get(i);\n            sum += magnitude * product;\n\
    \            product *= magnitude;\n        }\n        return Optional.of(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxnadww_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp919j7x8w.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ < 0) {\n            sum *= -1;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7yw36hjw.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sign = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        return Optional.of(sign\
    \ * Math.signum(product));\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnmrwp8ia.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwsgboxu.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        long sign = 1;\n        for (long i : arr) {\n           \
    \ sign *= i;\n        }\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp9vdr3x6.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08rzvsdb.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   return Optional.ofNullable(sum * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp730llvss.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx7p8yvwy.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   return Optional.ofNullable(sum * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zkomjd3.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp507bn12t.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= (arr.get(i)\
    \ < 0 ? -1 : 1);\n        }\n        return Optional.of(sign * product);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshq10d8m.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprg9_njmw.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        for (long i : arr) {\n            product *= i;\n        }\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \        }\n        return Optional.of(product * sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpagiat26w.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkbcq3rj.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7pfd3_si.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6gysrc6.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product * sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyouvx_k4.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0k5gdlj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2f_lkygw.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        if (sign == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphx70ms5l.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb12cmh2e.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86826rpt.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67f777sa.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        long\
    \ magnitude = product;\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        long signMagnitude = sign * magnitude;\n        return Optional.of(signMagnitude);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1isp601.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuudju4_y.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnd4j1a4g.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qbzpjsa.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        return Optional.of(sign * Math.pow(product, sum));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygaecr1l.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ sum));\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Double\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ftwzs0x.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n      \
    \      sign *= i;\n        }\n        return Optional.ofNullable(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycn3483u.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += Math.signum(i) * Math.signum(product);\n    \
    \        product *= i;\n        }\n        return Optional.of(sum);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dlw5dui.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i)\
    \ * i;\n            product *= i;\n        }\n        return Optional.of(sum *\
    \ product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo73ygxcv.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqm1jj6ou.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= arr.get(i);\n\
    \            if (sign < 0) {\n                sign = -sign;\n            }\n \
    \       }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq1cao8_e.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * arr.get(1);\n        long sum = 0;\n      \
    \  for (long i : arr) {\n            sum += Math.signum(i) * Math.signum(product);\n\
    \            product *= i;\n        }\n        return Optional.ofNullable(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cool43f.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        return Optional.of(Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65si_byq.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgkzkl78t.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcx4zqscj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmljbjszc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgup1q2uz.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdrug3sgt.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        return\
    \ Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqs5e5kqx.java:23: error: incompatible types: Long cannot be converted\
    \ to Optional<Long>\n        return Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\
    \                                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ < 0) {\n            sum *= -1;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6u9o6qrc.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(Long.valueOf(product));\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkl6bbx78.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        if (product == 1) return Optional.of(sum);\n        long sign = 1;\n\
    \        for (long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * sum);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3t_5a85.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyt97vq4o.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpog6a2dt6.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsf1r503.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2php9p45.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuii5xdf2.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvu1usgy.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wpfw9vm.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        for (long i : arr) {\n            product *= i;\n        }\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \        }\n        return Optional.of(product * sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu63ihuyr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= i;\n            sign *= i;\n        }\n \
    \       return Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphwcr646p.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiinxj_mc.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long sum = 0;\n        long product\
    \ = 1;\n        for (Long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum == 0) return None;\n        long sign = -1;\n\
    \        for (Long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.signum(product));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpghfe60f3.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmpghfe60f3.java:25: error: cannot find symbol\n\
    \        if (sum == 0) return None;\n                             ^\n  symbol:\
    \   variable None\n  location: class Problem\n/tmp/tmpghfe60f3.java:30: error:\
    \ incompatible types: inference variable T has incompatible bounds\n        return\
    \ Optional.of(sign * Math.signum(product));\n                          ^\n   \
    \ equality constraints: Long\n    lower bounds: Float\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(sign\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7deayrj3.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiedg_t95.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpedvqv20v.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long product = 1;\n        long\
    \ sum = 0;\n        for (long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum < 0) return None;\n        if (product ==\
    \ 0) return None;\n        return Optional.of(Math.signum(sum) * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfx098mtg.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmpfx098mtg.java:25: error: cannot find symbol\n\
    \        if (sum < 0) return None;\n                            ^\n  symbol: \
    \  variable None\n  location: class Problem\n/tmp/tmpfx098mtg.java:26: error:\
    \ cannot find symbol\n        if (product == 0) return None;\n               \
    \                  ^\n  symbol:   variable None\n  location: class Problem\n/tmp/tmpfx098mtg.java:27:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      return Optional.of(Math.signum(sum) * product);\n                     \
    \     ^\n    equality constraints: Long\n    lower bounds: Float\n  where T is\
    \ a type-variable:\n    T extends Object declared in method <T>of(T)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_hnstoc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(i);\n            product *= i;\n\
    \        }\n        if (arr.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8bfme_a.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n        \
    \    sign *= -1;\n        }\n        return Optional.of(sign * product);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3tayy5q.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        Optional<Long>\
    \ result = Optional.of(Math.signum(sum) * product);\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgo9mvzn6.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        Optional<Long> result = Optional.of(Math.signum(sum)\
    \ * product);\n                                           ^\n    equality constraints:\
    \ Long\n    lower bounds: Float\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhvkih3n.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i);\n\
    \            product *= i;\n        }\n        return Optional.of(sum * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijnx9wht.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphyfqd0jf.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbxay4wp.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long sign = -1;\n\
    \        for (long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2av_e4q.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_ehglfh.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += Math.signum(i)\
    \ * Math.signum(product);\n            product *= i;\n        }\n        return\
    \ Optional.of(sum);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex5agoks.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphxo9v9vv.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw2qub9i7.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vs4bxw9.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sum = 0;\n        for (long i : arr) {\n       \
    \     sum += Math.abs(i);\n        }\n        return Optional.ofNullable(product\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd0416_kg.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0);\n        long sign = 1;\n        for (long i\
    \ : arr) {\n            product *= i;\n            sign *= i;\n        }\n   \
    \     if (product == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ikulvsk.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i);\n    \
    \        sum += magnitude * product;\n            product *= magnitude;\n    \
    \    }\n        return Optional.of(sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx_u_3wl.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr45a7x3k.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        for (long i : arr) {\n            sum += i;\n  \
    \      }\n        if (sum == 0) {\n            return Optional.empty();\n    \
    \    }\n        long product = 1;\n        for (long i : arr) {\n            product\
    \ *= i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n   \
    \         sign *= i;\n        }\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvch5kka.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61n8zs4j.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0gnskggm.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ num : arr) {\n            sum += Math.abs(num);\n            product *= num;\n\
    \        }\n        if (product == Long.MIN_VALUE) return Optional.empty();\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp97600mk9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsq884wu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp935j7jd7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqh0ua90.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0);\n\
    \        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n     \
    \       long magnitude = arr.get(i);\n            long sign = arr.get(i) < 0 ?\
    \ -1 : 1;\n            product *= sign;\n            sum += magnitude * product;\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ymb7au2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        Optional<Long>\
    \ result = Optional.of(sum);\n        if (product != 0) {\n            result\
    \ = result.map(x -> x * product);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmwqz4dk7.java:29: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            result = result.map(x\
    \ -> x * product);\n                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_2lt2mi2.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyh98rq6e.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = arr.get(0)\
    \ * 1;\n        long sum = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            long magnitude = arr.get(i) * 1;\n            sum += magnitude;\n\
    \            product *= magnitude;\n        }\n        if (sum == 0) return Optional.empty();\n\
    \        return Optional.of(Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu1f5su2a.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfzrlahv.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long num : arr) {\n\
    \            sum += Math.abs(num);\n            product *= num;\n        }\n \
    \       if(sum == 0) return Optional.empty();\n        return Optional.of(product\
    \ * sum);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71o8idxk.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7nyhirfx.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp186pj66u.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of(sign * product);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7kccc62.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (sum < 0) return Optional.empty();\n\
    \        if (product == 0) return Optional.empty();\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpks4kcn1f.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbxooexs.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqtt250bv.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(Long.valueOf(Math.signum(sum) * product));\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1i1e6g9m.java:27: error: no suitable method found for valueOf(float)\n\
    \        return Optional.of(Long.valueOf(Math.signum(sum) * product));\n     \
    \                          ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; float cannot be converted to String)\n    method Long.valueOf(long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ float to long)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0 || product == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(Math.signum(sum) * Math.signum(product));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphi2c5xsk.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(product) * sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vgea78x.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp186f7hcn.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        return Optional.of(Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_fqxx434.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpracxlalz.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcs0tk7c3.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n        \
    \    sign *= arr.get(i);\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxs5bcjvm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if(product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp519gmnnh.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuuepqtdy.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp21791gw7.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return Optional.of((long) Math.pow(product, sign));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd12qe8l4.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8exlp8yx.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae43xve8.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sign = 1;\n        for (long i : arr) {\n\
    \            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1swrredj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9ujdql8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu12v7q7i.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n\
    \        if (sign == 0) {\n            return Optional.empty();\n        }\n \
    \       return Optional.of(Math.signum(sum) * Math.signum(product));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomccx5cj.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sum = 0;\n        for (long i : arr) {\n       \
    \     sum += Math.abs(i);\n        }\n        return Optional.ofNullable(sum *\
    \ product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy08m4pvy.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            product *= arr.get(i);\n        }\n        long sign = 1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            sign *= arr.get(i);\n\
    \        }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn23rxte.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0) ? -1 : 1;\n      \
    \  }\n        return Optional.of(sign * Math.signum(product));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdr14efgt.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg1l6o0o_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        for (long i : arr) {\n          \
    \  product *= i;\n        }\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            sign *= i;\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhyuwcg3.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * 1;\n        long sum = 0;\n        for (Long\
    \ i : arr) {\n            sum += i * product;\n            product *= i;\n   \
    \     }\n        return Optional.ofNullable(sum);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmh4k459u.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hx9cpas.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6fcen3y0.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return\
    \ Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz089g6uq.java:23: error: incompatible types: Long cannot be converted\
    \ to Optional<Long>\n        return Optional.ofNullable(product).map(Math::abs).orElse(sign);\n\
    \                                                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (sum\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = -1;\n        if (product > 0) {\n            sign = 1;\n        } else if\
    \ (product < 0) {\n            sign = -1;\n        }\n        return Optional.of(sign\
    \ * Math.pow(sum, arr.size()));\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp534bufye.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long l : arr)\
    \ {\n            sum += Math.abs(l);\n            product *= l;\n        }\n \
    \       return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2g9vil10.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        if (product == 0) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(sum);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp283l9c01.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (Long l : arr)\
    \ {\n            product *= l;\n            sign *= (l < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * Math.pow(product, arr.size()));\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vpwte7b.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= (i < 0 ? -1 : 1);\n      \
    \  }\n        return Optional.of(sign * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52b42aww.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv8jnk0f.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhxi60ed.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of((long) (Math.signum(sum) * product));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_r32ysw8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = arr.get(0) * 1;\n        for (long i : arr) {\n        \
    \    product *= i;\n        }\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += Math.abs(i);\n        }\n        return Optional.ofNullable(sum\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuh8li5vl.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pc8d18l.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sign = 1;\n        for (long i : arr) {\n           \
    \ product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        if\
    \ (product == 0) return Optional.empty();\n        return Optional.of(sign * Math.signum(product));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeoxryf1l.java:24: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodbkxv2f.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product * sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvwz335p.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for(long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if(arr.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long sign = -1;\n\
    \        for(long i : arr) {\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * Math.pow(product, arr.size()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvbcuawyc.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(product,\
    \ arr.size()));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Double\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx7p6790x.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwk7x0fvd.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0jblqk5.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsd94kozi.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(product)\
    \ * Math.signum(sum));\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrubvqdo.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8a3p8r7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpavvavywu.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0fhdjogo.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnknzckam.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * i;\n            product *= i;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2_s_23j.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (Long value : arr)\
    \ {\n            sum += Math.abs(value);\n            product *= value;\n    \
    \    }\n        return Optional.of(sum * product);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr213cc4v.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotcwnxfk.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long num : arr)\
    \ {\n            sum += Math.abs(num);\n            product *= num;\n        }\n\
    \        if (product == 0) {\n            return Optional.empty();\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23_x8bcg.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9vezov2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sign = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n            sign *= i;\n        }\n        return Optional.of(sign * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3gukww6.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= i;\n            sign *= i;\n        }\n \
    \       return Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvllo8utu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = -1;\n        if (sum < 0) {\n            sign = 1;\n            sum *=\
    \ -1;\n        }\n        return Optional.of(sign * Math.signum(sum) * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8iw4hvw.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwdffiqc.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ magnitude = Long.MAX_VALUE;\n        for (long i : arr) {\n            magnitude\
    \ += Math.signum(i);\n        }\n        return Optional.of(magnitude * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_w6u1ue_.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0) * 1;\n        long sum = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i) * 1;\n\
    \            sum += magnitude;\n            product *= magnitude;\n        }\n\
    \        return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87vh97ga.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqohvx1u.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (Long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.pow(sum, arr.size()));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3orucq93.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.pow(sum, arr.size()));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Double\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(product) * sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkfxj_kb2.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(product)\
    \ * sum);\n                          ^\n    equality constraints: Long\n    lower\
    \ bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_76fxsi3.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            product *= arr.get(i);\n          \
    \  sum += Math.abs(product);\n        }\n        return Optional.of(sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_tstqi7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5hws8mh.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9ech_lb.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1, sum = 0;\n        for (Long i : arr) {\n            sum\
    \ += i;\n            product *= i;\n        }\n        if (product == 0) {\n \
    \           return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzd7q5jew.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        long\
    \ sign = product > 0 ? 1 : -1;\n        return Optional.of(sign * Math.signum(sum));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpntwmzi0s.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum));\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            product *= sign;\n            sign\
    \ *= arr.get(i);\n        }\n        return Optional.of(product);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9mrgkf25.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of(Math.signum(sum) * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzlmk8atp.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sign = 1;\n        for (long\
    \ i : arr) {\n            product *= sign;\n            sign *= i;\n        }\n\
    \        return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsk71xsg.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(Math.signum(product) * Math.signum(sum));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0hrej2lm.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(product) *\
    \ Math.signum(sum));\n                          ^\n    equality constraints: Long\n\
    \    lower bounds: Float\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return None;\n        long product = 1;\n        long\
    \ sum = 0;\n        for (Long i : arr) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        if (sum == 0) return None;\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3q03dm_l.java:18: error: cannot find symbol\n        if (arr.isEmpty())\
    \ return None;\n                                  ^\n  symbol:   variable None\n\
    \  location: class Problem\n/tmp/tmp3q03dm_l.java:25: error: cannot find symbol\n\
    \        if (sum == 0) return None;\n                             ^\n  symbol:\
    \   variable None\n  location: class Problem\n/tmp/tmp3q03dm_l.java:26: error:\
    \ incompatible types: inference variable T has incompatible bounds\n        return\
    \ Optional.of(Math.signum(sum) * product);\n                          ^\n    equality\
    \ constraints: Long\n    lower bounds: Float\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpesmlrtgp.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        long sign = 1;\n    \
    \    for (long i : arr) {\n            sum += sign * i;\n            product *=\
    \ sign;\n            sign *= -1;\n        }\n        return Optional.ofNullable(sum);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_nadjup.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        long sign\
    \ = 1;\n        for (long i : arr) {\n            sign *= i;\n        }\n    \
    \    return Optional.of(sign * Math.signum(sum) * product);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcv3hr2o5.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        for (long i : arr)\
    \ {\n            sum += i;\n            product *= i;\n        }\n        return\
    \ Optional.of((long) (Math.signum(sum) * product));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3_n_7e37.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        for (long i : arr) {\n            product *=\
    \ i;\n        }\n        long sign = 1;\n        for (long i : arr) {\n      \
    \      sign *= i;\n        }\n        if (product == 0) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(sign * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzov0yjaf.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (sum == 0) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpasb_smvw.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = Long.MIN_VALUE;\n        long sum = 0;\n        for (long\
    \ i : arr) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      if (product == Long.MIN_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(Math.signum(sum) * product);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjs__9rg2.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            product *= i;\n        }\n        if (product == 0) return Optional.empty();\n\
    \        long sign = 1;\n        for (long i : arr) {\n            sign *= i;\n\
    \        }\n        return Optional.of(sign * Math.signum(sum) * product);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyliea5q_.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(sign * Math.signum(sum)\
    \ * product);\n                          ^\n    equality constraints: Long\n \
    \   lower bounds: Float\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long sum = 0;\n        long product = 1;\n        for (Long i : arr) {\n\
    \            sum += Math.abs(i);\n            product *= i;\n        }\n     \
    \   if (product == 0) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(sum * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoev8hsny.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += Math.signum(i) * Math.signum(product);\n            product\
    \ *= i;\n        }\n        return Optional.ofNullable(sum);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpffkv9orq.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = arr.get(0);\n        long sum = 0;\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            long magnitude = arr.get(i);\n    \
    \        long sign = arr.get(i) * product;\n            sum += sign * magnitude;\n\
    \            product *= sign;\n        }\n        return Optional.of(sum);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxpz7bjhr.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        for (long i : arr)\
    \ {\n            product *= i;\n            sign *= i;\n        }\n        if\
    \ (product == 0) {\n            return Optional.empty();\n        }\n        return\
    \ Optional.of(sign * product);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxy0vvcho.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      long product = 1;\n        long sum = 0;\n        for (long i : arr) {\n\
    \            sum += i;\n            product *= i;\n        }\n        if (product\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(Math.signum(sum)\
    \ * product);\n\n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp317sjg_8.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(Math.signum(sum) * product);\n\
    \                          ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2,\
    \ -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) ==\
    \ None\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n  \
    \      if (arr.isEmpty()) return Optional.empty();\n        long product = 1;\n\
    \        long sum = 0;\n        for (Long l : arr) {\n            sum += Math.abs(l);\n\
    \            product *= l;\n        }\n        return Optional.of(sum * product);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
    \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n  \
    \  assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l,\
    \ (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gevylm0.java:29)\n"
  exit_code: 1
  status: Exception
