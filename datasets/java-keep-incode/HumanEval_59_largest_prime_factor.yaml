name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long largestPrimeFactor(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 1;\n        long currentPrimeFactor2 = 2;\n        long\
    \ currentPrimeFactor3 = 1;\n        long currentPrimeFactor4 = 2;\n        long\
    \ currentPrimeFactor5 = 2;\n        long currentPrimeFactor6 = 2;\n        long\
    \ currentPrimeFactor7 = 2;\n        long currentPrimeFactor8 = 2;\n        long\
    \ currentPrimeFactor9 = 2;\n        long currentPrimeFactor10 = 2;\n        long\
    \ currentPrimeFactor11 = 2;\n        long currentPrimeFactor12 = 2;\n        long\
    \ currentPrimeFactor13 = 2;\n        long currentPrimeFactor14 = 2;\n        long\
    \ currentPrimeFactor15 = 2;\n        long currentPrimeFactor16 = 2;\n        long\
    \ currentPrimeFactor17 = 2;\n        long currentPrimeFactor18 = 2;\n        long\
    \ currentPrimeFactor19 = 2;\n        long currentPrimeFactor20 = 2;\n        long\
    \ currentPrimeFactor21 = 1;\n        long currentPrimeFactor22 = 2;\n        long\
    \ currentPrimeFactor23 = 2;\n        long currentPrimeFactor24 = 2;\n        long\
    \ currentPrimeFactor25 = 2;\n        long currentPrimeFactor26 = 2;\n        long\
    \ currentPrimeFactor27 = 2;\n        long currentPrimeFactor28 = 2;\n        long\
    \ currentPrimeFactor29 = 2;\n        long currentPrimeFactor30 = 2;\n        long\
    \ currentPrimeFactor31 = 1;\n        long currentPrimeFactor32 = 2;\n        long\
    \ currentPrimeFactor33 = 2;\n        long currentPrimeFactor34 = 2;\n        long\
    \ currentPrimeFactor35 = 2;\n        long currentPrimeFactor36 = 2;\n        long\
    \ currentPrimeFactor37 = 2;\n        long currentPrimeFactor38 = 2;\n        long\
    \ currentPrimeFactor39 = 2;\n        long currentPrimeFactor40 = 2;\n        long\
    \ currentPrimeFactor41 = 1;\n        long currentPrimeFactor42 = 2;\n        long\
    \ currentPrimeFactor43 = 1;\n        long currentPrimeFactor44 = 2;\n        long\
    \ currentPrimeFactor45 = 2;\n        long currentPrimeFactor46 = 2;\n        long\
    \ currentPrimeFactor47 = 2;\n        long currentPrimeFactor48 = 2;\n        long\
    \ currentPrimeFactor49 = 2;\n        long currentPrimeFactor50 = 2;\n        long\
    \ currentPrimeFactor51 = 1;\n        long currentPrimeFactor52 = 2;\n        long\
    \ currentPrimeFactor53 = 1;\n        long currentPrimeFactor54 = 2;\n        long\
    \ currentPrimeFactor55 = 2;\n", "        long largestPrimeFactor = n;\n      \
    \  long i = 2;\n        while (i <= largestPrimeFactor) {\n            while (n\
    \ % i == 0) {\n                largestPrimeFactor = i;\n            }\n      \
    \      i += 2;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ maxFactor = 1;\n        long i = 2;\n        while (i <= n / 2) {\n        \
    \    if (n % i == 0) {\n                maxFactor = i;\n            }\n      \
    \      i++;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n            }\n        \
    \    i += 2;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;\n", "        long largestPrimeFactor = n;\n        long\
    \ i = 2;\n        while (i <= largestPrimeFactor) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n            }\n            i\
    \ += 2;\n        }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;\n", "        long largestPrimeFactor = 1;\n \
    \       long i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long maxFactor = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrime = 7;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 26;\n        long maxFactorPrimePrimePrimePri", "        long maxFactor =\
    \ n;\n        long maxFactorPrime = 2;\n        long currentFactor = 2;\n    \
    \    while (currentFactor <= maxFactor) {\n            if (n % currentFactor ==\
    \ 0) {\n                maxFactor = maxFactorPrime;\n                maxFactorPrime\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactorPrime;\n", "        long largestPrimeFactor = 1;\n   \
    \     long i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n            }\n            i += 2;\n\
    \        }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= largestPrimeFactor) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \   }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long p = 2;\n        while (p < n) {\n   \
    \         if (n % p == 0) {\n                maxFactor = p;\n            }\n \
    \           p++;\n        }\n        return maxFactor;\n", "        long maxFactor\
    \ = n;\n        long maxFactorFound = n;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactorFound = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorFound;\n", "        long maxFactor = 1;\n        long\
    \ currentFactor = 2;\n        while (currentFactor <= n / 2) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \             break;\n            }\n            currentFactor++;\n        }\n\
    \        return maxFactor;\n", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (i <= largestPrimeFactor) {\n            if\
    \ (n % i == 0) {\n                largestPrimeFactor = i;\n            }\n   \
    \         i += 2;\n        }\n        return largestPrimeFactor;\n", "       \
    \ long largestPrimeFactor = 1;\n        for (long i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;\n", "        long maxFactor = n;\n \
    \       long maxFactorPrime = 2;\n        long factor = 3;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                long primeFactor\
    \ = factor;\n                while (n % primeFactor == 0) {\n                \
    \    n /= primeFactor;\n                    maxFactorPrime = primeFactor;\n  \
    \              }\n            }\n            factor++;\n        }\n        return\
    \ maxFactorPrime;\n", "        long maxFactor = 1;\n        long p = 2;\n    \
    \    while (p < n) {\n            if (n % p == 0) {\n                maxFactor\
    \ = p;\n            }\n            p++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;\n", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            while\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long currentPrime = 2;\n        long\
    \ currentPrimeCount = 0;\n        while (n > 1) {\n            currentPrimeCount\
    \ = 0;\n            while (n % currentPrime == 0) {\n                currentPrimeCount++;\n\
    \                n /= currentPrime;\n            }\n            if (currentPrimeCount\
    \ > largestPrimeFactor) {\n                largestPrimeFactor = currentPrimeCount;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n        }\n        return largestPrimeFactor;\n", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 1;\n        while (currentPrimeFactor <= largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                currentPrime++;\n            }\n          \
    \  currentPrimeFactor++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long maxFactor = 1;\n        long p = 2;\n        while (p <= n / p) {\n\
    \            if (n % p == 0) {\n                maxFactor = p;\n             \
    \   break;\n            }\n            p++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long maxPrime = 2;\n        long\
    \ currentPrime = 2;\n        long currentMaxPrime = 2;\n        boolean isPrime\
    \ = true;\n        long i = 2;\n        while (i <= n) {\n            isPrime\
    \ = true;\n            for (long j = 2; j <= currentPrime; j++) {\n          \
    \      if (n % j == 0) {\n                    isPrime = false;\n             \
    \       break;\n                }\n            }\n            if (isPrime) {\n\
    \                largestPrimeFactor = i;\n                currentMaxPrime = currentPrime;\n\
    \            }\n            currentPrime++;\n            i++;\n        }\n   \
    \     return largestPrimeFactor;\n", "        long largestPrimeFactor = 1;\n \
    \       long currentPrime = 2;\n        long currentPrimeFactor = 2;\n       \
    \ while (currentPrimeFactor < n) {\n            while (n % currentPrime == 0)\
    \ {\n                largestPrimeFactor = currentPrimeFactor;\n              \
    \  currentPrime++;\n            }\n            currentPrimeFactor++;\n       \
    \ }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n   \
    \     long currentFactor = 2;\n        while (currentFactor <= n / 2) {\n    \
    \        if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \                break;\n            }\n            currentFactor++;\n       \
    \ }\n        return maxFactor;\n", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;\n", "        long maxFactor = 1;\n     \
    \   long currentFactor = 2;\n        while (currentFactor <= n / 2) {\n      \
    \      if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor * primeFactor <= n) {\n            if (n % primeFactor == 0) {\n\
    \                largestPrimeFactor = primeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;\n", "       \
    \ long largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 0;\n        long currentPrime = 1;\n        long\
    \ currentPrimeFactor = 1;\n        long currentPrimeFactorFactor = 1;\n      \
    \  long currentPrimeFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactor", "        long maxFactor = 1;\n     \
    \   long factor = 2;\n        while (factor <= n / 2) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;\n", "        long maxFactor = n;\n     \
    \   long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long factor = 2;\n        while (factor\
    \ < n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 1;\n        while (n > 1) {\n            if (n % currentPrime\
    \ == 0) {\n                currentPrimeFactor = currentPrime;\n              \
    \  currentPrime = currentPrime + 2;\n            } else {\n                currentPrimeFactor\
    \ = currentPrime;\n                currentPrime = currentPrime + 2;\n        \
    \    }\n            largestPrimeFactor = Math.max(largestPrimeFactor, currentPrimeFactor);\n\
    \            n = n / currentPrime;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long maxFactorFound = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorFound = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorFound;\n", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n            }\n        \
    \    i += 2;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = n;\n        long largestPrimeFactorOfN = 1;\n        long\
    \ largestPrimeFactorOfNPlus1 = largestPrimeFactorOfN + 1;\n        long largestPrimeFactorOfNMinus1\
    \ = largestPrimeFactorOfN - 1;\n        long largestPrimeFactorOfNMinus2 = largestPrimeFactorOfN\
    \ - 2;\n        long largestPrimeFactorOfNMinus3 = largestPrimeFactorOfN - 3;\n\
    \        long largestPrimeFactorOfNMinus4 = largestPrimeFactorOfN - 4;\n     \
    \   long largestPrimeFactorOfNMinus5 = largestPrimeFactorOfN - 5;\n        long\
    \ largestPrimeFactorOfNMinus6 = largestPrimeFactorOfN - 6;\n        long largestPrimeFactorOfNMinus7\
    \ = largestPrimeFactorOfN - 7;\n        long largestPrimeFactorOfNMinus8 = largestPrimeFactorOfN\
    \ - 8;\n        long largestPrimeFactorOfNMinus9 = largestPrimeFactorOfN - 9;\n\
    \        long largestPrimeFactorOfNMinus10 = largestPrimeFactorOfN - 10;\n   \
    \     long largestPrimeFactorOfNMinus11 = largestPrimeFactorOfN - 11;\n      \
    \  long largestPrimeFactorOfNMinus12 = largestPrimeFactorOfN - 12;\n        long\
    \ largestPrimeFactorOfNMinus13 = largestPrimeFactorOfN - 13;\n        long largestPrimeFactorOfNMinus14\
    \ = largestPrimeFactorOfN - 14;\n        long largestPrimeFactorOfNMinus15 = largestPrimeFactorOfN\
    \ - 15;\n        long largestPrimeFactorOfNMinus16 = largestPrimeFactorOfN - 16;\n\
    \        long largestPrimeFactorOfNMinus17 = largestPrimeFactorOfN - 17;\n   \
    \     long largestPrimeFactorOfNMinus18 = largestPrimeFactorOfN - 18;\n      \
    \  long largestPrimeFactorOfNMinus19 = largestPrimeFactorOfN - 19;\n        long\
    \ largestPrimeFactorOfNMinus20 = largestPrimeFactorOfN - 20;\n        long largestPrimeFactorOfNMinus21\
    \ = largestPrimeFactorOfN", "        long largestPrimeFactor = 0;\n        long\
    \ i = 2;\n        while (i <= n / i) {\n            if (n % i == 0) {\n      \
    \          largestPrimeFactor = i;\n                break;\n            }\n  \
    \          i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \             maxFactorPrime = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n\
    \        long currentFactor = 2;\n        while (currentFactor <= n) {\n     \
    \       if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = n;\n        long maxFactorFound = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorFound = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorFound;\n", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;\n", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor < n) {\n            if (n % primeFactor == 0) {\n             \
    \   largestPrimeFactor = primeFactor;\n            }\n            primeFactor++;\n\
    \        }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= largestPrimeFactor)\
    \ {\n            if (n % factor == 0) {\n                largestPrimeFactor =\
    \ factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long maxFactorPrime = 1;\n        long currentFactor\
    \ = 2;\n        long currentFactorPrime = 2;\n        long currentFactorPrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long currentFactorPrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long currentFactorPrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ currentFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long currentFactorPrimePrimePrime",
  "        long maxFactor = 1;\n        long maxFactorFactor = 2;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactorFactor = factor;\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        if (maxFactorFactor\
    \ == 2) {\n            return maxFactor;\n        } else {\n            return\
    \ maxFactorFactor;\n        }\n", "        long largestPrimeFactor = n;\n    \
    \    long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;\n", "        long maxFactor = 1;\n        long\
    \ currentFactor = 2;\n        while (currentFactor <= n) {\n            if (n\
    \ % currentFactor == 0) {\n                maxFactor = currentFactor;\n      \
    \      }\n            currentFactor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 8;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 28;\n        long largestPrimeFactorFactor", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= largestPrimeFactor) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \   }\n            i++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 0;\n        long currentPrimeFactor = 1;\n  \
    \      long currentPrimeFactorFactor = 2;\n        long currentPrimeFactorFactor\
    \ = 3;\n        long currentPrimeFactorFactorFactor = 4;\n        long currentPrimeFactorFactorFactor\
    \ = 5;\n        long currentPrimeFactorFactorFactor = 6;\n        long currentPrimeFactorFactorFactor\
    \ = 7;\n        long currentPrimeFactorFactorFactor = 8;\n        long currentPrimeFactorFactorFactor\
    \ = 9;\n        long currentPrimeFactorFactorFactor = 10;\n        long currentPrimeFactorFactorFactor\
    \ = 11;\n        long currentPrimeFactorFactorFactor = 12;\n        long currentPrimeFactorFactorFactor\
    \ = 13;\n        long currentPrimeFactorFactorFactor = 14;\n        long currentPrimeFactorFactorFactor\
    \ = 15;\n        long currentPrimeFactorFactorFactor = 16;\n        long currentPrimeFactorFactorFactor\
    \ = 17;\n        long currentPrimeFactorFactorFactor = 18;\n        long currentPrimeFactorFactorFactor\
    \ = 19;\n        long currentPrimeFactorFactorFactor = 20;\n        long currentPrimeFactorFactor\
    \ = 21;\n        long currentPrimeFactorFactor = 22;\n        long currentPrimeFactorFactor\
    \ = 23;\n        long currentPrimeFactorFactor = 24;\n        long currentPrimeFactorFactor\
    \ = 25;\n        long currentPrimeFactorFactor = 26;\n        long currentPrimeFactorFactor\
    \ = 27;\n        long currentPrimeFactorFactor = 28;\n        long currentPrimeFactorFactor\
    \ = 29;\n        long currentPrimeFactorFactor = 30;\n        long currentPrimeFactorFactor\
    \ = 31;\n        long currentPrimeFactorFactor = 32;\n        long currentPrimeFactorFactor\
    \ = 33;\n        long currentPrimeFactorFactor = 34;\n        long currentPrimeFactorFactor\
    \ = 35;\n        long currentPrimeFactorFactor = 36;\n        long currentPrimeFactorFactor\
    \ = 37;\n        long currentPrimeFactorFactor = 38;\n        long currentPrimeFactorFactor\
    \ = 39;\n        long currentPrimeFactorFactor = 40;\n        long currentPrimeFactorFactor\
    \ = 41;\n        long currentPrimeFactorFactor = 42;\n        long currentPrimeFactorFactor\
    \ = 43;\n        long currentPrimeFactorFactor = 44;\n        long currentPrimeFactorFactor\
    \ = 45;\n        long currentPrimeFactorFactor = 46;\n        long currentPrimeFactorFactor\
    \ = 47;\n        long currentPrimeFactorFactor = 48;\n        long currentPrimeFactorFactor\
    \ = 49;", "        long maxFactor = 1;\n        long factor = 2;\n        while\
    \ (factor <= n / 2) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long currentPrimeFactor = 1;\n  \
    \      long currentPrimeFactorFactor = 2;\n        long currentPrimeFactorFactor\
    \ = 3;\n        long currentPrimeFactorFactorFactor = 4;\n        long currentPrimeFactorFactorFactor\
    \ = 5;\n        long currentPrimeFactorFactorFactor = 6;\n        long currentPrimeFactorFactorFactor\
    \ = 7;\n        long currentPrimeFactorFactorFactor = 8;\n        long currentPrimeFactorFactorFactor\
    \ = 9;\n        long currentPrimeFactorFactorFactor = 10;\n        long currentPrimeFactorFactorFactor\
    \ = 11;\n        long currentPrimeFactorFactorFactor = 12;\n        long currentPrimeFactorFactorFactor\
    \ = 13;\n        long currentPrimeFactorFactorFactor = 14;\n        long currentPrimeFactorFactorFactor\
    \ = 15;\n        long currentPrimeFactorFactorFactor = 16;\n        long currentPrimeFactorFactorFactor\
    \ = 17;\n        long currentPrimeFactorFactorFactor = 18;\n        long currentPrimeFactorFactorFactor\
    \ = 19;\n        long currentPrimeFactorFactorFactor = 20;\n        long currentPrimeFactorFactor\
    \ = 21;\n        long currentPrimeFactorFactor = 22;\n        long currentPrimeFactorFactor\
    \ = 23;\n        long currentPrimeFactorFactor = 24;\n        long currentPrimeFactorFactor\
    \ = 25;\n        long currentPrimeFactorFactor = 26;\n        long currentPrimeFactorFactor\
    \ = 27;\n        long currentPrimeFactorFactor = 28;\n        long currentPrimeFactorFactor\
    \ = 29;\n        long currentPrimeFactorFactor = 30;\n        long currentPrimeFactorFactor\
    \ = 31;\n        long currentPrimeFactorFactor = 32;\n        long currentPrimeFactorFactor\
    \ = 33;\n        long currentPrimeFactorFactor = 34;\n        long currentPrimeFactorFactor\
    \ = 35;\n        long currentPrimeFactorFactor = 36;\n        long currentPrimeFactorFactor\
    \ = 37;\n        long currentPrimeFactorFactor = 38;\n        long currentPrimeFactorFactor\
    \ = 39;\n        long currentPrimeFactorFactor = 40;\n        long currentPrimeFactorFactor\
    \ = 41;\n        long currentPrimeFactorFactor = 42;\n        long currentPrimeFactorFactor\
    \ = 43;\n        long currentPrimeFactorFactor = 44;\n        long currentPrimeFactorFactor\
    \ = 45;\n        long currentPrimeFactorFactor = 46;\n        long currentPrimeFactorFactor\
    \ = 47;\n        long currentPrimeFactorFactor = 48;\n        long currentPrimeFactorFactor\
    \ = 49", "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n\
    \        while (currentPrime < n) {\n            if (n % currentPrime == 0) {\n\
    \                largestPrimeFactor = currentPrime;\n                break;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;\n", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 1;\n        long currentPrimeFactorFactor = 1;\n      \
    \  while (currentPrime < n) {\n            currentPrimeFactor = currentPrime;\n\
    \            while (currentPrimeFactor < currentPrime) {\n                currentPrimeFactor\
    \ *= currentPrime;\n            }\n            if (currentPrimeFactor > largestPrimeFactor)\
    \ {\n                largestPrimeFactor = currentPrimeFactor;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 0;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 1;\n        while (currentPrimeFactor <= n) {\n       \
    \     while (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                n /= currentPrime;\n            }\n            currentPrime++;\n\
    \            currentPrimeFactor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            while (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = 1;\n        long i = 2;\n        while (i <= n / 2) {\n\
    \            if (n % i == 0) {\n                maxFactor = i;\n            }\n\
    \            i += 2;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 1;\n        }\n\
    \        return largestPrimeFactor;\n", "        long largestPrimeFactor = 0;\n\
    \        long currentPrime = 2;\n        long currentFactor = 1;\n        long\
    \ currentFactorFactor = 1;\n        long currentFactorFactorFactor = 1;\n    \
    \    long currentFactorFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactor = 1;\n      \
    \  long currentFactorFactorFactorFactorFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor",
  "        long largestPrimeFactor = n;\n        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            while (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;\n", "   \
    \     long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 0;\n        long maxPrime = 2;\n        long\
    \ currentPrime = 2;\n        long currentFactor = 1;\n        long currentFactorPrime\
    \ = 1;\n        while (n > 1) {\n            while (n % currentPrime == 0) {\n\
    \                currentPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            if\
    \ (currentPrime > maxPrime) {\n                maxPrime = currentPrime;\n    \
    \        }\n            if (currentFactorPrime > largestPrimeFactor) {\n     \
    \           largestPrimeFactor = currentFactorPrime;\n            }\n        \
    \    currentPrime = 2;\n            currentFactorPrime = 1;\n            currentFactor++;\n\
    \            n--;\n        }\n        return largestPrimeFactor;\n", "       \
    \ long largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            if (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n  \
    \      long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;\n", "   \
    \     long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <= n\
    \ / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;\n", " \
    \       long largestPrimeFactor = 1;\n        long currentPrime = 2;\n       \
    \ while (n % currentPrime == 0) {\n            largestPrimeFactor = currentPrime;\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;\n", "        long largestPrimeFactor = 0;\n\
    \        long i = 2;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long largestPrimeFactor = 1;\n        long currentPrime = 2;\n       \
    \ while (n > 1) {\n            while (n % currentPrime == 0) {\n             \
    \   largestPrimeFactor = currentPrime;\n                n /= currentPrime;\n \
    \           }\n            currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n", "        long maxFactor = n;\n     \
    \   long maxFactorFactor = 1;\n        long maxFactorFactorPrime = 1;\n      \
    \  long maxFactorFactorPrimePrime = 1;\n        long maxFactorFactorPrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrime = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrime = 1;\n    \
    \    long maxFactorFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n        long\
    \ maxFactorFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorFactorPrimePrimePrimePrimePri", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i += 1;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorPrime = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;\n", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \        break;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;\n", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        long currentPrime\
    \ = 2;\n        while (currentPrime < n) {\n            if (n % currentPrime ==\
    \ 0) {\n                currentFactor *= currentPrime;\n                n /= currentPrime;\n\
    \            } else {\n                currentPrime++;\n            }\n      \
    \  }\n        if (n > 1) {\n            while (currentFactor < n) {\n        \
    \        if (n % currentFactor == 0) {\n                    currentFactor *= currentPrime;\n\
    \                    n /= currentPrime;\n                } else {\n          \
    \          currentPrime++;\n                }\n            }\n        }\n    \
    \    return maxFactor;\n", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 9;\n  \
    \      long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 10;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 11;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 12;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 28;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 29;\n        long largestPrimeFactorFactorFactorFactor", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;\n", " \
    \       long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime ==\
    \ 0) {\n                largestPrimeFactor = currentPrime;\n            }\n  \
    \          currentPrime++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n            n/=currentFactor;\n\
    \        }\n        return maxFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 0;\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;\n", "        long largestPrimeFactor = 0;\n\
    \        long i = 2;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n", "        long largestPrimeFactor = 1;\n\
    \        long currentPrime = 2;\n        while (currentPrime < n) {\n        \
    \    if (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                break;\n            }\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n        \
    \    largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n        }\n\
    \        return largestPrimeFactor;\n", "        long largestPrimeFactor = 0;\n\
    \        long i = 2;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;\n", " \
    \       long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 1;\n        long i = 2;\n        while (i <= n / 2) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \        }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long maxFactor = n;\n        long\
    \ currentFactor = 1;\n        long maxFactorFound = 0;\n        boolean isPrime\
    \ = true;\n        boolean isPrimeFound = false;\n        long maxFactorFoundFound\
    \ = 0;\n        long currentFactorFound = 1;\n        long currentFactorFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long currentFactorFoundFoundFound\
    \ = 0;\n        long currentFactorFoundFoundFound = 0;\n        long current",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;\n", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;\n", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (currentFactor <= n / 2) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n                break;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            if (n % currentPrime == 0) {\n           \
    \     largestPrimeFactor = currentPrime;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;\n", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ while (n % factor == 0) {\n                n /= factor;\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long largestPrimeFactor = 0;\n        long maxFactor = n;\n        long\
    \ currentFactor = 1;\n        long currentMaxFactor = 1;\n        long currentMaxFactor2\
    \ = 1;\n        long currentMaxFactor3 = 1;\n        long currentMaxFactor4 =\
    \ 1;\n        long currentMaxFactor5 = 1;\n        long currentMaxFactor6 = 1;\n\
    \        long currentMaxFactor7 = 1;\n        long currentMaxFactor8 = 1;\n  \
    \      long currentMaxFactor9 = 1;\n        long currentMaxFactor10 = 1;\n   \
    \     long currentMaxFactor11 = 1;\n        long currentMaxFactor12 = 1;\n   \
    \     long currentMaxFactor13 = 1;\n        long currentMaxFactor14 = 1;\n   \
    \     long currentMaxFactor15 = 1;\n        long currentMaxFactor16 = 1;\n   \
    \     long currentMaxFactor17 = 1;\n        long currentMaxFactor18 = 1;\n   \
    \     long currentMaxFactor19 = 1;\n        long currentMaxFactor20 = 1;\n   \
    \     long currentMaxFactor21 = 1;\n        long currentMaxFactor22 = 1;\n   \
    \     long currentMaxFactor23 = 1;\n        long currentMaxFactor24 = 1;\n   \
    \     long currentMaxFactor25 = 1;\n        long currentMaxFactor26 = 1;\n   \
    \     long currentMaxFactor27 = 1;\n        long currentMaxFactor28 = 1;\n   \
    \     long currentMaxFactor29 = 1;\n        long currentMaxFactor30 = 1;\n   \
    \     long currentMaxFactor31 = 1;\n        long currentMaxFactor32 = 1;\n   \
    \     long currentMaxFactor33 = 1;\n        long currentMaxFactor34 = 1;\n   \
    \     long currentMaxFactor35 = 1;\n        long currentMaxFactor36 = 1;\n   \
    \     long currentMaxFactor37 = 1;\n        long currentMaxFactor38 = 1;\n   \
    \     long currentMaxFactor39 = 1;\n        long currentMaxFactor40 = 1;\n   \
    \     long currentMaxFactor41 = 1;\n        long currentMaxFactor42 = 1;\n   \
    \     long currentMaxFactor43 = 1;\n        long currentMaxFactor44 = 1;\n   \
    \     long currentMaxFactor45 = 1;\n        long currentMaxFactor46 = 1;\n   \
    \     long currentMaxFactor47 = 1;\n        long currentMaxFactor48 = 1;\n   \
    \     long currentMaxFactor49 = 1;\n        long currentMaxFactor50 = 1;\n   \
    \     long currentMaxFactor51 = 1;\n        long currentMaxFactor52 = 1;\n   \
    \     long currentMaxFactor53 = 1;\n        long currentMaxFactor54 = 1;\n   \
    \     long currentMaxFactor55 = 1;\n        long currentMaxFactor56 = 1;\n   \
    \     long currentMaxFactor57 = 1;\n        long currentMaxFactor58 = 1;\n   \
    \     long currentMaxFactor59 = 1;\n        long currentMaxFactor60 = 1;\n   \
    \     long currentMaxFactor61 = 1;\n", "        long largestPrimeFactor = n;\n\
    \        long maxFactor = n;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= maxFactor) {\n            if (n % currentFactor == 0) {\n               \
    \ largestPrimeFactor = currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long currentFactor\
    \ = 2;\n        long currentFactorPrime = 2;\n        while (n > 1) {\n      \
    \      while (n % currentFactor == 0) {\n                currentFactorPrime++;\n\
    \            }\n            while (n % currentFactorPrime == 0) {\n          \
    \      currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPrime == 0) {\n             \
    \   currentFactorPrime++;\n            }\n            while (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            while\
    \ (n % currentFactorPrime == 0) {\n                currentFactorPrime++;\n   \
    \         }\n            while (n % currentFactorPri", "        long maxFactor\
    \ = n;\n        long maxFactorFound = n;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactorFound = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorFound;\n", "        long largestPrimeFactor = n;\n  \
    \      long largestPrimeFactor2 = n;\n        long largestPrimeFactor3 = n;\n\
    \        long largestPrimeFactor4 = n;\n        long largestPrimeFactor5 = n;\n\
    \        long largestPrimeFactor6 = n;\n        long largestPrimeFactor7 = n;\n\
    \        long largestPrimeFactor8 = n;\n        long largestPrimeFactor9 = n;\n\
    \        long largestPrimeFactor10 = n;\n        long largestPrimeFactor11 = n;\n\
    \        long largestPrimeFactor12 = n;\n        long largestPrimeFactor13 = n;\n\
    \        long largestPrimeFactor14 = n;\n        long largestPrimeFactor15 = n;\n\
    \        long largestPrimeFactor16 = n;\n        long largestPrimeFactor17 = n;\n\
    \        long largestPrimeFactor18 = n;\n        long largestPrimeFactor19 = n;\n\
    \        long largestPrimeFactor20 = n;\n        long largestPrimeFactor21 = n;\n\
    \        long largestPrimeFactor22 = n;\n        long largestPrimeFactor23 = n;\n\
    \        long largestPrimeFactor24 = n;\n        long largestPrimeFactor25 = n;\n\
    \        long largestPrimeFactor26 = n;\n        long largestPrimeFactor27 = n;\n\
    \        long largestPrimeFactor28 = n;\n        long largestPrimeFactor29 = n;\n\
    \        long largestPrimeFactor30 = n;\n        long largestPrimeFactor31 = n;\n\
    \        long largestPrimeFactor32 = n;\n        long largestPrimeFactor33 = n;\n\
    \        long largestPrimeFactor34 = n;\n        long largestPrimeFactor35 = n;\n\
    \        long largestPrimeFactor36 = n;\n        long largestPrimeFactor37 = n;\n\
    \        long largestPrimeFactor38 = n;\n        long largestPrimeFactor39 = n;\n\
    \        long largestPrimeFactor40 = n;\n        long largestPrimeFactor41 = n;\n\
    \        long largestPrimeFactor42 = n;\n        long largestPrimeFactor43 = n;\n\
    \        long largestPrimeFactor44 = n;\n        long largestPrimeFactor45 = n;\n\
    \        long largestPrimeFactor46 = n;\n        long largestPrimeFactor47 = n;\n\
    \        long largestPrimeFactor", "        long maxFactor = 1;\n        long\
    \ p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n           \
    \     maxFactor = p;\n            }\n            p++;\n        }\n        return\
    \ maxFactor;\n", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (currentFactor <= n / 2) {\n            if (n % currentFactor ==\
    \ 0) {\n                maxFactor = currentFactor;\n            }\n          \
    \  currentFactor++;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n            }\n        \
    \    i += 2;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;\n", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;\n", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 0;\n        long currentPrime = 1;\n        long currentFactor\
    \ = 1;\n        long currentFactor2 = 1;\n        long currentFactor3 = 1;\n \
    \       long currentFactor4 = 1;\n        long currentFactor5 = 1;\n        long\
    \ currentFactor6 = 1;\n        long currentFactor7 = 1;\n        long currentFactor8\
    \ = 1;\n        long currentFactor9 = 1;\n        long currentFactor10 = 1;\n\
    \        long currentFactor11 = 1;\n        long currentFactor12 = 1;\n      \
    \  long currentFactor13 = 1;\n        long currentFactor14 = 1;\n        long\
    \ currentFactor15 = 1;\n        long currentFactor16 = 1;\n        long currentFactor17\
    \ = 1;\n        long currentFactor18 = 1;\n        long currentFactor19 = 1;\n\
    \        long currentFactor20 = 1;\n        long currentFactor21 = 1;\n      \
    \  long currentFactor22 = 1;\n        long currentFactor23 = 1;\n        long\
    \ currentFactor24 = 1;\n        long currentFactor25 = 1;\n        long currentFactor26\
    \ = 1;\n        long currentFactor27 = 1;\n        long currentFactor28 = 1;\n\
    \        long currentFactor29 = 1;\n        long currentFactor30 = 1;\n      \
    \  long currentFactor31 = 1;\n        long currentFactor32 = 1;\n        long\
    \ currentFactor33 = 1;\n        long currentFactor34 = 1;\n        long currentFactor35\
    \ = 1;\n        long currentFactor36 = 1;\n        long currentFactor37 = 1;\n\
    \        long currentFactor38 = 1;\n        long currentFactor39 = 1;\n      \
    \  long currentFactor40 = 1;\n        long currentFactor41 = 1;\n        long\
    \ currentFactor42 = 1;\n        long currentFactor43 = 1;\n        long currentFactor44\
    \ = 1;\n        long currentFactor45 = 1;\n        long currentFactor46 = 1;\n\
    \        long currentFactor47 = 1;\n        long currentFactor48 = 1;\n      \
    \  long currentFactor49 = 1;\n        long currentFactor50 = 1;\n        long\
    \ currentFactor51 = 1;\n        long currentFactor52 = 1;\n        long currentFactor53\
    \ = 1;\n        long currentFactor54 = 1;\n        long currentFactor55 = 1;\n\
    \        long currentFactor56 = 1;\n        long currentFactor57 = 1;\n      \
    \  long currentFactor58 = 1;\n        long currentFactor59 = 1;\n        long\
    \ currentFactor60 = 1;\n        long currentFactor61 = 1;\n        long currentFactor62\
    \ = 1;\n        long currentFactor63 = 1;\n        long currentFactor64 = 1;\n\
    \        long currentFactor65 = 1;\n        long currentFactor66 = 1;\n      \
    \  long currentFactor67 = 1;\n        long currentFactor68 = 1;\n        long\
    \ currentFactor69 = 1;\n        long currentFactor70 = 1;\n        long current",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n", "        long maxFactor = 1;\n     \
    \   long maxFactorPrime = 2;\n        long factor = 3;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                long factorPrime\
    \ = 2;\n                while (factorPrime <= factor) {\n                    if\
    \ (n % factorPrime == 0) {\n                        maxFactorPrime = factorPrime;\n\
    \                        break;\n                    }\n                    factorPrime++;\n\
    \                }\n                if (maxFactorPrime > factor) {\n         \
    \           maxFactor = factor;\n                }\n            }\n          \
    \  factor++;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                maxFactor = n / factor;\n            }\n        \
    \    factor++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n / 2; i++) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \       break;\n            }\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            while (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long largestPrimeFactor2 = n;\n        long largestPrimeFactor3\
    \ = n;\n        long largestPrimeFactor4 = n;\n        long largestPrimeFactor5\
    \ = n;\n        long largestPrimeFactor6 = n;\n        long largestPrimeFactor7\
    \ = n;\n        long largestPrimeFactor8 = n;\n        long largestPrimeFactor9\
    \ = n;\n        long largestPrimeFactor10 = n;\n        long largestPrimeFactor11\
    \ = n;\n        long largestPrimeFactor12 = n;\n        long largestPrimeFactor13\
    \ = n;\n        long largestPrimeFactor14 = n;\n        long largestPrimeFactor15\
    \ = n;\n        long largestPrimeFactor16 = n;\n        long largestPrimeFactor17\
    \ = n;\n        long largestPrimeFactor18 = n;\n        long largestPrimeFactor19\
    \ = n;\n        long largestPrimeFactor20 = n;\n        long largestPrimeFactor21\
    \ = n;\n        long largestPrimeFactor22 = n;\n        long largestPrimeFactor23\
    \ = n;\n        long largestPrimeFactor24 = n;\n        long largestPrimeFactor25\
    \ = n;\n        long largestPrimeFactor26 = n;\n        long largestPrimeFactor27\
    \ = n;\n        long largestPrimeFactor28 = n;\n        long largestPrimeFactor29\
    \ = n;\n        long largestPrimeFactor30 = n;\n        long largestPrimeFactor31\
    \ = n;\n        long largestPrimeFactor32 = n;\n        long largestPrimeFactor33\
    \ = n;\n        long largestPrimeFactor34 = n;\n        long largestPrimeFactor35\
    \ = n;\n        long largestPrimeFactor36 = n;\n        long largestPrimeFactor37\
    \ = n;\n        long largestPrimeFactor38 = n;\n        long largestPrimeFactor39\
    \ = n;\n        long largestPrimeFactor40 = n;\n        long largestPrimeFactor41\
    \ = n;\n        long largestPrimeFactor42 = n;\n        long largestPrimeFactor43\
    \ = n;\n        long largestPrimeFactor44 = n;\n        long largestPrimeFactor45\
    \ = n;\n        long largestPrimeFactor46 = n;\n        long largestPrimeFactor47\
    \ = n;\n        long largestPrimeFactor", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;\n", "        long\
    \ largestPrimeFactor = n;\n        long primeFactor = 2;\n        while (primeFactor\
    \ * primeFactor <= n) {\n            while (n % primeFactor == 0) {\n        \
    \        largestPrimeFactor = primeFactor;\n                n /= primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            if (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;\n", "        long maxFactor = 1;\n \
    \       long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;\n", "        long maxFactor = n;\n     \
    \   long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long currentFactor\
    \ = 3;\n        long currentFactorPrime = 3;\n        long currentFactorPrime2\
    \ = 2;\n        long currentFactorPrime3 = 1;\n        long currentFactorPrime4\
    \ = 1;\n        long currentFactorPrime5 = 1;\n        long currentFactorPrime6\
    \ = 1;\n        long currentFactorPrime7 = 1;\n        long currentFactorPrime8\
    \ = 1;\n        long currentFactorPrime9 = 1;\n        long currentFactorPrime10\
    \ = 1;\n        long currentFactorPrime11 = 1;\n        long currentFactorPrime12\
    \ = 1;\n        long currentFactorPrime13 = 1;\n        long currentFactorPrime14\
    \ = 1;\n        long currentFactorPrime15 = 1;\n        long currentFactorPrime16\
    \ = 1;\n        long currentFactorPrime17 = 1;\n        long currentFactorPrime18\
    \ = 1;\n        long currentFactorPrime19 = 1;\n        long currentFactorPrime20\
    \ = 1;\n        long currentFactorPrime21 = 1;\n        long currentFactorPrime22\
    \ = 1;\n        long currentFactorPrime23 = 1;\n        long currentFactorPrime24\
    \ = 1;\n        long currentFactorPrime25 = 1;\n        long currentFactorPrime26\
    \ = 1;\n        long currentFactorPrime27 = 1;\n        long currentFactorPrime28\
    \ = 1;\n        long currentFactorPrime29 = 1;\n        long currentFactorPrime30\
    \ = 1;\n        long currentFactorPrime31 = 1;\n        long currentFactorPrime32\
    \ = 1;\n        long currentFactorPrime33 = 1;\n        long currentFactorPrime34\
    \ = 1;\n        long currentFactorPrime35 = 1;\n        long currentFactorPrime36\
    \ = 1;\n        long currentFactorPrime37 = 1;\n        long currentFactorPrime38\
    \ = 1;\n        long currentFactorPrime39 = 1;\n        long currentFactorPrime40\
    \ = 1;\n        long currentFactorPrime41 = 1;\n        long currentFactorPrime42\
    \ = 1;\n        long currentFactorPrime43 = 1;\n        long currentFactorPrime44\
    \ = 1;\n        long currentFactorPrime45 = 1;\n        long currentFactorPrime46\
    \ = 1;\n        long currentFactorPrime47 = 1;\n        long currentFactorPrime48\
    \ = 1;\n        long currentFactorPrime49 = 1;\n        long currentFactorPrime50\
    \ = 1;\n        long currentFactorPrime51 = 1;\n        long currentFactorPrime52\
    \ = 1;\n        long currentFactorPrime53 = 1;\n        long currentFactorPrime54\
    \ = 1;\n        long currentFactorPri", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;\n", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= largestPrimeFactor)\
    \ {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (primeFactor < n) {\n            while (n % primeFactor == 0) {\n          \
    \      largestPrimeFactor = primeFactor;\n                n /= primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;\n",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long primeFactor = 2;\n        while (primeFactor <= largestPrimeFactor)\
    \ {\n            if (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n            }\n            primeFactor++;\n        }\n     \
    \   return largestPrimeFactor;\n", "        long largestPrimeFactor = n;\n   \
    \     long currentPrime = 2;\n        while (largestPrimeFactor % currentPrime\
    \ != 0) {\n            currentPrime++;\n        }\n        largestPrimeFactor\
    \ = currentPrime;\n        return largestPrimeFactor;\n", "        long maxFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                maxFactor = i;\n            }\n            i += 2;\n\
    \        }\n        return maxFactor;\n", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n        \
    \    largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n        }\n\
    \        return largestPrimeFactor;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
