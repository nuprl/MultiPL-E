name: HumanEval_100_make_a_pile
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, you have to make a pile of n\
  \ levels of stones.\n    // The first level has n stones.\n    // The number of\
  \ stones in the next level is:\n    // - the next odd number if n is odd.\n    //\
  \ - the next even number if n is even.\n    // Return the number of stones in each\
  \ level in a list, where element at index\n    // i represents the number of stones\
  \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5,\
  \ 7]\n    public static ArrayList<Long> makeAPile(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n\
  \    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l,\
  \ (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l,\
  \ (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 1) ? n : n+1;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : next", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n\
    \        long nextEven = (n%2 == 1) ? n : n+1;\n        long nextLevel = nextOdd;\n\
    \        while(nextLevel > 0) {\n            result.add(nextLevel);\n        \
    \    nextLevel = (nextOdd > nextEven) ? nextOdd : nextEven;\n            nextOdd\
    \ = nextEven;\n            nextEven = (nextOdd > nextEven) ? nextOdd : nextEven;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        long nextLevel2 =\
    \ nextEven;\n        long nextLevel3 = nextLevel2;\n        long nextLevel4 =\
    \ nextLevel3;\n        long nextLevel5 = nextLevel4;\n        long nextLevel6\
    \ = nextLevel5;\n        long nextLevel7 = nextLevel6;\n        long nextLevel8\
    \ = nextLevel7;\n        long nextLevel9 = nextLevel8;\n        long nextLevel10\
    \ = nextLevel9;\n        long nextLevel11 = nextLevel10;\n        long nextLevel12\
    \ = nextLevel11;\n        long nextLevel13 = nextLevel12;\n        long nextLevel14\
    \ = nextLevel13;\n        long nextLevel15 = nextLevel14;\n        long nextLevel16\
    \ = nextLevel15;\n        long nextLevel17 = nextLevel16;\n        long nextLevel18\
    \ = nextLevel17;\n        long nextLevel19 = nextLevel18;\n        long nextLevel20\
    \ = nextLevel19;\n        long nextLevel21 = nextLevel20;\n        long nextLevel22\
    \ = nextLevel21;\n        long nextLevel23 = nextLevel22;\n        long nextLevel24\
    \ = nextLevel23;\n        long nextLevel25 = nextLevel24;\n        long nextLevel26\
    \ = nextLevel25;\n        long nextLevel27 = nextLevel26;\n        long nextLevel28\
    \ = nextLevel27;\n        long nextLevel29 = nextLevel28;\n        long nextLevel30\
    \ = nextLevel29;\n        long nextLevel31 = nextLevel30;\n        long nextLevel32\
    \ = nextLevel31;\n        long nextLevel33 = nextLevel32;\n        long nextLevel34\
    \ = nextLevel33;\n        long nextLevel35 = nextLevel34;\n        long nextLevel36\
    \ = nextLevel35;\n        long nextLevel37 = nextLevel36;\n        long nextLevel38\
    \ = nextLevel37;\n        long nextLevel39 = nextLevel38;\n        long nextLevel40\
    \ = nextLevel39;\n        long nextLevel41 = nextLevel40;\n        long nextLevel42\
    \ = nextLevel41;\n        long nextLevel43 = nextLevel42;\n        long nextLevel44\
    \ = nextLevel43;\n        long nextLevel45 = nextLevel44;\n        long nextLevel46\
    \ = nextLevel45;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0)\
    \ ? n + 1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd\
    \ + 1;\n        long nextOddEvenEven = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven\
    \ + 1;\n        long nextOddEvenEvenEven = (nextOddEvenEven%2 == 0) ? nextOddEvenEven\
    \ : nextOddEvenEven + 1;\n        long nextOddEvenEvenEvenEven = (nextOddEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEven : nextOddEvenEvenEven + 1;\n        long nextOddEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven\
    \ + 1;\n        long nextOddEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven + 1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEven%2 ==\
    \ 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven + 1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven\
    \ + 1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven + 1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven + 1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven + 1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEvenEven ", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2 ==\
    \ 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        while(nextLevel > 0) {\n            result.add(nextLevel);\n\
    \            nextLevel = nextEven;\n            nextEven = (nextEven%2 == 0) ?\
    \ nextEven+1 : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 1) ? n : n + 1;\n        long nextLevel = nextOdd;\n        long nextLevel2\
    \ = nextEven;\n        long nextLevel3 = nextLevel;\n        long nextLevel4 =\
    \ nextLevel3;\n        long nextLevel5 = nextLevel4;\n        long nextLevel6\
    \ = nextLevel5;\n        long nextLevel7 = nextLevel6;\n        long nextLevel8\
    \ = nextLevel7;\n        long nextLevel9 = nextLevel8;\n        long nextLevel10\
    \ = nextLevel9;\n        long nextLevel11 = nextLevel10;\n        long nextLevel12\
    \ = nextLevel11;\n        long nextLevel13 = nextLevel12;\n        long nextLevel14\
    \ = nextLevel13;\n        long nextLevel15 = nextLevel14;\n        long nextLevel16\
    \ = nextLevel15;\n        long nextLevel17 = nextLevel16;\n        long nextLevel18\
    \ = nextLevel17;\n        long nextLevel19 = nextLevel18;\n        long nextLevel20\
    \ = nextLevel19;\n        long nextLevel21 = nextLevel20;\n        long nextLevel22\
    \ = nextLevel21;\n        long nextLevel23 = nextLevel22;\n        long nextLevel24\
    \ = nextLevel23;\n        long nextLevel25 = nextLevel24;\n        long nextLevel26\
    \ = nextLevel25;\n        long nextLevel27 = nextLevel26;\n        long nextLevel28\
    \ = nextLevel27;\n        long nextLevel29 = nextLevel28;\n        long nextLevel30\
    \ = nextLevel29;\n        long nextLevel31 = nextLevel30;\n        long nextLevel32\
    \ = nextLevel31;\n        long nextLevel33 = nextLevel32;\n        long nextLevel34\
    \ = nextLevel33;\n        long nextLevel35 = nextLevel34;\n        long nextLevel36\
    \ = nextLevel35;\n        long nextLevel37 = nextLevel36;\n        long nextLevel38\
    \ = nextLevel37;\n        long nextLevel39 = nextLevel38;\n        long nextLevel40\
    \ = nextLevel39;\n        long nextLevel41 = nextLevel40;\n        long nextLevel42\
    \ = nextLevel41;\n        long nextLevel43 = nextLevel42;\n        long nextLevel44\
    \ = nextLevel43;\n        long nextLevel45 = nextLevel44;\n        long nextLevel46\
    \ = nextLevel45", "        ArrayList<Long> result = new ArrayList<>();\n     \
    \   long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ?\
    \ n+1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n\
    \        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel = nextEven;\n            nextLevelCount += 2;\n       \
    \     nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel >\
    \ 0) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+2);\n        long nextOddEven = (n%2 == 0) ? n : (n+3);\n   \
    \     long nextOddEvenOdd = (n%2 == 0) ? n : (n+4);\n        long nextOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+5);\n        long nextOddEvenOddEvenOdd = (n%2 == 0) ?\
    \ n : (n+6);\n        long nextOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+7);\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+8);\n       \
    \ long nextOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+9);\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+10);\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+11);\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+12);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n\
    \ : (n+13);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ (n%2 == 0) ? n : (n+14);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+15);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+16);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+17);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+18);\n        long nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextLevel = nextOdd;\n        while(nextLevel > 0) {\n            result.add(nextLevel);\n\
    \            nextLevel = nextEven;\n            nextEven = (nextEven%2 == 0) ?\
    \ nextEven+1 : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long currentLevel = 1;\n        long nextLevel = 1;\n        long\
    \ nextLevelSum = 0;\n        long nextLevelSumOdd = 0;\n        long nextLevelSumEven\
    \ = 0;\n        long nextLevelSumOddEven = 0;\n        long nextLevelSumOddEvenOdd\
    \ = 0;\n        long nextLevelSumOddEvenOddEven = 0;\n        long nextLevelSumOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEven = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelSumOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n    \
    \    long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven =\
    \ 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n : (n+2);\n      \
    \  long nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n\
    \        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n \
    \       long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 1) ? n : n + 1;\n        long nextEven = (n%2 == 0) ? n : n + 1;\n      \
    \  long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n        while(nextLevelCount\
    \ <= n) {\n            result.add(nextLevelCount);\n            nextLevel += nextEven;\n\
    \            nextLevelCount += nextEven;\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n  \
    \          result.add(0);\n            return result;\n        }\n        ArrayList<Long>\
    \ level = new ArrayList<>();\n        level.add(n);\n        long nextLevel =\
    \ n;\n        long nextOdd = 0;\n        long nextEven = 0;\n        while (nextLevel\
    \ > 0) {\n            long nextLevelOdd = nextLevel % 2 == 0 ? nextLevel : nextLevel\
    \ - 1;\n            long nextLevelEven = nextLevel % 2 == 0 ? nextLevel + 1 :\
    \ nextLevel;\n            if (nextLevelOdd > nextLevelEven) {\n              \
    \  nextOdd = nextLevelOdd;\n                nextEven = nextLevelEven;\n      \
    \      } else {\n                nextOdd = nextLevelEven;\n                nextEven\
    \ = nextLevelOdd;\n            }\n            level.add(nextOdd);\n          \
    \  level.add(nextEven);\n            nextLevel = nextOdd + nextEven;\n       \
    \ }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 1) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+1);\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while (nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextEven;\n\
    \            nextLevel += nextOdd;\n            nextLevelCount += nextOdd;\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n \
    \       if (n % 2 == 0) {\n            result.add(nextEven);\n        } else {\n\
    \            result.add(nextOdd);\n        }\n        return result;\n", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextLevel = 1;\n        long currentLevel\
    \ = 1;\n        long currentStones = 1;\n        long currentStonesCount = 0;\n\
    \        long currentStonesCountEven = 0;\n        long currentStonesCountOdd\
    \ = 0;\n        long currentStonesCountEvenEven = 0;\n        long currentStonesCountEvenOdd\
    \ = 0;\n        long currentStonesCountOddOdd = 0;\n        long currentStonesCountEvenEvenEven\
    \ = 0;\n        long currentStonesCountEvenOddOdd = 0;\n        long currentStonesCountOddEvenOdd\
    \ = 0;\n        long currentStonesCountEvenEvenEvenEven = 0;\n        long currentStonesCountEvenOddOdd\
    \ = 0;\n        long currentStonesCountOddEvenOdd = 0;\n        long currentStonesCountEvenEvenEvenEven\
    \ = 0;\n        long currentStonesCountEvenOddOdd = 0;\n        long currentStonesCountOddEvenOdd\
    \ = 0;\n        long currentStonesCountEvenEvenEvenEven = 0;\n        long currentStonesCountEvenOddOdd\
    \ = 0;\n        long currentStonesCountOddEvenOdd = 0;\n        long currentStonesCountEvenEvenEvenEven\
    \ = 0;\n        long currentStonesCountEvenOddOdd = 0;\n        long currentStonesCountOddEvenOdd\
    \ = 0;\n        long currentStonesCountEvenEvenEvenEven = 0;\n        long currentStonesCountEvenOddOdd\
    \ = 0;\n        long currentStonesCountOddEvenOdd = 0;\n        long currentStonesCountEvenEvenEvenEven\
    \ = 0;\n        long currentStonesCountEvenOddOdd = 0;\n        long currentStonesCountOddEvenOdd\
    \ = 0;\n        long currentStonesCountEvenEvenEvenEven = 0;\n        long currentStonesCountEvenOddOdd\
    \ = 0;\n        long currentStonesCountOddEvenOdd = 0;\n        long currentStonesCountEvenEvenEvenEven\
    \ = 0;\n        long currentStonesCountEvenOddOdd = 0;\n        long currentStonesCountOddEvenOdd\
    \ = 0;\n        long currentStonesCountEvenEvenEvenEven = 0;\n        long currentStonesCountEvenOddOdd\
    \ = 0;\n        long currentStonesCountOdd", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextLevel = n;\n        long nextLevelCount = 1;\n        long nextLevelCountOdd\
    \ = 1;\n        long nextLevelCountEven = 1;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextEven++;\n        \
    \    } else {\n                nextOdd++;\n            }\n            nextLevel--;\n\
    \        }\n        if (nextLevel % 2 == 0) {\n            nextEven++;\n     \
    \   } else {\n            nextOdd++;\n        }\n        nextLevel = nextLevel\
    \ - nextOdd - nextEven;\n        while (nextLevel > 0) {\n            if (nextLevel\
    \ % 2 == 0) {\n                nextEven++;\n            } else {\n           \
    \     nextOdd++;\n            }\n            nextLevel--;\n        }\n       \
    \ if (nextLevel % 2 == 0) {\n            nextEven++;\n        } else {\n     \
    \       nextOdd++;\n        }\n        nextLevel = nextLevel - nextOdd - nextEven;\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            nextEven++;\n            } else {\n                nextOdd++;\n \
    \           }\n            nextLevel--;\n        }\n        if (nextLevel % 2\
    \ == 0) {\n            nextEven++;\n        } else {\n            nextOdd++;\n\
    \        }\n        nextLevel = nextLevel - nextOdd - nextEven;\n        while\
    \ (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n                nextEven++;\n\
    \            } else {\n                nextOdd++;\n            }\n           \
    \ nextLevel--;\n        }\n        if (nextLevel % 2 == 0) {\n            nextEven++;\n\
    \        } else {\n            nextOdd++;\n        }\n        nextLevel = nextLevel\
    \ - nextOdd - nextEven;\n        while (nextLevel > 0) {\n            if (nextLevel\
    \ % 2 == 0) {\n                nextEven++;\n            } else {\n           \
    \     nextOdd++;\n            }\n            nextLevel--;\n        }\n       \
    \ if (nextLevel % 2 == 0) {\n            nextEven++;\n        } else {\n     \
    \       nextOdd++;\n        }\n        nextLevel = nextLevel - nextOdd - nextEven;\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            nextEven++;\n            } else {\n                nextOdd++;\n \
    \           }\n            nextLevel--;\n        }\n        if (nextLevel % 2\
    \ == 0) {\n            nextEven++;\n        } else {\n            nextOdd++;\n\
    \        }\n        nextLevel = nextLevel - nextOdd - nextEven;\n        while\
    \ (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n                nextEven++;\n\
    \            } else {\n                nextOdd++;\n            }\n           \
    \ nextLevel--;\n        }\n        if (nextLevel % 2 == 0) {\n            nextEven++;\n\
    \        } else {\n            nextOdd", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : n+1;\n        long nextEven\
    \ = (n%2 == 0) ? n : n+1;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd\
    \ : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2 == 1) ? nextOddEven\
    \ : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0)\
    \ ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 1) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 1)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 1) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 1) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : ", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long currentLevel = 1;\n        long currentStones = n;\n    \
    \    long nextLevelStones = n;\n        while(currentStones > 0) {\n         \
    \   if(n % 2 == 0) {\n                nextEven = nextEven + 1;\n             \
    \   currentStones = currentStones >> 1;\n            } else {\n              \
    \  nextOdd = nextOdd + 1;\n                currentStones = currentStones >> 1;\n\
    \            }\n            currentLevel = currentLevel + 1;\n            result.add(currentLevel);\n\
    \            nextLevelStones = nextLevelStones >> 1;\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        if\
    \ (n == 0) {\n            result.add(0);\n            return result;\n       \
    \ }\n        ArrayList<Long> level1 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level2 = makeAPile(n/2);\n        ArrayList<Long> level3 = makeAPile(n/2);\n\
    \        ArrayList<Long> level4 = makeAPile(n/2);\n        ArrayList<Long> level5\
    \ = makeAPile(n/2);\n        ArrayList<Long> level6 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level7 = makeAPile(n/2);\n        ArrayList<Long> level8 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level9 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level10 = makeAPile(n/2);\n        ArrayList<Long> level11 = makeAPile(n/2);\n\
    \        ArrayList<Long> level12 = makeAPile(n/2);\n        ArrayList<Long> level13\
    \ = makeAPile(n/2);\n        ArrayList<Long> level14 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level15 = makeAPile(n/2);\n        ArrayList<Long> level16\
    \ = makeAPile(n/2);\n        ArrayList<Long> level17 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level18 = makeAPile(n/2);\n        ArrayList<Long> level19\
    \ = makeAPile(n/2);\n        ArrayList<Long> level20 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level21 = makeAPile(n/2);\n        ArrayList<Long> level22\
    \ = makeAPile(n/2);\n        ArrayList<Long> level23 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level24 = makeAPile(n/2);\n        ArrayList<Long> level25\
    \ = makeAPile(n/2);\n        ArrayList<Long> level26 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level27 = makeAPile(n/2);\n        ArrayList<Long> level28\
    \ = makeAPile(n/2);\n        ArrayList<Long> level29 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level30 = makeAPile(n/2);\n        ArrayList<Long> level31\
    \ = makeAPile(n/2);\n        ArrayList<Long> level32 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level33 = makeAPile(n/2);\n        ArrayList<Long> level34\
    \ = makeAPile(n/2);\n        ArrayList<Long> level35 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level36 = makeAPile(n/", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        if (n == 0) {\n            result.add(0);\n    \
    \        return result;\n        }\n        ArrayList<Long> level1 = makeAPile(n/2);\n\
    \        ArrayList<Long> level2 = makeAPile(n/2);\n        ArrayList<Long> level3\
    \ = makeAPile(n/2);\n        ArrayList<Long> level4 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level5 = makeAPile(n/2);\n        ArrayList<Long> level6 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level7 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level8 = makeAPile(n/2);\n        ArrayList<Long> level9 = makeAPile(n/2);\n\
    \        ArrayList<Long> level10 = makeAPile(n/2);\n        ArrayList<Long> level11\
    \ = makeAPile(n/2);\n        ArrayList<Long> level12 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level13 = makeAPile(n/2);\n        ArrayList<Long> level14\
    \ = makeAPile(n/2);\n        ArrayList<Long> level15 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level16 = makeAPile(n/2);\n        ArrayList<Long> level17\
    \ = makeAPile(n/2);\n        ArrayList<Long> level18 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level19 = makeAPile(n/2);\n        ArrayList<Long> level20\
    \ = makeAPile(n/2);\n        ArrayList<Long> level21 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level22 = makeAPile(n/2);\n        ArrayList<Long> level23\
    \ = makeAPile(n/2);\n        ArrayList<Long> level24 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level25 = makeAPile(n/2);\n        ArrayList<Long> level26\
    \ = makeAPile(n/2);\n        ArrayList<Long> level27 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level28 = makeAPile(n/2);\n        ArrayList<Long> level29\
    \ = makeAPile(n/2);\n        ArrayList<Long> level30 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level31 = makeAPile(n/2);\n        ArrayList<Long> level32\
    \ = makeAPile(n/2);\n        ArrayList<Long> level33 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level34 = makeAPile(n/2);\n        ArrayList<Long> level35\
    \ = makeAPile(n/2);\n        ArrayList<Long> level36 = makeAPile(n/", "      \
    \  ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n      \
    \      result.add(0L);\n            return result;\n        }\n        ArrayList<Long>\
    \ level = new ArrayList<>();\n        level.add(0L);\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        while (n > 0) {\n            long nextLevel\
    \ = nextOdd + (nextEven << 1);\n            if (nextLevel % 2 == 0) {\n      \
    \          nextEven = nextLevel;\n            } else {\n                nextOdd\
    \ = nextLevel;\n            }\n            level.add(nextLevel);\n           \
    \ n -= 1;\n        }\n        result.addAll(level);\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextEven = n\
    \ / 2;\n        long nextOdd = n % 2;\n        if (nextEven % 2 == 0) {\n    \
    \        nextEven = nextEven + 1;\n        }\n        if (nextOdd % 2 == 0) {\n\
    \            nextOdd = nextOdd + 1;\n        }\n        result.add(nextEven);\n\
    \        result.add(nextOdd);\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long currentLevel = 1;\n        long nextLevel = 1;\n        long\
    \ currentStones = n;\n        long nextStones = n;\n        long currentStonesSum\
    \ = 0;\n        long nextStonesSum = 0;\n        while(currentStones > 0) {\n\
    \            currentStonesSum += currentStones;\n            currentStones = nextStones;\n\
    \            nextStones = nextStonesSum;\n            nextStonesSum = nextOdd;\n\
    \            nextOdd = nextEven;\n            nextEven = nextOdd * 2;\n      \
    \      currentLevel++;\n            if(currentLevel > n) {\n                currentLevel\
    \ = 1;\n                nextLevel++;\n            }\n        }\n        while(currentLevel\
    \ > 0) {\n            result.add(currentStonesSum);\n            currentStonesSum\
    \ = nextStonesSum;\n            currentStones = nextStones;\n            nextStones\
    \ = nextStonesSum;\n            nextStonesSum = nextOdd;\n            nextOdd\
    \ = nextEven;\n            nextEven = nextOdd * 2;\n            currentLevel--;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextLevel\
    \ = n;\n        long nextLevelCount = 1;\n        while (nextLevel > 0) {\n  \
    \          if (nextLevel % 2 == 0) {\n                nextEven++;\n          \
    \  } else {\n                nextOdd++;\n            }\n            nextLevel--;\n\
    \        }\n        result.add(nextLevelCount);\n        while (nextLevel > 0)\
    \ {\n            if (nextLevel % 2 == 0) {\n                nextEven++;\n    \
    \        } else {\n                nextOdd++;\n            }\n            nextLevel--;\n\
    \            nextLevelCount++;\n            result.add(nextLevelCount);\n    \
    \    }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 1) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+1);\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextOdd;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextEven;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : (n+1);\n\
    \        long nextEven = (n%2 == 0) ? n : (n+2);\n        long nextOddEven = (n%2\
    \ == 0) ? n : (n+3);\n        long nextOddEvenOdd = (n%2 == 0) ? n : (n+4);\n\
    \        long nextOddEvenOddEven = (n%2 == 0) ? n : (n+5);\n        long nextOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+6);\n        long nextOddEvenOddEvenOddEven = (n%2 ==\
    \ 0) ? n : (n+7);\n        long nextOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n\
    \ : (n+8);\n        long nextOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+9);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+10);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+11);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+12);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n\
    \ : (n+13);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ (n%2 == 0) ? n : (n+14);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+15);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+16);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+17);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+18);\n        long nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long\
    \ nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ : next", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextNextOdd = 0;\n  \
    \      long nextNextEven = 0;\n        long nextNextNextOdd = 0;\n        long\
    \ nextNextNextEven = 0;\n        long nextNextNextNextOdd = 0;\n        long nextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNext",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n\
    \ + 1) / 2;\n        long nextEven = (n + 1) >> 1;\n        long nextLevel = nextOdd;\n\
    \        long currentLevel = 1;\n        while (currentLevel <= n) {\n       \
    \     result.add(nextLevel);\n            nextLevel = nextEven;\n            nextEven\
    \ = (nextEven + nextOdd) >> 1;\n            currentLevel++;\n        }\n     \
    \   return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : (n+1);\n\
    \        long nextEven = (n%2 == 0) ? n : (n+1);\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevel = nextEven;\n    \
    \        nextLevelCount += 2;\n            nextEven = (nextEven%2 == 0) ? nextEven\
    \ : nextEven+1;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n + 1;\n\
    \        long nextEven = (n%2 == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevel += nextEven;\n   \
    \         nextLevelCount += nextOdd;\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long currentLevel = 1;\n        long nextLevel\
    \ = 1;\n        long nextLevelSum = 0;\n        long currentSum = 0;\n       \
    \ long currentSumOfNextLevel = 0;\n        long currentSumOfNextLevelSum = 0;\n\
    \        long currentSumOfNextLevelSumOfNextLevel = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentSumOfNextLevelSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 1) ? n : n+1;\n        long nextOddEven = nextOdd + nextEven;\n        long\
    \ nextOddEvenOdd = nextOddEven + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd\
    \ + nextOddEven;\n        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0) ? n + 1 : n;\n      \
    \  long nextLevel = nextOdd;\n        long currentLevel = 1;\n        while(currentLevel\
    \ <= n) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (n%2 == 0) ? nextEven + 1 : nextEven;\n            currentLevel++;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 1) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+1);\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += 2;\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long nextOdd\
    \ = n / 2;\n        long nextEven = n % 2;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        if (nextOdd > 0) {\n            result.add(nextOdd);\n\
    \        }\n        if (nextEven > 0) {\n            result.add(nextEven);\n \
    \       }\n        if (nextOddEven > 0) {\n            result.add(nextOddEven);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        if (n > 0) {\n\
    \            while (n > 0) {\n                nextOdd = nextOdd * 2 + 1;\n   \
    \             nextEven = nextEven * 2 + 1;\n                result.add(nextOdd);\n\
    \                result.add(nextEven);\n                n = n - 2;\n         \
    \   }\n        }\n        return result;\n", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n        long\
    \ nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n      \
    \  long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n          \
    \  result.add(nextLevelCount);\n            nextLevel += nextEven;\n         \
    \   nextLevelCount += 2;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextEven = n;\n        long nextOdd\
    \ = n;\n        while (nextEven > 0 || nextOdd > 0) {\n            if (nextEven\
    \ % 2 == 0) {\n                nextEven = nextEven / 2;\n                result.add(nextEven);\n\
    \            } else {\n                nextOdd = nextOdd / 2;\n              \
    \  result.add(nextOdd);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel >\
    \ 0) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextEven = n / 2;\n        long nextOdd = n % 2;\n        if (nextEven\
    \ % 2 == 0) {\n            result.add(nextEven);\n        }\n        if (nextOdd\
    \ % 2 == 0) {\n            result.add(nextOdd);\n        }\n        if (nextEven\
    \ % 2 != 0) {\n            result.add(nextEven + 1);\n        }\n        if (nextOdd\
    \ % 2 != 0) {\n            result.add(nextOdd + 1);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextEven = n;\n        long nextOdd\
    \ = nextEven + 1;\n        long nextNextEven = nextOdd + 1;\n        long nextNextOdd\
    \ = nextNextEven + 1;\n        long nextNextNextEven = nextNextOdd + 1;\n    \
    \    long nextNextNextOdd = nextNextNextEven + 1;\n        long nextNextNextNextEven\
    \ = nextNextNextOdd + 1;\n        long nextNextNextNextOdd = nextNextNextNextEven\
    \ + 1;\n        long nextNextNextNextNextEven = nextNextNextNextOdd + 1;\n   \
    \     long nextNextNextNextNextOdd = nextNextNextNextNextEven + 1;\n        long\
    \ nextNextNextNextNextNextEven = nextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNextNextNextNextNextNextNextEven + 1;\n        long nextNextNextNextNextNextNextNextNextNextNextEven\
    \ = nextNextNextNextNextNextNextNextNextNextNextNextOdd + 1;\n        long nextNextNextNextNextNextNextNextNextNextNextOdd\
    \ = nextNextNextNextNextNext", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 1) ? n : n+1;\n        long nextOddEven = (nextOdd%2 == nextEven) ? nextOdd\
    \ : nextEven;\n        long nextOddEvenOdd = (nextOddEven%2 == nextOdd) ? nextOddEven\
    \ : nextOdd;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2 == nextOddEven)\
    \ ? nextOddEvenOdd : nextOddEven;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == nextOddEvenOdd) ? nextOddEvenOddEven : nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == nextOddEvenOddEven) ? nextOddEvenOddEvenOdd :\
    \ nextOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEvenOdd) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEvenOddEven) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEvenOddEvenOdd) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEvenOddEvenOddEvenOdd) ? nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 1) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+1);\n        long nextOddEven = nextOdd + nextEven;\n       \
    \ long nextOddEvenOdd = nextOddEven + nextOdd;\n        long nextOddEvenOddEven\
    \ = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd = nextOddEvenOddEven\
    \ + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextO", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long nextEven = n / 2;\n        long nextOdd = n % 2 == 0 ? nextEven :\
    \ nextEven + 1;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while (nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextOdd;\n            nextLevelCount += nextEven;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenNextOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenNextOddNextOdd = (nextOddEvenNextOdd%2 == 0) ? nextOddEvenNextOdd\
    \ : nextOddEvenNextOdd+1;\n        long nextOddEvenNextOddNextOddNextOdd = (nextOddEvenNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOdd : nextOddEvenNextOddNextOdd+1;\n        long\
    \ nextOddEvenNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOddNextOddNextOddNextO",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == nextEven) ? nextOdd : nextEven;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == nextOdd) ? nextOddEven : nextOdd;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == nextOddEven) ? nextOddEvenOdd : nextOddEven;\n      \
    \  long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == nextOddEvenOdd) ? nextOddEvenOddEven\
    \ : nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEven) ? nextOddEvenOddEvenOdd : nextOddEvenOddEven;\n     \
    \   long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2 == nextOddEvenOddEvenOdd)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == nextOddEvenOddEvenOddEven) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == nextOddEvenOddEvenOddEvenOdd) ?\
    \ nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOdd;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == nextOddEvenOddEvenOddEvenOddEvenOdd) ? nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextNextOdd\
    \ = 0;\n        long nextNextEven = 0;\n        long nextNextNextOdd = 0;\n  \
    \      long nextNextNextEven = 0;\n        long nextNextNextNextOdd = 0;\n   \
    \     long nextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd = 0;\n\
    \        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNext", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n        long\
    \ nextEven = (n%2 == 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0)\
    \ ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2 == 0) ?\
    \ nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2\
    \ == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ : nextO", "        ArrayList<Long> result = new ArrayList<>();\n        if (n\
    \ == 0) {\n            result.add(0);\n            return result;\n        }\n\
    \        long nextOdd = nextOdd(n);\n        long nextEven = nextEven(n);\n  \
    \      ArrayList<Long> nextLevel = new ArrayList<>();\n        nextLevel.add(nextOdd);\n\
    \        nextLevel.add(nextEven);\n        ArrayList<Long> nextLevel2 = new ArrayList<>();\n\
    \        nextLevel2.add(nextOdd);\n        nextLevel2.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel3 = new ArrayList<>();\n        nextLevel3.add(nextOdd);\n\
    \        nextLevel3.add(nextEven);\n        ArrayList<Long> nextLevel4 = new ArrayList<>();\n\
    \        nextLevel4.add(nextOdd);\n        nextLevel4.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel5 = new ArrayList<>();\n        nextLevel5.add(nextOdd);\n\
    \        nextLevel5.add(nextEven);\n        ArrayList<Long> nextLevel6 = new ArrayList<>();\n\
    \        nextLevel6.add(nextOdd);\n        nextLevel6.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel7 = new ArrayList<>();\n        nextLevel7.add(nextOdd);\n\
    \        nextLevel7.add(nextEven);\n        ArrayList<Long> nextLevel8 = new ArrayList<>();\n\
    \        nextLevel8.add(nextOdd);\n        nextLevel8.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel9 = new ArrayList<>();\n        nextLevel9.add(nextOdd);\n\
    \        nextLevel9.add(nextEven);\n        ArrayList<Long> nextLevel10 = new\
    \ ArrayList<>();\n        nextLevel10.add(nextOdd);\n        nextLevel10.add(nextEven);\n\
    \        ArrayList<Long> nextLevel11 = new ArrayList<>();\n        nextLevel11.add(nextOdd);\n\
    \        nextLevel11.add(nextEven);\n        ArrayList<Long> nextLevel12 = new\
    \ ArrayList<>();\n        nextLevel12.add(nextOdd);\n        nextLevel12.add(nextEven);\n\
    \        ArrayList<Long> nextLevel13 = new ArrayList<>();\n        nextLevel13.add(nextOdd);\n\
    \        nextLevel13.add(nextEven);\n        ArrayList<Long> nextLevel14 = new\
    \ ArrayList<>();\n        nextLevel14.add(nextOdd);\n        nextLevel14.add(nextEven);\n\
    \        ArrayList<Long> nextLevel15 = new ArrayList<>();\n        nextLevel15.add(nextOdd);\n\
    \        nextLevel15.add(nextEven);\n        ArrayList<Long> nextLevel16 = new\
    \ ArrayList<>();\n        nextLevel16.add(nextOdd);\n        nextLevel16.add(nextEven);\n\
    \        ArrayList<Long> nextLevel17 = new ArrayList<>();\n        nextLevel17.add(nextOdd);\n\
    \        nextLevel17", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd :\
    \ nextOdd + 1;\n        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven\
    \ : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0)\
    \ ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextEven = n;\n        long nextOdd\
    \ = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd = n;\n    \
    \    long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd = n;\n \
    \       long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOdd", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n        long\
    \ nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n      \
    \  long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n          \
    \  result.add(nextLevelCount);\n            nextLevel = nextEven;\n          \
    \  nextLevelCount += 2;\n            nextEven = (nextEven%2 == 0) ? nextEven+1\
    \ : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        if (n % 2 == 0) {\n            nextEven = n;\n        } else {\n\
    \            nextOdd = n;\n        }\n        long nextLevel = nextOdd;\n    \
    \    while (nextLevel > 0) {\n            result.add(nextLevel);\n           \
    \ nextLevel = nextOdd;\n            if (nextLevel % 2 == 0) {\n              \
    \  nextLevel += nextEven;\n                nextEven = 0;\n            } else {\n\
    \                nextLevel += nextEven;\n                nextEven = nextOdd;\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 1) >> 1;\n        if (n % 2 == 0) {\n            result.add(nextEven);\n\
    \        } else {\n            result.add(nextOdd);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n :\
    \ (n-1);\n        long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n\
    \        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextOdd;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0L);\n            return result;\n\
    \        }\n        long nextOdd = (n + 1) >> 1;\n        long nextEven = n >>\
    \ 1;\n        result.add(nextOdd);\n        result.add(nextEven);\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextEven = n;\n        long nextOdd = n;\n        long nextEvenCount = 0;\n\
    \        long nextOddCount = 0;\n        long nextEvenCount2 = 0;\n        long\
    \ nextOddCount2 = 0;\n        long nextEvenCount3 = 0;\n        long nextOddCount3\
    \ = 0;\n        long nextEvenCount4 = 0;\n        long nextOddCount4 = 0;\n  \
    \      long nextEvenCount5 = 0;\n        long nextOddCount5 = 0;\n        long\
    \ nextEvenCount6 = 0;\n        long nextOddCount6 = 0;\n        long nextEvenCount7\
    \ = 0;\n        long nextOddCount7 = 0;\n        long nextEvenCount8 = 0;\n  \
    \      long nextOddCount8 = 0;\n        long nextEvenCount9 = 0;\n        long\
    \ nextOddCount9 = 0;\n        long nextEvenCount10 = 0;\n        long nextOddCount10\
    \ = 0;\n        long nextEvenCount11 = 0;\n        long nextOddCount11 = 0;\n\
    \        long nextEvenCount12 = 0;\n        long nextOddCount12 = 0;\n       \
    \ long nextEvenCount13 = 0;\n        long nextOddCount13 = 0;\n        long nextEvenCount14\
    \ = 0;\n        long nextOddCount14 = 0;\n        long nextEvenCount15 = 0;\n\
    \        long nextOddCount15 = 0;\n        long nextEvenCount16 = 0;\n       \
    \ long nextOddCount16 = 0;\n        long nextEvenCount17 = 0;\n        long nextOddCount17\
    \ = 0;\n        long nextEvenCount18 = 0;\n        long nextOddCount18 = 0;\n\
    \        long nextEvenCount19 = 0;\n        long nextOddCount19 = 0;\n       \
    \ long nextEvenCount20 = 0;\n        long nextOddCount20 = 0;\n        long nextEvenCount21\
    \ = 0;\n        long nextOddCount21 = 0;\n        long nextEvenCount22 = 0;\n\
    \        long nextOddCount22 = 0;\n        long nextEvenCount23 = 0;\n       \
    \ long nextOddCount23 = 0;\n        long nextEvenCount24 = 0;\n        long nextOddCount24\
    \ = 0;\n        long nextEvenCount25 = 0;\n        long nextOddCount25 = 0;\n\
    \        long nextEvenCount26 = 0;\n        long nextOddCount26 = 0;\n       \
    \ long nextEvenCount27 = 0;\n        long nextOddCount27 = 0;\n        long nextEvenCount28\
    \ = 0;\n        long nextOddCount28 = 0;\n        long nextEvenCount29 = 0;\n\
    \        long nextOddCount29 = 0;\n        long nextEvenCount", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n : n+1;\n        long nextOddEven = (nextOdd%2\
    \ == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2 ==\
    \ 1) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2\
    \ == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEven%2 == 1) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2\
    \ == 1) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEven%2 == 1) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2 == 1) ? nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ : ", "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextLevel = 0;\n        long\
    \ currentLevel = 0;\n        long currentCount = 0;\n        long currentSum =\
    \ 0;\n        long nextSum = 0;\n        long nextCount = 0;\n        long nextSumOfNextLevel\
    \ = 0;\n        long nextSumOfCurrentLevel = 0;\n        long nextSumOfNextLevelAndCurrentLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevel = 0;\n    \
    \    long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevel = 0;\n   \
    \     long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long nextSumOfNextLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenNextOdd\
    \ = (nextEven%2 == 0) ? nextEven : nextEven+1;\n        long nextOddEvenNextOddNextOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenNextOddNextOddNextOdd\
    \ = (nextOddEvenNextOdd%2 == 0) ? nextOddEvenNextOdd : nextOddEvenNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOdd : nextOddEvenNextOddNextOdd+1;\n        long\
    \ nextOddEvenNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOddNextOdd = (nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd%2\
    \ == 0) ? nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd : nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOdd+1;\n\
    \        long nextOddEvenNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOdd\
    \ = (nextOddEvenNextOddNextOddNextO", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextLevel = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven\
    \ = 0;\n        long nextLevelOddEven = 0;\n        long nextLevelOddEvenOdd =\
    \ 0;\n        long nextLevelOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n  \
    \      long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n       \
    \ long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n  \
    \          result.add(0);\n            return result;\n        }\n        ArrayList<Long>\
    \ level = new ArrayList<>();\n        ArrayList<Long> nextLevel = new ArrayList<>();\n\
    \        long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n    \
    \    long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n  \
    \      long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddOddOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOddOddOdd = 0;\n        long nextLevelCountEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        while(nextLevel > 0) {\n            result.add(nextLevel);\n\
    \            nextLevel = nextEven;\n            nextEven = (nextEven%2 == 0) ?\
    \ nextEven+1 : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n + 1;\n\
    \        long nextEven = (n%2 == 0) ? n + 1 : n;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOdd;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long\
    \ nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long\
    \ nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        long nextLevel2 =\
    \ nextEven;\n        long nextLevel3 = nextLevel2;\n        long nextLevel4 =\
    \ nextLevel3;\n        long nextLevel5 = nextLevel4;\n        long nextLevel6\
    \ = nextLevel5;\n        long nextLevel7 = nextLevel6;\n        long nextLevel8\
    \ = nextLevel7;\n        long nextLevel9 = nextLevel8;\n        long nextLevel10\
    \ = nextLevel9;\n        long nextLevel11 = nextLevel10;\n        long nextLevel12\
    \ = nextLevel11;\n        long nextLevel13 = nextLevel12;\n        long nextLevel14\
    \ = nextLevel13;\n        long nextLevel15 = nextLevel14;\n        long nextLevel16\
    \ = nextLevel15;\n        long nextLevel17 = nextLevel16;\n        long nextLevel18\
    \ = nextLevel17;\n        long nextLevel19 = nextLevel18;\n        long nextLevel20\
    \ = nextLevel19;\n        long nextLevel21 = nextLevel20;\n        long nextLevel22\
    \ = nextLevel21;\n        long nextLevel23 = nextLevel22;\n        long nextLevel24\
    \ = nextLevel23;\n        long nextLevel25 = nextLevel24;\n        long nextLevel26\
    \ = nextLevel25;\n        long nextLevel27 = nextLevel26;\n        long nextLevel28\
    \ = nextLevel27;\n        long nextLevel29 = nextLevel28;\n        long nextLevel30\
    \ = nextLevel29;\n        long nextLevel31 = nextLevel30;\n        long nextLevel32\
    \ = nextLevel31;\n        long nextLevel33 = nextLevel32;\n        long nextLevel34\
    \ = nextLevel33;\n        long nextLevel35 = nextLevel34;\n        long nextLevel36\
    \ = nextLevel35;\n        long nextLevel37 = nextLevel36;\n        long nextLevel38\
    \ = nextLevel37;\n        long nextLevel39 = nextLevel38;\n        long nextLevel40\
    \ = nextLevel39;\n        long nextLevel41 = nextLevel40;\n        long nextLevel42\
    \ = nextLevel41;\n        long nextLevel43 = nextLevel42;\n        long nextLevel44\
    \ = nextLevel43;\n        long nextLevel45 = nextLevel44;\n        long nextLevel46\
    \ = nextLevel45;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 == 0)\
    \ ? n+1 : n;\n        long nextLevel = nextOdd;\n        long nextLevel2 = nextEven;\n\
    \        long nextLevel3 = nextLevel2;\n        long nextLevel4 = nextLevel3;\n\
    \        long nextLevel5 = nextLevel4;\n        long nextLevel6 = nextLevel5;\n\
    \        long nextLevel7 = nextLevel6;\n        long nextLevel8 = nextLevel7;\n\
    \        long nextLevel9 = nextLevel8;\n        long nextLevel10 = nextLevel9;\n\
    \        long nextLevel11 = nextLevel10;\n        long nextLevel12 = nextLevel11;\n\
    \        long nextLevel13 = nextLevel12;\n        long nextLevel14 = nextLevel13;\n\
    \        long nextLevel15 = nextLevel14;\n        long nextLevel16 = nextLevel15;\n\
    \        long nextLevel17 = nextLevel16;\n        long nextLevel18 = nextLevel17;\n\
    \        long nextLevel19 = nextLevel18;\n        long nextLevel20 = nextLevel19;\n\
    \        long nextLevel21 = nextLevel20;\n        long nextLevel22 = nextLevel21;\n\
    \        long nextLevel23 = nextLevel22;\n        long nextLevel24 = nextLevel23;\n\
    \        long nextLevel25 = nextLevel24;\n        long nextLevel26 = nextLevel25;\n\
    \        long nextLevel27 = nextLevel26;\n        long nextLevel28 = nextLevel27;\n\
    \        long nextLevel29 = nextLevel28;\n        long nextLevel30 = nextLevel29;\n\
    \        long nextLevel31 = nextLevel30;\n        long nextLevel32 = nextLevel31;\n\
    \        long nextLevel33 = nextLevel32;\n        long nextLevel34 = nextLevel33;\n\
    \        long nextLevel35 = nextLevel34;\n        long nextLevel36 = nextLevel35;\n\
    \        long nextLevel37 = nextLevel36;\n        long nextLevel38 = nextLevel37;\n\
    \        long nextLevel39 = nextLevel38;\n        long nextLevel40 = nextLevel39;\n\
    \        long nextLevel41 = nextLevel40;\n        long nextLevel42 = nextLevel41;\n\
    \        long nextLevel43 = nextLevel42;\n        long nextLevel44 = nextLevel43;\n\
    \        long nextLevel45 = nextLevel44;\n        long nextLevel46 = nextLevel45;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long\
    \ nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOdd", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long\
    \ nextEven = (n%2 == 0) ? n : (n-1);\n        long nextLevel = nextOdd;\n    \
    \    long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n        \
    \    result.add(nextLevelCount);\n            nextLevel += nextEven;\n       \
    \     nextLevelCount += nextOdd;\n        }\n        return result;\n", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n +\
    \ 1) / 2;\n        long nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n \
    \           result.add(nextEven);\n        } else {\n            result.add(nextOdd);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n-1);\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextEven;\n\
    \            nextLevel += nextOdd;\n            nextLevelCount += nextOdd;\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n \
    \       if (n % 2 == 0) {\n            result.add(nextEven);\n        } else {\n\
    \            result.add(nextOdd);\n        }\n        return result;\n", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long nextEven = n;\n\
    \        long nextOdd = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenO", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        if (n == 0) {\n            result.add(0);\n        \
    \    return result;\n        }\n        ArrayList<Long> level = new ArrayList<>();\n\
    \        level.add(n);\n        result.add(level.size());\n        if (n % 2 ==\
    \ 0) {\n            level.add(makeAPile(n / 2));\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextEven = n\
    \ / 2;\n        long nextOdd = n % 2;\n        if (nextEven % 2 == 0) {\n    \
    \        result.add(nextEven);\n        }\n        if (nextOdd % 2 == 0) {\n \
    \           result.add(nextOdd);\n        }\n        if (nextEven % 2 != 0) {\n\
    \            result.add(nextEven);\n        }\n        if (nextOdd % 2 != 0) {\n\
    \            result.add(nextOdd);\n        }\n        return result;\n", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenEven\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenEvenEven\
    \ = (nextOddEvenEven%2 == 0) ? nextOddEvenEven : nextOddEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEven = (nextOddEvenEvenEven%2 == 0) ? nextOddEvenEvenEven\
    \ : nextOddEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n\
    \        long nextOddEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long\
    \ nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n     \
    \   long nextOddEven", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += 2;\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level1 = makeAPile(n - 1);\n        ArrayList<Long>\
    \ level2 = new ArrayList<>();\n        level2.add(level1.get(0));\n        if\
    \ (n % 2 == 0) {\n            level2.add(level1.get(1));\n        }\n        if\
    \ (n % 2 != 0) {\n            level2.add(level1.get(2));\n        }\n        result.addAll(level2);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevelCount += nextEven;\n            nextLevel += nextOdd;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven/2 : nextEven;\n         \
    \   nextOdd = (nextOdd%2 == 0) ? nextOdd/2 : nextOdd;\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 == 1) ? n :\
    \ n + 1;\n        long nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd\
    \ = nextOdd * 2;\n        long nextOddEvenOddEven = nextOddEven * 3;\n       \
    \ long nextOddEvenOddEvenOdd = nextOddEvenOdd * 4;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEven * 5;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEven\
    \ * 6;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven\
    \ * 7;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ * 8;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * 9;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ * 10;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ * 11;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ * 12;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven =\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd * 13;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * 14;\n        long nextOdd", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextEven = n;\n        long nextOdd = n;\n        if (n % 2 == 0)\
    \ {\n            nextEven = nextEven + 1;\n        }\n        result.add(nextEven);\n\
    \        while (nextEven > 1) {\n            nextEven = nextEven - 2;\n      \
    \      result.add(nextEven);\n        }\n        if (n % 2 == 0) {\n         \
    \   nextOdd = nextOdd + 1;\n        }\n        result.add(nextOdd);\n        while\
    \ (nextOdd > 1) {\n            nextOdd = nextOdd - 2;\n            result.add(nextOdd);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextLevel\
    \ = 1;\n        long currentLevel = 1;\n        long currentStones = 0;\n    \
    \    long nextLevelStones = 0;\n        long nextLevelStonesSum = 0;\n       \
    \ long nextLevelStonesSum2 = 0;\n        long nextLevelStonesSum3 = 0;\n     \
    \   long nextLevelStonesSum4 = 0;\n        long nextLevelStonesSum5 = 0;\n   \
    \     long nextLevelStonesSum6 = 0;\n        long nextLevelStonesSum7 = 0;\n \
    \       long nextLevelStonesSum8 = 0;\n        long nextLevelStonesSum9 = 0;\n\
    \        long nextLevelStonesSum10 = 0;\n        long nextLevelStonesSum11 = 0;\n\
    \        long nextLevelStonesSum12 = 0;\n        long nextLevelStonesSum13 = 0;\n\
    \        long nextLevelStonesSum14 = 0;\n        long nextLevelStonesSum15 = 0;\n\
    \        long nextLevelStonesSum16 = 0;\n        long nextLevelStonesSum17 = 0;\n\
    \        long nextLevelStonesSum18 = 0;\n        long nextLevelStonesSum19 = 0;\n\
    \        long nextLevelStonesSum20 = 0;\n        long nextLevelStonesSum21 = 0;\n\
    \        long nextLevelStonesSum22 = 0;\n        long nextLevelStonesSum23 = 0;\n\
    \        long nextLevelStonesSum24 = 0;\n        long nextLevelStonesSum25 = 0;\n\
    \        long nextLevelStonesSum26 = 0;\n        long nextLevelStonesSum27 = 0;\n\
    \        long nextLevelStonesSum28 = 0;\n        long nextLevelStonesSum29 = 0;\n\
    \        long nextLevelStonesSum30 = 0;\n        long nextLevelStonesSum31 = 0;\n\
    \        long nextLevelStonesSum32 = 0;\n        long nextLevelStonesSum33 = 0;\n\
    \        long nextLevelStonesSum34 = 0;\n        long nextLevelStonesSum35 = 0;\n\
    \        long nextLevelStonesSum36 = 0;\n        long nextLevelStonesSum37 = 0;\n\
    \        long nextLevelStonesSum38 = 0;\n        long nextLevelStonesSum39 = 0;\n\
    \        long nextLevelStonesSum40 = 0;\n        long nextLevelStonesSum41 = 0;\n\
    \        long nextLevelStonesSum42 = 0;\n        long nextLevelStone", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2 ==\
    \ 1) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n : n+1;\n        long nextOddEven\
    \ = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2\
    \ == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2\
    \ == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n\
    \        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n \
    \       long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextOddEven = (nextOdd%2\
    \ == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2 ==\
    \ 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2\
    \ == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ : nextO", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 1) ? n : n + 1;\n        long nextOddEven = nextOdd + nextEven;\n       \
    \ long nextOddEvenOdd = nextOdd * 2;\n        long nextOddEvenOddEven = nextOddEven\
    \ * 3;\n        long nextOddEvenOddEvenOdd = nextOddEvenOdd * 4;\n        long\
    \ nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOdd * 5;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOdd * 6;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEven * 7;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven * 8;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * 9;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * 10;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * 11;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * 12;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * 13;\n     \
    \   long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n : (n+2);\n      \
    \  long nextOddEven = (n%2 == 0) ? n : (n+3);\n        long nextOddEvenOdd = (n%2\
    \ == 0) ? n : (n+4);\n        long nextOddEvenOddEven = (n%2 == 0) ? n : (n+5);\n\
    \        long nextOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+6);\n        long nextOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+7);\n        long nextOddEvenOddEvenOddEvenOdd = (n%2\
    \ == 0) ? n : (n+8);\n        long nextOddEvenOddEvenOddEvenOddEven = (n%2 ==\
    \ 0) ? n : (n+9);\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 ==\
    \ 0) ? n : (n+10);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (n%2\
    \ == 0) ? n : (n+11);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+12);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+13);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+14);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+15);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+16);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+17);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+18);\n        long nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 1) ? n : n+1;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n\
    \        long nextOddEvenOdd = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n\
    \        long nextOddEvenOddEven = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd :\
    \ nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd : nextOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2 ==\
    \ 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 ==\
    \ 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenO", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+2);\n        long nextOddEven = (n%2 == 0) ? n : (n+3);\n   \
    \     long nextOddEvenOdd = (n%2 == 0) ? n : (n+4);\n        long nextOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+5);\n        long nextOddEvenOddEvenOdd = (n%2 == 0) ?\
    \ n : (n+6);\n        long nextOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+7);\n\
    \        long nextOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+8);\n       \
    \ long nextOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+9);\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+10);\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n : (n+11);\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? n : (n+12);\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n%2 == 0) ? n\
    \ : (n+13);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ (n%2 == 0) ? n : (n+14);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+15);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+16);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n : (n+17);\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n : (n+18);\n        long nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        long nextLevelCount = 1;\n        while(nextLevelCount\
    \ <= n) {\n            result.add(nextLevelCount);\n            nextLevel += nextEven;\n\
    \            nextLevelCount += nextOdd;\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n\
    \        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n \
    \       long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextEven = n / 2;\n        long nextOdd\
    \ = n - nextEven;\n        if (n % 2 == 0) {\n            result.add(nextEven);\n\
    \        } else {\n            result.add(nextOdd);\n        }\n        long nextLevel\
    \ = nextEven + nextOdd;\n        long nextLevel2 = nextLevel + nextEven;\n   \
    \     long nextLevel3 = nextLevel2 + nextOdd;\n        long nextLevel4 = nextLevel3\
    \ + nextEven;\n        long nextLevel5 = nextLevel4 + nextOdd;\n        long nextLevel6\
    \ = nextLevel5 + nextEven;\n        long nextLevel7 = nextLevel6 + nextOdd;\n\
    \        long nextLevel8 = nextLevel7 + nextEven;\n        long nextLevel9 = nextLevel8\
    \ + nextOdd;\n        long nextLevel10 = nextLevel9 + nextEven;\n        long\
    \ nextLevel11 = nextLevel10 + nextOdd;\n        long nextLevel12 = nextLevel11\
    \ + nextEven;\n        long nextLevel13 = nextLevel12 + nextOdd;\n        long\
    \ nextLevel14 = nextLevel13 + nextEven;\n        long nextLevel15 = nextLevel14\
    \ + nextOdd;\n        long nextLevel16 = nextLevel15 + nextEven;\n        long\
    \ nextLevel17 = nextLevel16 + nextOdd;\n        long nextLevel18 = nextLevel17\
    \ + nextEven;\n        long nextLevel19 = nextLevel18 + nextOdd;\n        long\
    \ nextLevel20 = nextLevel19 + nextEven;\n        long nextLevel21 = nextLevel20\
    \ + nextOdd;\n        long nextLevel22 = nextLevel21 + nextEven;\n        long\
    \ nextLevel23 = nextLevel22 + nextOdd;\n        long nextLevel24 = nextLevel23\
    \ + nextEven;\n        long nextLevel25 = nextLevel24 + nextOdd;\n        long\
    \ nextLevel26 = nextLevel25 + nextEven;\n        long nextLevel27 = nextLevel26\
    \ + nextOdd;\n        long nextLevel28 = nextLevel27 + nextEven;\n        long\
    \ nextLevel29 = nextLevel28 + nextOdd;\n        long nextLevel30 = nextLevel29\
    \ + nextEven;\n        long nextLevel31 = nextLevel30 + nextOdd;\n        long\
    \ nextLevel32 = nextLevel31 + nextEven;\n        long nextLevel33 = nextLevel32\
    \ + nextOdd;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 :\
    \ n;\n        for(int i = 0; i <= n; i++) {\n            result.add(nextOdd);\n\
    \            nextOdd = nextEven;\n            nextEven = (n%2 == 0) ? nextOdd\
    \ : nextEven+1;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n : n+1;\n        long nextOddEven = (nextOdd+nextEven)/2;\n\
    \        long nextOddEvenNextOdd = (nextOddEven+nextOdd)/2;\n        long nextOddEvenNextOddEven\
    \ = (nextOddEvenNextOdd+nextOddEvenNextOdd)/2;\n        long nextOddEvenNextOddEvenNextOdd\
    \ = (nextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOdd)/2;\n       \
    \ long nextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEven+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = (nextOddEven", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0)\
    \ ? n + 1 : n;\n        long nextOddEven = (n%2 == 0) ? nextEven : nextOdd;\n\
    \        long nextOddEvenOdd = (n%2 == 0) ? nextOddEven : nextEven;\n        long\
    \ nextOddEvenOddEven = (n%2 == 0) ? nextOddEvenOdd : nextOddEven;\n        long\
    \ nextOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEven : nextOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEven = (n%2 == 0) ? nextOddEvenOddEvenOdd :\
    \ nextOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOdd = (n%2 == 0)\
    \ ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOdd", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level1 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level2 = new ArrayList<>();\n        if (n % 2 == 0) {\n            level2.add(level1.get(0));\n\
    \            level2.add(level1.get(1));\n        } else {\n            level2.add(level1.get(0));\n\
    \            level2.add(level1.get(1));\n            level2.add(level1.get(2));\n\
    \        }\n        result.addAll(level2);\n        return result;\n", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2 ==\
    \ 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel\
    \ = nextOdd;\n        long nextLevel2 = nextEven;\n        long nextLevel3 = nextLevel2;\n\
    \        long nextLevel4 = nextLevel3;\n        long nextLevel5 = nextLevel4;\n\
    \        long nextLevel6 = nextLevel5;\n        long nextLevel7 = nextLevel6;\n\
    \        long nextLevel8 = nextLevel7;\n        long nextLevel9 = nextLevel8;\n\
    \        long nextLevel10 = nextLevel9;\n        long nextLevel11 = nextLevel10;\n\
    \        long nextLevel12 = nextLevel11;\n        long nextLevel13 = nextLevel12;\n\
    \        long nextLevel14 = nextLevel13;\n        long nextLevel15 = nextLevel14;\n\
    \        long nextLevel16 = nextLevel15;\n        long nextLevel17 = nextLevel16;\n\
    \        long nextLevel18 = nextLevel17;\n        long nextLevel19 = nextLevel18;\n\
    \        long nextLevel20 = nextLevel19;\n        long nextLevel21 = nextLevel20;\n\
    \        long nextLevel22 = nextLevel21;\n        long nextLevel23 = nextLevel22;\n\
    \        long nextLevel24 = nextLevel23;\n        long nextLevel25 = nextLevel24;\n\
    \        long nextLevel26 = nextLevel25;\n        long nextLevel27 = nextLevel26;\n\
    \        long nextLevel28 = nextLevel27;\n        long nextLevel29 = nextLevel28;\n\
    \        long nextLevel30 = nextLevel29;\n        long nextLevel31 = nextLevel30;\n\
    \        long nextLevel32 = nextLevel31;\n        long nextLevel33 = nextLevel32;\n\
    \        long nextLevel34 = nextLevel33;\n        long nextLevel35 = nextLevel34;\n\
    \        long nextLevel36 = nextLevel35;\n        long nextLevel37 = nextLevel36;\n\
    \        long nextLevel38 = nextLevel37;\n        long nextLevel39 = nextLevel38;\n\
    \        long nextLevel40 = nextLevel39;\n        long nextLevel41 = nextLevel40;\n\
    \        long nextLevel42 = nextLevel41;\n        long nextLevel43 = nextLevel42;\n\
    \        long nextLevel44 = nextLevel43;\n        long nextLevel45 = nextLevel44;\n\
    \        long nextLevel46 = nextLevel45;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven\
    \ = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel\
    \ > 0) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 1) ? n : n + 1;\n        long nextOddEven = (nextOdd%2 == 0) ? nextOdd :\
    \ nextOdd + 1;\n        long nextOddEvenEven = (nextOddEven%2 == 0) ? nextOddEven\
    \ : nextOddEven + 1;\n        long nextOddEvenEvenEven = (nextOddEvenEven%2 ==\
    \ 0) ? nextOddEvenEven : nextOddEvenEven+1;\n        long nextOddEvenEvenEvenEven\
    \ = (nextOddEvenEvenEven%2 == 0) ? nextOddEvenEvenEven : nextOddEvenEvenEven+1;\n\
    \        long nextOddEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEven%2 == 0) ?\
    \ nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n\
    \        long nextOddEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n\
    \        long nextOddEvenEvenEvenEvenEvenEvenEvenEven = (nextOddEvenEvenEvenEvenEvenEvenEvenEven%2\
    \ == 0) ? nextOddEvenEvenEvenEven : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven\
    \ : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven\
    \ : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = (nextOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven%2 == 0) ? nextOddEvenEvenEvenEven\
    \ : nextOddEvenEvenEvenEven+1;\n        long nextOddEvenEven", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0);\n\
    \            return result;\n        }\n        ArrayList<Long> level = new ArrayList<>();\n\
    \        level.add(n);\n        long nextLevel = n;\n        while (nextLevel\
    \ % 2 == 0) {\n            nextLevel = nextLevel / 2;\n            level.add(nextLevel);\n\
    \        }\n        if (nextLevel % 2 == 1) {\n            level.add(nextLevel);\n\
    \        }\n        long nextLevel2 = n;\n        while (nextLevel2 % 2 == 0)\
    \ {\n            nextLevel2 = nextLevel2 / 2;\n            level.add(nextLevel2);\n\
    \        }\n        if (nextLevel2 % 2 == 1) {\n            level.add(nextLevel2);\n\
    \        }\n        long nextLevel3 = n;\n        while (nextLevel3 % 2 == 0)\
    \ {\n            nextLevel3 = nextLevel3 / 2;\n            level.add(nextLevel3);\n\
    \        }\n        if (nextLevel3 % 2 == 1) {\n            level.add(nextLevel3);\n\
    \        }\n        long nextLevel4 = n;\n        while (nextLevel4 % 2 == 0)\
    \ {\n            nextLevel4 = nextLevel4 / 2;\n            level.add(nextLevel4);\n\
    \        }\n        if (nextLevel4 % 2 == 1) {\n            level.add(nextLevel4);\n\
    \        }\n        long nextLevel5 = n;\n        while (nextLevel5 % 2 == 0)\
    \ {\n            nextLevel5 = nextLevel5 / 2;\n            level.add(nextLevel5);\n\
    \        }\n        if (nextLevel5 % 2 == 1) {\n            level.add(nextLevel5);\n\
    \        }\n        long nextLevel6 = n;\n        while (nextLevel6 % 2 == 0)\
    \ {\n            nextLevel6 = nextLevel6 / 2;\n            level.add(nextLevel6);\n\
    \        }\n        if (nextLevel6 % 2 == 1) {\n            level.add(nextLevel6);\n\
    \        }\n        long nextLevel7 = n;\n        while (nextLevel7 % 2 == 0)\
    \ {\n            nextLevel7 = nextLevel7 / 2;\n            level.add(nextLevel7);\n\
    \        }\n        if (nextLevel7 % 2 == 1) {\n            level.add(nextLevel7);\n\
    \        }\n        long nextLevel8 = n;\n        while (nextLevel8 % 2 == 0)\
    \ {\n            nextLevel8 = nextLevel8 / 2;\n            level.add(nextLevel8);\n\
    \        }\n        if (nextLevel8 % 2 == 1) {\n            level.add(nextLevel8);\n\
    \        }\n        long nextLevel9 = n;\n        while (nextLevel9 % 2 == 0)\
    \ {\n            nextLevel9 = nextLevel9 / 2;\n            level.add(nextLevel9);\n\
    \        }\n        if (nextLevel9 % 2 == 1) {\n            level.add(nextLevel9);\n\
    \        }\n        long nextLevel10 = n;\n        while (nextLevel10 % 2 == 0)\
    \ {\n            nextLevel10 = nextLevel10 / 2;\n            level.add(nextLevel10);",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 1;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextEven++;\n            } else {\n                nextOdd++;\n\
    \            }\n            nextLevel--;\n        }\n        result.add(nextLevelCount);\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            nextEven++;\n            } else {\n                nextOdd++;\n \
    \           }\n            nextLevel--;\n            nextLevelCount += nextOdd\
    \ + nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextLevel = 0;\n        long nextLevelCount = 0;\n      \
    \  long nextLevelCount2 = 0;\n        long nextLevelCount3 = 0;\n        long\
    \ nextLevelCount4 = 0;\n        long nextLevelCount5 = 0;\n        long nextLevelCount6\
    \ = 0;\n        long nextLevelCount7 = 0;\n        long nextLevelCount8 = 0;\n\
    \        long nextLevelCount9 = 0;\n        long nextLevelCount10 = 0;\n     \
    \   long nextLevelCount11 = 0;\n        long nextLevelCount12 = 0;\n        long\
    \ nextLevelCount13 = 0;\n        long nextLevelCount14 = 0;\n        long nextLevelCount15\
    \ = 0;\n        long nextLevelCount16 = 0;\n        long nextLevelCount17 = 0;\n\
    \        long nextLevelCount18 = 0;\n        long nextLevelCount19 = 0;\n    \
    \    long nextLevelCount20 = 0;\n        long nextLevelCount21 = 0;\n        long\
    \ nextLevelCount22 = 0;\n        long nextLevelCount23 = 0;\n        long nextLevelCount24\
    \ = 0;\n        long nextLevelCount25 = 0;\n        long nextLevelCount26 = 0;\n\
    \        long nextLevelCount27 = 0;\n        long nextLevelCount28 = 0;\n    \
    \    long nextLevelCount29 = 0;\n        long nextLevelCount30 = 0;\n        long\
    \ nextLevelCount31 = 0;\n        long nextLevelCount32 = 0;\n        long nextLevelCount33\
    \ = 0;\n        long nextLevelCount34 = 0;\n        long nextLevelCount35 = 0;\n\
    \        long nextLevelCount36 = 0;\n        long nextLevelCount37 = 0;\n    \
    \    long nextLevelCount38 = 0;\n        long nextLevelCount39 = 0;\n        long\
    \ nextLevelCount40 = 0;\n        long nextLevelCount41 = 0;\n        long nextLevelCount42\
    \ = 0;\n        long nextLevelCount43 = 0;\n        long nextLevelCount44 = 0;\n\
    \        long nextLevelCount45 = 0;\n        long nextLevelCount46 = 0;\n    \
    \    long nextLevelCount47 = 0;\n        long nextLevelCount48 = 0;\n        long\
    \ nextLevelCount49 = 0;\n        long nextLevelCount50 = 0;\n        long nextLevelCount51\
    \ = 0;\n        long nextLevelCount52 = 0;\n        long nextLevelCount53 = 0;\n\
    \        long nextLevelCount54 = 0;\n        long nextLevelCount55 = 0;\n    \
    \    long nextLevelCount56 = 0;\n        long nextLevelCount57 = 0;\n        long\
    \ nextLevelCount58 = 0;\n        long nextLevelCount59 = 0;\n        long nextLevelCount60\
    \ = 0;\n        long nextLevelCount61 = 0;\n        ", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : (n+1);\n\
    \        long nextEven = (n%2 == 0) ? n : (n+2);\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenO", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n + 1;\n\
    \        long nextEven = (n%2 == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevel = nextEven;\n    \
    \        nextLevelCount += 2;\n            nextEven = (nextEven%2 == 0) ? nextEven\
    \ + 1 : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n : n+1;\n        long nextLevel = nextOdd;\n\
    \        while(nextLevel > 0) {\n            result.add(nextLevel);\n        \
    \    nextLevel = (nextOdd%2 == 0) ? nextEven : nextOdd;\n            nextOdd =\
    \ nextEven;\n            nextEven = (nextEven%2 == 0) ? nextOdd : nextEven;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextEven = n / 2;\n        long nextOdd = n % 2 == 0 ? n : n - 1;\n\
    \        long nextLevel = nextOdd;\n        long nextLevel2 = nextEven;\n    \
    \    long nextLevel3 = nextLevel2;\n        long nextLevel4 = nextLevel3;\n  \
    \      long nextLevel5 = nextLevel4;\n        long nextLevel6 = nextLevel5;\n\
    \        long nextLevel7 = nextLevel6;\n        long nextLevel8 = nextLevel7;\n\
    \        long nextLevel9 = nextLevel8;\n        long nextLevel10 = nextLevel9;\n\
    \        long nextLevel11 = nextLevel10;\n        long nextLevel12 = nextLevel11;\n\
    \        long nextLevel13 = nextLevel12;\n        long nextLevel14 = nextLevel13;\n\
    \        long nextLevel15 = nextLevel14;\n        long nextLevel16 = nextLevel15;\n\
    \        long nextLevel17 = nextLevel16;\n        long nextLevel18 = nextLevel17;\n\
    \        long nextLevel19 = nextLevel18;\n        long nextLevel20 = nextLevel19;\n\
    \        long nextLevel21 = nextLevel20;\n        long nextLevel22 = nextLevel21;\n\
    \        long nextLevel23 = nextLevel22;\n        long nextLevel24 = nextLevel23;\n\
    \        long nextLevel25 = nextLevel24;\n        long nextLevel26 = nextLevel25;\n\
    \        long nextLevel27 = nextLevel26;\n        long nextLevel28 = nextLevel27;\n\
    \        long nextLevel29 = nextLevel28;\n        long nextLevel30 = nextLevel29;\n\
    \        long nextLevel31 = nextLevel30;\n        long nextLevel32 = nextLevel31;\n\
    \        long nextLevel33 = nextLevel32;\n        long nextLevel34 = nextLevel33;\n\
    \        long nextLevel35 = nextLevel34;\n        long nextLevel36 = nextLevel35;\n\
    \        long nextLevel37 = nextLevel36;\n        long nextLevel38 = nextLevel37;\n\
    \        long nextLevel39 = nextLevel38;\n        long nextLevel40 = nextLevel39;\n\
    \        long nextLevel41 = nextLevel40;\n        long nextLevel42 = nextLevel41;\n\
    \        long nextLevel43 = nextLevel42;\n        long nextLevel44 = nextLevel43;\n\
    \        long nextLevel45 = nextLevel44;\n        long nextLevel46 = nextLevel45;\n\
    \        long nextLevel47", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 1) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n : n+1;\n        long nextOddEven = (nextOdd+nextEven)/2;\n        long\
    \ nextOddEvenNextOdd = (nextOddEven+nextOdd)/2;\n        long nextOddEvenNextOddNextEven\
    \ = (nextOddEvenNextOdd+nextOddEvenNextOdd)/2;\n        long nextOddEvenNextOddNextEvenNextOdd\
    \ = (nextOddEvenNextOddNextEven+nextOddEvenNextOddNextEvenNextOdd)/2;\n      \
    \  long nextOddEvenNextOddNextEvenNextOddNextEven = (nextOddEvenNextOddNextEvenNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0) ? n + 1 : n;\n      \
    \  long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n        long nextLevelSum\
    \ = 0;\n        while(nextLevelCount <= n) {\n            nextLevelSum += nextLevelCount;\n\
    \            result.add(nextLevelSum);\n            nextLevelCount += nextEven;\n\
    \            nextLevel = nextOdd;\n            nextLevelCount = 1;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel >\
    \ 0) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = nextOdd;\n            nextOdd = nextLevel;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0L);\n            return result;\n\
    \        }\n        ArrayList<Long> level = new ArrayList<>();\n        level.add(0L);\n\
    \        long nextEven = n;\n        long nextOdd = n;\n        while (nextEven\
    \ % 2 == 0) {\n            nextEven = nextEven / 2;\n        }\n        while\
    \ (nextOdd % 2 == 0) {\n            nextOdd = nextOdd / 2;\n        }\n      \
    \  if (nextEven > nextOdd) {\n            level.add(nextEven);\n            nextEven\
    \ = nextOdd;\n        }\n        result.add(level.size());\n        for (int i\
    \ = 1; i < level.size() - 1; i++) {\n            long nextLevel = level.get(i)\
    \ + level.get(i + 1);\n            if (nextLevel % 2 == 0) {\n               \
    \ nextLevel = nextLevel / 2;\n            }\n            level.set(i, nextLevel);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        if (n > 0) {\n\
    \            while (n > 0) {\n                nextOdd = nextOdd * 2 + 1;\n   \
    \             nextEven = nextEven * 2 + 1;\n                result.add(nextOdd);\n\
    \                result.add(nextEven);\n                n = n - 2;\n         \
    \   }\n        }\n        return result;\n", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : (n+1);\n       \
    \ long nextEven = (n%2 == 0) ? n : (n+1);\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n + 1;\n\
    \        long nextEven = (n%2 == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n\
    \        while(nextLevel > 0) {\n            result.add(nextLevel);\n        \
    \    nextLevel = nextEven;\n            nextEven = (nextEven%2 == 0) ? nextEven+1\
    \ : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevel = nextEven;\n    \
    \        nextLevelCount = nextLevelCount + 1;\n            nextEven = nextOdd\
    \ + 2;\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n + 1;\n     \
    \   long nextEven = (n%2 == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        long nextLevelStones = nextLevel * nextLevelCount;\n            result.add(nextLevelStones);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += 2;\n      \
    \  }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level1 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level2 = makeAPile(n/2);\n        ArrayList<Long> level3 = makeAPile(n/2);\n\
    \        ArrayList<Long> level4 = makeAPile(n/2);\n        ArrayList<Long> level5\
    \ = makeAPile(n/2);\n        ArrayList<Long> level6 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level7 = makeAPile(n/2);\n        ArrayList<Long> level8 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level9 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level10 = makeAPile(n/2);\n        ArrayList<Long> level11 = makeAPile(n/2);\n\
    \        ArrayList<Long> level12 = makeAPile(n/2);\n        ArrayList<Long> level13\
    \ = makeAPile(n/2);\n        ArrayList<Long> level14 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level15 = makeAPile(n/2);\n        ArrayList<Long> level16\
    \ = makeAPile(n/2);\n        ArrayList<Long> level17 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level18 = makeAPile(n/2);\n        ArrayList<Long> level19\
    \ = makeAPile(n/2);\n        ArrayList<Long> level20 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level21 = makeAPile(n/2);\n        ArrayList<Long> level22\
    \ = makeAPile(n/2);\n        ArrayList<Long> level23 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level24 = makeAPile(n/2);\n        ArrayList<Long> level25\
    \ = makeAPile(n/2);\n        ArrayList<Long> level26 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level27 = makeAPile(n/2);\n        ArrayList<Long> level28\
    \ = makeAPile(n/2);\n        ArrayList<Long> level29 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level30 = makeAPile(n/2);\n        ArrayList<Long> level31\
    \ = makeAPile(n/2);\n        ArrayList<Long> level32 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level33 = makeAPile(n/2);\n        ArrayList<Long> level34\
    \ = makeAPile(n/2);\n        ArrayList<Long> level35 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level36 = makeAPile(n/", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextEven = n / 2;\n        long nextOdd = n\
    \ % 2 == 0 ? nextEven : nextEven + 1;\n        long nextLevel = nextOdd;\n   \
    \     long nextLevel2 = nextEven;\n        long nextLevel3 = nextEven;\n     \
    \   long nextLevel4 = nextEven;\n        long nextLevel5 = nextEven;\n       \
    \ long nextLevel6 = nextEven;\n        long nextLevel7 = nextEven;\n        long\
    \ nextLevel8 = nextEven;\n        long nextLevel9 = nextEven;\n        long nextLevel10\
    \ = nextEven;\n        long nextLevel11 = nextEven;\n        long nextLevel12\
    \ = nextEven;\n        long nextLevel13 = nextEven;\n        long nextLevel14\
    \ = nextEven;\n        long nextLevel15 = nextEven;\n        long nextLevel16\
    \ = nextEven;\n        long nextLevel17 = nextEven;\n        long nextLevel18\
    \ = nextEven;\n        long nextLevel19 = nextEven;\n        long nextLevel20\
    \ = nextEven;\n        long nextLevel21 = nextEven;\n        long nextLevel22\
    \ = nextEven;\n        long nextLevel23 = nextEven;\n        long nextLevel24\
    \ = nextEven;\n        long nextLevel25 = nextEven;\n        long nextLevel26\
    \ = nextEven;\n        long nextLevel27 = nextEven;\n        long nextLevel28\
    \ = nextEven;\n        long nextLevel29 = nextEven;\n        long nextLevel30\
    \ = nextEven;\n        long nextLevel31 = nextEven;\n        long nextLevel32\
    \ = nextEven;\n        long nextLevel33 = nextEven;\n        long nextLevel34\
    \ = nextEven;\n        long nextLevel35 = nextEven;\n        long nextLevel36\
    \ = nextEven;\n        long nextLevel37 = nextEven;\n        long nextLevel38\
    \ = nextEven;\n        long nextLevel39 = nextEven;\n        long nextLevel40\
    \ = nextEven;\n        long nextLevel41 = nextEven;\n        long nextLevel42\
    \ = nextEven;\n        long nextLevel43 = nextEven;\n        long nextLevel44\
    \ = nextEven;\n        long nextLevel45 = nextEven;\n        long nextLevel46\
    \ = nextEven;\n        long nextLevel47 = nextEven;\n        long nextLevel48\
    \ = nextEven;\n        long nextLevel49 = nextEven", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : (n+1);\n\
    \        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevelCount += nextEven;\n\
    \            nextLevel += nextOdd;\n            nextEven = (nextEven%2 == 0) ?\
    \ nextEven+1 : nextEven;\n            nextOdd = (nextOdd%2 == 0) ? nextOdd+1 :\
    \ nextOdd;\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long nextOdd = (n + 1) / 2;\n        long nextEven\
    \ = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.add(nextEven);\n\
    \        } else {\n            result.add(nextOdd);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        if\
    \ (n == 0) {\n            result.add(0);\n            return result;\n       \
    \ }\n        ArrayList<Long> level1 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level2 = makeAPile(n/2);\n        ArrayList<Long> level3 = makeAPile(n/2);\n\
    \        ArrayList<Long> level4 = makeAPile(n/2);\n        ArrayList<Long> level5\
    \ = makeAPile(n/2);\n        ArrayList<Long> level6 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level7 = makeAPile(n/2);\n        ArrayList<Long> level8 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level9 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level10 = makeAPile(n/2);\n        ArrayList<Long> level11 = makeAPile(n/2);\n\
    \        ArrayList<Long> level12 = makeAPile(n/2);\n        ArrayList<Long> level13\
    \ = makeAPile(n/2);\n        ArrayList<Long> level14 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level15 = makeAPile(n/2);\n        ArrayList<Long> level16\
    \ = makeAPile(n/2);\n        ArrayList<Long> level17 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level18 = makeAPile(n/2);\n        ArrayList<Long> level19\
    \ = makeAPile(n/2);\n        ArrayList<Long> level20 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level21 = makeAPile(n/2);\n        ArrayList<Long> level22\
    \ = makeAPile(n/2);\n        ArrayList<Long> level23 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level24 = makeAPile(n/2);\n        ArrayList<Long> level25\
    \ = makeAPile(n/2);\n        ArrayList<Long> level26 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level27 = makeAPile(n/2);\n        ArrayList<Long> level28\
    \ = makeAPile(n/2);\n        ArrayList<Long> level29 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level30 = makeAPile(n/2);\n        ArrayList<Long> level31\
    \ = makeAPile(n/2);\n        ArrayList<Long> level32 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level33 = makeAPile(n/2);\n        ArrayList<Long> level34\
    \ = makeAPile(n/2);\n        ArrayList<Long> level35 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level36 = makeAPile(n/", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long currentLevel = 1;\n        long currentLevelStones = n;\n      \
    \  long nextLevelStones = n;\n        while (currentLevelStones <= n) {\n    \
    \        if (n % 2 == 0) {\n                nextEven = nextEven + currentLevelStones;\n\
    \            } else {\n                nextOdd = nextOdd + currentLevelStones;\n\
    \            }\n            result.add(nextOdd);\n            result.add(nextEven);\n\
    \            currentLevel++;\n            currentLevelStones = nextLevelStones;\n\
    \            nextLevelStones = nextOdd + nextEven;\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 :\
    \ n;\n        long nextOddEven = (n%2 == 0) ? n+2 : n+3;\n        long nextOddEvenOdd\
    \ = (n%2 == 0) ? n+4 : n+5;\n        long nextOddEvenOddEven = (n%2 == 0) ? n+6\
    \ : n+7;\n        long nextOddEvenOddEvenOdd = (n%2 == 0) ? n+8 : n+9;\n     \
    \   long nextOddEvenOddEvenOddEven = (n%2 == 0) ? n+10 : n+11;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n+12 : n+13;\n        long nextOddEvenOddEvenOddEvenOddEven =\
    \ (n%2 == 0) ? n+14 : n+15;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n+16 : n+17;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n+18 : n+19;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n+20 : n+21;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n+22 : n+23;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n+24 : n+25;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n+26 : n+27;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (n%2 == 0) ? n+28 : n+29;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? n+30 : n+31;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level = new ArrayList<>();\n        level.add(n);\n\
    \        result.add(level.size());\n        if (n % 2 == 0) {\n            level.add(makeAPile(n\
    \ / 2));\n        }\n        if (n % 2 != 0) {\n            level.add(makeAPile(n\
    \ / 2));\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n       \
    \ long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextOddEven = nextOdd +\
    \ nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOdd;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextLevel = n;\n\
    \        long nextLevelOdd = nextLevel;\n        long nextLevelEven = nextLevel;\n\
    \        long nextLevelOddEven = nextLevel;\n        long nextLevelOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEven = nextLevel;\n        long\
    \ nextLevelOddEvenOddEvenOdd = nextLevel;\n        long nextLevelOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOdd = nextLevel;\n\
    \        long nextLevelOddEvenOddEvenOddEvenOddEven = nextLevel;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOdd = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd+nextEven)/2;\n        long nextOddEvenNextOdd = (nextOddEven+nextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEven = (nextOddEvenNextOdd+nextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOdd = (nextOddEvenNextOddNextEven+nextOddEvenNextOddNextEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEven = (nextOddEvenNextOddNextEvenNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd+nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextOdd)/2;\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextO",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n  \
    \          result.add(0);\n            return result;\n        }\n        ArrayList<Long>\
    \ level1 = makeAPile(n/2);\n        ArrayList<Long> level2 = makeAPile(n/2);\n\
    \        ArrayList<Long> level3 = makeAPile(n/2);\n        ArrayList<Long> level4\
    \ = makeAPile(n/2);\n        ArrayList<Long> level5 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level6 = makeAPile(n/2);\n        ArrayList<Long> level7 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level8 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level9 = makeAPile(n/2);\n        ArrayList<Long> level10 = makeAPile(n/2);\n\
    \        ArrayList<Long> level11 = makeAPile(n/2);\n        ArrayList<Long> level12\
    \ = makeAPile(n/2);\n        ArrayList<Long> level13 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level14 = makeAPile(n/2);\n        ArrayList<Long> level15\
    \ = makeAPile(n/2);\n        ArrayList<Long> level16 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level17 = makeAPile(n/2);\n        ArrayList<Long> level18\
    \ = makeAPile(n/2);\n        ArrayList<Long> level19 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level20 = makeAPile(n/2);\n        ArrayList<Long> level21\
    \ = makeAPile(n/2);\n        ArrayList<Long> level22 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level23 = makeAPile(n/2);\n        ArrayList<Long> level24\
    \ = makeAPile(n/2);\n        ArrayList<Long> level25 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level26 = makeAPile(n/2);\n        ArrayList<Long> level27\
    \ = makeAPile(n/2);\n        ArrayList<Long> level28 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level29 = makeAPile(n/2);\n        ArrayList<Long> level30\
    \ = makeAPile(n/2);\n        ArrayList<Long> level31 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level32 = makeAPile(n/2);\n        ArrayList<Long> level33\
    \ = makeAPile(n/2);\n        ArrayList<Long> level34 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level35 = makeAPile(n/2);\n        ArrayList<Long> level36\
    \ = makeAPile(n/", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0)\
    \ ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel > 0)\
    \ {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n \
    \           nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel\
    \ = 1;\n        long nextLevel = 1;\n        long currentStones = 1;\n       \
    \ long nextStones = 1;\n        long currentStonesSum = 0;\n        long nextStonesSum\
    \ = 0;\n        long currentStonesSumOfNextLevel = 0;\n        long nextStonesSumOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevel = 0;\n        long\
    \ nextStonesSumOfNextLevelOfNextLevel = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevel = 0;\n   \
    \     long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel = 0;\n\
    \        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel = 0;\n\
    \        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 1) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n : n+1;\n\
    \        long nextOddEven = (nextOdd+nextEven)/2;\n        long nextOddEvenNextOdd\
    \ = (nextOddEven+nextOdd)/2;\n        long nextOddEvenNextOddEven = (nextOddEvenNextOdd+nextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEven+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = (nextOddEven", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 1) ? n : n+1;\n        long nextEven = (n%2 == 0)\
    \ ? n : n+1;\n        long nextOddEven = (nextOdd+nextEven)/2;\n        long nextOddEvenNextOdd\
    \ = (nextOddEven+nextOdd)/2;\n        long nextOddEvenNextOddEven = (nextOddEvenNextOdd+nextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEven+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven = (nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd+nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd)/2;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = (nextOddEven", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0)\
    \ ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while (nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel += nextEven;\n            nextLevelCount += nextEven;\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextOddEven = nextOdd + nextEven;\n        long\
    \ nextOddEvenOdd = nextOddEven + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd\
    \ + nextOddEven;\n        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 1) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n : n+1;\n        long nextOddEven = (nextOdd%2\
    \ == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd = (nextOddEven%2 ==\
    \ 1) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven = (nextOddEvenOdd%2\
    \ == 1) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long nextOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEven%2 == 1) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 1) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEven%2\
    \ == 1) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEven+1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2 == 1) ? nextOddEvenOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEven%2 == 1) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOdd%2 == 1) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEven+1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2 == 1) ? nextOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenNextOdd\
    \ = 0;\n        long nextOddEvenNextEven = 0;\n        long nextOddEvenNextOddEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOdd = 0;\n        long nextOddEvenNextOddEvenNextEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEven = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextEven = 0;\n        long\
    \ nextOddEvenNextOddEvenNextOddEvenNextOddEven = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextEven = 0;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven = 0;\n \
    \       long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd =\
    \ 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextEven\
    \ = 0;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = 0;", "        ArrayList<Long> result = new ArrayList<>();\n        long nextEven\
    \ = n;\n        long nextOdd = nextEven + 1;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOddEvenOdd;\n        long nextOddEvenOddEvenOddEven\
    \ = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOdd;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven +\
    \ nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        for(int\
    \ i = 1; i <= n; i++) {\n            if(i%2 == 0) {\n                result.add(nextEven);\n\
    \            } else {\n                result.add(nextOdd);\n            }\n \
    \           nextOdd = nextEven;\n            nextEven = nextEven+2;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level = new ArrayList<>();\n        level.add(n);\n\
    \        result.add(level.size());\n        long nextOdd = n;\n        long nextEven\
    \ = n;\n        while (nextEven % 2 == 0) {\n            nextEven = nextEven /\
    \ 2;\n        }\n        while (nextOdd % 2 == 0) {\n            nextOdd = nextOdd\
    \ / 2;\n        }\n        result.add(nextOdd);\n        result.add(nextEven);\n\
    \        ArrayList<Long> nextLevel = new ArrayList<>();\n        nextLevel.add(nextOdd);\n\
    \        nextLevel.add(nextEven);\n        ArrayList<Long> nextLevel2 = new ArrayList<>();\n\
    \        nextLevel2.add(nextOdd);\n        nextLevel2.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel3 = new ArrayList<>();\n        nextLevel3.add(nextOdd);\n\
    \        nextLevel3.add(nextEven);\n        ArrayList<Long> nextLevel4 = new ArrayList<>();\n\
    \        nextLevel4.add(nextOdd);\n        nextLevel4.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel5 = new ArrayList<>();\n        nextLevel5.add(nextOdd);\n\
    \        nextLevel5.add(nextEven);\n        ArrayList<Long> nextLevel6 = new ArrayList<>();\n\
    \        nextLevel6.add(nextOdd);\n        nextLevel6.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel7 = new ArrayList<>();\n        nextLevel7.add(nextOdd);\n\
    \        nextLevel7.add(nextEven);\n        ArrayList<Long> nextLevel8 = new ArrayList<>();\n\
    \        nextLevel8.add(nextOdd);\n        nextLevel8.add(nextEven);\n       \
    \ ArrayList<Long> nextLevel9 = new ArrayList<>();\n        nextLevel9.add(nextOdd);\n\
    \        nextLevel9.add(nextEven);\n        ArrayList<Long> nextLevel10 = new\
    \ ArrayList<>();\n        nextLevel10.add(nextOdd);\n        nextLevel10.add(nextEven);\n\
    \        ArrayList<Long> nextLevel11 = new ArrayList<>();\n        nextLevel11.add(nextOdd);\n\
    \        nextLevel11.add(nextEven);\n        ArrayList<Long> nextLevel12 = new\
    \ ArrayList<>();\n        nextLevel12.add(nextOdd);\n        nextLevel12.add(nextEven);\n\
    \        ArrayList<Long> nextLevel13 = new ArrayList<>();\n        nextLevel13.add(nextOdd);\n\
    \        nextLevel13.add(nextEven);\n        ArrayList<Long> nextLevel14 = new\
    \ ArrayList<>();\n        nextLevel14.add(nextOdd);\n        nextLevel14.add(nextEven);\n\
    \        ArrayList<Long> nextLevel15 = new ArrayList<>();\n        nextLevel15.add(next",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        long nextLevel2 = nextEven;\n        long nextLevel3\
    \ = nextLevel;\n        long nextLevel4 = nextLevel3;\n        long nextLevel5\
    \ = nextLevel4;\n        long nextLevel6 = nextLevel5;\n        long nextLevel7\
    \ = nextLevel6;\n        long nextLevel8 = nextLevel7;\n        long nextLevel9\
    \ = nextLevel8;\n        long nextLevel10 = nextLevel9;\n        long nextLevel11\
    \ = nextLevel10;\n        long nextLevel12 = nextLevel11;\n        long nextLevel13\
    \ = nextLevel12;\n        long nextLevel14 = nextLevel13;\n        long nextLevel15\
    \ = nextLevel14;\n        long nextLevel16 = nextLevel15;\n        long nextLevel17\
    \ = nextLevel16;\n        long nextLevel18 = nextLevel17;\n        long nextLevel19\
    \ = nextLevel18;\n        long nextLevel20 = nextLevel19;\n        long nextLevel21\
    \ = nextLevel20;\n        long nextLevel22 = nextLevel21;\n        long nextLevel23\
    \ = nextLevel22;\n        long nextLevel24 = nextLevel23;\n        long nextLevel25\
    \ = nextLevel24;\n        long nextLevel26 = nextLevel25;\n        long nextLevel27\
    \ = nextLevel26;\n        long nextLevel28 = nextLevel27;\n        long nextLevel29\
    \ = nextLevel28;\n        long nextLevel30 = nextLevel29;\n        long nextLevel31\
    \ = nextLevel30;\n        long nextLevel32 = nextLevel31;\n        long nextLevel33\
    \ = nextLevel32;\n        long nextLevel34 = nextLevel33;\n        long nextLevel35\
    \ = nextLevel34;\n        long nextLevel36 = nextLevel35;\n        long nextLevel37\
    \ = nextLevel36;\n        long nextLevel38 = nextLevel37;\n        long nextLevel39\
    \ = nextLevel38;\n        long nextLevel40 = nextLevel39;\n        long nextLevel41\
    \ = nextLevel40;\n        long nextLevel42 = nextLevel41;\n        long nextLevel43\
    \ = nextLevel42;\n        long nextLevel44 = nextLevel43;\n        long nextLevel45\
    \ = nextLevel44;\n        long nextLevel46 = nextLevel45;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextLevel = 1;\n        long currentLevel = 1;\n        long\
    \ currentStones = 1;\n        long nextLevelStones = 1;\n        long nextLevelStonesSum\
    \ = 0;\n        long nextLevelStonesSum2 = 0;\n        long nextLevelStonesSum3\
    \ = 0;\n        long nextLevelStonesSum4 = 0;\n        long nextLevelStonesSum5\
    \ = 0;\n        long nextLevelStonesSum6 = 0;\n        long nextLevelStonesSum7\
    \ = 0;\n        long nextLevelStonesSum8 = 0;\n        long nextLevelStonesSum9\
    \ = 0;\n        long nextLevelStonesSum10 = 0;\n        long nextLevelStonesSum11\
    \ = 0;\n        long nextLevelStonesSum12 = 0;\n        long nextLevelStonesSum13\
    \ = 0;\n        long nextLevelStonesSum14 = 0;\n        long nextLevelStonesSum15\
    \ = 0;\n        long nextLevelStonesSum16 = 0;\n        long nextLevelStonesSum17\
    \ = 0;\n        long nextLevelStonesSum18 = 0;\n        long nextLevelStonesSum19\
    \ = 0;\n        long nextLevelStonesSum20 = 0;\n        long nextLevelStonesSum21\
    \ = 0;\n        long nextLevelStonesSum22 = 0;\n        long nextLevelStonesSum23\
    \ = 0;\n        long nextLevelStonesSum24 = 0;\n        long nextLevelStonesSum25\
    \ = 0;\n        long nextLevelStonesSum26 = 0;\n        long nextLevelStonesSum27\
    \ = 0;\n        long nextLevelStonesSum28 = 0;\n        long nextLevelStonesSum29\
    \ = 0;\n        long nextLevelStonesSum30 = 0;\n        long nextLevelStonesSum31\
    \ = 0;\n        long nextLevelStonesSum32 = 0;\n        long nextLevelStonesSum33\
    \ = 0;\n        long nextLevelStonesSum34 = 0;\n        long nextLevelStonesSum35\
    \ = 0;\n        long nextLevelStonesSum36 = 0;\n        long nextLevelStonesSum37\
    \ = 0;\n        long nextLevelStonesSum38 = 0;\n        long nextLevelStonesSum39\
    \ = 0;\n        long nextLevelStonesSum40 = 0;\n        long nextLevelStonesSum41\
    \ = 0;\n        long nextLevelStonesSum42 = 0;\n        long nextLevel", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        long nextLevelCount = 1;\n        while(nextLevelCount\
    \ <= n) {\n            result.add(nextLevelCount);\n            nextLevel += nextEven;\n\
    \            nextLevelCount += 2;\n        }\n        return result;\n", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextLevel = 0;\n        long lastLevel\
    \ = 0;\n        long currentLevel = 0;\n        long currentStones = 0;\n    \
    \    long currentSum = 0;\n        long lastSum = 0;\n        long lastStones\
    \ = 0;\n        long lastSumOfLastLevel = 0;\n        long lastSumOfCurrentLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevel = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevel\
    \ = 0;\n        long lastSumOfLastLevelAndCurrentLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAndNextLevelAnd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextEven = n;\n\
    \        long nextOdd = n;\n        long nextEvenCount = 0;\n        long nextOddCount\
    \ = 0;\n        while (nextEven > 0 || nextOdd > 0) {\n            if (nextEven\
    \ > 0 && nextOdd > 0) {\n                nextEvenCount += nextEven;\n        \
    \        nextOddCount += nextOdd;\n                nextEven = nextEven / 2;\n\
    \                nextOdd = nextOdd / 2;\n            } else if (nextEven > 0)\
    \ {\n                nextEvenCount += nextEven;\n                nextEven = nextEven\
    \ / 2;\n            } else {\n                nextOddCount += nextOdd;\n     \
    \           nextOdd = nextOdd / 2;\n            }\n            result.add(nextEvenCount);\n\
    \            result.add(nextOddCount);\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n  \
    \          result.add(0);\n            return result;\n        }\n        ArrayList<Long>\
    \ level1 = makeAPile(n/2);\n        ArrayList<Long> level2 = makeAPile(n/2);\n\
    \        ArrayList<Long> level3 = makeAPile(n/2);\n        ArrayList<Long> level4\
    \ = makeAPile(n/2);\n        ArrayList<Long> level5 = makeAPile(n/2);\n      \
    \  ArrayList<Long> level6 = makeAPile(n/2);\n        ArrayList<Long> level7 =\
    \ makeAPile(n/2);\n        ArrayList<Long> level8 = makeAPile(n/2);\n        ArrayList<Long>\
    \ level9 = makeAPile(n/2);\n        ArrayList<Long> level10 = makeAPile(n/2);\n\
    \        ArrayList<Long> level11 = makeAPile(n/2);\n        ArrayList<Long> level12\
    \ = makeAPile(n/2);\n        ArrayList<Long> level13 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level14 = makeAPile(n/2);\n        ArrayList<Long> level15\
    \ = makeAPile(n/2);\n        ArrayList<Long> level16 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level17 = makeAPile(n/2);\n        ArrayList<Long> level18\
    \ = makeAPile(n/2);\n        ArrayList<Long> level19 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level20 = makeAPile(n/2);\n        ArrayList<Long> level21\
    \ = makeAPile(n/2);\n        ArrayList<Long> level22 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level23 = makeAPile(n/2);\n        ArrayList<Long> level24\
    \ = makeAPile(n/2);\n        ArrayList<Long> level25 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level26 = makeAPile(n/2);\n        ArrayList<Long> level27\
    \ = makeAPile(n/2);\n        ArrayList<Long> level28 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level29 = makeAPile(n/2);\n        ArrayList<Long> level30\
    \ = makeAPile(n/2);\n        ArrayList<Long> level31 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level32 = makeAPile(n/2);\n        ArrayList<Long> level33\
    \ = makeAPile(n/2);\n        ArrayList<Long> level34 = makeAPile(n/2);\n     \
    \   ArrayList<Long> level35 = makeAPile(n/2);\n        ArrayList<Long> level36\
    \ = makeAPile(n/", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0)\
    \ ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long currentLevel =\
    \ 1;\n        while (nextLevel <= n) {\n            result.add(currentLevel);\n\
    \            nextLevel += nextEven;\n            currentLevel += nextOdd;\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevel2\
    \ = nextEven;\n        long nextLevel3 = nextLevel2;\n        long nextLevel4\
    \ = nextLevel3;\n        long nextLevel5 = nextLevel4;\n        long nextLevel6\
    \ = nextLevel5;\n        long nextLevel7 = nextLevel6;\n        long nextLevel8\
    \ = nextLevel7;\n        long nextLevel9 = nextLevel8;\n        long nextLevel10\
    \ = nextLevel9;\n        long nextLevel11 = nextLevel10;\n        long nextLevel12\
    \ = nextLevel11;\n        long nextLevel13 = nextLevel12;\n        long nextLevel14\
    \ = nextLevel13;\n        long nextLevel15 = nextLevel14;\n        long nextLevel16\
    \ = nextLevel15;\n        long nextLevel17 = nextLevel16;\n        long nextLevel18\
    \ = nextLevel17;\n        long nextLevel19 = nextLevel18;\n        long nextLevel20\
    \ = nextLevel19;\n        long nextLevel21 = nextLevel20;\n        long nextLevel22\
    \ = nextLevel21;\n        long nextLevel23 = nextLevel22;\n        long nextLevel24\
    \ = nextLevel23;\n        long nextLevel25 = nextLevel24;\n        long nextLevel26\
    \ = nextLevel25;\n        long nextLevel27 = nextLevel26;\n        long nextLevel28\
    \ = nextLevel27;\n        long nextLevel29 = nextLevel28;\n        long nextLevel30\
    \ = nextLevel29;\n        long nextLevel31 = nextLevel30;\n        long nextLevel32\
    \ = nextLevel31;\n        long nextLevel33 = nextLevel32;\n        long nextLevel34\
    \ = nextLevel33;\n        long nextLevel35 = nextLevel34;\n        long nextLevel36\
    \ = nextLevel35;\n        long nextLevel37 = nextLevel36;\n        long nextLevel38\
    \ = nextLevel37;\n        long nextLevel39 = nextLevel38;\n        long nextLevel40\
    \ = nextLevel39;\n        long nextLevel41 = nextLevel40;\n        long nextLevel42\
    \ = nextLevel41;\n        long nextLevel43 = nextLevel42;\n        long nextLevel44\
    \ = nextLevel43;\n        long nextLevel45 = nextLevel44;\n        long nextLevel46\
    \ = nextLevel45;\n", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.add(n);\n          \
    \  return result;\n        }\n        ArrayList<Long> level1 = makeAPile(n / 2);\n\
    \        ArrayList<Long> level2 = makeAPile(n / 2);\n        ArrayList<Long> level3\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level4 = makeAPile(n / 2);\n  \
    \      ArrayList<Long> level5 = makeAPile(n / 2);\n        ArrayList<Long> level6\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level7 = makeAPile(n / 2);\n  \
    \      ArrayList<Long> level8 = makeAPile(n / 2);\n        ArrayList<Long> level9\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level10 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level11 = makeAPile(n / 2);\n        ArrayList<Long> level12\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level13 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level14 = makeAPile(n / 2);\n        ArrayList<Long> level15\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level16 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level17 = makeAPile(n / 2);\n        ArrayList<Long> level18\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level19 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level20 = makeAPile(n / 2);\n        ArrayList<Long> level21\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level22 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level23 = makeAPile(n / 2);\n        ArrayList<Long> level24\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level25 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level26 = makeAPile(n / 2);\n        ArrayList<Long> level27\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level28 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level29 = makeAPile(n / 2);\n        ArrayList<Long> level30\
    \ = makeAPile(n / 2);\n        ArrayList<Long> level31 = makeAPile(n / 2);\n \
    \       ArrayList<Long> level32 = makeAPile(n / 2);\n        ArrayList<Long> level33\
    \ = make", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel = 1;\n \
    \       long nextLevel = 1;\n        long currentStones = 0;\n        long nextStones\
    \ = 0;\n        long currentLevelStones = 0;\n        long nextLevelStones = 0;\n\
    \        long currentLevelStonesSum = 0;\n        long nextLevelStonesSum = 0;\n\
    \        long currentLevelStonesSumOfNextLevel = 0;\n        long nextLevelStonesSumOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevel = 0;\n        long\
    \ nextLevelStonesSumOfNextLevelNextLevel = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevel = 0;\n  \
    \      long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevel = 0;\n\
    \        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevel = 0;\n\
    \        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNext",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n + 1;\n        long nextEven = (n%2 == 0) ? n - 1 : n - 2;\n  \
    \      long nextLevel = nextOdd;\n        while(nextLevel > 0) {\n           \
    \ result.add(nextLevel);\n            nextLevel = (nextOdd > nextEven) ? nextOdd\
    \ : nextEven;\n            nextOdd = nextEven;\n            nextEven = (nextOdd\
    \ > nextEven) ? nextOdd : nextEven;\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 1) ? n : n+1;\n        long\
    \ nextOddEven = (nextOdd%2 == 0) ? nextOdd : nextOdd+1;\n        long nextOddEvenOdd\
    \ = (nextOddEven%2 == 0) ? nextOddEven : nextOddEven+1;\n        long nextOddEvenOddEven\
    \ = (nextOddEvenOdd%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd+1;\n        long\
    \ nextOddEvenOddEvenOdd = (nextOddEvenOddEven%2 == 0) ? nextOddEvenOddEven : nextOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEven = (nextOddEvenOddEvenOdd%2 == 0) ? nextOddEvenOddEvenOdd\
    \ : nextOddEvenOddEvenOdd+1;\n        long nextOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd+1;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = (nextOddEvenOddEvenOddEvenOddEvenOdd%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEven+1;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (nextOddEvenOddEvenOddEvenOddEvenOddEven%2\
    \ == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : ", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : (n+1);\n     \
    \   long nextEven = (n%2 == 0) ? n : (n-1);\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while(nextLevelCount <= n) {\n    \
    \        result.add(nextLevelCount);\n            nextLevel += nextEven;\n   \
    \         nextLevelCount += nextEven;\n            nextLevel += nextOdd;\n   \
    \         nextLevelCount += nextOdd;\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        for(int\
    \ i = 0; i <= n; i++) {\n            long nextLevel = nextOdd;\n            if(nextEven\
    \ % 2 == 0) {\n                nextLevel = nextEven;\n                nextEven\
    \ = nextEven+1;\n            }\n            result.add(nextLevel);\n         \
    \   nextOdd = nextOdd+1;\n            nextEven = nextEven+1;\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextLevel = n;\n        long nextLevelOdd = nextLevel;\n       \
    \ long nextLevelEven = nextLevel;\n        long nextLevelOddEven = nextLevel;\n\
    \        long nextLevelOddOdd = nextLevel;\n        long nextLevelEvenEven = nextLevel;\n\
    \        long nextLevelOddEvenEven = nextLevel;\n        long nextLevelOddOddEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenEvenEven = nextLevel;\n        long\
    \ nextLevelOddEvenEvenEven = nextLevel;\n        long nextLevelOddOdd", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 0) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n+1 : n;\n        long\
    \ nextLevel = nextOdd;\n        while(nextLevel > 0) {\n            result.add(nextLevel);\n\
    \            nextLevel = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        \
    \    nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n      \
    \  return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long nextOdd = (n%2 == 1) ? n : (n+1);\n        long nextEven = (n%2 ==\
    \ 0) ? n : (n+1);\n        long nextLevel = nextOdd;\n        while(nextLevel\
    \ > 0) {\n            result.add(nextLevel);\n            nextLevel = (nextOdd\
    \ <= nextEven) ? nextOdd : nextEven;\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long currentLevel = 1;\n        long nextLevel\
    \ = 1;\n        long nextLevelNextOdd = 0;\n        long nextLevelNextEven = 0;\n\
    \        long nextLevelCurrentOdd = 0;\n        long nextLevelCurrentEven = 0;\n\
    \        long nextLevelNextOddNextEven = 0;\n        long nextLevelNextOddCurrentEven\
    \ = 0;\n        long nextLevelNextEvenCurrentOdd = 0;\n        long nextLevelNextEvenCurrentEven\
    \ = 0;\n        long nextLevelCurrentOddCurrentEven = 0;\n        long nextLevelCurrentEvenCurrentOdd\
    \ = 0;\n        long nextLevelCurrentOddNextEven = 0;\n        long nextLevelCurrentEvenNextOdd\
    \ = 0;\n        long nextLevelNextOddNextEvenNextOdd = 0;\n        long nextLevelNextOddCurrentEvenNextOdd\
    \ = 0;\n        long nextLevelNextEvenCurrentOddNextEven = 0;\n        long nextLevelNextEvenCurrentEvenNextOdd\
    \ = 0;\n        long nextLevelCurrentOddNextEvenNextOdd = 0;\n        long nextLevelCurrentEvenNextOddNextEven\
    \ = 0;\n        long nextLevelCurrentOddCurrentEvenNextOdd = 0;\n        long\
    \ nextLevelCurrentEvenCurrentOddNextEven = 0;\n        long nextLevelCurrentOddNextEvenCurrentEven\
    \ = 0;\n        long nextLevelCurrentEvenNextOddCurrentEven = 0;\n        long\
    \ nextLevelCurrentOddCurrentEvenNextOdd = 0;\n        long nextLevelCurrentEvenNextOddNextEven\
    \ = 0;\n        long nextLevelCurrentOddNextEvenCurrentEven = 0;\n        long\
    \ nextLevelCurrentEvenNextOddNextEven = 0;\n        long nextLevelCurrentOddCurrentEvenNextOdd\
    \ = 0;\n        long nextLevelCurrentEvenNextOddCurrentEven = 0;\n        long\
    \ nextLevelNextOddNextEvenNextOddNext = 0;\n        long nextLevelNextOddCurrentEvenNextOddNext\
    \ = 0;\n        long nextLevelNextEvenCurrentOddNextEven = 0;\n        long nextLevelNextEvenCurrentEvenNextOddNext\
    \ = 0;\n        long nextLevelCurrentOddNextEvenNextOddNext = 0;\n        long\
    \ nextLevelCurrentEvenNextOddNextEvenNext = 0;\n        long nextLevelCurrentOddCurrentEvenNextOddNext\
    \ = 0;\n        long nextLevelCurrentEvenNextOddCurrentEvenNext = 0;\n       \
    \ long nextLevelCurrentOddNextEvenCurrentEvenNext = 0;\n        long nextLevelCurrentEvenNextOddNextEvenNext\
    \ = 0;\n", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2 == 0) ? n :\
    \ (n-1);\n        long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n\
    \        while(nextLevelCount <= n) {\n            result.add(nextLevelCount);\n\
    \            nextLevel = nextEven;\n            nextLevelCount = nextLevelCount\
    \ + 1;\n            nextEven = nextOdd + 1;\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = (n%2\
    \ == 1) ? n : n+1;\n        long nextEven = (n%2 == 0) ? n : n+1;\n        long\
    \ nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n\
    \        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n \
    \       long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextNextOdd = 0;\n        long nextNextEven\
    \ = 0;\n        long nextNextNextOdd = 0;\n        long nextNextNextEven = 0;\n\
    \        long nextNextNextNextOdd = 0;\n        long nextNextNextNextEven = 0;\n\
    \        long nextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNext",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n  \
    \          result.add(0);\n            return result;\n        }\n        ArrayList<Long>\
    \ level = new ArrayList<>();\n        level.add(n);\n        result.add(level.size());\n\
    \        if (n % 2 == 0) {\n            level.add(makeAPile(n / 2));\n       \
    \ }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level = new ArrayList<>();\n        level.add(n);\n\
    \        long nextOdd = 1;\n        long nextEven = 1;\n        while (true) {\n\
    \            long nextLevel = nextOdd;\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevel += nextEven;\n                nextEven = nextEven *\
    \ 2;\n            } else {\n                nextLevel += nextEven;\n         \
    \       nextOdd = nextOdd * 2;\n            }\n            level.add(nextLevel);\n\
    \            if (nextLevel == n) {\n                result.add(level);\n     \
    \           return result;\n            }\n        }\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n\
    \        while(nextLevel > 0) {\n            result.add(nextLevel);\n        \
    \    nextLevel = nextEven;\n            nextEven = (nextEven%2 == 0) ? nextEven+1\
    \ : nextEven;\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextEven = n / 2;\n        long nextOdd\
    \ = n % 2;\n        if (nextEven % 2 == 0) {\n            nextEven++;\n      \
    \  }\n        result.add(nextEven);\n        if (nextOdd % 2 == 0) {\n       \
    \     result.add(nextOdd);\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (n == 0) {\n            result.add(0);\n            return result;\n\
    \        }\n        ArrayList<Long> level1 = makeAPile(n / 2);\n        if (n\
    \ % 2 == 0) {\n            level1.add(level1.get(0) + level1.get(1));\n      \
    \  }\n        ArrayList<Long> level2 = makeAPile(n / 2);\n        if (n % 2 ==\
    \ 0) {\n            level2.add(level2.get(0) + level2.get(1));\n        }\n  \
    \      ArrayList<Long> level3 = makeAPile(n / 2);\n        if (n % 2 == 0) {\n\
    \            level3.add(level3.get(0) + level3.get(1));\n        }\n        ArrayList<Long>\
    \ level4 = makeAPile(n / 2);\n        if (n % 2 == 0) {\n            level4.add(level4.get(0)\
    \ + level4.get(1));\n        }\n        ArrayList<Long> level5 = makeAPile(n /\
    \ 2);\n        if (n % 2 == 0) {\n            level5.add(level5.get(0) + level5.get(1));\n\
    \        }\n        ArrayList<Long> level6 = makeAPile(n / 2);\n        if (n\
    \ % 2 == 0) {\n            level6.add(level6.get(0) + level6.get(1));\n      \
    \  }\n        ArrayList<Long> level7 = makeAPile(n / 2);\n        if (n % 2 ==\
    \ 0) {\n            level7.add(level7.get(0) + level7.get(1));\n        }\n  \
    \      ArrayList<Long> level8 = makeAPile(n / 2);\n        if (n % 2 == 0) {\n\
    \            level8.add(level8.get(0) + level8.get(1));\n        }\n        ArrayList<Long>\
    \ level9 = makeAPile(n / 2);\n        if (n % 2 == 0) {\n            level9.add(level9.get(0)\
    \ + level9.get(1));\n        }\n        ArrayList<Long> level10 = makeAPile(n\
    \ / 2);\n        if (n % 2 == 0) {\n            level10.add(level10.get(0) + level10.get(1));\n\
    \        }\n        ArrayList<Long> level11 = makeAPile(n / 2);\n        if (n\
    \ % 2 == 0) {\n            level11.add(level11.get(0) + level11.get(1));\n   \
    \     }\n        ArrayList<Long> level12 = makeAPile(n / 2);\n        if (n %\
    \ 2 == 0) {\n            level12.add(level12.get(0) + level12.get(1));\n     \
    \   }\n        ArrayList<Long> level13 = makeAPile(n / 2);\n        if (n % 2\
    \ == 0) {\n            level13.add(level13.get(0) + level13.get(1));\n       \
    \ }\n        ArrayList<Long> level14 = makeAPile(n / 2);\n        if (n % 2 ==\
    \ 0) {\n            level14.add(level14.get(0) + level14.get(1)", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        ArrayList<Long> level = new ArrayList<>();\n        long nextLevel\
    \ = n;\n        long nextOdd = nextLevel % 2 == 0 ? nextLevel : nextLevel - 1;\n\
    \        long nextEven = nextLevel % 2 == 0 ? nextLevel + 1 : nextLevel;\n   \
    \     level.add(nextLevel);\n        while (nextLevel > 1) {\n            level.add(nextLevel);\n\
    \            nextLevel = nextOdd;\n            nextOdd = nextLevel % 2 == 0 ?\
    \ nextLevel : nextLevel - 1;\n            nextEven = nextLevel % 2 == 0 ? nextLevel\
    \ + 1 : nextLevel;\n            level.add(nextLevel);\n        }\n        result.addAll(level);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevel2\
    \ = nextEven;\n        while(nextLevel != 0) {\n            result.add(nextLevel);\n\
    \            nextLevel = nextLevel2;\n            nextLevel2 = nextEven;\n   \
    \         nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n \
    \       return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+2);\n        long nextOddEven = (n%2 == 0) ? n : (n+3);\n   \
    \     result.add(nextOdd);\n        result.add(nextEven);\n        result.add(nextOddEven);\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : (n+1);\n        long nextEven = (n%2\
    \ == 0) ? n : (n+2);\n        long nextOddEven = (nextOdd+nextEven);\n       \
    \ long nextOddEvenNextOdd = (nextOddEven+nextOdd);\n        long nextOddEvenNextOddNextEven\
    \ = (nextOddEvenNextOdd+nextEven);\n        long nextOddEvenNextOddNextEvenNextOdd\
    \ = (nextOddEvenNextOddNextEven+nextOdd);\n        long nextOddEvenNextOddNextEvenNextOddNextEven\
    \ = (nextOddEvenNextOddNextEvenNextOdd+nextEven);\n        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEven+nextOdd);\n        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOdd+nextEven);\n        long\
    \ nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEven+nextOdd);\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd+nextEven);\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven+nextOdd);\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = (nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd+nextEven);\n\
    \        long nextOddEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNext",
  "        ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2\
    \ == 0) ? n + 1 : n;\n        long nextOddEven = (n%2 == 0) ? nextEven : nextOdd;\n\
    \        long nextOddEvenOdd = (n%2 == 0) ? nextOddEven : nextOdd;\n        long\
    \ nextOddEvenOddEven = (n%2 == 0) ? nextOddEvenOdd : nextOddEvenOdd;\n       \
    \ long nextOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEven : nextOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEven = (n%2 == 0) ? nextOddEvenOddEvenOdd :\
    \ nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOdd = (n%2 ==\
    \ 0) ? nextOddEvenOddEvenOddEven : nextOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOdd : nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ : nextOddEvenOddEvenOddEvenOddEvenOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = (n%2 == 0) ? nextOddEvenOddEvenOddEvenOddEvenOddEven : nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextLevel = 0;\n        long nextLevelCount = 0;\n      \
    \  long nextLevelCount2 = 0;\n        long nextLevelCount3 = 0;\n        long\
    \ nextLevelCount4 = 0;\n        long nextLevelCount5 = 0;\n        long nextLevelCount6\
    \ = 0;\n        long nextLevelCount7 = 0;\n        long nextLevelCount8 = 0;\n\
    \        long nextLevelCount9 = 0;\n        long nextLevelCount10 = 0;\n     \
    \   long nextLevelCount11 = 0;\n        long nextLevelCount12 = 0;\n        long\
    \ nextLevelCount13 = 0;\n        long nextLevelCount14 = 0;\n        long nextLevelCount15\
    \ = 0;\n        long nextLevelCount16 = 0;\n        long nextLevelCount17 = 0;\n\
    \        long nextLevelCount18 = 0;\n        long nextLevelCount19 = 0;\n    \
    \    long nextLevelCount20 = 0;\n        long nextLevelCount21 = 0;\n        long\
    \ nextLevelCount22 = 0;\n        long nextLevelCount23 = 0;\n        long nextLevelCount24\
    \ = 0;\n        long nextLevelCount25 = 0;\n        long nextLevelCount26 = 0;\n\
    \        long nextLevelCount27 = 0;\n        long nextLevelCount28 = 0;\n    \
    \    long nextLevelCount29 = 0;\n        long nextLevelCount30 = 0;\n        long\
    \ nextLevelCount31 = 0;\n        long nextLevelCount32 = 0;\n        long nextLevelCount33\
    \ = 0;\n        long nextLevelCount34 = 0;\n        long nextLevelCount35 = 0;\n\
    \        long nextLevelCount36 = 0;\n        long nextLevelCount37 = 0;\n    \
    \    long nextLevelCount38 = 0;\n        long nextLevelCount39 = 0;\n        long\
    \ nextLevelCount40 = 0;\n        long nextLevelCount41 = 0;\n        long nextLevelCount42\
    \ = 0;\n        long nextLevelCount43 = 0;\n        long nextLevelCount44 = 0;\n\
    \        long nextLevelCount45 = 0;\n        long nextLevelCount46 = 0;\n    \
    \    long nextLevelCount47 = 0;\n        long nextLevelCount48 = 0;\n        long\
    \ nextLevelCount49 = 0;\n        long nextLevelCount50 = 0;\n        long nextLevelCount51\
    \ = 0;\n        long nextLevelCount52 = 0;\n        long nextLevelCount53 = 0;\n\
    \        long nextLevelCount54 = 0;\n        long nextLevelCount55 = 0;\n    \
    \    long nextLevelCount56 = 0;\n        long nextLevelCount57 = 0;\n        long\
    \ nextLevelCount58 = 0;\n        long nextLevelCount59 = 0;\n        long nextLevelCount60\
    \ = 0;\n        long nextLevelCount61 = 0;\n        ", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long nextOdd = (n%2 == 0) ? n : n+1;\n\
    \        long nextEven = (n%2 == 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n\
    \        long nextLevelCount = 1;\n        while (nextLevelCount <= n) {\n   \
    \         result.add(nextLevelCount);\n            nextLevel += nextEven;\n  \
    \          nextLevelCount += nextOdd;\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long nextOdd = 0;\n\
    \        long nextEven = 0;\n        if (n % 2 == 0) {\n            nextEven =\
    \ n;\n        } else {\n            nextOdd = n;\n        }\n        long currentLevel\
    \ = 1;\n        while (currentLevel <= n) {\n            result.add(currentLevel);\n\
    \            currentLevel += nextOdd;\n            if (currentLevel % 2 == 0)\
    \ {\n                currentLevel += nextEven;\n            }\n        }\n   \
    \     return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextOdd = (n%2 == 0) ? n : n+1;\n        long nextEven = (n%2 ==\
    \ 0) ? n+1 : n;\n        long nextLevel = nextOdd;\n        while(nextLevel >\
    \ 0) {\n            result.add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (nextEven%2 == 0) ? nextEven+1 : nextEven;\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long nextLevel = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven\
    \ = 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelEven++;\n            } else {\n                nextLevelOdd++;\n\
    \            }\n            nextLevel--;\n        }\n        result.add(nextLevelEven);\n\
    \        result.add(nextLevelOdd);\n        return result;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
