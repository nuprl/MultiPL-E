name: HumanEval_14_all_prefixes
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaokcl269.java:50: error: <identifier> expected\n        prefixes.addAll(Arrays.\n\
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7vgs7y9.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqr24xsud.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ok30187.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7ozih9r.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcgs943k8.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwut8s_k.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplxr_273o.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3yy86dmj.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr11tnac.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(1)));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.allPrefixes(tmp51qhgx9p.java:15)\n\tat Problem.main(tmp51qhgx9p.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1z16cx8.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphq_zkxhe.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezj0ykrt.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6jqk07g2.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5hjgi7v.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.sort(Comparator.comparing(s -> s.length()));\n      \
    \  return prefixes;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ojgcvzu.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqj9o2zn.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcu2003d2.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7mqrhuy.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmp7ek1tf5x.java:15)\n\
    \tat Problem.main(tmp7ek1tf5x.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc6gx1ppb.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(1)));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.allPrefixes(tmpym21t6ux.java:15)\n\tat Problem.main(tmpym21t6ux.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> currentPrefixes\
    \ = new ArrayList<String>();\n        prefixes.add(\"\");\n        currentPrefixes.add(\"\
    \");\n        for(int i = 0; i < string.length(); i++) {\n            String prefix\
    \ = currentPrefixes.get(i);\n            String suffix = string.substring(i, string.length());\n\
    \            prefixes.add(prefix + suffix);\n            currentPrefixes.add(prefix\
    \ + suffix);\n        }\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwuaidj4.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj5fxhze1.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3g0cz03.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(\n    }\n    public static void\
    \ main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2bnboox.java:98: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvr05lopq.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjq80bb2.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_v8pgt9.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpktt7ok73.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gfvf41h.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb11qotkw.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgppyrfc3.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5n1lygja.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcao22doh.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpgdmiu0q2.java:16)\n\
    \tat Problem.main(tmpgdmiu0q2.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptihdachq.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvfqk6k2g.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_bfrtl_.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0e340oz.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmpo0e340oz.java:61: error: not a statement\n        prefix.\n\
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ckv0dd4.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmphdizh222.java:16)\n\
    \tat Problem.main(tmphdizh222.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3e20nhl.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpphdcdiwp.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqgaz7w3_.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7nd9hje.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\"\
    );\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefix\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphonr1lzg.java:85: error: not a statement\n        prefix\n    \
    \    ^\n/tmp/tmphonr1lzg.java:85: error: ';' expected\n        prefix\n      \
    \        ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogi5vrbu.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxapgtpt9.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub31174m.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2q8qr22.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyxzjekec.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdyxvcm1d.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmprqidbnb7.java:16)\n\
    \tat Problem.main(tmprqidbnb7.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphivw09xq.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3nmqudj8.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(string,\
    \ 0));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4cs0b9z_.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(string, 0));\n\
    \                        ^\n  required: String\n  found:    String,int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij4yojbf.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtvx_bxy.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmpdtvx_bxy.java:61: error: not a statement\n        prefix.\n\
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgkig0hgn.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(0,\
    \ string.length() - 1)));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpv_7mqjf8.java:15)\n\
    \tat Problem.main(tmpv_7mqjf8.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh85r30a.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lbkm2in.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ce1x_wr.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwd6e7l8_.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvkzneuu4.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_v6jz8ux.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg55ot7oc.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpd3_3ww8u.java:15)\n\
    \tat Problem.main(tmpd3_3ww8u.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7e2kpwf.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxa8rvfkp.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rk68rg9.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuk21dk60.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfybpg6f.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbifnpz6i.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2j9vu84.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpih2c62m_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv270v7ok.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppzneahvk.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpncjmdksh.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj86v6oak.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbsc2j11w.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwv47bkwv.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqug6d4i.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgai_rfkz.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpob31fkf_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgigdk7o.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvjktd3ze.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgguyneix.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9rs54u3r.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tvt3atc.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgteu68ow.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphgiqv0z7.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3mzs_cg.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi78z99dt.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0p7mot0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy3yh3586.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        ArrayList<String> prefixes3 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<String>();\n        ArrayList<String> prefixes6 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes7 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes8 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes9 = new ArrayList<String>();\n        ArrayList<String> prefixes10 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes11 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes12 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes13 = new ArrayList<String>();\n        ArrayList<String> prefixes14\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes15 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes16 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes17 = new ArrayList<String>();\n        ArrayList<String> prefixes18\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes19 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes20 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes21 = new ArrayList<String>();\n        ArrayList<String> prefixes22\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes23 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes24 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes25 = new ArrayList<String>();\n        ArrayList<String> prefixes26\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes27 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes28 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes29 = new ArrayList<String>();\n        ArrayList<String> prefixes30\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes31 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes32 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes33 = new ArrayList<String>();\n        ArrayList<String> prefixes34\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes35 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes36 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes37 = new ArrayList<String>();\n        ArrayList<String> prefixes38\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes39 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes40 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes41 = new ArrayList<String>();\n        ArrayList<String> prefixes42\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes43 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes44 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes45 = new ArrayList<String>();\n        ArrayList<String> prefixes46\
    \ = new ArrayList<String>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6ooi2wd.java:60: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.lambda$allPrefixes$0(tmpfpb_5esx.java:16)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.allPrefixes(tmpfpb_5esx.java:16)\n\tat Problem.main(tmpfpb_5esx.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7od_i5ib.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0z7_1u8.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrdwjggh.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyzaa_6jw.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1c0qi0e2.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo02tpy1u.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8doxvmq5.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqaam8sf.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmphqaam8sf.java:61: error: not a statement\n        prefix.\n\
    \              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvxrpa45p.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3pd45lrb.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5nip402q.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmp0q9gvygs.java:16)\n\
    \tat Problem.main(tmp0q9gvygs.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcj3dhhk0.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpydsm2o4l.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(\"\
    \", string));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjilpfrzb.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found:    String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9fmmf_kh.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31mcif92.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9tixzr2a.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsa_25kjt.java:50: error: <identifier> expected\n        prefixes.addAll(Arrays.\n\
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(string, \"\")) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewu6vaxc.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(string,\
    \ \"\")) {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwctjm3b6.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmk8b1g2n.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.lambda$allPrefixes$0(tmp68kivzeb.java:16)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.allPrefixes(tmp68kivzeb.java:16)\n\tat Problem.main(tmp68kivzeb.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpycg7dzvy.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpruqlf148.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4tkcru5c.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9etcolv.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length())).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhhcablb.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptig6qwp1.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpha7enem5.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpus0veobr.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpfz7y0_ve.java:16)\n\
    \tat Problem.main(tmpfz7y0_ve.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvphm7iu4.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ye6yxz2.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3l8_vnhp.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hi3366b.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5vpy_0k.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpron9jnt5.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8b1x7dwb.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuoojlvga.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8tfow4bw.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqt_iv_0h.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpado79m9c.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_iyg69_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        return prefixes;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmp2j_y_yt2.java:15)\n\
    \tat Problem.main(tmp2j_y_yt2.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps28e18u1.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgpq1zomj.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw2chtloy.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyu8efg4d.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyj94stug.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi884x5nx.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_k_0olv.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprwg4v5wy.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoi2q6jud.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixesHelper(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphfkpso9r.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpid5tpoh3.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_3u_2ax.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0flkx_yq.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pu5kc6_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpde_xu9za.java:16)\n\
    \tat Problem.main(tmpde_xu9za.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9j3c7lb.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0j9s7lvs.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9o89tedb.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0ixgc4n.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpem9917m9.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw82a55sh.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo6numfnk.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpx_zse4zz.java:15)\n\
    \tat Problem.main(tmpx_zse4zz.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1yj1kkt.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3korauit.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplh_0yw6b.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjfqflrec.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnv49mknh.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbp2s1afa.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubobx1su.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_elb8z4l.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4l_epxq.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        ArrayList<String> prefixes3 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<String>();\n        ArrayList<String> prefixes6 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes7 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes8 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes9 = new ArrayList<String>();\n        ArrayList<String> prefixes10 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes11 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes12 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes13 = new ArrayList<String>();\n        ArrayList<String> prefixes14\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes15 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes16 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes17 = new ArrayList<String>();\n        ArrayList<String> prefixes18\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes19 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes20 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes21 = new ArrayList<String>();\n        ArrayList<String> prefixes22\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes23 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes24 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes25 = new ArrayList<String>();\n        ArrayList<String> prefixes26\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes27 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes28 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes29 = new ArrayList<String>();\n        ArrayList<String> prefixes30\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes31 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes32 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes33 = new ArrayList<String>();\n        ArrayList<String> prefixes34\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes35 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes36 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes37 = new ArrayList<String>();\n        ArrayList<String> prefixes38\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes39 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes40 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes41 = new ArrayList<String>();\n        ArrayList<String> prefixes42\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes43 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes44 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes45 = new ArrayList<String>();\n        ArrayList<String> prefixes46\
    \ = new ArrayList<String>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5kf50eh_.java:60: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgb2zkqy_.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiekxrf_u.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphljmygvf.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgihkl1yx.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length())).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7j9qgp2t.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_jlagve.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(\"\
    \", string));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoziylxnt.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found:    String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmpf02uyes0.java:15)\n\
    \tat Problem.main(tmpf02uyes0.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08zoi_7z.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.allPrefixes(tmprtsjvhlz.java:16)\n\
    \tat Problem.main(tmprtsjvhlz.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp18o49_wl.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1c6py51w.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrjtjcfa.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string));\n\
    \        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length()-1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.lambda$allPrefixes$0(tmphonfnp8p.java:16)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.allPrefixes(tmphonfnp8p.java:16)\n\tat Problem.main(tmphonfnp8p.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphi68tpwv.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1t4dudiw.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnkg2lrm.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_qz_47dl.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found:    String,String,ArrayList<String>\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4kxpdfe.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcp_ep7g.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8i4zygde.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbkylq0r.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found:    String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
