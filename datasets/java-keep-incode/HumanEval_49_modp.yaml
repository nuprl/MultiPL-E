name: HumanEval_49_modp
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
  \ modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0,\
  \ 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n\
  \    // 1\n    public static long modp(long n, long p) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
  \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
  \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
  \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
  \ (5l)) == (3l));\n    }\n\n}\n"
completions: ["        if (n == 0 || p == 0)\n            return 1;\n        if (n\
    \ >= p)\n            return modp(n - p, p);\n        if (n % 2 == 0)\n       \
    \     return modp(n / 2, p);\n        return modp(n / 2, p) + modp(n / 2, p);\n",
  "        if (n == 0 || p == 0)\n            return 1;\n        if (n >= p)\n   \
    \         return modp(n / p, p);\n        else\n            return modp((n - p)\
    \ / p, p) * p;\n", "        long r = 1;\n        while (n > 0) {\n           \
    \ long m = n / p;\n            long t = r * m;\n            r = t;\n         \
    \   n = n - m;\n        }\n        return r;\n", "        if (n <= 0) {\n    \
    \        return 1;\n        }\n        if (p <= 0) {\n            return 0;\n\
    \        }\n        if (p > n) {\n            return modp(n - p, p);\n       \
    \ }\n        long res = 1;\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) {\n                res = (res * p) % p;\n            }\n            n = n\
    \ / 2;\n        }\n        return res;\n", "        if (n == 0) {\n          \
    \  return 1;\n        }\n        if (n == 1) {\n            return p;\n      \
    \  }\n        long r = modp(n / 2, p);\n        if (n % 2 == 0) {\n          \
    \  return r * r * p;\n        } else {\n            return r * r * (p - 1);\n\
    \        }\n", "        long r = 1;\n        while (r < n) {\n            r *=\
    \ p;\n        }\n        return r % p;\n", "        if (n == 0 || p == 0)\n  \
    \          return 1;\n        if (n == 1)\n            return p;\n        if (p\
    \ == 1)\n            return n;\n        if (p % 2 == 0)\n            return modp(n\
    \ / 2, p);\n        else\n            return modp((n / 2) * p, p);\n", "     \
    \   if (n == 0 || p == 0)\n            return 1;\n        if (n < 0)\n       \
    \     n = -n;\n        if (p < 0)\n            p = -p;\n        long q = p + n;\n\
    \        long r = q % p;\n        if (q > p)\n            r += p;\n        return\
    \ r;\n", "        long res = 1;\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) {\n                res = (res * p) % p;\n            }\n           \
    \ n /= 2;\n        }\n        return res;\n", "        long res = 1;\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) {\n                res = (res *\
    \ p) % p;\n            }\n            n /= 2;\n        }\n        return res;\n",
  "        if (n == 0 || p == 0) {\n            return 1;\n        }\n        if (p\
    \ > n) {\n            throw new IllegalArgumentException(\"p > n\");\n       \
    \ }\n        long res = 1;\n        while (p) {\n            if (p & 1) {\n  \
    \              res = (res * n) % p;\n            }\n            n /= p;\n    \
    \        p /= 2;\n        }\n        return res;\n", "        long res = 1;\n\
    \        while (n>0) {\n            long m = n%p;\n            res = (res * m)\
    \ % p;\n            n = n/p;\n        }\n        return res;\n", "        long\
    \ result = 1;\n        while (n > 0) {\n            long r = n % p;\n        \
    \    n = n / p;\n            result = result * r;\n        }\n        return result;\n",
  "        long r = 1;\n        while ((n & 1) == 0) {\n            n >>= 1;\n   \
    \         r *= p;\n        }\n        while ((n & 1) == 1) {\n            n >>=\
    \ 1;\n            r %= p;\n        }\n        return r;\n", "        if (n ==\
    \ 0 || p == 0)\n            return 1;\n        if (n >= p)\n            return\
    \ modp(n - p, p);\n        return modp(n - ((n & -p) + ((n & p) >> 1)), p >> 1);\n",
  "        if (n == 0 || p == 0)\n            return 0;\n        if (p > n)\n    \
    \        throw new IllegalArgumentException(\"p must be <= n\");\n        if (p\
    \ < 2)\n            return 1;\n        if (p % 2 == 0)\n            return modp(n\
    \ >> 1, p);\n        long res = 1;\n        while (p > 1) {\n            if (p\
    \ % 2 == 1)\n                res = (res * n) % p;\n            n = (n * n) % p;\n\
    \            p /= 2;\n        }\n        return res;\n", "        if (n == 0 ||\
    \ p == 0)\n            return 1;\n        if (n == p)\n            return n;\n\
    \        if (n < p)\n            return modp(n - p, p);\n        return modp((p\
    \ - n) % p, p);\n", "        if (n == 0 || p == 0) {\n            return 1;\n\
    \        }\n        if (p > n) {\n            throw new IllegalArgumentException(\"\
    p must be <= n\");\n        }\n        if (p % 2 == 0) {\n            return modp(n\
    \ >> 1, p);\n        }\n        long r = modp(n >> 1, p + 2);\n        return\
    \ ((n % p) + r) % p;\n", "        long res = 1;\n        while (n > 0) {\n   \
    \         if (n % 2 == 1) {\n                res *= p;\n            }\n      \
    \      n /= 2;\n            p *= p;\n        }\n        return res;\n", "    \
    \    long r = 1;\n        while (n-- != 0) {\n            r = (r * p) % p;\n \
    \       }\n        return r;\n", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return p;\n        }\n        if\
    \ (n % 2 == 0) {\n            return modp(n / 2, p);\n        }\n        return\
    \ modp(n / 2, p * p) % p;\n", "        if (n == 0 || p == 0) {\n            return\
    \ 1;\n        }\n        long r = 1;\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) {\n                r = (r * p) % p;\n            }\n          \
    \  n = n / 2;\n        }\n        return r;\n", "        long result = 1;\n  \
    \      while (n > 0) {\n            result *= p;\n            result %= p;\n \
    \           n /= 2;\n        }\n        return result;\n", "        if (n == 0\
    \ || p == 0)\n            return 1;\n        if (p > n)\n            throw new\
    \ IllegalArgumentException(\"p must be <= n\");\n        if (p < 2)\n        \
    \    return n;\n        long res = 1;\n        while (n != 0) {\n            if\
    \ (n % 2 == 0)\n                res = (res * p) % p;\n            n = n / 2;\n\
    \        }\n        return res;\n", "        long res = 1;\n        while (n !=\
    \ 0) {\n            if (n % 2 == 1) {\n                res *= p;\n           \
    \ }\n            n /= 2;\n            p *= p;\n        }\n        return res;\n",
  "        long res = 1;\n        while (n != 0) {\n            long r = n % p;\n\
    \            res = (res * r) % p;\n            n = n / p;\n        }\n       \
    \ return res;\n", "        long r = 1;\n        while (n-- != 0) {\n         \
    \   r = (r * p) % p;\n        }\n        return r;\n", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return p;\n\
    \        }\n        if (p % 2 == 0) {\n            return modp(n / 2, p);\n  \
    \      }\n        return modp((n / 2) * 2, p);\n", "        long res = 1;\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) {\n                res *=\
    \ p;\n            }\n            n /= 2;\n            p *= p;\n        }\n   \
    \     return res;\n", "        if (n == 0 || p == 0)\n            return 0;\n\
    \        if (n >= p)\n            return 1;\n        long r = modp(n / p, p);\n\
    \        return (r * r) % p;\n", "        if (n == 0 || p == 0) {\n          \
    \  return 1;\n        }\n        if (p > n) {\n            throw new IllegalArgumentException(\"\
    p must be <= n\");\n        }\n        long r = 1;\n        while (n > 0) {\n\
    \            long m = n / p;\n            long t = r * m;\n            r = t;\n\
    \            n = m - 1;\n        }\n        return r;\n", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ p;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p);\n\
    \        }\n        return modp((n - 1) / 2, p * p + n % 2);\n", "        long\
    \ r = 1;\n        while (n-- != 0) {\n            r = (r * p) % p;\n        }\n\
    \        return r;\n", "        long result = 1;\n        while (n > 0) {\n  \
    \          result *= p;\n            result %= p;\n            n /= 2;\n     \
    \   }\n        return result;\n", "        long r = 1;\n        while (n-- > 0)\
    \ {\n            r = (r * p) % p;\n        }\n        return r;\n", "        if\
    \ (n == 0 || p == 0) {\n            return 0;\n        }\n        long r = 1;\n\
    \        while (n > 0) {\n            long t = n % p;\n            n = n / p;\n\
    \            r = r * t + 1;\n        }\n        return r;\n", "        if (n ==\
    \ 0 || p == 0)\n            return 0;\n        if (n < 0)\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\");\n        if (p < 0)\n\
    \            throw new IllegalArgumentException(\"p must be non-negative\");\n\
    \        if (p > n)\n            throw new IllegalArgumentException(\"p must be\
    \ <= n\");\n        if (p == 1)\n            return n;\n        if (n == 1)\n\
    \            return 1;\n        long res = 1;\n        long p = p * p;\n     \
    \   long q = p * n;\n        long r = n;\n        long t = q;\n        long u\
    \ = p;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n      \
    \  long y = 0;\n        long z = 0;\n        long A = 0;\n        long B = 0;\n\
    \        long C = 0;\n        long D = 0;\n        long E = 0;\n        long F\
    \ = 0;\n        long G = 0;\n        long H = 0;\n        long I = 0;\n      \
    \  long J = 0;\n        long K = 0;\n        long L = 0;\n        long M = 0;\n\
    \        long N = 0;\n        long O = 0;\n        long P = 0;\n        long Q\
    \ = 0;\n        long R = 0;\n        long S = 0;\n        long T = 0;\n      \
    \  long U = 0;\n        long V = 0;\n        long W = 0;\n        long X = 0;\n\
    \        long Y = 0;\n        long Z = 0;\n        long aa = 0;\n        long\
    \ bb = 0;\n        long cc = 0;\n        long dd = 0;\n        long ee = 0;\n\
    \        long ff = 0;\n        long gg = 0;\n        long hh = 0;\n        long\
    \ ii = 0;\n        long jj = 0;\n        long kk = 0;\n        long ll = 0;\n\
    \        long mm = 0;\n        long nn = 0;\n        long oo = 0;\n        long\
    \ pp = 0;\n        long qq = 0;\n        long rr = 0;\n        long ss = 0;\n\
    \        long tt = 0;\n        long uu = 0;\n        long vv = 0;\n        long\
    \ ww = 0;\n        long xx = 0;\n        long yy = 0;\n        long zz = 0;\n\
    \        long Aa = 0;\n        long Bb = 0;\n        long Cc = 0;\n        long\
    \ Dd = 0;\n        long Ee = 0;\n        long Ff = 0;\n        long Gg = 0;\n\
    \        long Hh = 0;\n        long Ii = 0;\n        long Jj = 0;\n        long\
    \ Kk = 0;\n        long Ll = 0;\n        long Mm = 0;\n        long Nn = 0;\n\
    \        long Oo = 0;\n        long Pp = 0;\n        long Qq = 0;\n        long\
    \ Rr = 0;\n        long Ss = 0;\n        long Tt = 0;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return p;\n\
    \        }\n        if (p % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p);\n        }\n        return modp(n / 2, p) * modp((n / 2) % p, p);\n",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return p;\n        }\n        long res = modp(n / 2, p);\n      \
    \  if (n % 2 == 0) {\n            return res * res + p;\n        }\n        return\
    \ res * res - p;\n", "        long r = 1;\n        while (n>0) {\n           \
    \ long t = n%p;\n            n = p;\n            p = t;\n            r = (r*p)%p;\n\
    \        }\n        return r;\n", "        long res = 1;\n        while (n>0)\
    \ {\n            if (n&1L) res=res*p;\n            n>>=1;\n            p=p*p;\n\
    \        }\n        return res;\n", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return p;\n        }\n   \
    \     if (n % 2 == 0) {\n            return modp(n / 2, p) * p;\n        }\n \
    \       return modp(n / 2, p) * p + modp(n / 2, p);\n", "        if (n == 0 ||\
    \ p == 0)\n            return 1;\n        if (n == 1)\n            return p;\n\
    \        if (p == 1)\n            return n;\n        if (p % 2 == 0)\n       \
    \     return modp(n / 2, p);\n        else\n            return modp((n / 2) *\
    \ p, p);\n", "        if (n == 0 || p == 0)\n            return 1;\n        if\
    \ (p > n)\n            throw new IllegalArgumentException(\"p must be <= n\");\n\
    \        if (p < 2)\n            return n;\n        long q = p / 2;\n        long\
    \ r = n % p;\n        if (p % 2 == 0)\n            return modp(q, p) * modp(r,\
    \ p);\n        else\n            return modp(q, p) * modp(r, p + q);\n", "   \
    \     long r = 1;\n        while (n>0) {\n            long m = n%p;\n        \
    \    if (m==0) return r;\n            r = r*p;\n            n = m;\n        }\n\
    \        return r;\n", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n == 1) {\n            return p;\n        }\n        if (n %\
    \ 2 == 0) {\n            return modp(n / 2, p) * p;\n        }\n        return\
    \ modp(n / 2, p) * p + modp(n / 2, p);\n", "        long result = 1;\n       \
    \ while (n > p) {\n            result *= p;\n            n -= p;\n        }\n\
    \        return n % p ? result : result * p % p;\n", "        long r = 1;\n  \
    \      long m = 1;\n        long t = 1;\n        long u = 1;\n        long v =\
    \ 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n        long\
    \ z = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n    \
    \    long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n      \
    \  long z = 1;\n        long a = 1;\n        long b = 1;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long ", "        long res = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 0) {\n                res =\
    \ (res * p) % p;\n            }\n            n /= 2;\n        }\n        return\
    \ res;\n", "        long res = 1;\n        while (n > 0) {\n            long r\
    \ = n % p;\n            res = (res * r) % p;\n            n = n / p;\n       \
    \ }\n        return res;\n", "        long res = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 0) {\n                res *= p;\n            }\n   \
    \         n /= 2;\n            p *= p;\n        }\n        return res;\n", " \
    \       if (n == 0 || p == 0)\n            return 1;\n        if (p > n)\n   \
    \         throw new IllegalArgumentException(\"p > n\");\n        if (p < 2)\n\
    \            return n;\n        if (p % 2 == 0)\n            return modp(n / 2,\
    \ p);\n        else\n            return modp(n / 2, p + 1) + modp(n / 2, p);\n",
  "        if (n == 0 || p == 0)\n            return 1;\n        if (p > n)\n    \
    \        throw new IllegalArgumentException(\"p > n\");\n        if (p < 2)\n\
    \            return n;\n        if (p % 2 == 0)\n            return modp(n / 2,\
    \ p);\n        else\n            return modp((n / 2) * (n % p), p);\n", "    \
    \    long r = 1;\n        while (n>0) {\n            long t = n%p;\n         \
    \   n = p;\n            p = t;\n        }\n        return r;\n", "        if (n\
    \ == 0 || p == 0) return 1;\n        if (n == 1) return p;\n        if (p == 1)\
    \ return n;\n        if (n % 2 == 0) return modp(n / 2, p);\n        return modp((n\
    \ - 1) / 2, p * p) % p;\n", "        if (n == 0 || p == 0)\n            return\
    \ 1;\n        if (n == 1)\n            return p;\n        if (p == 1)\n      \
    \      return n;\n        if (p % 2 == 0)\n            return modp(n / 2, p) *\
    \ modp(n / 2, p);\n        else\n            return modp(n / 2, p) * modp(n /\
    \ 2, p + 2);\n", "        if (n == 0) {\n            return 1;\n        }\n  \
    \      if (n == 1) {\n            return p;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) % p;\n        }\n        return modp((n\
    \ - 1) / 2, p) * p;\n", "        if (n == 0) {\n            return 1;\n      \
    \  }\n        if (n == 1) {\n            return p;\n        }\n        if (n %\
    \ 2 == 0) {\n            return modp(n / 2, p);\n        }\n        return modp(n\
    \ / 2, p) * p;\n", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n == 1) {\n            return p;\n        }\n        if (n % 2 ==\
    \ 0) {\n            return modp(n / 2, p) * p;\n        }\n        return modp(n\
    \ / 2, p) * p + modp((n - 1) / 2, p);\n", "        if (n == 0) {\n           \
    \ return 1;\n        }\n        if (n == 1) {\n            return p;\n       \
    \ }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * p;\n     \
    \   }\n        return modp(n / 2, p) * p + modp((n - 1) / 2, p);\n", "       \
    \ if (n == 0) return 1;\n        if (n == p) return n;\n        if (n < p) return\
    \ modp(n, p - 1);\n        return modp((n - p + 1), p);\n", "        if (n ==\
    \ 0 || p == 0)\n            return 1;\n        if (n == p)\n            return\
    \ n;\n        if (n < p)\n            return modp(n, p - 1);\n        long r =\
    \ 1;\n        while (n >= p) {\n            long t = n;\n            n = p - t;\n\
    \            r = r * t;\n        }\n        return r;\n", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ p;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p)\
    \ * p;\n        }\n        return modp((n - 1) / 2, p) * p + p;\n", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n      \
    \      return p;\n        }\n        if (n % 2 == 0) {\n            return modp(n\
    \ / 2, p) * p;\n        }\n        return modp(n / 2, p) * p + modp(n / 2, p);\n",
  "        if (n == 0 || p == 0)\n            return 1;\n        if (p > n)\n    \
    \        throw new IllegalArgumentException(\"p must be <= n\");\n        if (p\
    \ < 2)\n            return 0;\n        long res = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 1)\n                res *= p;\n            n /= 2;\n\
    \            p /= 2;\n        }\n        return res;\n", "        if (n == 0 ||\
    \ p == 0) {\n            return 1;\n        }\n        long res = 1;\n       \
    \ while (n != 0) {\n            if (n % 2 == 0) {\n                res = (res\
    \ * p) % p;\n            }\n            n /= 2;\n        }\n        return res;\n",
  "        if (n == 0 || p == 0)\n            return 0;\n        if (n >= p)\n   \
    \         return 1;\n        if (n % 2 == 0)\n            return modp(n / 2, p);\n\
    \        else\n            return modp(n / 2, p) * modp((n - 1) / 2, p);\n", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return p;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p);\n        }\n        return modp((n - 1) / 2, p * p + n % 2);\n",
  "        if (n == 0 || p == 0) {\n            return 1;\n        }\n        long\
    \ r = 1;\n        while (n > 0) {\n            r = r * n % p;\n            n =\
    \ n / p;\n        }\n        return r;\n", "        if (n == 0) {\n          \
    \  return 1;\n        }\n        if (n == 1) {\n            return p;\n      \
    \  }\n        if (n % 2 == 0) {\n            return modp(n / 2, p);\n        }\n\
    \        return modp(n / 2, p) * p;\n", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return p;\n        }\n   \
    \     long res = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return\
    \ (res * res) % p;\n        } else {\n            return (res * res * res) % p;\n\
    \        }\n", "        if (n == 0 || p == 0)\n            return 1;\n       \
    \ if (n >= p)\n            return modp(n / p, p);\n        return modp(n % p,\
    \ p) * modp(n / p, p);\n", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n == 1) {\n            return p;\n        }\n        if (n\
    \ % 2 == 0) {\n            return modp(n / 2, p) * p;\n        }\n        return\
    \ modp(n / 2, p) * p + modp(n / 2, p);\n", "        if (n == 0 || p == 0)\n  \
    \          return 0;\n        if (n >= p)\n            return 1;\n        if (n\
    \ == p)\n            return n;\n        long q = modp(n / p, p);\n        if (n\
    \ % p == 0)\n            return q * q * p;\n        else\n            return q\
    \ * q;\n", "        if (n == 0 || p == 0)\n            return 1;\n        if (n\
    \ >= p)\n            return modp(n - p, p);\n        return modp(n / p, p) * p;\n",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return p;\n        }\n        long q = modp(n / 2, p);\n        if\
    \ (n % 2 == 0) {\n            return q * q * p;\n        }\n        return q *\
    \ q * (p - 1);\n", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n == 1) {\n            return p;\n        }\n        if (p % 2 ==\
    \ 0) {\n            return modp(n / 2, p) + modp((n / 2) * 2, p);\n        }\n\
    \        return modp(n / 2, p) + modp((n / 2) * 2, p) + modp(n / 2, p);\n", " \
    \       if (n == 0 || p == 0)\n            return 1;\n        if (n >= p)\n  \
    \          return modp(n / p, p);\n        else\n            return modp((n %\
    \ p) + p, p);\n", "        long res = 1;\n        while (n>0) {\n            long\
    \ t = n%p;\n            res = (res * t) % p;\n            n = n/p;\n        }\n\
    \        return res;\n", "        if (n == 0 || p == 0)\n            return 1;\n\
    \        if (p > n)\n            return modp(n - p, p);\n        if (p < n)\n\
    \            return modp(n, p - n);\n        long res = 1;\n        while (n >\
    \ 0) {\n            if (n % 2 == 1)\n                res = (res * p) % p;\n  \
    \          n /= 2;\n            p /= 2;\n        }\n        return res;\n", " \
    \       if (n == 0 || p == 0) return 1;\n        if (n >= p) return modp(n - 1,\
    \ p) % p;\n        return modp(p, n) % p;\n", "        long r = 1;\n        while\
    \ (n>0) {\n            long m = n%p;\n            n = n/p;\n            r = r*m;\n\
    \        }\n        return r;\n", "        long res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n", "       \
    \ if (n == 0)\n            return 1;\n        if (p == 0)\n            return\
    \ 0;\n        if (p > n)\n            throw new IllegalArgumentException(\"p must\
    \ be less than n\");\n        long res = 1;\n        while (p > 0) {\n       \
    \     if (n % 2 == 1)\n                res *= p;\n            p /= 2;\n      \
    \      n /= 2;\n        }\n        return res;\n", "        if (n == 0 || p ==\
    \ 0) {\n            return 0;\n        }\n        if (n < 0) {\n            n\
    \ = -n;\n        }\n        if (p < 0) {\n            p = -p;\n        }\n   \
    \     if (p > n) {\n            throw new IllegalArgumentException(\"p must be\
    \ <= n\");\n        }\n        if (p % 2 == 0) {\n            return 1;\n    \
    \    }\n        long res = 1;\n        while (n > 0) {\n            if (n % 2\
    \ == 0) {\n                res = (res * p) % p;\n            }\n            n\
    \ = n / 2;\n        }\n        return res;\n", "        if (n == 0 || p == 0)\
    \ {\n            return 1;\n        }\n        if (p > n) {\n            throw\
    \ new IllegalArgumentException(\"p must be <= n\");\n        }\n        long res\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   res *= p;\n            }\n            n /= 2;\n            p *= p;\n     \
    \   }\n        return res;\n", "        if (n == 0 || p == 0) {\n            return\
    \ 1;\n        }\n        if (n >= p) {\n            return modp(n - p, p);\n \
    \       }\n        long r = 1;\n        while ((n & 1) == 0) {\n            n\
    \ >>>= 1;\n            r *= p;\n        }\n        while ((n & 1) == 1) {\n  \
    \          n >>>= 1;\n            r *= p;\n        }\n        return r;\n", " \
    \       long r = 1;\n        while (r < p) {\n            r *= 2;\n        }\n\
    \        while (r > p) {\n            r /= 2;\n        }\n        return n % r;\n",
  "        if (n == 0 || p == 0)\n            return 0;\n        if (n == 1)\n   \
    \         return p;\n        if (p % 2 == 0)\n            return modp(n / 2, p);\n\
    \        else\n            return modp(n / 2, p + p) % p;\n", "        long res\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   res = (res * p) % p;\n            }\n            n = n / 2;\n        }\n \
    \       return res;\n", "        if (n == 0 || p == 0)\n            return 1;\n\
    \        if (n >= p)\n            return modp(n - p, p);\n        long q = modp(n\
    \ / p, p);\n        return q * p + (n % p);\n", "        long res = 1;\n     \
    \   while (n>0) {\n            if (n&1)\n                res*=p;\n           \
    \ n >>>= 1;\n            p*=p;\n        }\n        return res;\n", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n      \
    \      return p;\n        }\n        if (n % 2 == 0) {\n            return modp(n\
    \ / 2, p);\n        } else {\n            return modp((n - 1) / 2, p * p + n %\
    \ 2);\n        }\n", "        long r = 1;\n        while (n > 0) {\n         \
    \   long m = n & -p;\n            n ^= m;\n            r = (r * m) % p;\n    \
    \    }\n        return r;\n", "        long r = 1;\n        while (n > 0) {\n\
    \            r = r * p % n;\n            n = n / 2;\n        }\n        return\
    \ r;\n", "        long r = 1;\n        while (n > 0) {\n            r = r * p\
    \ % n;\n            n = n / 2;\n        }\n        return r;\n", "        if (n\
    \ == 0 || p == 0)\n            return 1;\n        if (n >= p)\n            return\
    \ modp(n - p, p);\n        if (n % 2 == 0)\n            return modp(n / 2, p);\n\
    \        return modp(n / 2, p) + modp(n / 2, p) % p;\n", "        long r = 1;\n\
    \        while (n > 0) {\n            r = r * p % n;\n            n = n / 2;\n\
    \        }\n        return r;\n", "        long res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n   \
    \         }\n            n = n / 2;\n        }\n        return res;\n", "    \
    \    long res = 1;\n        while (n > 0) {\n            long r = n % p;\n   \
    \         res = (res * r) % p;\n            n = n / p;\n        }\n        return\
    \ res;\n", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return p;\n        }\n        if (n % 2 == 0) {\n  \
    \          return modp(n / 2, p);\n        }\n        return modp(n / 2, p * p)\
    \ % p;\n", "        if (n == 0 || p == 0) {\n            return 1;\n        }\n\
    \        long res = 1;\n        while (n != 0) {\n            if (n % 2 == 1)\
    \ {\n                res = (res * p) % p;\n            }\n            n /= 2;\n\
    \            p = (p * p) % p;\n        }\n        return res;\n", "        if\
    \ (n == 0) return 1;\n        if (n == 1) return p;\n        if (n == 2) return\
    \ p + 1;\n        if (n % 2 == 0) return modp(n / 2, p) + modp(n / 2, p);\n  \
    \      return modp(n / 2, p) + modp(n / 2, p) + modp(n / 2, p);\n", "        if\
    \ (n == 0 || p == 0)\n            return 0;\n        if (n >= p)\n           \
    \ return 1;\n        if (n % 2 == 0)\n            return modp(n / 2, p);\n   \
    \     else\n            return modp((n / 2) * (p + 1), p);\n", "        long r\
    \ = 1;\n        while (p != 0) {\n            if (n % p == 0) {\n            \
    \    n /= p;\n                r *= p;\n            }\n            p >>= 1;\n \
    \       }\n        return r;\n", "        if (n == 0 || p == 0) {\n          \
    \  return 1;\n        }\n        if (p > n) {\n            throw new IllegalArgumentException(\"\
    p must be <= n\");\n        }\n        long res = 1;\n        while (n > 0) {\n\
    \            long t = n & -p;\n            res = (res * t) % p;\n            n\
    \ ^= t;\n        }\n        return res;\n", "        if (n == 0 || p == 0) {\n\
    \            return 0;\n        }\n        long r = 1;\n        while (n > 0)\
    \ {\n            r = r * p % n;\n            n /= 2;\n        }\n        return\
    \ r;\n", "        long res = 1;\n        while (n>0) {\n            long t = n%p;\n\
    \            res = (res * t) % p;\n            n = n/p;\n        }\n        return\
    \ res;\n", "        long r = 1;\n        while (n > 0) {\n            long t =\
    \ r * n % p;\n            r = t;\n            n /= p;\n        }\n        return\
    \ r;\n", "        if (n == 0 || p == 0)\n            return 1;\n        if (n\
    \ >= p)\n            return modp(n / p, p);\n        else\n            return\
    \ modp(n % p, p) * modp(n / p, p);\n", "        if (n == 0)\n            return\
    \ 1;\n        if (n == 1)\n            return p;\n        if (n % 2 == 0)\n  \
    \          return modp(n / 2, p);\n        else\n            return modp(n / 2,\
    \ p * p + n % 2);\n", "        if (n == 0 || p == 0)\n            return 1;\n\
    \        if (p > n)\n            throw new IllegalArgumentException(\"p > n\"\
    );\n        if (p < 2)\n            return n;\n        if (p % 2 == 0)\n     \
    \       return modp(n >> 1, p);\n        else\n            return modp(n >> 1,\
    \ p + p / 2);\n", "        if (n == 0 || p == 0) {\n            return 1;\n  \
    \      }\n        long res = 1;\n        while (n != 0) {\n            if (n %\
    \ 2 == 1) {\n                res = (res * p) % p;\n            }\n           \
    \ n = n / 2;\n            p = p / 2;\n        }\n        return res;\n", "   \
    \     if (n == 0 || p == 0)\n            return 1;\n        if (n >= p)\n    \
    \        return modp(n - p, p);\n        if (n % p == 0)\n            return modp(n\
    \ / p, p);\n        return modp(n / p + p, p);\n", "        long r = 1;\n    \
    \    while (p != 0) {\n            long q = p / n;\n            long r = r * q\
    \ % p;\n            p = q;\n        }\n        return r;\n", "        if (n ==\
    \ 0)\n            return 1;\n        if (n == 1)\n            return p;\n    \
    \    if (n % 2 == 0)\n            return modp(n / 2, p) * p;\n        else\n \
    \           return modp(n / 2, p) * (p - 1);\n", "        long r = 1;\n      \
    \  while (n > 0) {\n            long t = n & -p;\n            n ^= t;\n      \
    \      r = (r * t) % p;\n        }\n        return r;\n", "        long res =\
    \ 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n               \
    \ res = (res*p) % p;\n            }\n            n /= 2;\n        }\n        return\
    \ res;\n", "        if (n == 0) return 1;\n        if (n == 1) return p;\n   \
    \     if (n == 2) return p * p;\n        if (n % 2 == 0) return modp(n / 2, p)\
    \ * p;\n        return modp(n / 2, p) * p * p;\n", "        if (n == 0) {\n  \
    \          return 1;\n        }\n        if (n == 1) {\n            return p;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p);\n  \
    \      } else {\n            return modp((n - 1) / 2, p * p + n % 2);\n      \
    \  }\n", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return p;\n        }\n        if (n % 2 == 0) {\n  \
    \          return modp(n / 2, p);\n        } else {\n            return modp(n\
    \ / 2, p * p) % p;\n        }\n", "        long r = 1;\n        while (r < p)\
    \ {\n            r *= 2;\n        }\n        return n % r;\n", "        if (n\
    \ == 0 || p == 0)\n            return 1;\n        if (n >= p)\n            return\
    \ modp(n - p, p);\n        long r = 1;\n        while (n > 0) {\n            long\
    \ m = n / p;\n            long r = r * m % p;\n            n = n % p;\n      \
    \  }\n        return r;\n", "        long res = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 0) {\n                res = (res * p) % p;\n       \
    \     }\n            n /= 2;\n        }\n        return res;\n", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return p;\n        }\n        if (n % 2 == 0) {\n            return modp(n\
    \ / 2, p);\n        }\n        return modp(n / 2, p * p) % p;\n", "        long\
    \ res = 1;\n        while (n != 0) {\n            long tmp = n % p;\n        \
    \    res = (res * tmp) % p;\n            n = n / p;\n        }\n        return\
    \ res;\n", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return p;\n        }\n        if (n % 2 == 0) {\n  \
    \          return modp(n / 2, p) * p;\n        }\n        return modp((n - 1)\
    \ / 2, p) * p + p;\n", "        long res = 1;\n        while (n > 0) {\n     \
    \       if (n % 2 == 0) {\n                res = (res * p) % p;\n            }\n\
    \            n /= 2;\n        }\n        return res;\n", "        if (n == 0 ||\
    \ p == 0)\n            return 0;\n        if (n >= p)\n            return 1;\n\
    \        if (n == p)\n            return n;\n        long r = modp(n - 1, p) %\
    \ p;\n        if (n < p)\n            return r;\n        return (r * r) % p;\n",
  "        long res = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n\
    \                res = (res * p) % p;\n            }\n            n /= 2;\n  \
    \      }\n        return res;\n", "        long res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;\n", "       \
    \ long res = 1;\n        while (n > 0) {\n            long t = n % p;\n      \
    \      res = (res * t) % p;\n            n = n / p;\n        }\n        return\
    \ res;\n", "        if (n == 0 || p == 0)\n            return 1;\n        if (p\
    \ > n)\n            throw new IllegalArgumentException(\"p must be <= n\");\n\
    \        if (p < 2)\n            return 1;\n        if (p % 2 == 0)\n        \
    \    return modp(n >> 1, p);\n        long res = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 1)\n                res = (res * p) % p;\n         \
    \   n /= 2;\n        }\n        return res;\n", "        long res = 1;\n     \
    \   while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res\
    \ * p) % p;\n            }\n            n /= 2;\n        }\n        return res;\n",
  "        if (n >= p) {\n            long r = n - ((n & -p) + (p & -n));\n      \
    \      if (r < 0) r += p;\n            return r;\n        }\n        return 0;\n",
  "        long res = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n\
    \                res = (res * p) % p;\n            }\n            n /= 2;\n  \
    \      }\n        return res;\n", "        long res = 1;\n        while (n !=\
    \ 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n\
    \            }\n            n /= 2;\n        }\n        return res;\n", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return p;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p) * p;\n        }\n        return modp(n / 2, p) * p + modp(n /\
    \ 2, p);\n", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n == 1) {\n            return p;\n        }\n        long res = modp(n\
    \ / 2, p);\n        if (n % 2 == 0) {\n            return res * res + p;\n   \
    \     } else {\n            return res * res - p;\n        }\n", "        if (n\
    \ == 0)\n            return 1;\n        if (n == 1)\n            return p;\n \
    \       if (n % 2 == 0)\n            return modp(n / 2, p) * p;\n        else\n\
    \            return modp(n / 2, p) * (p - 1);\n", "        if (n >= p) {\n   \
    \         return 1;\n        }\n        if (n < p) {\n            return 0;\n\
    \        }\n        long r = 1;\n        while (n > 0) {\n            r = r *\
    \ n % p;\n            n = n / p;\n        }\n        return r;\n", "        long\
    \ r = 1;\n        while ((n & 1) == 0) {\n            r <<= 1;\n            n\
    \ >>= 1;\n        }\n        while ((p & 1) == 0) {\n            p >>= 1;\n  \
    \      }\n        while ((n & p) == 0) {\n            n ^= p;\n            r ^=\
    \ p;\n            p ^= n;\n        }\n        return r;\n", "        long r =\
    \ 1;\n        while (n > 0) {\n            r = r * p % n;\n            n /= 2;\n\
    \        }\n        return r;\n", "        long r = 1;\n        while (n > 0)\
    \ {\n            long m = n / p;\n            long t = r * m;\n            r =\
    \ t;\n            n = n - m;\n        }\n        return r;\n", "        if (n\
    \ == 0 || p == 0)\n            return 1;\n        if (p > n)\n            return\
    \ modp(n, p % n);\n        if (n % p == 0)\n            return modp(n / p, p);\n\
    \        return modp(n / p, p) % p;\n", "        long r = 1;\n        while (r\
    \ < p) {\n            r *= 2;\n        }\n        return n % r;\n", "        if\
    \ (n == 0 || p == 0)\n            return 1;\n        if (n >= p)\n           \
    \ return modp(n - p, p);\n        return modp(n / p, p) * p;\n", "        if (n\
    \ == 0 || p == 0)\n            return 1;\n        if (p > n)\n            return\
    \ modp(n, p % n);\n        if (p < n)\n            return modp(n, p % n);\n  \
    \      if (p == n)\n            return p;\n        if (p == 1)\n            return\
    \ n;\n        if (p == 2)\n            return n;\n        if (p == 3)\n      \
    \      return n;\n        if (p == 4)\n            return n;\n        if (p ==\
    \ 5)\n            return n;\n        if (p == 6)\n            return n;\n    \
    \    if (p == 7)\n            return n;\n        if (p == 8)\n            return\
    \ n;\n        if (p == 9)\n            return n;\n        if (p == 10)\n     \
    \       return n;\n        if (p == 11)\n            return n;\n        if (p\
    \ == 12)\n            return n;\n        if (p == 13)\n            return n;\n\
    \        if (p == 14)\n            return n;\n        if (p == 15)\n         \
    \   return n;\n        if (p == 16)\n            return n;\n        if (p == 17)\n\
    \            return n;\n        if (p == 18)\n            return n;\n        if\
    \ (p == 19)\n            return n;\n        if (p == 20)\n            return n;\n\
    \        if (p == 21)\n            return n;\n        if (p == 22)\n         \
    \   return n;\n        if (p == 23)\n            return n;\n        if (p == 24)\n\
    \            return n;\n        if (p == 25)\n            return n;\n        if\
    \ (p == 26)\n            return n;\n        if (p == 27)\n            return n;\n\
    \        if (p == 28)\n            return n;\n        if (p == 29)\n         \
    \   return n;\n        if (p == 30)\n            return n;\n        if (p == 31)\n\
    \            return n;\n        if (p == 32)\n            return n;\n        if\
    \ (p == 33)\n            return n;\n        if (p == 34)\n            return n;\n\
    \        if (p == 35)\n            return n;\n        if (p == 36)\n         \
    \   return n;\n        if (p == 37)\n            return n;\n        if (p == 38)\n\
    \            return n;\n        if (p == 39)\n            return n;\n        if\
    \ (p == 40)\n            return n;\n        if (p == 41)\n            return n;\n\
    \        if (p == 42)\n            return n;\n        if (p == 43)\n         \
    \   return n;\n        if (p == 44)\n            return n;\n        if (p == 45)\n\
    \            return n;\n        if (p == 46)\n            return n;\n        if\
    \ (p == 47)\n            return n;\n        if (p == 48)\n            return n;\n\
    \        if (p == 49)\n            return n;\n        if (p == 50)\n         \
    \   return n;\n        if (p == 51)\n            return n;\n        if (p == 52)\n\
    \            return n;\n        if (p == 53)\n            return n;\n        if\
    \ (p == 54)\n            return n;\n        if (p == 55)\n            return n;\n\
    \        if (p == 56)\n            return n;\n        if (p", "        if (n ==\
    \ 0 || p == 0)\n            return 1;\n        if (p > n)\n            throw new\
    \ IllegalArgumentException(\"p must be <= n\");\n        if (p < 2)\n        \
    \    return 1;\n        if (p % 2 == 0)\n            return modp(n >> 1, p);\n\
    \        long res = 1;\n        while (n != 0) {\n            if (n % 2 == 1)\n\
    \                res *= p;\n            n /= 2;\n            p /= 2;\n       \
    \ }\n        return res;\n", "        if (n == 0 || p == 0)\n            return\
    \ 1;\n        if (p > n)\n            throw new IllegalArgumentException(\"p >\
    \ n\");\n        if (p < 2)\n            return n;\n        if (p % 2 == 0)\n\
    \            return modp(n >> 1, p);\n        long q = p / 2;\n        long r\
    \ = modp(n >> 1, q);\n        return (r * r) % p;\n", "        if (n == 0 || p\
    \ == 0)\n            return 1;\n        if (n >= p)\n            return modp(n\
    \ - p, p);\n        return modp(n - ((n & -p) + p), p);\n", "        if (n ==\
    \ 0 || p == 0)\n            return 1;\n        if (n >= p)\n            return\
    \ modp(n - p, p);\n        return modp((n - p) / 2, p) + modp(n / 2, p);\n", " \
    \       if (n == 0 || p == 0) {\n            return 1;\n        }\n        if\
    \ (p > n) {\n            throw new IllegalArgumentException(\"p must be <= n\"\
    );\n        }\n        long res = 1;\n        while (n > 0) {\n            long\
    \ r = n % p;\n            res = (res * r) % p;\n            n /= p;\n        }\n\
    \        return res;\n", "        long res = 1;\n        while (n > 0) {\n   \
    \         long tmp = n % p;\n            res = (res * tmp) % p;\n            n\
    \ = n / p;\n        }\n        return res;\n", "        long r = 1;\n        long\
    \ t = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n    \
    \    long t = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long t = 1;\n        long m = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long t = 1;\n        long m = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long t = 1;\n        long m = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long t = 1;\n        long m = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long t = 1;\n        long m = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long t = 1;\n        long m = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long t = 1;\n        long m\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long t = 1;\n      \
    \  long m = 1;\n        long q = 1;\n        long r = 1;\n        long t = 1;\n\
    \        long m = 1;\n        long q = 1;\n        long r = 1;\n        long t\
    \ = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long t = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long t = 1;\n        long m = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long t = 1;\n        long m = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long t = 1;\n        long m = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long t = 1;\n        long m = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long t = 1;\n        long m = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long t = 1;\n        long m = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long t = 1;\n        long m\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long t = 1;\n      \
    \  long m = 1;\n        long q = 1;\n        long r = 1;\n        long t = 1;\n\
    \        long m = 1;\n        long q = 1;\n        long r = 1;\n        long t\
    \ = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long t = 1;\n        long m = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long t = 1;\n        long m = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long t = 1;\n        long ", "        if (n == 0 || p == 0)\n\
    \            return 1;\n        if (n == p)\n            return n;\n        if\
    \ (n < p)\n            return modp(n - p, p);\n        return modp((p - n) % p,\
    \ p);\n", "        long res = 1;\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) {\n                res = (res * p) % p;\n            }\n           \
    \ n = n / 2;\n        }\n        return res;\n", "        if (n == 0) {\n    \
    \        return 1;\n        }\n        if (n == 1) {\n            return p;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * p;\n\
    \        }\n        return modp(n / 2, p) * (p + modp(n / 2, p));\n", "      \
    \  if (n >= p) {\n            return n;\n        }\n        long r = 1;\n    \
    \    while (n > 0) {\n            long m = n / p;\n            long r = r * m\
    \ % p;\n            n = m / p;\n        }\n        return r;\n", "        if (n\
    \ == 0 || p == 0) {\n            return 1;\n        }\n        if (n >= p) {\n\
    \            return modp(n / p, p);\n        }\n        return modp(n % p, p)\
    \ * p;\n", "        if (n >= p) {\n            return 1;\n        }\n        if\
    \ (n < p) {\n            return 0;\n        }\n        long res = 1;\n       \
    \ while (n >= p) {\n            res *= p;\n            n -= p;\n        }\n  \
    \      return res;\n", "        if (n == 0 || p == 0)\n            return 0;\n\
    \        if (n >= p)\n            return 1;\n        if (n % 2 == 0)\n       \
    \     return modp(n / 2, p);\n        return modp(n / 2, p) * modp((n - 1) / 2,\
    \ p);\n", "        if (n == 0 || p == 0)\n            return 1;\n        if (p\
    \ > n)\n            throw new IllegalArgumentException(\"p must be <= n\");\n\
    \        if (p < 2)\n            return n;\n        if (p == 2)\n            return\
    \ n;\n        if (p == 3)\n            return n;\n        if (p == 5)\n      \
    \      return n;\n        if (p == 7)\n            return n;\n        if (p ==\
    \ 9)\n            return n;\n        if (p == 13)\n            return n;\n   \
    \     if (p == 17)\n            return n;\n        if (p == 19)\n            return\
    \ n;\n        if (p == 21)\n            return n;\n        if (p == 23)\n    \
    \        return n;\n        if (p == 25)\n            return n;\n        if (p\
    \ == 27)\n            return n;\n        if (p == 29)\n            return n;\n\
    \        if (p == 31)\n            return n;\n        if (p == 33)\n         \
    \   return n;\n        if (p == 35)\n            return n;\n        if (p == 37)\n\
    \            return n;\n        if (p == 39)\n            return n;\n        if\
    \ (p == 41)\n            return n;\n        if (p == 43)\n            return n;\n\
    \        if (p == 45)\n            return n;\n        if (p == 47)\n         \
    \   return n;\n        if (p == 49)\n            return n;\n        if (p == 51)\n\
    \            return n;\n        if (p == 53)\n            return n;\n        if\
    \ (p == 55)\n            return n;\n        if (p == 57)\n            return n;\n\
    \        if (p == 59)\n            return n;\n        if (p == 61)\n         \
    \   return n;\n        if (p == 63)\n            return n;\n        if (p == 65)\n\
    \            return n;\n        if (p == 67)\n            return n;\n        if\
    \ (p == 69)\n            return n;\n        if (p == 71)\n            return n;\n\
    \        if (p == 73)\n            return n;\n        if (p == 75)\n         \
    \   return n;\n        if (p == 77)\n            return n;\n        if (p == 79)\n\
    \            return n;\n        if (p == 81)\n            return n;\n        if\
    \ (p == 83)\n            return n;\n        if (p == 85)\n            return n;\n\
    \        if (p == 87)\n            return n;\n        if (p == 89)\n         \
    \   return n;\n        if (p == 91)\n            return n;\n        if (p == 93)\n\
    \            return n;\n        if (p == 95)\n            return n;\n        if\
    \ (p == 97)\n            return n;\n        if (p == 99)\n            return n;\n\
    \        if (p == 101)\n            return n;\n        if (p == 103)\n       \
    \     return n;\n        if (p == 105)\n            return n;\n        if (p ==\
    \ 107)\n            return n;\n        if (p == 109)\n            return n;\n\
    \        if (p == 111)\n            return n;\n        if (p == 113)\n       \
    \     return n;\n        if (p == 115)\n            return n;\n        if (p == ",
  "        if (n == 0 || p == 0) {\n            return 1;\n        }\n        if (p\
    \ > n) {\n            throw new IllegalArgumentException(\"p must be <= n\");\n\
    \        }\n        if (p % 2 == 0) {\n            return modp(n >> 1, p);\n \
    \       }\n        long res = 1;\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) {\n                res = (res * p) % p;\n            }\n           \
    \ n /= 2;\n        }\n        return res;\n", "        if (n >= p) {\n       \
    \     return 1;\n        }\n        if (n < p) {\n            return 0;\n    \
    \    }\n        long r = n % p;\n        if (r == 0) {\n            return 1;\n\
    \        }\n        if (p % 2 == 0) {\n            return modp(r, p);\n      \
    \  }\n        return modp(r / 2, p) * modp(r / 2, p);\n", "        if (n == 0\
    \ || p == 0)\n            return 1;\n        if (p > n)\n            throw new\
    \ IllegalArgumentException(\"p must be <= n\");\n        if (p < 2)\n        \
    \    return n;\n        if (p % 2 == 0)\n            return modp(n >> 1, p) %\
    \ p;\n        else\n            return modp(n >> 1, p) % p;\n", "        long\
    \ res = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n         \
    \       res = (res * p) % p;\n            }\n            n /= 2;\n        }\n\
    \        return res;\n", "        long res = 1;\n        while (n != 0) {\n  \
    \          if (n % 2 == 0) {\n                res = (res * p) % p;\n         \
    \   }\n            n /= 2;\n        }\n        return res;\n", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return p;\n        }\n        if (n % 2 == 0) {\n            return modp(n\
    \ / 2, p) * p;\n        }\n        return modp(n / 2, p) * p + modp(n / 2, p);\n",
  "        if (n == 0 || p == 0)\n            return 1;\n        if (n >= p)\n   \
    \         return modp(n / p, p);\n        return modp(n % p, p) * modp(n / p,\
    \ p);\n", "        long res = 1;\n        while (n > 0) {\n            long t\
    \ = n & -p;\n            res = (res << p) + t;\n            n ^= t;\n        }\n\
    \        return res;\n", "        long r = 1;\n        while (n>0) {\n       \
    \     long t = n%p;\n            n = p;\n            p = t;\n            r = (r*p)%p;\n\
    \        }\n        return r;\n", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return p;\n        }\n        if\
    \ (n % 2 == 0) {\n            return modp(n / 2, p);\n        }\n        return\
    \ modp((n - 1) / 2, p * p + n % 2);\n", "        if (n == 0 || p == 0)\n     \
    \       return 1;\n        if (n == p)\n            return n;\n        if (n <\
    \ p)\n            return modp(n - p, p);\n        return modp((p - n) % p, p);\n",
  "        long res = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n\
    \                res = (res * p) % p;\n            }\n            n = n / 2;\n\
    \        }\n        return res;\n", "        if (n == 0 || p == 0) {\n       \
    \     return 1;\n        }\n        long r = 1;\n        while (n > 0) {\n   \
    \         long m = n / p;\n            long t = r * m;\n            if (t > p)\
    \ {\n                t = p - t;\n            }\n            r = t;\n         \
    \   n = n - m;\n        }\n        return r;\n", "        if (n >= p) {\n    \
    \        return 1;\n        }\n        if (n < p) {\n            return 0;\n \
    \       }\n        long res = 1;\n        while (n > 0) {\n            long r\
    \ = n % p;\n            res = (res * r) % p;\n            n = n / p;\n       \
    \ }\n        return res;\n", "        if (n == 0 || p == 0)\n            return\
    \ 1;\n        if (p > n)\n            throw new IllegalArgumentException(\"p must\
    \ be less than n\");\n        long res = 1;\n        while (p > 1) {\n       \
    \     if (p % 2 == 1)\n                res = (res * n) % p;\n            n = ((n\
    \ * (n % p)) % p) % p;\n            p = p / 2;\n        }\n        return res;\n",
  "        long res = 1;\n        while (n>0) {\n            long t = n%p;\n     \
    \       res = (res * t) % p;\n            n = n/p;\n        }\n        return\
    \ res;\n", "        long res = 1;\n        while (n > 0) {\n            long r\
    \ = n % p;\n            res = (res * r) % p;\n            n = n / p;\n       \
    \ }\n        return res;\n", "        if (n == 0 || p == 0) {\n            return\
    \ 0;\n        }\n        long r = 1;\n        while ((n & 1) == 0) {\n       \
    \     n >>>= 1;\n            r *= p;\n        }\n        while ((p & 1) == 0)\
    \ {\n            p >>>= 1;\n            r = (r * p) % p;\n        }\n        return\
    \ r;\n", "        if (n == 0 || p == 0)\n            return 1;\n        if (p\
    \ > n)\n            throw new IllegalArgumentException(\"p > n\");\n        if\
    \ (p < 2)\n            return n;\n        if (p % 2 == 0)\n            return\
    \ modp(n >> 1, p);\n        else\n            return modp((n & 1) << 1, p) + modp((n\
    \ >> 1) & 1, p);\n", "        if (n == 0 || p == 0)\n            return 1;\n \
    \       if (n == 1)\n            return p;\n        if (p == 1)\n            return\
    \ n;\n        if (n % 2 == 0)\n            return modp(n / 2, p);\n        else\n\
    \            return modp((n - 1) / 2, p * p + n % 2);\n", "        if (n == 0\
    \ || p == 0) {\n            return 1;\n        }\n        long res = 1;\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) {\n                res = (res\
    \ * p) % p;\n            }\n            n /= 2;\n            p = (p * p) % p;\n\
    \        }\n        return res;\n", "        long r = 1;\n        while (r < p)\
    \ {\n            r *= 2;\n        }\n        return n % p;\n", "        long res\
    \ = 1;\n        while (n>0) {\n            long t = n%p;\n            res = (res\
    \ * t) % p;\n            n = n/p;\n        }\n        return res;\n", "      \
    \  long res = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n   \
    \             res = (res * p) % p;\n            }\n            n /= 2;\n     \
    \   }\n        return res;\n", "        long res = 1;\n        long q = p / n;\n\
    \        long r = p % n;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                res = (res * q) % p;\n            }\n            n = n /\
    \ 2;\n            q = (q * q) % p;\n            r = (r * r) % p;\n        }\n\
    \        return (res * r) % p;\n", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return p;\n        }\n   \
    \     if (n % 2 == 0) {\n            return modp(n / 2, p);\n        } else {\n\
    \            return modp((n - 1) / 2, p * p + n % 2);\n        }\n", "       \
    \ long res = 1;\n        while (n > 0) {\n            long r = n % p;\n      \
    \      res = (res * r) % p;\n            n = n / p;\n        }\n        return\
    \ res;\n", "        long r = 1;\n        while (r < p) {\n            r *= 2;\n\
    \        }\n        return n % r;\n", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return p;\n        }\n   \
    \     if (n % 2 == 0) {\n            return modp(n / 2, p) * p;\n        }\n \
    \       return modp(n / 2, p) * p + modp(n / 2, p);\n", "        if (n == 0 ||\
    \ p == 0) return 1;\n        if (p > n) return modp(n, p - 1);\n        if (p\
    \ < n) return modp(n - p, p);\n        return n;\n", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return p;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p);\n  \
    \      }\n        return modp(n / 2, p) * p;\n", "        if (n == 0 || p == 0)\n\
    \            return 1;\n        if (n < p)\n            return modp(n - p, p);\n\
    \        if (n == p)\n            return n;\n        if (n % p == 0)\n       \
    \     return modp(n / p, p);\n        return modp(n / p, p) + modp(n % p, p);\n",
  "        if (n == 0 || p == 0) return 1;\n        if (p > n) return modp(n - p,\
    \ p);\n        if (p < n) return modp(n, p - n);\n        long res = 1;\n    \
    \    while (n > 0) {\n            long tmp = n % p;\n            n /= p;\n   \
    \         res = (res * tmp) % p;\n        }\n        return res;\n", "       \
    \ if (n == 0) return 1;\n        if (n == 1) return p;\n        if (n % 2 == 0)\
    \ return modp(n / 2, p) * p;\n        return modp(n / 2, p) * p + modp((n - 1)\
    \ / 2, p);\n", "        long res = 1;\n        while (n > 0) {\n            if\
    \ (n % 2 == 0) {\n                res = (res*p) % p;\n            }\n        \
    \    n /= 2;\n        }\n        return res;\n", "        long res = 1;\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) {\n                res *= p;\n\
    \            }\n            n /= 2;\n            p *= p;\n        }\n        return\
    \ res;\n", "        if (n == 0) return 1;\n        if (n == 1) return p;\n   \
    \     if (n == 2) return p + p;\n        if (n % 2 == 0) return modp(n / 2, p)\
    \ + modp(n / 2, p);\n        return modp(n / 2, p) + modp(n / 2, p) + modp(n /\
    \ 2, p);\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
