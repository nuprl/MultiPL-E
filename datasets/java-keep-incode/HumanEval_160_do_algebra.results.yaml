name: HumanEval_160_do_algebra
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\":\n                        result += operand1;\n           \
    \             result += operand2;\n                        break;\n          \
    \          case \"-\":\n                        result -= operand1;\n        \
    \                result -= operand2;\n                        break;\n       \
    \             case \"*\":\n                        result *= operand1;\n     \
    \                   result *= operand2;\n                        break;\n    \
    \                case \"//\":\n                        result /= operand1;\n \
    \                       result /= operand2;\n                        break;\n\
    \                    case \"**\":\n                        result **= operand1;\n\
    \                        result **= operand2;\n                        break;\n\
    \                    default:\n                        throw new RuntimeException(\"\
    Invalid operator: \" + operator);\n                }\n            } catch(ArithmeticException\
    \ e) {\n                throw new RuntimeException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88b707tc.java:52: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n/tmp/tmp88b707tc.java:53:\
    \ error: illegal start of expression\n                        result **= operand2;\n\
    \                                ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                String\
    \ operator = _operator_.get(j);\n                long operand2 = operand.get(i\
    \ + 1);\n                switch(operator) {\n                    case \"+\": result\
    \ += operand1; break;\n                    case \"-\": result -= operand1; break;\n\
    \                    case \"*\": result *= operand1; break;\n                \
    \    case \"//\": result /= operand1; break;\n                    case \"**\"\
    : result *= operand1; result *= operand1; break;\n                    default:\
    \ break;\n                }\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpfvs_wxrz.java:33)\n\tat Problem.main(tmpfvs_wxrz.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphkvtnqno.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmphkvtnqno.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\": result = result + operand.get(i); break;\n\
    \                    case \"-\": result = result - operand.get(i); break;\n  \
    \                  case \"*\": result = result * operand.get(i); break;\n    \
    \                case \"//\": result = result / operand.get(i); break;\n     \
    \               case \"**\": result = result ** operand.get(i); break;\n     \
    \           }\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1djd_ie.java:37: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand.get(i); break;\n        \
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                long\
    \ operand2 = operand.get(i + 1);\n                String operator = _operator_.get(j);\n\
    \                switch(operator) {\n                    case \"+\":\n       \
    \                 result += operand1;\n                        break;\n      \
    \              case \"-\":\n                        result -= operand1;\n    \
    \                    break;\n                    case \"*\":\n               \
    \         result *= operand1;\n                        break;\n              \
    \      case \"//\":\n                        result /= operand1;\n           \
    \             break;\n                    case \"**\":\n                     \
    \   result **= operand1;\n                        break;\n                }\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogpd5e01.java:48: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppduodk59.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmppduodk59.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<String> operator3 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<String> operator5 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<String> operator9 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<String> operator11 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<String> operator13\
    \ = new ArrayList<String>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<String> operator15 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<String> operator17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator19 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<String> operator21\
    \ = new ArrayList<String>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<String> operator23 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<String> operator25\
    \ = new ArrayList<String>();\n        ArrayList<String> operator26 = new ArrayList<String>();\n\
    \        ArrayList<String> operator27 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator28 = new ArrayList<String>();\n        ArrayList<String> operator29\
    \ = new ArrayList<String>();\n        ArrayList<String> operator30 = new ArrayList<String>();\n\
    \        ArrayList<String> operator31 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator32 = new ArrayList<String>();\n        ArrayList<String> operator33\
    \ = new ArrayList<String>();\n        ArrayList<String> operator34 = new ArrayList<String>();\n\
    \        ArrayList<String> operator35 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator36 = new ArrayList<String>();\n        ArrayList<String> operator37\
    \ = new ArrayList<String>();\n        ArrayList<String> operator38 = new ArrayList<String>();\n\
    \        ArrayList<String> operator39 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>();\n        ArrayList<String> operator41\
    \ = new ArrayList<String>();\n        ArrayList<String> operator42 = new ArrayList<String>();\n\
    \        ArrayList<String> operator43 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator44 = new ArrayList<String>();\n        ArrayList<String> operator45\
    \ = new ArrayList<String>();\n        ArrayList<String> operator46 = new ArrayList<String>();\n\
    \        ArrayList<String> operator47 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator48\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1xa2so7.java:79: error: ';' expected\n        ArrayList<String>\
    \ operator48\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpl5cypypu.java:30)\n\tat Problem.main(tmpl5cypypu.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\":\n                        result = result + operand1;\n   \
    \                     break;\n                    case \"-\":\n              \
    \          result = result - operand1;\n                        break;\n     \
    \               case \"*\":\n                        result = result * operand1;\n\
    \                        break;\n                    case \"//\":\n          \
    \              result = result / operand1;\n                        break;\n \
    \                   case \"**\":\n                        result = result ** operand1;\n\
    \                        break;\n                    default:\n              \
    \          throw new RuntimeException(\"Invalid operator: \" + operator);\n  \
    \              }\n            } catch(ArithmeticException ex) {\n            \
    \    throw new RuntimeException(\"Invalid operand: \" + operand);\n          \
    \  }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpth92zqep.java:48: error: illegal start of expression\n        \
    \                result = result ** operand1;\n                              \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\": result += operand.get(0); break;\n                case \"-\": result\
    \ -= operand.get(0); break;\n                case \"*\": result *= operand.get(0);\
    \ break;\n                case \"//\": result /= operand.get(0); break;\n    \
    \            case \"**\": result *= operand.get(0); result *= operand.get(1);\
    \ break;\n                default: throw new IllegalArgumentException(\"Invalid\
    \ operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp331nc1pc.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp_kzyllpi.java:31)\n\tat Problem.main(tmp_kzyllpi.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpg9qj8vv2.java:30)\n\tat Problem.main(tmpg9qj8vv2.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<String> operator5 = operator;\n        ArrayList<String> operator6\
    \ = operator;\n        ArrayList<String> operator7 = operator;\n        ArrayList<String>\
    \ operator8 = operator;\n        ArrayList<String> operator9 = operator;\n   \
    \     ArrayList<String> operator10 = operator;\n        ArrayList<String> operator11\
    \ = operator;\n        ArrayList<String> operator12 = operator;\n        ArrayList<String>\
    \ operator13 = operator;\n        ArrayList<String> operator14 = operator;\n \
    \       ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<String> operator17 = operator;\n        ArrayList<String>\
    \ operator18 = operator;\n        ArrayList<String> operator19 = operator;\n \
    \       ArrayList<String> operator20 = operator;\n        ArrayList<String> operator21\
    \ = operator;\n        ArrayList<String> operator22 = operator;\n        ArrayList<String>\
    \ operator23 = operator;\n        ArrayList<String> operator24 = operator;\n \
    \       ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<String> operator27 = operator;\n        ArrayList<String>\
    \ operator28 = operator;\n        ArrayList<String> operator29 = operator;\n \
    \       ArrayList<String> operator30 = operator;\n        ArrayList<String> operator31\
    \ = operator;\n        ArrayList<String> operator32 = operator;\n        ArrayList<String>\
    \ operator33 = operator;\n        ArrayList<String> operator34 = operator;\n \
    \       ArrayList<String> operator35 = operator;\n        ArrayList<String> operator36\
    \ = operator;\n        ArrayList<String> operator37 = operator;\n        ArrayList<String>\
    \ operator38 = operator;\n        ArrayList<String> operator39 = operator;\n \
    \       ArrayList<String> operator40 = operator;\n        ArrayList<String> operator41\
    \ = operator;\n        ArrayList<String> operator42 = operator;\n        ArrayList<String>\
    \ operator43 = operator;\n        ArrayList<String> operator44 = operator;\n \
    \       ArrayList<String> operator45 = operator;\n        ArrayList<String> operator46\
    \ = operator;\n        ArrayList<String> operator47 = operator;\n        ArrayList<String>\
    \ operator48 = operator;\n        ArrayList<String> operator49 = operator;\n \
    \       ArrayList<String> operator50 = operator;\n        ArrayList<String> operator51\
    \ = operator;\n        ArrayList<String> operator52 = operator;\n        ArrayList<String>\
    \ operator53 = operator;\n        ArrayList<String> operator54 = operator;\n \
    \       ArrayList<String> operator55 = operator\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_t1oe98s.java:86: error: ';' expected\n        ArrayList<String>\
    \ operator55 = operator\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand4 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<String> operator3 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator4 = new ArrayList<String>(operator);\n    \
    \    ArrayList<Long> operand5 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand6 = new ArrayList<Long>(operand);\n        ArrayList<String> operator5\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator6 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operand7 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand8 = new ArrayList<Long>(operand);\n        ArrayList<String>\
    \ operator7 = new ArrayList<String>(operator);\n        ArrayList<String> operator8\
    \ = new ArrayList<String>(operator);\n        ArrayList<Long> operand9 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand10 = new ArrayList<Long>(operand);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<Long> operand11 = new\
    \ ArrayList<Long>(operand);\n        ArrayList<Long> operand12 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator11 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator12 = new ArrayList<String>(operator);\n      \
    \  ArrayList<Long> operand13 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand14 = new ArrayList<Long>(operand);\n        ArrayList<String> operator13\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator14 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operand15 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand16 = new ArrayList<Long>(operand);\n        ArrayList<String>\
    \ operator15 = new ArrayList<String>(operator);\n        ArrayList<String> operator16\
    \ = new ArrayList<String>(operator);\n        ArrayList<Long> operand17 = new\
    \ ArrayList<Long>(operand);\n        ArrayList<Long> operand18 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator17 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator18 = new ArrayList<String>(operator);\n      \
    \  ArrayList<Long> operand19 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand20 = new ArrayList<Long>(operand);\n        ArrayList<String> operator19\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator20 = new\
    \ ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_erfz_ty.java:70: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbgvtkdm.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpkbgvtkdm.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\": result += operand1; break;\n                case\
    \ \"-\": result -= operand1; break;\n                case \"*\": result *= operand1;\
    \ break;\n                case \"//\": result /= operand1; break;\n          \
    \      case \"**\": result *= operand1; result /= operand1; break;\n         \
    \       default: throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpquwjkmj3.java:31)\n\tat Problem.main(tmpquwjkmj3.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\":\n                        result += operand1;\n           \
    \             break;\n                    case \"-\":\n                      \
    \  result -= operand1;\n                        break;\n                    case\
    \ \"*\":\n                        result *= operand1;\n                      \
    \  break;\n                    case \"//\":\n                        result /=\
    \ operand1;\n                        break;\n                    case \"**\":\n\
    \                        result **= operand1;\n                        break;\n\
    \                    default:\n                        throw new RuntimeException(\"\
    Invalid operator: \" + operator);\n                }\n            } catch(ArithmeticException\
    \ e) {\n                throw new RuntimeException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgu77gll.java:48: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvtx36mg.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpwvtx36mg.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4bkjfer5.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp4bkjfer5.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result = result + operand1; break;\n                    case\
    \ \"-\": result = result - operand1; break;\n                    case \"*\": result\
    \ = result * operand1; break;\n                    case \"//\": result = result\
    \ / operand1; break;\n                    case \"**\": result = result ** operand1;\
    \ break;\n                    default: throw new IllegalArgumentException(\"Invalid\
    \ operator: \" + operator);\n                }\n            } catch(ArithmeticException\
    \ ex) {\n                throw new IllegalArgumentException(\"Invalid operand:\
    \ \" + operand);\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6ei5ad7.java:39: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand1; break;\n              \
    \                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            switch(_operator_.get(i))\
    \ {\n                case \"+\":\n                    temp = operand.get(i);\n\
    \                    result += temp;\n                    break;\n           \
    \     case \"-\":\n                    temp = operand.get(i);\n              \
    \      result -= temp;\n                    break;\n                case \"*\"\
    :\n                    temp = operand.get(i);\n                    result *= temp;\n\
    \                    break;\n                case \"//\":\n                  \
    \  temp = operand.get(i);\n                    result /= temp;\n             \
    \       break;\n                case \"**\":\n                    temp = operand.get(i);\n\
    \                    result *= temp;\n                    break;\n           \
    \     default:\n                    System.out.println(\"Invalid operator\");\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp_ir6fj88.java:31)\n\tat Problem.main(tmp_ir6fj88.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand4 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand5 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand6 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand8 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand9 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand10 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand11 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand13\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand14 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand15 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand16 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand17\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand18 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand20 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand21\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand22 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand23 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand24 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand25\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand26 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand27 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand28 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand29\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand30 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand31 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand32 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand33\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand34 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand35 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand36 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand37\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand38 = new ArrayList<Long>(operand);\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprx0h8bp.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\": result = result + operand.get(i); break;\n\
    \                    case \"-\": result = result - operand.get(i); break;\n  \
    \                  case \"*\": result = result * operand.get(i); break;\n    \
    \                case \"//\": result = result / operand.get(i); break;\n     \
    \               case \"**\": result = result ** operand.get(i); break;\n     \
    \           }\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ryn2ag7.java:37: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand.get(i); break;\n        \
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0x3fvpu.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmphyw3e5jh.java:30)\n\tat Problem.main(tmphyw3e5jh.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result **= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpoehgoh.java:46: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long temp = 0;\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                temp += operand.get(i)\
    \ * _operator_.get(j);\n            }\n            result += temp;\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3oahzk7p.java:32: error: bad operand types for binary operator\
    \ '*'\n                temp += operand.get(i) * _operator_.get(j);\n         \
    \                              ^\n  first type:  Long\n  second type: String\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6hqypbu.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwsxxg4zo.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpwsxxg4zo.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + operator);\n            }\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpel94ymx5.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpel94ymx5.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand2\
    \ = new ArrayList<Long>(operand);\n        ArrayList<String> operator2 = new ArrayList<String>(operator);\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>(operand2);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator2);\n        ArrayList<Long> operand4\
    \ = new ArrayList<Long>(operand3);\n        ArrayList<String> operator4 = new\
    \ ArrayList<String>(operator3);\n        ArrayList<Long> operand5 = new ArrayList<Long>(operand4);\n\
    \        ArrayList<String> operator5 = new ArrayList<String>(operator4);\n   \
    \     ArrayList<Long> operand6 = new ArrayList<Long>(operand5);\n        ArrayList<String>\
    \ operator6 = new ArrayList<String>(operator5);\n        ArrayList<Long> operand7\
    \ = new ArrayList<Long>(operand6);\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>(operator6);\n        ArrayList<Long> operand8 = new ArrayList<Long>(operand7);\n\
    \        ArrayList<String> operator8 = new ArrayList<String>(operator7);\n   \
    \     ArrayList<Long> operand9 = new ArrayList<Long>(operand8);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator8);\n        ArrayList<Long> operand10\
    \ = new ArrayList<Long>(operand9);\n        ArrayList<String> operator10 = new\
    \ ArrayList<String>(operator9);\n        ArrayList<Long> operand11 = new ArrayList<Long>(operand10);\n\
    \        ArrayList<String> operator11 = new ArrayList<String>(operator10);\n \
    \       ArrayList<Long> operand12 = new ArrayList<Long>(operand11);\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>(operator11);\n        ArrayList<Long> operand13\
    \ = new ArrayList<Long>(operand12);\n        ArrayList<String> operator13 = new\
    \ ArrayList<String>(operator12);\n        ArrayList<Long> operand14 = new ArrayList<Long>(operand13);\n\
    \        ArrayList<String> operator14 = new ArrayList<String>(operator13);\n \
    \       ArrayList<Long> operand15 = new ArrayList<Long>(operand14);\n        ArrayList<String>\
    \ operator15 = new ArrayList<String>(operator14);\n        ArrayList<Long> operand16\
    \ = new ArrayList<Long>(operand15);\n        ArrayList<String> operator16 = new\
    \ ArrayList<String>(operator15);\n        ArrayList<Long> operand17 = new ArrayList<Long>(operand16);\n\
    \        ArrayList<String> operator17 = new ArrayList<String>(operator16);\n \
    \       ArrayList<Long> operand18 = new ArrayList<Long>(operand17);\n        ArrayList<String>\
    \ operator18 = new ArrayList<String>(operator17);\n        ArrayList<Long> operand19\
    \ = new ArrayList<Long>(operand18);\n        ArrayList<String> operator19 = new\
    \ ArrayList<String>(operator18);\n        ArrayList<Long> operand20 = new ArrayList<Long>(operand19);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator19);\n \
    \       ArrayList<Long> operand21 = new ArrayList<Long>(operand20);\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4he0_mh6.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp4he0_mh6.java:69: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                String\
    \ operator = _operator_.get(j);\n                switch(operator) {\n        \
    \            case \"+\": result += operand1; break;\n                    case\
    \ \"-\": result -= operand1; break;\n                    case \"*\": result *=\
    \ operand1; break;\n                    case \"//\": result /= operand1; break;\n\
    \                    case \"**\": result **= operand1; break;\n              \
    \  }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjtryc6ir.java:38: error: illegal start of expression\n        \
    \            case \"**\": result **= operand1; break;\n                      \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_\
    \ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n        long\
    \ _operator_ = 0;\n        long _operator_ = 0;\n        long _operator_ = 0;\n\
    \        long _operator_ = 0;\n        long _\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7mkz773.java:113: error: as of release 9, '_' is a keyword, and\
    \ may not be used as an identifier\n        long _\n             ^\n/tmp/tmpo7mkz773.java:113:\
    \ error: ';' expected\n        long _\n              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7p8214v.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_7p8214v.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpzxkefpd0.java:30)\n\tat Problem.main(tmpzxkefpd0.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                long\
    \ operand2 = operand.get(i + 1);\n                String operator = _operator_.get(j);\n\
    \                switch(operator) {\n                    case \"+\": result +=\
    \ operand1; break;\n                    case \"-\": result -= operand1; break;\n\
    \                    case \"*\": result *= operand1; break;\n                \
    \    case \"//\": result /= operand1; break;\n                    case \"**\"\
    : result *= operand1; result *= operand1; break;\n                }\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpei8e15rf.java:32)\n\tat Problem.main(tmpei8e15rf.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\":\n                        result += operand1;\n           \
    \             break;\n                    case \"-\":\n                      \
    \  result -= operand1;\n                        break;\n                    case\
    \ \"*\":\n                        result *= operand1;\n                      \
    \  break;\n                    case \"//\":\n                        result /=\
    \ operand1;\n                        break;\n                    case \"**\":\n\
    \                        result **= operand1;\n                        break;\n\
    \                }\n            } catch(Exception e) {\n                e.printStackTrace();\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp737mrjxg.java:48: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new RuntimeException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4p83ach.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpg4p83ach.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                String\
    \ operator = _operator_.get(j);\n                switch(operator) {\n        \
    \            case \"+\":\n                        result += operand1;\n      \
    \                  break;\n                    case \"-\":\n                 \
    \       result -= operand1;\n                        break;\n                \
    \    case \"*\":\n                        result *= operand1;\n              \
    \          break;\n                    case \"//\":\n                        result\
    \ /= operand1;\n                        break;\n                    case \"**\"\
    :\n                        result **= operand1;\n                        break;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ate4gqy.java:47: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result += operand1;\n                    break;\n              \
    \  case \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + operator);\n            }\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp9bzat1af.java:30)\n\tat Problem.main(tmp9bzat1af.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result += operand1; break;\n                    case \"-\"\
    : result -= operand1; break;\n                    case \"*\": result *= operand1;\
    \ break;\n                    case \"//\": result /= operand1; break;\n      \
    \              case \"**\": result *= operand1; result *= operand1; break;\n \
    \                   default: throw new Exception(\"Invalid operator: \" + operator);\n\
    \                }\n            } catch(Exception e) {\n                throw\
    \ new Exception(\"Invalid operand: \" + operand);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1lmi7mcg.java:43: error: unreported exception Exception; must be\
    \ caught or declared to be thrown\n                throw new Exception(\"Invalid\
    \ operand: \" + operand);\n                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpen9oganh.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpen9oganh.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        boolean\
    \ first = true;\n        for(String operator : _operator_) {\n            if(!first)\
    \ {\n                result += operand.get(operand.size() - 1);\n            }\n\
    \            switch(operator) {\n                case \"+\":\n               \
    \     result += operand.get(operand.size() - 1);\n                    break;\n\
    \                case \"-\":\n                    result -= operand.get(operand.size()\
    \ - 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(operand.size() - 1);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(operand.size()\
    \ - 1);\n                    break;\n                case \"**\":\n          \
    \          result *= operand.get(operand.size() - 1);\n                    break;\n\
    \                default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + operator);\n            }\n            first = false;\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntxnvogr.java:59)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_e6c9qq1.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_e6c9qq1.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjl4a0q4.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<String> operator3 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<String> operator5 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<String> operator9 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<String> operator11 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<String> operator13\
    \ = new ArrayList<String>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<String> operator15 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<String> operator17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator19 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<String> operator21\
    \ = new ArrayList<String>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<String> operator23 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<String> operator25\
    \ = new ArrayList<String>();\n        ArrayList<String> operator26 = new ArrayList<String>();\n\
    \        ArrayList<String> operator27 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator28 = new ArrayList<String>();\n        ArrayList<String> operator29\
    \ = new ArrayList<String>();\n        ArrayList<String> operator30 = new ArrayList<String>();\n\
    \        ArrayList<String> operator31 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator32 = new ArrayList<String>();\n        ArrayList<String> operator33\
    \ = new ArrayList<String>();\n        ArrayList<String> operator34 = new ArrayList<String>();\n\
    \        ArrayList<String> operator35 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator36 = new ArrayList<String>();\n        ArrayList<String> operator37\
    \ = new ArrayList<String>();\n        ArrayList<String> operator38 = new ArrayList<String>();\n\
    \        ArrayList<String> operator39 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>();\n        ArrayList<String> operator41\
    \ = new ArrayList<String>();\n        ArrayList<String> operator42 = new ArrayList<String>();\n\
    \        ArrayList<String> operator43 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator44 = new ArrayList<String>();\n        ArrayList<String> operator45\
    \ = new ArrayList<String>();\n        ArrayList<String> operator46 = new ArrayList<String>();\n\
    \        ArrayList<String> operator47 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator48\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx1_vd7ds.java:79: error: ';' expected\n        ArrayList<String>\
    \ operator48\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        boolean\
    \ isOperator = false;\n        boolean isOperand = false;\n        for(int i =\
    \ 0; i < _operator_.size(); i++) {\n            if(_operator_.get(i).equals(\"\
    +\")) {\n                isOperator = true;\n                isOperand = true;\n\
    \            }\n            else if(_operator_.get(i).equals(\"-\")) {\n     \
    \           isOperator = true;\n                isOperand = true;\n          \
    \  }\n            else if(_operator_.get(i).equals(\"*\")) {\n               \
    \ isOperator = true;\n                isOperand = false;\n            }\n    \
    \        else if(_operator_.get(i).equals(\"//\")) {\n                isOperator\
    \ = true;\n                isOperand = false;\n            }\n            else\
    \ if(_operator_.get(i).equals(\"**\")) {\n                isOperator = true;\n\
    \                isOperand = false;\n            }\n            else {\n     \
    \           isOperator = false;\n                isOperand = false;\n        \
    \    }\n        }\n        if(isOperator == true && isOperand == true) {\n   \
    \         for(int i = 0; i < operand.size(); i++) {\n                result +=\
    \ operand.get(i);\n            }\n        }\n        else if(isOperator == true\
    \ && isOperand == false) {\n            for(int i = 0; i < operand.size(); i++)\
    \ {\n                result -= operand.get(i);\n            }\n        }\n   \
    \     else if(isOperator == false && isOperand == true) {\n            for(int\
    \ i = 0; i < operand.size(); i++) {\n                result *= operand.get(i);\n\
    \            }\n        }\n        else if(isOperator == false && isOperand ==\
    \ false) {\n            for(int i = 0; i < operand.size(); i++) {\n          \
    \      result /= operand.get(i);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7695kct8.java:81)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wczozrt.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp3wczozrt.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operandValue = operand.get(i);\n            switch(op) {\n \
    \               case \"+\":\n                    result += operandValue;\n   \
    \                 break;\n                case \"-\":\n                    result\
    \ -= operandValue;\n                    break;\n                case \"*\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \             case \"//\":\n                    result /= operandValue;\n    \
    \                break;\n                case \"**\":\n                    result\
    \ *= operandValue;\n                    break;\n                default:\n   \
    \                 throw new IllegalArgumentException(\"Invalid operator: \" +\
    \ op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpzc2gh0yd.java:30)\n\tat Problem.main(tmpzc2gh0yd.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                String\
    \ operator = _operator_.get(j);\n                long operand2 = operand.get(i\
    \ + 1);\n                switch(operator) {\n                    case \"+\": result\
    \ += operand1; break;\n                    case \"-\": result -= operand1; break;\n\
    \                    case \"*\": result *= operand1; break;\n                \
    \    case \"//\": result /= operand1; break;\n                    case \"**\"\
    : result *= operand1; result /= operand2; break;\n                    default:\
    \ throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n   \
    \             }\n            }\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp_58zd_8a.java:33)\n\tat Problem.main(tmp_58zd_8a.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrg72grg.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpdrg72grg.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ _sum = 0;\n        long _product = 1;\n        long _floorDiv = 0;\n       \
    \ long _exponent = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long _exponentPower = 1;\n        long _exponentPower = 1;\n        long\
    \ _exponentPower = 1;\n        long _exponentPower = 1;\n        long _exponentPower\
    \ = 1;\n        long _exponentPower = 1;\n        long _exponentPower = 1;\n \
    \       long \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqossfkk.java:93: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmplqossfkk.java:93: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzbdg8s4.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand1copy = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand2copy = new ArrayList<Long>();\n        ArrayList<String> operator1copy\
    \ = new ArrayList<String>();\n        ArrayList<String> operator2copy = new ArrayList<String>();\n\
    \        ArrayList<String> operator1copy2 = new ArrayList<String>();\n       \
    \ ArrayList<String> operator2copy2 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator1copy3 = new ArrayList<String>();\n        ArrayList<String> operator2copy3\
    \ = new ArrayList<String>();\n        ArrayList<String> operator1copy4 = new ArrayList<String>();\n\
    \        ArrayList<String> operator2copy4 = new ArrayList<String>();\n       \
    \ ArrayList<String> operator1copy5 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator2copy5 = new ArrayList<String>();\n        ArrayList<String> operator1copy6\
    \ = new ArrayList<String>();\n        ArrayList<String> operator2copy6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator1copy7 = new ArrayList<String>();\n       \
    \ ArrayList<String> operator2copy7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator1copy8 = new ArrayList<String>();\n        ArrayList<String> operator2copy8\
    \ = new ArrayList<String>();\n        ArrayList<String> operator1copy9 = new ArrayList<String>();\n\
    \        ArrayList<String> operator2copy9 = new ArrayList<String>();\n       \
    \ ArrayList<String> operator1copy10 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator2copy10 = new ArrayList<String>();\n        ArrayList<String> operator1copy11\
    \ = new ArrayList<String>();\n        ArrayList<String> operator2copy11 = new\
    \ ArrayList<String>();\n        ArrayList<String> operator1copy12 = new ArrayList<String>();\n\
    \        ArrayList<String> operator2copy12 = new ArrayList<String>();\n      \
    \  ArrayList<String> operator1copy13 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator2copy13 = new ArrayList<String>();\n        ArrayList<String> operator1copy14\
    \ = new ArrayList<String>();\n        ArrayList<String> operator2copy14 = new\
    \ ArrayList<String>();\n        ArrayList<String> operator1copy15 = new ArrayList<String>();\n\
    \        ArrayList<String> operator2copy15 = new ArrayList<String>();\n      \
    \  ArrayList<String> operator1copy16 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator2copy16 = new ArrayList<String>();\n        ArrayList<String> operator1copy17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator2copy17 = new\
    \ ArrayList<String>();\n        ArrayList<String> operator1copy18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator2copy18 = new ArrayList<String>();\n      \
    \  ArrayList<String> operator1copy19\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogp66wbo.java:72: error: ';' expected\n        ArrayList<String>\
    \ operator1copy19\n                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<Long>\
    \ operand3 = operand;\n        ArrayList<Long> operand4 = operand;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<Long> operand5 = operand;\n        ArrayList<Long> operand6 =\
    \ operand;\n        ArrayList<String> operator5 = operator;\n        ArrayList<String>\
    \ operator6 = operator;\n        ArrayList<Long> operand7 = operand;\n       \
    \ ArrayList<Long> operand8 = operand;\n        ArrayList<String> operator7 = operator;\n\
    \        ArrayList<String> operator8 = operator;\n        ArrayList<Long> operand9\
    \ = operand;\n        ArrayList<Long> operand10 = operand;\n        ArrayList<String>\
    \ operator9 = operator;\n        ArrayList<String> operator10 = operator;\n  \
    \      ArrayList<Long> operand11 = operand;\n        ArrayList<Long> operand12\
    \ = operand;\n        ArrayList<String> operator11 = operator;\n        ArrayList<String>\
    \ operator12 = operator;\n        ArrayList<Long> operand13 = operand;\n     \
    \   ArrayList<Long> operand14 = operand;\n        ArrayList<String> operator13\
    \ = operator;\n        ArrayList<String> operator14 = operator;\n        ArrayList<Long>\
    \ operand15 = operand;\n        ArrayList<Long> operand16 = operand;\n       \
    \ ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<Long> operand17 = operand;\n        ArrayList<Long>\
    \ operand18 = operand;\n        ArrayList<String> operator17 = operator;\n   \
    \     ArrayList<String> operator18 = operator;\n        ArrayList<Long> operand19\
    \ = operand;\n        ArrayList<Long> operand20 = operand;\n        ArrayList<String>\
    \ operator19 = operator;\n        ArrayList<String> operator20 = operator;\n \
    \       ArrayList<Long> operand21 = operand;\n        ArrayList<Long> operand22\
    \ = operand;\n        ArrayList<String> operator21 = operator;\n        ArrayList<String>\
    \ operator22 = operator;\n        ArrayList<Long> operand23 = operand;\n     \
    \   ArrayList<Long> operand24 = operand;\n        ArrayList<String> operator23\
    \ = operator;\n        ArrayList<String> operator24 = operator;\n        ArrayList<Long>\
    \ operand25 = operand;\n        ArrayList<Long> operand26 = operand;\n       \
    \ ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<Long> operand27 = operand;\n        ArrayList<Long>\
    \ operand28 = operand;\n        ArrayList<String> operator27 = operator;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmh8eer2.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpokgryyvz.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpokgryyvz.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv2o6pzq.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operands\
    \ = new ArrayList<Long>(operand);\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd4qs9xnv.java:112: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpd4qs9xnv.java:112: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"/\": result /= operand; break;\n            \
    \    case \"//\": result /= operand; break;\n                case \"**\": result\
    \ *= operand; break;\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph0kz9elc.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmph0kz9elc.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaezkx55c.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpaezkx55c.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < _operator_.size(); i++) {\n          \
    \  switch(_operator_.get(i)) {\n                case \"+\":\n                \
    \    temp = operand.get(0) + operand.get(1);\n                    operand.set(0,\
    \ temp);\n                    break;\n                case \"-\":\n          \
    \          temp = operand.get(0) - operand.get(1);\n                    operand.set(0,\
    \ temp);\n                    break;\n                case \"*\":\n          \
    \          temp = operand.get(0) * operand.get(1);\n                    operand.set(0,\
    \ temp);\n                    break;\n                case \"//\":\n         \
    \           temp = operand.get(0) / operand.get(1);\n                    operand.set(0,\
    \ temp);\n                    break;\n                case \"**\":\n         \
    \           temp = operand.get(0) * operand.get(1);\n                    operand.set(0,\
    \ temp);\n                    break;\n                default:\n             \
    \       System.out.println(\"Invalid operator\");\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjrzip94.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch (op) {\n                  \
    \  case \"+\":\n                        result += operand1;\n                \
    \        break;\n                    case \"-\":\n                        result\
    \ -= operand1;\n                        break;\n                    case \"*\"\
    :\n                        result *= operand1;\n                        break;\n\
    \                    case \"//\":\n                        result /= operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result *= operand1;\n                        result *= operand2;\n\
    \                        break;\n                    default:\n              \
    \          throw new RuntimeException(\"Invalid operator: \" + op);\n        \
    \        }\n            } catch (Exception e) {\n                throw new RuntimeException(\"\
    Invalid operand: \" + operand);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpt7i6wre1.java:30)\n\tat Problem.main(tmpt7i6wre1.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long temp = 0;\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                String op = _operator_.get(j);\n\
    \                long operand1 = operand.get(i);\n                switch(op) {\n\
    \                    case \"+\": temp = temp + operand1; break;\n            \
    \        case \"-\": temp = temp - operand1; break;\n                    case\
    \ \"*\": temp = temp * operand1; break;\n                    case \"//\": temp\
    \ = temp / operand1; break;\n                    case \"**\": temp = temp ** operand1;\
    \ break;\n                }\n            }\n            result += temp;\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_2qgilp.java:39: error: illegal start of expression\n        \
    \            case \"**\": temp = temp ** operand1; break;\n                  \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<String> operator3 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<String> operator5 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<String> operator9 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<String> operator11 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<String> operator13\
    \ = new ArrayList<String>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<String> operator15 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<String> operator17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator19 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<String> operator21\
    \ = new ArrayList<String>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<String> operator23 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<String> operator25\
    \ = new ArrayList<String>();\n        ArrayList<String> operator26 = new ArrayList<String>();\n\
    \        ArrayList<String> operator27 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator28 = new ArrayList<String>();\n        ArrayList<String> operator29\
    \ = new ArrayList<String>();\n        ArrayList<String> operator30 = new ArrayList<String>();\n\
    \        ArrayList<String> operator31 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator32 = new ArrayList<String>();\n        ArrayList<String> operator33\
    \ = new ArrayList<String>();\n        ArrayList<String> operator34 = new ArrayList<String>();\n\
    \        ArrayList<String> operator35 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator36 = new ArrayList<String>();\n        ArrayList<String> operator37\
    \ = new ArrayList<String>();\n        ArrayList<String> operator38 = new ArrayList<String>();\n\
    \        ArrayList<String> operator39 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>();\n        ArrayList<String> operator41\
    \ = new ArrayList<String>();\n        ArrayList<String> operator42 = new ArrayList<String>();\n\
    \        ArrayList<String> operator43 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator44 = new ArrayList<String>();\n        ArrayList<String> operator45\
    \ = new ArrayList<String>();\n        ArrayList<String> operator46 = new ArrayList<String>();\n\
    \        ArrayList<String> operator47 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator48\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfv4d4nng.java:79: error: ';' expected\n        ArrayList<String>\
    \ operator48\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: return -1L;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4u4yugvi.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<>();\n        ArrayList<String> operator2 = new ArrayList<>();\n\
    \        ArrayList<String> operator3 = new ArrayList<>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<>();\n        ArrayList<String> operator5 = new ArrayList<>();\n\
    \        ArrayList<String> operator6 = new ArrayList<>();\n        ArrayList<String>\
    \ operator7 = new ArrayList<>();\n        ArrayList<String> operator8 = new ArrayList<>();\n\
    \        ArrayList<String> operator9 = new ArrayList<>();\n        ArrayList<String>\
    \ operator10 = new ArrayList<>();\n        ArrayList<String> operator11 = new\
    \ ArrayList<>();\n        ArrayList<String> operator12 = new ArrayList<>();\n\
    \        ArrayList<String> operator13 = new ArrayList<>();\n        ArrayList<String>\
    \ operator14 = new ArrayList<>();\n        ArrayList<String> operator15 = new\
    \ ArrayList<>();\n        ArrayList<String> operator16 = new ArrayList<>();\n\
    \        ArrayList<String> operator17 = new ArrayList<>();\n        ArrayList<String>\
    \ operator18 = new ArrayList<>();\n        ArrayList<String> operator19 = new\
    \ ArrayList<>();\n        ArrayList<String> operator20 = new ArrayList<>();\n\
    \        ArrayList<String> operator21 = new ArrayList<>();\n        ArrayList<String>\
    \ operator22 = new ArrayList<>();\n        ArrayList<String> operator23 = new\
    \ ArrayList<>();\n        ArrayList<String> operator24 = new ArrayList<>();\n\
    \        ArrayList<String> operator25 = new ArrayList<>();\n        ArrayList<String>\
    \ operator26 = new ArrayList<>();\n        ArrayList<String> operator27 = new\
    \ ArrayList<>();\n        ArrayList<String> operator28 = new ArrayList<>();\n\
    \        ArrayList<String> operator29 = new ArrayList<>();\n        ArrayList<String>\
    \ operator30 = new ArrayList<>();\n        ArrayList<String> operator31 = new\
    \ ArrayList<>();\n        ArrayList<String> operator32 = new ArrayList<>();\n\
    \        ArrayList<String> operator33 = new ArrayList<>();\n        ArrayList<String>\
    \ operator34 = new ArrayList<>();\n        ArrayList<String> operator35 = new\
    \ ArrayList<>();\n        ArrayList<String> operator36 = new ArrayList<>();\n\
    \        ArrayList<String> operator37 = new ArrayList<>();\n        ArrayList<String>\
    \ operator38 = new ArrayList<>();\n        ArrayList<String> operator39 = new\
    \ ArrayList<>();\n        ArrayList<String> operator40 = new ArrayList<>();\n\
    \        ArrayList<String> operator41 = new ArrayList<>();\n        ArrayList<String>\
    \ operator42 = new ArrayList<>();\n        ArrayList<String> operator43 = new\
    \ ArrayList<>();\n        ArrayList<String> operator44 = new ArrayList<>();\n\
    \        ArrayList<String> operator45 = new ArrayList<>();\n        ArrayList<String>\
    \ operator46 = new ArrayList<>();\n        ArrayList<String> operator47 = new\
    \ ArrayList<>();\n        ArrayList<String> operator48 = new ArrayList<>();\n\
    \        ArrayList<String> operator49 = new ArrayList<>();\n        ArrayList<String>\
    \ operator50 = new ArrayList<>();\n        ArrayList<String> operator51 = new\
    \ ArrayList<>();\n        ArrayList<String> operator52 = new ArrayList<>();\n\
    \        ArrayList<String> operator5\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvo8ur4jd.java:84: error: ';' expected\n        ArrayList<String>\
    \ operator5\n                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operandValue = operand.get(i);\n            switch(op) {\n \
    \               case \"+\":\n                    result += operandValue;\n   \
    \                 break;\n                case \"-\":\n                    result\
    \ -= operandValue;\n                    break;\n                case \"*\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \             case \"/\":\n                    result /= operandValue;\n     \
    \               break;\n                case \"%\":\n                    result\
    \ %= operandValue;\n                    break;\n                case \"**\":\n\
    \                    result **= operandValue;\n                    break;\n  \
    \              default:\n                    System.out.println(\"Invalid operator:\
    \ \" + op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc2l_byiz.java:49: error: illegal start of expression\n        \
    \            result **= operandValue;\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuchjgm9r.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpuchjgm9r.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwdrjrvla.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\": result = result + operand1; break;\n        \
    \        case \"-\": result = result - operand1; break;\n                case\
    \ \"*\": result = result * operand1; break;\n                case \"//\": result\
    \ = result / operand1; break;\n                case \"**\": result = result **\
    \ operand1; break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8hd_l1v.java:37: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand1; break;\n                  \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\":\n                        temp = operand.get(i)\
    \ + operand.get(i + 1);\n                        break;\n                    case\
    \ \"-\":\n                        temp = operand.get(i) - operand.get(i + 1);\n\
    \                        break;\n                    case \"*\":\n           \
    \             temp = operand.get(i) * operand.get(i + 1);\n                  \
    \      break;\n                    case \"//\":\n                        temp\
    \ = operand.get(i) / operand.get(i + 1);\n                        break;\n   \
    \                 case \"**\":\n                        temp = operand.get(i)\
    \ ^ operand.get(i + 1);\n                        break;\n                }\n \
    \           }\n            result = result + temp;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpskg71jm0.java:46)\n\tat Problem.main(tmpskg71jm0.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator);\n        ArrayList<String> operator4\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator6 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator7 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator8 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator12 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator13 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator14 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator15 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>(operator);\n        ArrayList<String> operator17\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator19 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator21 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator22 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>(operator);\n        ArrayList<String> operator24\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator25 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator26 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator27 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator28 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator29 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator30 = new ArrayList<String>(operator);\n        ArrayList<String> operator31\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator32 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator33 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator34 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator35 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator36 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>(operator);\n        ArrayList<String> operator38\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator39 = new\
    \ ArrayList<String>(operator);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi3htc8j6.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        boolean\
    \ isOperand = false;\n        boolean isOperator = false;\n        for(int i =\
    \ 0; i < operand.size(); i++) {\n            isOperand = true;\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                isOperator = true;\n \
    \               try {\n                    if(operand.get(i) == 0) {\n       \
    \                 result = result + 0;\n                    } else if(operand.get(i)\
    \ == 1) {\n                        result = result + 1;\n                    }\
    \ else if(operand.get(i) == 2) {\n                        result = result + 2;\n\
    \                    } else if(operand.get(i) == 3) {\n                      \
    \  result = result + 3;\n                    } else if(operand.get(i) == 4) {\n\
    \                        result = result + 4;\n                    } else if(operand.get(i)\
    \ == 5) {\n                        result = result + 5;\n                    }\
    \ else if(operand.get(i) == 6) {\n                        result = result + 6;\n\
    \                    } else if(operand.get(i) == 7) {\n                      \
    \  result = result + 7;\n                    } else if(operand.get(i) == 8) {\n\
    \                        result = result + 8;\n                    } else if(operand.get(i)\
    \ == 9) {\n                        result = result + 9;\n                    }\
    \ else if(operand.get(i) == 10) {\n                        result = result + 10;\n\
    \                    } else if(operand.get(i) == 11) {\n                     \
    \   result = result + 11;\n                    } else if(operand.get(i) == 12)\
    \ {\n                        result = result + 12;\n                    } else\
    \ if(operand.get(i) == 13) {\n                        result = result + 13;\n\
    \                    } else if(operand.get(i) == 14) {\n                     \
    \   result = result + 14;\n                    } else if(operand.get(i) == 15)\
    \ {\n                        result = result + 15;\n                    } else\
    \ if(operand.get(i) == 16) {\n                        result = result + 16;\n\
    \                    } else if(operand.get(i) == 17) {\n                     \
    \   result = result + 17;\n                    } else if(operand.get(i) == 18)\
    \ {\n                        result = result + 18;\n                    } else\
    \ if(operand.get(i) == 19) {\n                        result = result + 19;\n\
    \                    } else if(operand.get(i) == 20) {\n                     \
    \   result = result + 20;\n                    } else if(operand.get(i) == 21)\
    \ {\n                        result = result + 21;\n                    } else\
    \ if(operand.get(i) == 22) {\n                        result = result + 22;\n\
    \                    } else if(operand.get(i) == 23) {\n                     \
    \   result = result + 23;\n                    } else if(operand.get(i) == 24)\
    \ {\n                        result = result + 24;\n                    } else\
    \ if(operand.get(i) == 25) {\n                        result = result + 25;\n\
    \                    } else if(operand.get(i) == 26) {\n                     \
    \   result = result + 26;\n                    } else if(operand.get(i) == 27)\
    \ {\n                        result = result + 27;\n                    } else\
    \ if(operand.get(i) == 28) {\n                        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_q0evr7t.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_q0evr7t.java:35: error: 'try'\
    \ without 'catch', 'finally' or resource declarations\n                try {\n\
    \                ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operands\
    \ = new ArrayList<Long>(operand);\n        ArrayList<String> operators = new ArrayList<String>(operator);\n\
    \        ArrayList<Long> operands2 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators2 = new ArrayList<String>(operator);\n        ArrayList<Long> operands3\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators3 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands4 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators4 = new ArrayList<String>(operator);\n   \
    \     ArrayList<Long> operands5 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators5 = new ArrayList<String>(operator);\n        ArrayList<Long> operands6\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators6 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands7 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators7 = new ArrayList<String>(operator);\n   \
    \     ArrayList<Long> operands8 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators8 = new ArrayList<String>(operator);\n        ArrayList<Long> operands9\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators9 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands10 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators10 = new ArrayList<String>(operator);\n  \
    \      ArrayList<Long> operands11 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators11 = new ArrayList<String>(operator);\n        ArrayList<Long> operands12\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators12 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands13 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators13 = new ArrayList<String>(operator);\n  \
    \      ArrayList<Long> operands14 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators14 = new ArrayList<String>(operator);\n        ArrayList<Long> operands15\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators15 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands16 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators16 = new ArrayList<String>(operator);\n  \
    \      ArrayList<Long> operands17 = new ArrayList<Long>(operands);\n        ArrayList<String>\
    \ operators17 = new ArrayList<String>(operator);\n        ArrayList<Long> operands18\
    \ = new ArrayList<Long>(operands);\n        ArrayList<String> operators18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<Long> operands19 = new ArrayList<Long>(operands);\n\
    \        ArrayList<String> operators19 = new ArrayList<String>(operator);\n  \
    \      ArrayList<Long> operand\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpipsoe73v.java:68: error: ';' expected\n        ArrayList<Long>\
    \ operand\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9tu3g4t.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + operator);\n            }\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxvveu50.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpaxvveu50.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        ArrayList<String> operator = new ArrayList<String>(_operator_);\n\
    \        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n        for(int\
    \ i = 0; i < operator.size(); i++) {\n            switch(operator.get(i)) {\n\
    \                case \"+\":\n                    temp = operand2.get(i) + operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                case \"-\":\n          \
    \          temp = operand2.get(i) - operand2.get(i+1);\n                    operand2.remove(i+1);\n\
    \                    operand2.add(i, temp);\n                    break;\n    \
    \            case \"*\":\n                    temp = operand2.get(i) * operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                case \"//\":\n         \
    \           temp = operand2.get(i) / operand2.get(i+1);\n                    operand2.remove(i+1);\n\
    \                    operand2.add(i, temp);\n                    break;\n    \
    \            case \"**\":\n                    temp = operand2.get(i) ^ operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                default:\n             \
    \       System.out.println(\"Invalid operator\");\n            }\n        }\n\
    \        result = operand2.get(0);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq63_958q.java:68)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  for(int i = 0; i < operator.size(); i++) {\n            String operator = operator.get(i);\n\
    \            long operand = operands.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"/\":\n                    result /= operand;\n                    break;\n\
    \                case \"//\":\n                    result /= operand;\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand;\n                    break;\n                default:\n        \
    \            System.out.println(\"Invalid operator: \" + operator);\n        \
    \    }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4fu5mdp.java:32: error: variable operator is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String operator\
    \ = operator.get(i);\n                   ^\n/tmp/tmpu4fu5mdp.java:32: error: cannot\
    \ find symbol\n            String operator = operator.get(i);\n              \
    \                        ^\n  symbol:   method get(int)\n  location: variable\
    \ operator of type String\n/tmp/tmpu4fu5mdp.java:33: error: variable operand is\
    \ already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n   \
    \         long operand = operands.get(i);\n                 ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\":\n                    result = result + operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    result = result - operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"//\":\n                    result = result / operand.get(0);\n           \
    \         operand.remove(0);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(0);\n          \
    \          operand.remove(0);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbdprf16.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new RuntimeException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4vf66bw.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpf4vf66bw.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result **= operand;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjos2b9w.java:46: error: illegal start of expression\n        \
    \            result **= operand;\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawi5ygu3.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpawi5ygu3.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(op) {\n      \
    \          case \"+\":\n                    result += operand;\n             \
    \       break;\n                case \"-\":\n                    result -= operand;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand;\n                    break;\n                case \"//\"\
    :\n                    result /= operand;\n                    break;\n      \
    \          case \"**\":\n                    result *= operand;\n            \
    \        break;\n            }\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpncr_d3wg.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpncr_d3wg.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result += operand1;\n                    break;\n              \
    \  case \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    break;\n          \
    \      default:\n                    throw new IllegalArgumentException(\"Invalid\
    \ operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpw96oczxh.java:30)\n\tat Problem.main(tmpw96oczxh.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operands\
    \ = new ArrayList<Long>(operand);\n        for(int i = 0; i < operator.size();\
    \ i++) {\n            switch(operator.get(i)) {\n                case \"+\":\n\
    \                    result = result + operands.get(i);\n                    break;\n\
    \                case \"-\":\n                    result = result - operands.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result = result * operands.get(i);\n                    break;\n           \
    \     case \"//\":\n                    result = result / operands.get(i);\n \
    \                   break;\n                case \"**\":\n                   \
    \ result = result ** operands.get(i);\n                    break;\n          \
    \  }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_3614vv.java:46: error: illegal start of expression\n        \
    \            result = result ** operands.get(i);\n                           \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiaac94eg.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpiaac94eg.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result += operand1;\n                    result += operand2;\n \
    \                   break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    result -= operand2;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              result *= operand2;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand1;\n                  \
    \  result /= operand2;\n                    break;\n                case \"**\"\
    :\n                    result **= operand1;\n                    result **= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphebpxkeu.java:51: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n/tmp/tmphebpxkeu.java:52:\
    \ error: illegal start of expression\n                    result **= operand2;\n\
    \                            ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<Long> operand3 = operand;\n\
    \        ArrayList<Long> operand4 = operand;\n        ArrayList<Long> operand5\
    \ = operand;\n        ArrayList<Long> operand6 = operand;\n        ArrayList<Long>\
    \ operand7 = operand;\n        ArrayList<Long> operand8 = operand;\n        ArrayList<Long>\
    \ operand9 = operand;\n        ArrayList<Long> operand10 = operand;\n        ArrayList<Long>\
    \ operand11 = operand;\n        ArrayList<Long> operand12 = operand;\n       \
    \ ArrayList<Long> operand13 = operand;\n        ArrayList<Long> operand14 = operand;\n\
    \        ArrayList<Long> operand15 = operand;\n        ArrayList<Long> operand16\
    \ = operand;\n        ArrayList<Long> operand17 = operand;\n        ArrayList<Long>\
    \ operand18 = operand;\n        ArrayList<Long> operand19 = operand;\n       \
    \ ArrayList<Long> operand20 = operand;\n        ArrayList<Long> operand21 = operand;\n\
    \        ArrayList<Long> operand22 = operand;\n        ArrayList<Long> operand23\
    \ = operand;\n        ArrayList<Long> operand24 = operand;\n        ArrayList<Long>\
    \ operand25 = operand;\n        ArrayList<Long> operand26 = operand;\n       \
    \ ArrayList<Long> operand27 = operand;\n        ArrayList<Long> operand28 = operand;\n\
    \        ArrayList<Long> operand29 = operand;\n        ArrayList<Long> operand30\
    \ = operand;\n        ArrayList<Long> operand31 = operand;\n        ArrayList<Long>\
    \ operand32 = operand;\n        ArrayList<Long> operand33 = operand;\n       \
    \ ArrayList<Long> operand34 = operand;\n        ArrayList<Long> operand35 = operand;\n\
    \        ArrayList<Long> operand36 = operand;\n        ArrayList<Long> operand37\
    \ = operand;\n        ArrayList<Long> operand38 = operand;\n        ArrayList<Long>\
    \ operand39 = operand;\n        ArrayList<Long> operand40 = operand;\n       \
    \ ArrayList<Long> operand41 = operand;\n        ArrayList<Long> operand42 = operand;\n\
    \        ArrayList<Long> operand43 = operand;\n        ArrayList<Long> operand44\
    \ = operand;\n        ArrayList<Long> operand45 = operand;\n        ArrayList<Long>\
    \ operand46 = operand;\n        ArrayList<Long> operand47 = operand;\n       \
    \ ArrayList<Long> operand48 = operand;\n        ArrayList<Long> operand49 = operand;\n\
    \        ArrayList<Long> operand50 = operand;\n        ArrayList<Long> operand51\
    \ = operand;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3flw2a3.java:82: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand4 = new ArrayList<Long>();\n        ArrayList<Long> operand5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand7 = new ArrayList<Long>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand10 = new ArrayList<Long>();\n        ArrayList<Long> operand11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand14 = new ArrayList<Long>();\n        ArrayList<Long> operand15 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand18 = new ArrayList<Long>();\n        ArrayList<Long> operand19 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand22 = new ArrayList<Long>();\n        ArrayList<Long> operand23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand26 = new ArrayList<Long>();\n        ArrayList<Long> operand27 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand30 = new ArrayList<Long>();\n        ArrayList<Long> operand31 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand34 = new ArrayList<Long>();\n        ArrayList<Long> operand35 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand38 = new ArrayList<Long>();\n        ArrayList<Long> operand39 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> operand41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand42 = new ArrayList<Long>();\n        ArrayList<Long> operand43 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> operand\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaofg9esg.java:75: error: ';' expected\n        ArrayList<Long>\
    \ operand\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand4 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand5 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand6 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand8 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand9 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand10 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand11 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand13\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand14 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand15 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand16 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand17\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand18 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand20 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand21\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand22 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand23 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand24 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand25\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand26 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand27 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand28 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand29\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand30 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand31 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand32 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand33\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand34 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand35 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand36 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand37\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand38 = new ArrayList<Long>(operand);\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1rp2rusp.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4acyuqjo.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<String> operator3 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<String> operator5 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<String> operator9 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<String> operator11 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<String> operator13\
    \ = new ArrayList<String>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<String> operator15 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<String> operator17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator19 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<String> operator21\
    \ = new ArrayList<String>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<String> operator23 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<String> operator25\
    \ = new ArrayList<String>();\n        ArrayList<String> operator26 = new ArrayList<String>();\n\
    \        ArrayList<String> operator27 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator28 = new ArrayList<String>();\n        ArrayList<String> operator29\
    \ = new ArrayList<String>();\n        ArrayList<String> operator30 = new ArrayList<String>();\n\
    \        ArrayList<String> operator31 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator32 = new ArrayList<String>();\n        ArrayList<String> operator33\
    \ = new ArrayList<String>();\n        ArrayList<String> operator34 = new ArrayList<String>();\n\
    \        ArrayList<String> operator35 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator36 = new ArrayList<String>();\n        ArrayList<String> operator37\
    \ = new ArrayList<String>();\n        ArrayList<String> operator38 = new ArrayList<String>();\n\
    \        ArrayList<String> operator39 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>();\n        ArrayList<String> operator41\
    \ = new ArrayList<String>();\n        ArrayList<String> operator42 = new ArrayList<String>();\n\
    \        ArrayList<String> operator43 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator44 = new ArrayList<String>();\n        ArrayList<String> operator45\
    \ = new ArrayList<String>();\n        ArrayList<String> operator46 = new ArrayList<String>();\n\
    \        ArrayList<String> operator47 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator48\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5w1im6hs.java:79: error: ';' expected\n        ArrayList<String>\
    \ operator48\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                long\
    \ operand2 = operand.get(i + 1);\n                String operator = _operator_.get(j);\n\
    \                try {\n                    result = result + (Long.parseLong(operator)\
    \ + operand1 * operand2);\n                } catch (NumberFormatException nfe)\
    \ {\n                    System.out.println(\"Invalid input\");\n            \
    \    }\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: "Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    Invalid input\nInvalid input\nInvalid input\nInvalid input\n"
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpbnpwlvae.java:32)\n\tat Problem.main(tmpbnpwlvae.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result = operand1 + operand2; break;\n                   \
    \ case \"-\": result = operand1 - operand2; break;\n                    case \"\
    *\": result = operand1 * operand2; break;\n                    case \"//\": result\
    \ = operand1 // operand2; break;\n                    case \"**\": result = operand1\
    \ ** operand2; break;\n                }\n            } catch(ArithmeticException\
    \ e) {\n                System.out.println(\"Arithmetic Exception: \" + e.getMessage());\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ysxos31.java:38: error: ';' expected\n                    case\
    \ \"//\": result = operand1 // operand2; break;\n                            \
    \                    ^\n/tmp/tmp3ysxos31.java:39: error: illegal start of expression\n\
    \                    case \"**\": result = operand1 ** operand2; break;\n    \
    \                                              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<Long>\
    \ operand3 = operand;\n        ArrayList<Long> operand4 = operand;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<Long> operand5 = operand;\n        ArrayList<Long> operand6 =\
    \ operand;\n        ArrayList<String> operator5 = operator;\n        ArrayList<String>\
    \ operator6 = operator;\n        ArrayList<Long> operand7 = operand;\n       \
    \ ArrayList<Long> operand8 = operand;\n        ArrayList<String> operator7 = operator;\n\
    \        ArrayList<String> operator8 = operator;\n        ArrayList<Long> operand9\
    \ = operand;\n        ArrayList<Long> operand10 = operand;\n        ArrayList<String>\
    \ operator9 = operator;\n        ArrayList<String> operator10 = operator;\n  \
    \      ArrayList<Long> operand11 = operand;\n        ArrayList<Long> operand12\
    \ = operand;\n        ArrayList<String> operator11 = operator;\n        ArrayList<String>\
    \ operator12 = operator;\n        ArrayList<Long> operand13 = operand;\n     \
    \   ArrayList<Long> operand14 = operand;\n        ArrayList<String> operator13\
    \ = operator;\n        ArrayList<String> operator14 = operator;\n        ArrayList<Long>\
    \ operand15 = operand;\n        ArrayList<Long> operand16 = operand;\n       \
    \ ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<Long> operand17 = operand;\n        ArrayList<Long>\
    \ operand18 = operand;\n        ArrayList<String> operator17 = operator;\n   \
    \     ArrayList<String> operator18 = operator;\n        ArrayList<Long> operand19\
    \ = operand;\n        ArrayList<Long> operand20 = operand;\n        ArrayList<String>\
    \ operator19 = operator;\n        ArrayList<String> operator20 = operator;\n \
    \       ArrayList<Long> operand21 = operand;\n        ArrayList<Long> operand22\
    \ = operand;\n        ArrayList<String> operator21 = operator;\n        ArrayList<String>\
    \ operator22 = operator;\n        ArrayList<Long> operand23 = operand;\n     \
    \   ArrayList<Long> operand24 = operand;\n        ArrayList<String> operator23\
    \ = operator;\n        ArrayList<String> operator24 = operator;\n        ArrayList<Long>\
    \ operand25 = operand;\n        ArrayList<Long> operand26 = operand;\n       \
    \ ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<Long> operand27 = operand;\n        ArrayList<Long>\
    \ operand28 = operand;\n        ArrayList<String> operator27 = operator;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ix6kexa.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\": result +=\
    \ operand1; break;\n                case \"-\": result -= operand1; break;\n \
    \               case \"*\": result *= operand1; break;\n                case \"\
    //\": result /= operand1; break;\n                case \"**\": result *= operand1;\
    \ result *= operand1; break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpbl7279np.java:30)\n\tat Problem.main(tmpbl7279np.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator);\n        ArrayList<String> operator4\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator6 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator7 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator8 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator12 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator13 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator14 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator15 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>(operator);\n        ArrayList<String> operator17\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator19 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator21 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator22 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>(operator);\n        ArrayList<String> operator24\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator25 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator26 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator27 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator28 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator29 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator30 = new ArrayList<String>(operator);\n        ArrayList<String> operator31\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator32 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator33 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator34 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator35 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator36 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>(operator);\n        ArrayList<String> operator38\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator39 = new\
    \ ArrayList<String>(operator);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6y17lfg.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  ArrayList<String> tempOperator = new ArrayList<>();\n        ArrayList<Long>\
    \ tempOperand = new ArrayList<>();\n        long tempResult = 0;\n        boolean\
    \ flag = false;\n        for(int i = 0; i < operator.size(); i++) {\n        \
    \    for(int j = 0; j < operands.size(); j++) {\n                if(i == j) {\n\
    \                    tempOperand.add(operands.get(j));\n                    tempOperator.add(operator.get(i));\n\
    \                    tempResult = doAlgebra(tempOperator, tempOperand);\n    \
    \                result = result + tempResult;\n                    tempOperand.clear();\n\
    \                    tempOperator.clear();\n                    flag = true;\n\
    \                    break;\n                }\n                if(flag) {\n \
    \                   tempOperand.add(operands.get(j));\n                    tempOperator.add(operator.get(i));\n\
    \                    tempResult = doAlgebra(tempOperator, tempOperand);\n    \
    \                result = result + tempResult;\n                    tempOperand.clear();\n\
    \                    tempOperator.clear();\n                    flag = false;\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.ArrayList.grow(ArrayList.java:244)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:454)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:467)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:38)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n\
    \tat Problem.doAlgebra(tmpkvo9ocln.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  ArrayList<String> temp = new ArrayList<String>();\n        ArrayList<String>\
    \ temp2 = new ArrayList<String>();\n        ArrayList<String> temp3 = new ArrayList<String>();\n\
    \        ArrayList<String> temp4 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp5 = new ArrayList<String>();\n        ArrayList<String> temp6 = new ArrayList<String>();\n\
    \        ArrayList<String> temp7 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp8 = new ArrayList<String>();\n        ArrayList<String> temp9 = new ArrayList<String>();\n\
    \        ArrayList<String> temp10 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp11 = new ArrayList<String>();\n        ArrayList<String> temp12 = new ArrayList<String>();\n\
    \        ArrayList<String> temp13 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp14 = new ArrayList<String>();\n        ArrayList<String> temp15 = new ArrayList<String>();\n\
    \        ArrayList<String> temp16 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp17 = new ArrayList<String>();\n        ArrayList<String> temp18 = new ArrayList<String>();\n\
    \        ArrayList<String> temp19 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp20 = new ArrayList<String>();\n        ArrayList<String> temp21 = new ArrayList<String>();\n\
    \        ArrayList<String> temp22 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp23 = new ArrayList<String>();\n        ArrayList<String> temp24 = new ArrayList<String>();\n\
    \        ArrayList<String> temp25 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp26 = new ArrayList<String>();\n        ArrayList<String> temp27 = new ArrayList<String>();\n\
    \        ArrayList<String> temp28 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp29 = new ArrayList<String>();\n        ArrayList<String> temp30 = new ArrayList<String>();\n\
    \        ArrayList<String> temp31 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp32 = new ArrayList<String>();\n        ArrayList<String> temp33 = new ArrayList<String>();\n\
    \        ArrayList<String> temp34 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp35 = new ArrayList<String>();\n        ArrayList<String> temp36 = new ArrayList<String>();\n\
    \        ArrayList<String> temp37 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp38 = new ArrayList<String>();\n        ArrayList<String> temp39 = new ArrayList<String>();\n\
    \        ArrayList<String> temp40 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp41 = new ArrayList<String>();\n        ArrayList<String> temp42 = new ArrayList<String>();\n\
    \        ArrayList<String> temp43 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp44 = new ArrayList<String>();\n        ArrayList<String> temp45 = new ArrayList<String>();\n\
    \        ArrayList<String> temp46 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp47 = new ArrayList<String>();\n        ArrayList<String> temp48 = new ArrayList<String>();\n\
    \        ArrayList<String> temp49\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh4x1zqi.java:79: error: ';' expected\n        ArrayList<String>\
    \ temp49\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gh2l903.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp1gh2l903.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(op) {\n                case \"+\":\n             \
    \       result += operand1;\n                    break;\n                case\
    \ \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpi18wxoza.java:30)\n\tat Problem.main(tmpi18wxoza.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\": result = result + operand.get(i); break;\n\
    \                    case \"-\": result = result - operand.get(i); break;\n  \
    \                  case \"*\": result = result * operand.get(i); break;\n    \
    \                case \"//\": result = result / operand.get(i); break;\n     \
    \               case \"**\": result = result ** operand.get(i); break;\n     \
    \           }\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3n8lwyg.java:37: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand.get(i); break;\n        \
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<String> operator5 = operator;\n        ArrayList<String> operator6\
    \ = operator;\n        ArrayList<String> operator7 = operator;\n        ArrayList<String>\
    \ operator8 = operator;\n        ArrayList<String> operator9 = operator;\n   \
    \     ArrayList<String> operator10 = operator;\n        ArrayList<String> operator11\
    \ = operator;\n        ArrayList<String> operator12 = operator;\n        ArrayList<String>\
    \ operator13 = operator;\n        ArrayList<String> operator14 = operator;\n \
    \       ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<String> operator17 = operator;\n        ArrayList<String>\
    \ operator18 = operator;\n        ArrayList<String> operator19 = operator;\n \
    \       ArrayList<String> operator20 = operator;\n        ArrayList<String> operator21\
    \ = operator;\n        ArrayList<String> operator22 = operator;\n        ArrayList<String>\
    \ operator23 = operator;\n        ArrayList<String> operator24 = operator;\n \
    \       ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<String> operator27 = operator;\n        ArrayList<String>\
    \ operator28 = operator;\n        ArrayList<String> operator29 = operator;\n \
    \       ArrayList<String> operator30 = operator;\n        ArrayList<String> operator31\
    \ = operator;\n        ArrayList<String> operator32 = operator;\n        ArrayList<String>\
    \ operator33 = operator;\n        ArrayList<String> operator34 = operator;\n \
    \       ArrayList<String> operator35 = operator;\n        ArrayList<String> operator36\
    \ = operator;\n        ArrayList<String> operator37 = operator;\n        ArrayList<String>\
    \ operator38 = operator;\n        ArrayList<String> operator39 = operator;\n \
    \       ArrayList<String> operator40 = operator;\n        ArrayList<String> operator41\
    \ = operator;\n        ArrayList<String> operator42 = operator;\n        ArrayList<String>\
    \ operator43 = operator;\n        ArrayList<String> operator44 = operator;\n \
    \       ArrayList<String> operator45 = operator;\n        ArrayList<String> operator46\
    \ = operator;\n        ArrayList<String> operator47 = operator;\n        ArrayList<String>\
    \ operator48 = operator;\n        ArrayList<String> operator49 = operator;\n \
    \       ArrayList<String> operator50 = operator;\n        ArrayList<String> operator51\
    \ = operator;\n        ArrayList<String> operator52 = operator;\n        ArrayList<String>\
    \ operator53 = operator;\n        ArrayList<String> operator54 = operator;\n \
    \       ArrayList<String> operator55 = operator\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj82o4f68.java:86: error: ';' expected\n        ArrayList<String>\
    \ operator55 = operator\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\":\n                    result = result + operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    result = result - operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"//\":\n                    result = result / operand.get(0);\n           \
    \         operand.remove(0);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(0);\n          \
    \          operand.remove(0);\n                    break;\n            }\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbg1wngdx.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ _operator_length = 0, _operand_length = 0;\n        ArrayList<String> _operator\
    \ = new ArrayList<String>(_operator_);\n        ArrayList<Long> _operand = new\
    \ ArrayList<Long>(operand);\n        ArrayList<String> _operator_1 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_1 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_2 = new ArrayList<String>();\n        ArrayList<Long> _operand_2 =\
    \ new ArrayList<Long>();\n        ArrayList<String> _operator_3 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_3 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_4 = new ArrayList<String>();\n        ArrayList<Long> _operand_4 =\
    \ new ArrayList<Long>();\n        ArrayList<String> _operator_5 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_5 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_6 = new ArrayList<String>();\n        ArrayList<Long> _operand_6 =\
    \ new ArrayList<Long>();\n        ArrayList<String> _operator_7 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_7 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_8 = new ArrayList<String>();\n        ArrayList<Long> _operand_8 =\
    \ new ArrayList<Long>();\n        ArrayList<String> _operator_9 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_9 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_10 = new ArrayList<String>();\n        ArrayList<Long> _operand_10\
    \ = new ArrayList<Long>();\n        ArrayList<String> _operator_11 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_11 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_12 = new ArrayList<String>();\n        ArrayList<Long> _operand_12\
    \ = new ArrayList<Long>();\n        ArrayList<String> _operator_13 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_13 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_14 = new ArrayList<String>();\n        ArrayList<Long> _operand_14\
    \ = new ArrayList<Long>();\n        ArrayList<String> _operator_15 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_15 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_16 = new ArrayList<String>();\n        ArrayList<Long> _operand_16\
    \ = new ArrayList<Long>();\n        ArrayList<String> _operator_17 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_17 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_18 = new ArrayList<String>();\n        ArrayList<Long> _operand_18\
    \ = new ArrayList<Long>();\n        ArrayList<String> _operator_19 = new ArrayList<String>();\n\
    \        ArrayList<Long> _operand_19 = new ArrayList<Long>();\n        ArrayList<String>\
    \ _operator_20 = new ArrayList<String>();\n        ArrayList<\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpra41yfg7.java:72: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpra41yfg7.java:71: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppdv2nu02.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmppdv2nu02.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result **= operand; break;\n                default: throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ura8_9k.java:37: error: illegal start of expression\n        \
    \        case \"**\": result **= operand; break;\n                           \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjvxkttsb.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpjvxkttsb.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(op) {\n                case \"+\":\n             \
    \       result += operand1;\n                    break;\n                case\
    \ \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result /= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpf_v4bnc5.java:30)\n\tat Problem.main(tmpf_v4bnc5.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        boolean\
    \ isOperator = false;\n        for(int i = 0; i < _operator_.size(); i++) {\n\
    \            if(_operator_.get(i).equals(\"+\")) {\n                isOperator\
    \ = true;\n            }\n        }\n        if(isOperator) {\n            for(int\
    \ i = 0; i < operand.size(); i++) {\n                result += operand.get(i);\n\
    \            }\n        } else {\n            for(int i = 0; i < operand.size();\
    \ i++) {\n                result *= operand.get(i);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstuuq9nn.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new RuntimeException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp81z5mld9.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp81z5mld9.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand2 = operand;\n      \
    \  ArrayList<String> operator2 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>();\n        ArrayList<String> operator3 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand4 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator4 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand5 = new ArrayList<Long>();\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand6 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator6 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand7 = new ArrayList<Long>();\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator8 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<Long>();\n        ArrayList<String> operator9 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand10 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator10 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand11 = new ArrayList<Long>();\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand12 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator12 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand13 = new ArrayList<Long>();\n        ArrayList<String> operator13 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand14 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator14 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<Long>();\n        ArrayList<String> operator15 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand16 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator16 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand17 = new ArrayList<Long>();\n        ArrayList<String> operator17 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand18 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator18 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand19 = new ArrayList<Long>();\n        ArrayList<String> operator19 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator20 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<Long>();\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand22 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator22 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand23 = new ArrayList<Long>();\n        ArrayList<String> operator23 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand24 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator24 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand25 = new ArrayList<Long>();\n        ArrayList<String> operator25\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7jkjrgo.java:77: error: ';' expected\n        ArrayList<String>\
    \ operator25\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            switch(_operator_.get(i))\
    \ {\n                case \"+\":\n                    temp = operand.get(i) +\
    \ operand.get(i+1);\n                    result = result + temp;\n           \
    \         break;\n                case \"-\":\n                    temp = operand.get(i)\
    \ - operand.get(i+1);\n                    result = result + temp;\n         \
    \           break;\n                case \"*\":\n                    temp = operand.get(i)\
    \ * operand.get(i+1);\n                    result = result + temp;\n         \
    \           break;\n                case \"//\":\n                    temp = operand.get(i)\
    \ / operand.get(i+1);\n                    result = result + temp;\n         \
    \           break;\n                case \"**\":\n                    temp = operand.get(i)\
    \ ^ operand.get(i+1);\n                    result = result + temp;\n         \
    \           break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp4hu1n49w.java:31)\n\tat Problem.main(tmp4hu1n49w.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\":\n                    result = result + operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    result = result - operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"//\":\n                    result = result / operand.get(0);\n           \
    \         operand.remove(0);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(0);\n          \
    \          operand.remove(0);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hz4klx0.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bznhrgt.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + operator);\n            }\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9kcxksqs.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp9kcxksqs.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqyr52ty2.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpqyr52ty2.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch (operator) {\n            \
    \        case \"+\":\n                        result += operand1;\n          \
    \              break;\n                    case \"-\":\n                     \
    \   result -= operand1;\n                        break;\n                    case\
    \ \"*\":\n                        result *= operand1;\n                      \
    \  break;\n                    case \"//\":\n                        result /=\
    \ operand1;\n                        break;\n                    case \"**\":\n\
    \                        result *= operand1;\n                        result *=\
    \ operand2;\n                        break;\n                    default:\n  \
    \                      throw new IllegalArgumentException(\"Invalid operator:\
    \ \" + operator);\n                }\n            } catch (ArithmeticException\
    \ e) {\n                throw new IllegalArgumentException(\"Invalid operand:\
    \ \" + operand);\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27qcay3g.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpzrok2pas.java:30)\n\tat Problem.main(tmpzrok2pas.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qyg6gvt.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp7qyg6gvt.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result += operand1;\n                    break;\n              \
    \  case \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmphkm45dog.java:30)\n\tat Problem.main(tmphkm45dog.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(op) {\n      \
    \          case \"+\": result += operand; break;\n                case \"-\":\
    \ result -= operand; break;\n                case \"*\": result *= operand; break;\n\
    \                case \"//\": result /= operand; break;\n                case\
    \ \"**\": result *= operand; result /= operand; break;\n                default:\
    \ throw new IllegalArgumentException(\"Invalid operator: \" + op);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpllzujag4.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpllzujag4.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            switch(_operator_.get(i))\
    \ {\n                case \"+\":\n                    temp = operand.get(i) +\
    \ operand.get(i + 1);\n                    result = result + temp;\n         \
    \           break;\n                case \"-\":\n                    temp = operand.get(i)\
    \ - operand.get(i + 1);\n                    result = result + temp;\n       \
    \             break;\n                case \"*\":\n                    temp =\
    \ operand.get(i) * operand.get(i + 1);\n                    result = result +\
    \ temp;\n                    break;\n                case \"//\":\n          \
    \          temp = operand.get(i) / operand.get(i + 1);\n                    result\
    \ = result + temp;\n                    break;\n                case \"**\":\n\
    \                    temp = operand.get(i) ^ operand.get(i + 1);\n           \
    \         result = result + temp;\n                    break;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpsddyo94p.java:31)\n\tat Problem.main(tmpsddyo94p.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\": result = result + operand.get(0); break;\n                case \"-\"\
    : result = result - operand.get(0); break;\n                case \"*\": result\
    \ = result * operand.get(0); break;\n                case \"//\": result = result\
    \ / operand.get(0); break;\n                case \"**\": result = result ** operand.get(0);\
    \ break;\n                default: throw new IllegalArgumentException(\"Invalid\
    \ operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8oivs2ss.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ += operand.get(0); break;\n                case \"-\": result -= operand.get(0);\
    \ break;\n                case \"*\": result *= operand.get(0); break;\n     \
    \           case \"/\": result /= operand.get(0); break;\n                case\
    \ \"//\": result /= operand.get(0); break;\n                case \"**\": result\
    \ *= operand.get(0); break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbbdak5vd.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator);\n        ArrayList<String> operator4\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator6 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator7 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator8 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator12 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator13 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator14 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator15 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>(operator);\n        ArrayList<String> operator17\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator19 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator21 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator22 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>(operator);\n        ArrayList<String> operator24\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator25 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator26 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator27 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator28 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator29 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator30 = new ArrayList<String>(operator);\n        ArrayList<String> operator31\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator32 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator33 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator34 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator35 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator36 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>(operator);\n        ArrayList<String> operator38\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator39 = new\
    \ ArrayList<String>(operator);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpla0uohho.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand2 = operand;\n      \
    \  ArrayList<String> operator2 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>();\n        ArrayList<String> operator3 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand4 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator4 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand5 = new ArrayList<Long>();\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand6 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator6 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand7 = new ArrayList<Long>();\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator8 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<Long>();\n        ArrayList<String> operator9 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand10 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator10 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand11 = new ArrayList<Long>();\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand12 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator12 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand13 = new ArrayList<Long>();\n        ArrayList<String> operator13 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand14 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator14 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<Long>();\n        ArrayList<String> operator15 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand16 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator16 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand17 = new ArrayList<Long>();\n        ArrayList<String> operator17 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand18 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator18 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand19 = new ArrayList<Long>();\n        ArrayList<String> operator19 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator20 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<Long>();\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand22 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator22 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand23 = new ArrayList<Long>();\n        ArrayList<String> operator23 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand24 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator24 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand25 = new ArrayList<Long>();\n        ArrayList<String> operator25\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeod9hwp8.java:77: error: ';' expected\n        ArrayList<String>\
    \ operator25\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppygirgyy.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        ArrayList<String> operator = new ArrayList<String>(_operator_);\n\
    \        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n        for(int\
    \ i = 0; i < operator.size(); i++) {\n            switch(operator.get(i)) {\n\
    \                case \"+\":\n                    temp = operand2.get(i) + operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                case \"-\":\n          \
    \          temp = operand2.get(i) - operand2.get(i+1);\n                    operand2.remove(i+1);\n\
    \                    operand2.add(i, temp);\n                    break;\n    \
    \            case \"*\":\n                    temp = operand2.get(i) * operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                case \"//\":\n         \
    \           temp = operand2.get(i) / operand2.get(i+1);\n                    operand2.remove(i+1);\n\
    \                    operand2.add(i, temp);\n                    break;\n    \
    \            case \"**\":\n                    temp = operand2.get(i) ^ operand2.get(i+1);\n\
    \                    operand2.remove(i+1);\n                    operand2.add(i,\
    \ temp);\n                    break;\n                default:\n             \
    \       System.out.println(\"Invalid operator\");\n            }\n        }\n\
    \        result = operand2.get(0);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctn64pl1.java:68)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ += operand.get(0); break;\n                case \"-\": result -= operand.get(0);\
    \ break;\n                case \"*\": result *= operand.get(0); break;\n     \
    \           case \"//\": result /= operand.get(0); break;\n                case\
    \ \"**\": result *= operand.get(0); result *= operand.get(1); break;\n       \
    \         default: throw new IllegalArgumentException(\"Invalid operator: \" +\
    \ op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplodtpflt.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operandValue = operand.get(i);\n            switch(op) {\n \
    \               case \"+\":\n                    result += operandValue;\n   \
    \                 break;\n                case \"-\":\n                    result\
    \ -= operandValue;\n                    break;\n                case \"*\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \             case \"//\":\n                    result /= operandValue;\n    \
    \                break;\n                case \"**\":\n                    result\
    \ *= operandValue;\n                    break;\n                default:\n   \
    \                 System.out.println(\"Invalid operator\");\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp8x5khdb4.java:30)\n\tat Problem.main(tmp8x5khdb4.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result = operand1 + operand2; break;\n                   \
    \ case \"-\": result = operand1 - operand2; break;\n                    case \"\
    *\": result = operand1 * operand2; break;\n                    case \"//\": result\
    \ = operand1 // operand2; break;\n                    case \"**\": result = operand1\
    \ ** operand2; break;\n                }\n            } catch(ArithmeticException\
    \ ae) {\n                System.out.println(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gdk54t8.java:38: error: ';' expected\n                    case\
    \ \"//\": result = operand1 // operand2; break;\n                            \
    \                    ^\n/tmp/tmp_gdk54t8.java:39: error: illegal start of expression\n\
    \                    case \"**\": result = operand1 ** operand2; break;\n    \
    \                                              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<String> operator3 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<String> operator5 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<String> operator7 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<String> operator9 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<String> operator11 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<String> operator13\
    \ = new ArrayList<String>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<String> operator15 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<String> operator17\
    \ = new ArrayList<String>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<String> operator19 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<String> operator21\
    \ = new ArrayList<String>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<String> operator23 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<String> operator25\
    \ = new ArrayList<String>();\n        ArrayList<String> operator26 = new ArrayList<String>();\n\
    \        ArrayList<String> operator27 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator28 = new ArrayList<String>();\n        ArrayList<String> operator29\
    \ = new ArrayList<String>();\n        ArrayList<String> operator30 = new ArrayList<String>();\n\
    \        ArrayList<String> operator31 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator32 = new ArrayList<String>();\n        ArrayList<String> operator33\
    \ = new ArrayList<String>();\n        ArrayList<String> operator34 = new ArrayList<String>();\n\
    \        ArrayList<String> operator35 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator36 = new ArrayList<String>();\n        ArrayList<String> operator37\
    \ = new ArrayList<String>();\n        ArrayList<String> operator38 = new ArrayList<String>();\n\
    \        ArrayList<String> operator39 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>();\n        ArrayList<String> operator41\
    \ = new ArrayList<String>();\n        ArrayList<String> operator42 = new ArrayList<String>();\n\
    \        ArrayList<String> operator43 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator44 = new ArrayList<String>();\n        ArrayList<String> operator45\
    \ = new ArrayList<String>();\n        ArrayList<String> operator46 = new ArrayList<String>();\n\
    \        ArrayList<String> operator47 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator48\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zgshns5.java:79: error: ';' expected\n        ArrayList<String>\
    \ operator48\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(op) {\n                   \
    \ case \"+\":\n                        result += operand1;\n                 \
    \       break;\n                    case \"-\":\n                        result\
    \ -= operand1;\n                        break;\n                    case \"*\"\
    :\n                        result *= operand1;\n                        break;\n\
    \                    case \"//\":\n                        result /= operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result **= operand1;\n                        break;\n        \
    \        }\n            } catch(Exception e) {\n                System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp54pf_8be.java:48: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        boolean\
    \ isFirst = true;\n        boolean isLast = true;\n        boolean isOperator\
    \ = true;\n        boolean isOperand = true;\n        boolean isOperand2 = true;\n\
    \        boolean isOperand3 = true;\n        boolean isOperand4 = true;\n    \
    \    boolean isOperand5 = true;\n        boolean isOperand6 = true;\n        boolean\
    \ isOperand7 = true;\n        boolean isOperand8 = true;\n        boolean isOperand9\
    \ = true;\n        boolean isOperand10 = true;\n        boolean isOperand11 =\
    \ true;\n        boolean isOperand12 = true;\n        boolean isOperand13 = true;\n\
    \        boolean isOperand14 = true;\n        boolean isOperand15 = true;\n  \
    \      boolean isOperand16 = true;\n        boolean isOperand17 = true;\n    \
    \    boolean isOperand18 = true;\n        boolean isOperand19 = true;\n      \
    \  boolean isOperand20 = true;\n        boolean isOperand21 = true;\n        boolean\
    \ isOperand22 = true;\n        boolean isOperand23 = true;\n        boolean isOperand24\
    \ = true;\n        boolean isOperand25 = true;\n        boolean isOperand26 =\
    \ true;\n        boolean isOperand27 = true;\n        boolean isOperand28 = true;\n\
    \        boolean isOperand29 = true;\n        boolean isOperand30 = true;\n  \
    \      boolean isOperand31 = true;\n        boolean isOperand32 = true;\n    \
    \    boolean isOperand33 = true;\n        boolean isOperand34 = true;\n      \
    \  boolean isOperand35 = true;\n        boolean isOperand36 = true;\n        boolean\
    \ isOperand37 = true;\n        boolean isOperand38 = true;\n        boolean isOperand39\
    \ = true;\n        boolean isOperand40 = true;\n        boolean isOperand41 =\
    \ true;\n        boolean isOperand42 = true;\n        boolean isOperand43 = true;\n\
    \        boolean isOperand44 = true;\n        boolean isOperand45 = true;\n  \
    \      boolean isOperand46 = true;\n        boolean isOperand47 = true;\n    \
    \    boolean isOperand48 = true;\n        boolean isOperand49 = true;\n      \
    \  boolean isOperand50 = true;\n        boolean isOperand51 = true;\n        boolean\
    \ isOperand52 = true;\n        boolean isOperand53 = true;\n        boolean isOperand54\
    \ = true;\n        boolean isOperand55 = true;\n        boolean isOperand56 =\
    \ true;\n        boolean isOperand57 = true;\n        boolean isOperand58 = true;\n\
    \        boolean isOperand59 = true;\n        boolean isOperand60 = true;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9yg5fbph.java:93: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuw85b8iu.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpuw85b8iu.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operands\
    \ = new ArrayList<Long>(operand);\n        for(int i = 0; i < operator.size();\
    \ i++) {\n            String op = operator.get(i);\n            long operand =\
    \ operands.get(i);\n            switch(op) {\n                case \"+\":\n  \
    \                  result += operand;\n                    break;\n          \
    \      case \"-\":\n                    result -= operand;\n                 \
    \   break;\n                case \"*\":\n                    result *= operand;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand;\n                    break;\n                case \"**\"\
    :\n                    result *= operand;\n                    break;\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkq1cf0x_.java:33: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operands.get(i);\n                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand2 = operand;\n      \
    \  ArrayList<String> operator2 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>();\n        ArrayList<String> operator3 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand4 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator4 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand5 = new ArrayList<Long>();\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand6 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator6 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand7 = new ArrayList<Long>();\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator8 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<Long>();\n        ArrayList<String> operator9 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand10 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator10 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand11 = new ArrayList<Long>();\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand12 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator12 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand13 = new ArrayList<Long>();\n        ArrayList<String> operator13 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand14 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator14 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<Long>();\n        ArrayList<String> operator15 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand16 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator16 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand17 = new ArrayList<Long>();\n        ArrayList<String> operator17 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand18 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator18 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand19 = new ArrayList<Long>();\n        ArrayList<String> operator19 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator20 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<Long>();\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand22 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator22 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand23 = new ArrayList<Long>();\n        ArrayList<String> operator23 = new\
    \ ArrayList<String>();\n        ArrayList<Long> operand24 = new ArrayList<Long>();\n\
    \        ArrayList<String> operator24 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand25 = new ArrayList<Long>();\n        ArrayList<String> operator25\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprjw9_dyc.java:77: error: ';' expected\n        ArrayList<String>\
    \ operator25\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ operator : _operator_) {\n            switch(operator) {\n                case\
    \ \"+\":\n                    result = result + operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    result = result - operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"//\":\n                    result = result / operand.get(0);\n           \
    \         operand.remove(0);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(0);\n          \
    \          operand.remove(0);\n                    break;\n            }\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpalcmyjaq.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw8drm4bo.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpw8drm4bo.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand4 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand5 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand6 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand8 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand9 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand10 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand11 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand13\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand14 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand15 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand16 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand17\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand18 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand20 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand21\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand22 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand23 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand24 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand25\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand26 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand27 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand28 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand29\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand30 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand31 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand32 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand33\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand34 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand35 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand36 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand37\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand38 = new ArrayList<Long>(operand);\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewq7gjs6.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpecz75nhl.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpecz75nhl.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpripm0rug.java:30)\n\tat Problem.main(tmpripm0rug.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4wbpkvih.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp4wbpkvih.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                long\
    \ operand2 = operand.get(i + 1);\n                long operator = _operator_.get(j);\n\
    \                switch(operator) {\n                    case \"+\":\n       \
    \                 result += operand1;\n                        break;\n      \
    \              case \"-\":\n                        result -= operand1;\n    \
    \                    break;\n                    case \"*\":\n               \
    \         result *= operand1;\n                        break;\n              \
    \      case \"//\":\n                        result /= operand1;\n           \
    \             break;\n                    case \"**\":\n                     \
    \   result **= operand1;\n                        break;\n                }\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9tk5h__.java:48: error: illegal start of expression\n        \
    \                result **= operand1;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(op) {\n                   \
    \ case \"+\":\n                        result = result + operand1;\n         \
    \               break;\n                    case \"-\":\n                    \
    \    result = result - operand1;\n                        break;\n           \
    \         case \"*\":\n                        result = result * operand1;\n \
    \                       break;\n                    case \"//\":\n           \
    \             result = result / operand1;\n                        break;\n  \
    \                  case \"**\":\n                        result = result ** operand1;\n\
    \                        break;\n                    default:\n              \
    \          throw new IllegalArgumentException(\"Invalid operator: \" + op);\n\
    \                }\n            } catch(ArithmeticException ex) {\n          \
    \      throw new IllegalArgumentException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrrfuy_a.java:48: error: illegal start of expression\n        \
    \                result = result ** operand1;\n                              \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator);\n        ArrayList<String> operator4\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator6 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator7 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator8 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator12 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator13 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator14 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator15 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>(operator);\n        ArrayList<String> operator17\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator19 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator21 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator22 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>(operator);\n        ArrayList<String> operator24\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator25 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator26 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator27 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator28 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator29 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator30 = new ArrayList<String>(operator);\n        ArrayList<String> operator31\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator32 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator33 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator34 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator35 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator36 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>(operator);\n        ArrayList<String> operator38\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator39 = new\
    \ ArrayList<String>(operator);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4qkf8flx.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0lxz7w0g.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp0lxz7w0g.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: return -1;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptxpbjsdw.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < _operator_.size(); i++) {\n          \
    \  switch(_operator_.get(i)) {\n                case \"+\": result = result +\
    \ operand.get(i); break;\n                case \"-\": result = result - operand.get(i);\
    \ break;\n                case \"*\": result = result * operand.get(i); break;\n\
    \                case \"//\": result = result / operand.get(i); break;\n     \
    \           case \"**\": result = result ** operand.get(i); break;\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzwzkek9g.java:36: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result += operand1; break;\n                    case \"-\"\
    : result -= operand1; break;\n                    case \"*\": result *= operand1;\
    \ break;\n                    case \"//\": result /= operand1; break;\n      \
    \              case \"**\": result *= operand1; result *= operand2; break;\n \
    \                   default: throw new Exception(\"Invalid operator: \" + operator);\n\
    \                }\n            } catch(Exception e) {\n                throw\
    \ new Exception(\"Invalid operand: \" + operand);\n            }\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppc5tzw2_.java:43: error: unreported exception Exception; must be\
    \ caught or declared to be thrown\n                throw new Exception(\"Invalid\
    \ operand: \" + operand);\n                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ += operand.get(0); break;\n                case \"-\": result -= operand.get(0);\
    \ break;\n                case \"*\": result *= operand.get(0); break;\n     \
    \           case \"//\": result /= operand.get(0); break;\n                case\
    \ \"**\": result *= operand.get(0); result *= operand.get(1); break;\n       \
    \         default: throw new IllegalArgumentException(\"Invalid operator: \" +\
    \ op);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5dx9nrv.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            try {\n             \
    \   switch(operator) {\n                    case \"+\": result += operand; break;\n\
    \                    case \"-\": result -= operand; break;\n                 \
    \   case \"*\": result *= operand; break;\n                    case \"//\": result\
    \ /= operand; break;\n                    case \"**\": result *= operand; result\
    \ /= operand; break;\n                    default: throw new RuntimeException(\"\
    Invalid operator: \" + operator);\n                }\n            } catch(Exception\
    \ e) {\n                throw new RuntimeException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vglgoj2.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp5vglgoj2.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operator) {\n                case \"+\": result +=\
    \ operand1; break;\n                case \"-\": result -= operand1; break;\n \
    \               case \"*\": result *= operand1; break;\n                case \"\
    //\": result /= operand1; break;\n                case \"**\": result *= operand1;\
    \ result *= operand1; break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp0vzilab0.java:30)\n\tat Problem.main(tmp0vzilab0.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ new ArrayList<>();\n        ArrayList<String> operator2 = new ArrayList<>();\n\
    \        ArrayList<String> operator3 = new ArrayList<>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<>();\n        ArrayList<String> operator5 = new ArrayList<>();\n\
    \        ArrayList<String> operator6 = new ArrayList<>();\n        ArrayList<String>\
    \ operator7 = new ArrayList<>();\n        ArrayList<String> operator8 = new ArrayList<>();\n\
    \        ArrayList<String> operator9 = new ArrayList<>();\n        ArrayList<String>\
    \ operator10 = new ArrayList<>();\n        ArrayList<String> operator11 = new\
    \ ArrayList<>();\n        ArrayList<String> operator12 = new ArrayList<>();\n\
    \        ArrayList<String> operator13 = new ArrayList<>();\n        ArrayList<String>\
    \ operator14 = new ArrayList<>();\n        ArrayList<String> operator15 = new\
    \ ArrayList<>();\n        ArrayList<String> operator16 = new ArrayList<>();\n\
    \        ArrayList<String> operator17 = new ArrayList<>();\n        ArrayList<String>\
    \ operator18 = new ArrayList<>();\n        ArrayList<String> operator19 = new\
    \ ArrayList<>();\n        ArrayList<String> operator20 = new ArrayList<>();\n\
    \        ArrayList<String> operator21 = new ArrayList<>();\n        ArrayList<String>\
    \ operator22 = new ArrayList<>();\n        ArrayList<String> operator23 = new\
    \ ArrayList<>();\n        ArrayList<String> operator24 = new ArrayList<>();\n\
    \        ArrayList<String> operator25 = new ArrayList<>();\n        ArrayList<String>\
    \ operator26 = new ArrayList<>();\n        ArrayList<String> operator27 = new\
    \ ArrayList<>();\n        ArrayList<String> operator28 = new ArrayList<>();\n\
    \        ArrayList<String> operator29 = new ArrayList<>();\n        ArrayList<String>\
    \ operator30 = new ArrayList<>();\n        ArrayList<String> operator31 = new\
    \ ArrayList<>();\n        ArrayList<String> operator32 = new ArrayList<>();\n\
    \        ArrayList<String> operator33 = new ArrayList<>();\n        ArrayList<String>\
    \ operator34 = new ArrayList<>();\n        ArrayList<String> operator35 = new\
    \ ArrayList<>();\n        ArrayList<String> operator36 = new ArrayList<>();\n\
    \        ArrayList<String> operator37 = new ArrayList<>();\n        ArrayList<String>\
    \ operator38 = new ArrayList<>();\n        ArrayList<String> operator39 = new\
    \ ArrayList<>();\n        ArrayList<String> operator40 = new ArrayList<>();\n\
    \        ArrayList<String> operator41 = new ArrayList<>();\n        ArrayList<String>\
    \ operator42 = new ArrayList<>();\n        ArrayList<String> operator43 = new\
    \ ArrayList<>();\n        ArrayList<String> operator44 = new ArrayList<>();\n\
    \        ArrayList<String> operator45 = new ArrayList<>();\n        ArrayList<String>\
    \ operator46 = new ArrayList<>();\n        ArrayList<String> operator47 = new\
    \ ArrayList<>();\n        ArrayList<String> operator48 = new ArrayList<>();\n\
    \        ArrayList<String> operator49 = new ArrayList<>();\n        ArrayList<String>\
    \ operator50 = new ArrayList<>();\n        ArrayList<String> operator51 = new\
    \ ArrayList<>();\n        ArrayList<String> operator52 = new ArrayList<>();\n\
    \        ArrayList<String> operator5\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6n3qtvb.java:84: error: ';' expected\n        ArrayList<String>\
    \ operator5\n                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            temp\
    \ = operand.get(i);\n            for(int j = 0; j < _operator_.size(); j++) {\n\
    \                switch(_operator_.get(j)) {\n                    case \"+\":\n\
    \                        result += temp;\n                        break;\n   \
    \                 case \"-\":\n                        result -= temp;\n     \
    \                   break;\n                    case \"*\":\n                \
    \        result *= temp;\n                        break;\n                   \
    \ case \"//\":\n                        result /= temp;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ **= temp;\n                        break;\n                }\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmlh3tipb.java:47: error: illegal start of expression\n        \
    \                result **= temp;\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9_ubf_9.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpf9_ubf_9.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2lmaki0.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpa2lmaki0.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<String> operator1 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator2 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>(operator);\n        ArrayList<String> operator4\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator5 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator6 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator7 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator8 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>(operator);\n        ArrayList<String> operator10\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator11 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator12 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator13 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator14 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator15 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>(operator);\n        ArrayList<String> operator17\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator18 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator19 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator20 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator21 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator22 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>(operator);\n        ArrayList<String> operator24\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator25 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator26 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator27 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator28 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator29 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator30 = new ArrayList<String>(operator);\n        ArrayList<String> operator31\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator32 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator33 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator34 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator35 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator36 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>(operator);\n        ArrayList<String> operator38\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator39 = new\
    \ ArrayList<String>(operator);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsywmd54h.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\": result = result + operand.get(i); break;\n\
    \                    case \"-\": result = result - operand.get(i); break;\n  \
    \                  case \"*\": result = result * operand.get(i); break;\n    \
    \                case \"//\": result = result / operand.get(i); break;\n     \
    \               case \"**\": result = result ** operand.get(i); break;\n     \
    \           }\n            }\n        }\n        return result;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf23ji_5m.java:37: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand.get(i); break;\n        \
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<String> operator5 = operator;\n        ArrayList<String> operator6\
    \ = operator;\n        ArrayList<String> operator7 = operator;\n        ArrayList<String>\
    \ operator8 = operator;\n        ArrayList<String> operator9 = operator;\n   \
    \     ArrayList<String> operator10 = operator;\n        ArrayList<String> operator11\
    \ = operator;\n        ArrayList<String> operator12 = operator;\n        ArrayList<String>\
    \ operator13 = operator;\n        ArrayList<String> operator14 = operator;\n \
    \       ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<String> operator17 = operator;\n        ArrayList<String>\
    \ operator18 = operator;\n        ArrayList<String> operator19 = operator;\n \
    \       ArrayList<String> operator20 = operator;\n        ArrayList<String> operator21\
    \ = operator;\n        ArrayList<String> operator22 = operator;\n        ArrayList<String>\
    \ operator23 = operator;\n        ArrayList<String> operator24 = operator;\n \
    \       ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<String> operator27 = operator;\n        ArrayList<String>\
    \ operator28 = operator;\n        ArrayList<String> operator29 = operator;\n \
    \       ArrayList<String> operator30 = operator;\n        ArrayList<String> operator31\
    \ = operator;\n        ArrayList<String> operator32 = operator;\n        ArrayList<String>\
    \ operator33 = operator;\n        ArrayList<String> operator34 = operator;\n \
    \       ArrayList<String> operator35 = operator;\n        ArrayList<String> operator36\
    \ = operator;\n        ArrayList<String> operator37 = operator;\n        ArrayList<String>\
    \ operator38 = operator;\n        ArrayList<String> operator39 = operator;\n \
    \       ArrayList<String> operator40 = operator;\n        ArrayList<String> operator41\
    \ = operator;\n        ArrayList<String> operator42 = operator;\n        ArrayList<String>\
    \ operator43 = operator;\n        ArrayList<String> operator44 = operator;\n \
    \       ArrayList<String> operator45 = operator;\n        ArrayList<String> operator46\
    \ = operator;\n        ArrayList<String> operator47 = operator;\n        ArrayList<String>\
    \ operator48 = operator;\n        ArrayList<String> operator49 = operator;\n \
    \       ArrayList<String> operator50 = operator;\n        ArrayList<String> operator51\
    \ = operator;\n        ArrayList<String> operator52 = operator;\n        ArrayList<String>\
    \ operator53 = operator;\n        ArrayList<String> operator54 = operator;\n \
    \       ArrayList<String> operator55 = operator\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq4_sewk8.java:86: error: ';' expected\n        ArrayList<String>\
    \ operator55 = operator\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand2\
    \ = new ArrayList<Long>(operand);\n        ArrayList<String> operator2 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator3 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator4 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator5 = new ArrayList<String>(operator);\n        ArrayList<String> operator6\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator8 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator9 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator10 = new ArrayList<String>(operator);\n       \
    \ ArrayList<String> operator11 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>(operator);\n        ArrayList<String> operator13\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator14 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator15 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator16 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator17 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator18 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator19 = new ArrayList<String>(operator);\n        ArrayList<String> operator20\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator22 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator23 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator24 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator25 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator26 = new ArrayList<String>(operator);\n        ArrayList<String> operator27\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator28 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator29 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator30 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator31 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator32 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator33 = new ArrayList<String>(operator);\n        ArrayList<String> operator34\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator35 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator36 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator37 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator38 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator39 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>(operator);\n        ArrayList<String> operator41\
    \ = new ArrayList<String>(operator);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr64v14fn.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  ArrayList<String> operators = Arrays.asList(\"+\", \"-\", \"*\", \"//\", \"\
    **\");\n        ArrayList<String> operandss = new ArrayList<>();\n        ArrayList<String>\
    \ operandsss = new ArrayList<>();\n        ArrayList<String> operandssss = new\
    \ ArrayList<>();\n        ArrayList<String> operandsssss = new ArrayList<>();\n\
    \        ArrayList<String> operandsssssss = new ArrayList<>();\n        ArrayList<String>\
    \ operandsssssssss = new ArrayList<>();\n        ArrayList<String> operandsssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssss = new ArrayList<>();\n\
    \        ArrayList<String> operandsssssssssssssss = new ArrayList<>();\n     \
    \   ArrayList<String> operandsssssssssssssssss = new ArrayList<>();\n        ArrayList<String>\
    \ operandsssssssssssssssssss = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandsssssssssssssssssssssssssssssssss\
    \ = new ArrayList<>();\n        ArrayList<String> operandssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3x6g0a3k.java:49: error: ';' expected\n        ArrayList<String>\
    \ operandssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: return -1;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_y3lc3k.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  ArrayList<String> temp = new ArrayList<>();\n        ArrayList<String> temp2\
    \ = new ArrayList<>();\n        ArrayList<String> temp3 = new ArrayList<>();\n\
    \        ArrayList<String> temp4 = new ArrayList<>();\n        ArrayList<String>\
    \ temp5 = new ArrayList<>();\n        ArrayList<String> temp6 = new ArrayList<>();\n\
    \        ArrayList<String> temp7 = new ArrayList<>();\n        ArrayList<String>\
    \ temp8 = new ArrayList<>();\n        ArrayList<String> temp9 = new ArrayList<>();\n\
    \        ArrayList<String> temp10 = new ArrayList<>();\n        ArrayList<String>\
    \ temp11 = new ArrayList<>();\n        ArrayList<String> temp12 = new ArrayList<>();\n\
    \        ArrayList<String> temp13 = new ArrayList<>();\n        ArrayList<String>\
    \ temp14 = new ArrayList<>();\n        ArrayList<String> temp15 = new ArrayList<>();\n\
    \        ArrayList<String> temp16 = new ArrayList<>();\n        ArrayList<String>\
    \ temp17 = new ArrayList<>();\n        ArrayList<String> temp18 = new ArrayList<>();\n\
    \        ArrayList<String> temp19 = new ArrayList<>();\n        ArrayList<String>\
    \ temp20 = new ArrayList<>();\n        ArrayList<String> temp21 = new ArrayList<>();\n\
    \        ArrayList<String> temp22 = new ArrayList<>();\n        ArrayList<String>\
    \ temp23 = new ArrayList<>();\n        ArrayList<String> temp24 = new ArrayList<>();\n\
    \        ArrayList<String> temp25 = new ArrayList<>();\n        ArrayList<String>\
    \ temp26 = new ArrayList<>();\n        ArrayList<String> temp27 = new ArrayList<>();\n\
    \        ArrayList<String> temp28 = new ArrayList<>();\n        ArrayList<String>\
    \ temp29 = new ArrayList<>();\n        ArrayList<String> temp30 = new ArrayList<>();\n\
    \        ArrayList<String> temp31 = new ArrayList<>();\n        ArrayList<String>\
    \ temp32 = new ArrayList<>();\n        ArrayList<String> temp33 = new ArrayList<>();\n\
    \        ArrayList<String> temp34 = new ArrayList<>();\n        ArrayList<String>\
    \ temp35 = new ArrayList<>();\n        ArrayList<String> temp36 = new ArrayList<>();\n\
    \        ArrayList<String> temp37 = new ArrayList<>();\n        ArrayList<String>\
    \ temp38 = new ArrayList<>();\n        ArrayList<String> temp39 = new ArrayList<>();\n\
    \        ArrayList<String> temp40 = new ArrayList<>();\n        ArrayList<String>\
    \ temp41 = new ArrayList<>();\n        ArrayList<String> temp42 = new ArrayList<>();\n\
    \        ArrayList<String> temp43 = new ArrayList<>();\n        ArrayList<String>\
    \ temp44 = new ArrayList<>();\n        ArrayList<String> temp45 = new ArrayList<>();\n\
    \        ArrayList<String> temp46 = new ArrayList<>();\n        ArrayList<String>\
    \ temp47 = new ArrayList<>();\n        ArrayList<String> temp48 = new ArrayList<>();\n\
    \        ArrayList<String> temp49 = new ArrayList<>();\n        ArrayList<String>\
    \ temp50 = new ArrayList<>();\n        ArrayList<String> temp51 = new ArrayList<>();\n\
    \        ArrayList<String> temp52 = new ArrayList<>();\n        ArrayList<String>\
    \ temp53 = new ArrayList<>();\n        ArrayList<String> temp54\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8tw8ambh.java:84: error: ';' expected\n        ArrayList<String>\
    \ temp54\n                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<String> operator1 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand2 = new ArrayList<Long>();\n        ArrayList<String> operator2 = new\
    \ ArrayList<String>();\n        ArrayList<String> operator3 = new ArrayList<String>();\n\
    \        ArrayList<String> operator4 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator5 = new ArrayList<String>();\n        ArrayList<String> operator6 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator7 = new ArrayList<String>();\n\
    \        ArrayList<String> operator8 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>();\n        ArrayList<String> operator10 =\
    \ new ArrayList<String>();\n        ArrayList<String> operator11 = new ArrayList<String>();\n\
    \        ArrayList<String> operator12 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator13 = new ArrayList<String>();\n        ArrayList<String> operator14\
    \ = new ArrayList<String>();\n        ArrayList<String> operator15 = new ArrayList<String>();\n\
    \        ArrayList<String> operator16 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator17 = new ArrayList<String>();\n        ArrayList<String> operator18\
    \ = new ArrayList<String>();\n        ArrayList<String> operator19 = new ArrayList<String>();\n\
    \        ArrayList<String> operator20 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator21 = new ArrayList<String>();\n        ArrayList<String> operator22\
    \ = new ArrayList<String>();\n        ArrayList<String> operator23 = new ArrayList<String>();\n\
    \        ArrayList<String> operator24 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator25 = new ArrayList<String>();\n        ArrayList<String> operator26\
    \ = new ArrayList<String>();\n        ArrayList<String> operator27 = new ArrayList<String>();\n\
    \        ArrayList<String> operator28 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator29 = new ArrayList<String>();\n        ArrayList<String> operator30\
    \ = new ArrayList<String>();\n        ArrayList<String> operator31 = new ArrayList<String>();\n\
    \        ArrayList<String> operator32 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator33 = new ArrayList<String>();\n        ArrayList<String> operator34\
    \ = new ArrayList<String>();\n        ArrayList<String> operator35 = new ArrayList<String>();\n\
    \        ArrayList<String> operator36 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator37 = new ArrayList<String>();\n        ArrayList<String> operator38\
    \ = new ArrayList<String>();\n        ArrayList<String> operator39 = new ArrayList<String>();\n\
    \        ArrayList<String> operator40 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator41 = new ArrayList<String>();\n        ArrayList<String> operator42\
    \ = new ArrayList<String>();\n        ArrayList<String> operator43 = new ArrayList<String>();\n\
    \        ArrayList<String> operator44 = new ArrayList<String>();\n        ArrayList<String>\
    \ operator45 = new ArrayList<String>();\n        ArrayList<String> operator46\
    \ = new ArrayList<String>();\n        ArrayList<String> operator47 = new ArrayList<String>();\n\
    \        ArrayList<String> \n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpam3i1kag.java:79: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpam3i1kag.java:79: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch (op) {\n                  \
    \  case \"+\":\n                        result += operand1;\n                \
    \        break;\n                    case \"-\":\n                        result\
    \ -= operand1;\n                        break;\n                    case \"*\"\
    :\n                        result *= operand1;\n                        break;\n\
    \                    case \"//\":\n                        result /= operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result *= operand1;\n                        result *= operand2;\n\
    \                        break;\n                    default:\n              \
    \          throw new IllegalArgumentException(\"Invalid operator: \" + op);\n\
    \                }\n            } catch (ArithmeticException e) {\n          \
    \      throw new IllegalArgumentException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvqh12hrp.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3j3h8alp.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp3j3h8alp.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(op) {\n                   \
    \ case \"+\":\n                        result += operand1;\n                 \
    \       break;\n                    case \"-\":\n                        result\
    \ -= operand1;\n                        break;\n                    case \"*\"\
    :\n                        result *= operand1;\n                        break;\n\
    \                    case \"//\":\n                        result /= operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result *= operand1;\n                        result *= operand2;\n\
    \                        break;\n                    default:\n              \
    \          throw new RuntimeException(\"Invalid operator: \" + op);\n        \
    \        }\n            } catch(ArithmeticException e) {\n                throw\
    \ new RuntimeException(\"Invalid operand: \" + operand1 + \" \" + op + \" \" +\
    \ operand2);\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmefv18m.java:62)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\":\n\
    \                    result = result + operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result = result * operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = result / operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = result ** operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq7wz94e5.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result += operand1; break;\n                    case \"-\"\
    : result -= operand1; break;\n                    case \"*\": result *= operand1;\
    \ break;\n                    case \"//\": result /= operand1; break;\n      \
    \              case \"**\": result *= operand1; result *= operand1; break;\n \
    \                   default: throw new IllegalArgumentException(\"Invalid operator:\
    \ \" + operator);\n                }\n            } catch(ArithmeticException\
    \ ex) {\n                throw new IllegalArgumentException(\"Invalid operand:\
    \ \" + operand);\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp30nwmvuh.java:30)\n\tat Problem.main(tmp30nwmvuh.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result *= operand; break;\n            \
    \    default: throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp01b66cgw.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmp01b66cgw.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<Long> operand2 = operand;\n        ArrayList<String> operator1 =\
    \ operator;\n        ArrayList<String> operator2 = operator;\n        ArrayList<String>\
    \ operator3 = operator;\n        ArrayList<String> operator4 = operator;\n   \
    \     ArrayList<String> operator5 = operator;\n        ArrayList<String> operator6\
    \ = operator;\n        ArrayList<String> operator7 = operator;\n        ArrayList<String>\
    \ operator8 = operator;\n        ArrayList<String> operator9 = operator;\n   \
    \     ArrayList<String> operator10 = operator;\n        ArrayList<String> operator11\
    \ = operator;\n        ArrayList<String> operator12 = operator;\n        ArrayList<String>\
    \ operator13 = operator;\n        ArrayList<String> operator14 = operator;\n \
    \       ArrayList<String> operator15 = operator;\n        ArrayList<String> operator16\
    \ = operator;\n        ArrayList<String> operator17 = operator;\n        ArrayList<String>\
    \ operator18 = operator;\n        ArrayList<String> operator19 = operator;\n \
    \       ArrayList<String> operator20 = operator;\n        ArrayList<String> operator21\
    \ = operator;\n        ArrayList<String> operator22 = operator;\n        ArrayList<String>\
    \ operator23 = operator;\n        ArrayList<String> operator24 = operator;\n \
    \       ArrayList<String> operator25 = operator;\n        ArrayList<String> operator26\
    \ = operator;\n        ArrayList<String> operator27 = operator;\n        ArrayList<String>\
    \ operator28 = operator;\n        ArrayList<String> operator29 = operator;\n \
    \       ArrayList<String> operator30 = operator;\n        ArrayList<String> operator31\
    \ = operator;\n        ArrayList<String> operator32 = operator;\n        ArrayList<String>\
    \ operator33 = operator;\n        ArrayList<String> operator34 = operator;\n \
    \       ArrayList<String> operator35 = operator;\n        ArrayList<String> operator36\
    \ = operator;\n        ArrayList<String> operator37 = operator;\n        ArrayList<String>\
    \ operator38 = operator;\n        ArrayList<String> operator39 = operator;\n \
    \       ArrayList<String> operator40 = operator;\n        ArrayList<String> operator41\
    \ = operator;\n        ArrayList<String> operator42 = operator;\n        ArrayList<String>\
    \ operator43 = operator;\n        ArrayList<String> operator44 = operator;\n \
    \       ArrayList<String> operator45 = operator;\n        ArrayList<String> operator46\
    \ = operator;\n        ArrayList<String> operator47 = operator;\n        ArrayList<String>\
    \ operator48 = operator;\n        ArrayList<String> operator49 = operator;\n \
    \       ArrayList<String> operator50 = operator;\n        ArrayList<String> operator51\
    \ = operator;\n        ArrayList<String> operator52 = operator;\n        ArrayList<String>\
    \ operator53 = operator;\n        ArrayList<String> operator54 = operator;\n \
    \       ArrayList<String> operator55 = operator\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpge_n71zb.java:86: error: ';' expected\n        ArrayList<String>\
    \ operator55 = operator\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\": result += operand; break;\n                case \"\
    -\": result -= operand; break;\n                case \"*\": result *= operand;\
    \ break;\n                case \"//\": result /= operand; break;\n           \
    \     case \"**\": result *= operand; result /= operand; break;\n            \
    \    default: throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcgs3zzm_.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpcgs3zzm_.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result **= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe2ekmqkz.java:46: error: illegal start of expression\n        \
    \            result **= operand;\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand1;\n                    break;\n       \
    \         default:\n                    System.out.println(\"Invalid operator:\
    \ \" + operator);\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpqrr_psrk.java:31)\n\tat Problem.main(tmpqrr_psrk.java:57)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(String\
    \ op : _operator_) {\n            switch(op) {\n                case \"+\": result\
    \ = result + operand.get(0); break;\n                case \"-\": result = result\
    \ - operand.get(0); break;\n                case \"*\": result = result * operand.get(0);\
    \ break;\n                case \"//\": result = result / operand.get(0); break;\n\
    \                case \"**\": result = result ** operand.get(0); break;\n    \
    \            default: throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n            operand.remove(0);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0hrfzurj.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operands\
    \ = new ArrayList<Long>(operand);\n        \n        for(int i = 0; i < operator.size();\
    \ i++) {\n            String operatorString = operator.get(i);\n            long\
    \ operand = operands.get(i);\n            \n            switch(operatorString)\
    \ {\n                case \"+\":\n                    result += operand;\n   \
    \                 break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1c8ni6nx.java:34: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operands.get(i);\n                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operands = operand;\n      \
    \  for(int i = 0; i < operator.size(); i++) {\n            switch(operator.get(i))\
    \ {\n                case \"+\":\n                    result += operands.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operands.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operands.get(i);\n                   \
    \ break;\n                case \"//\":\n                    result /= operands.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operands.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpask2pco3.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\":\n                        temp = temp + operand.get(i);\n\
    \                        break;\n                    case \"-\":\n           \
    \             temp = temp - operand.get(i);\n                        break;\n\
    \                    case \"*\":\n                        temp = temp * operand.get(i);\n\
    \                        break;\n                    case \"//\":\n          \
    \              temp = temp / operand.get(i);\n                        break;\n\
    \                    case \"**\":\n                        temp = temp ** operand.get(i);\n\
    \                        break;\n                }\n            }\n          \
    \  result = result + temp;\n            temp = 0;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiontzu1w.java:46: error: illegal start of expression\n        \
    \                temp = temp ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            try {\n             \
    \   switch(operator) {\n                    case \"+\": result = result + operand;\
    \ break;\n                    case \"-\": result = result - operand; break;\n\
    \                    case \"*\": result = result * operand; break;\n         \
    \           case \"//\": result = result / operand; break;\n                 \
    \   case \"**\": result = result ** operand; break;\n                }\n     \
    \       } catch(ArithmeticException e) {\n                System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e731df1.java:38: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand; break;\n               \
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = _operator_;\n        ArrayList<Long> operand1 = operand;\n      \
    \  ArrayList<String> operator1 = new ArrayList<>();\n        ArrayList<Long> operand2\
    \ = new ArrayList<>();\n        ArrayList<String> operator2 = new ArrayList<>();\n\
    \        ArrayList<String> operator3 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<>();\n        ArrayList<String> operator4 = new ArrayList<>();\n\
    \        ArrayList<Long> operand4 = new ArrayList<>();\n        ArrayList<String>\
    \ operator5 = new ArrayList<>();\n        ArrayList<Long> operand5 = new ArrayList<>();\n\
    \        ArrayList<String> operator6 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand6 = new ArrayList<>();\n        ArrayList<String> operator7 = new ArrayList<>();\n\
    \        ArrayList<Long> operand7 = new ArrayList<>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<>();\n        ArrayList<Long> operand8 = new ArrayList<>();\n\
    \        ArrayList<String> operator9 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<>();\n        ArrayList<String> operator10 = new ArrayList<>();\n\
    \        ArrayList<Long> operand10 = new ArrayList<>();\n        ArrayList<String>\
    \ operator11 = new ArrayList<>();\n        ArrayList<Long> operand11 = new ArrayList<>();\n\
    \        ArrayList<String> operator12 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand12 = new ArrayList<>();\n        ArrayList<String> operator13 = new ArrayList<>();\n\
    \        ArrayList<Long> operand13 = new ArrayList<>();\n        ArrayList<String>\
    \ operator14 = new ArrayList<>();\n        ArrayList<Long> operand14 = new ArrayList<>();\n\
    \        ArrayList<String> operator15 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<>();\n        ArrayList<String> operator16 = new ArrayList<>();\n\
    \        ArrayList<Long> operand16 = new ArrayList<>();\n        ArrayList<String>\
    \ operator17 = new ArrayList<>();\n        ArrayList<Long> operand17 = new ArrayList<>();\n\
    \        ArrayList<String> operator18 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand18 = new ArrayList<>();\n        ArrayList<String> operator19 = new ArrayList<>();\n\
    \        ArrayList<Long> operand19 = new ArrayList<>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<>();\n        ArrayList<Long> operand20 = new ArrayList<>();\n\
    \        ArrayList<String> operator21 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<>();\n        ArrayList<String> operator22 = new ArrayList<>();\n\
    \        ArrayList<Long> operand22 = new ArrayList<>();\n        ArrayList<String>\
    \ operator23 = new ArrayList<>();\n        ArrayList<Long> operand23 = new ArrayList<>();\n\
    \        ArrayList<String> operator24 = new ArrayList<>();\n        ArrayList<Long>\
    \ operand24 = new ArrayList<>();\n        ArrayList<String> operator25 = new ArrayList<>();\n\
    \        ArrayList<Long> operand25 = new ArrayList<>();\n        ArrayList<String>\
    \ operator26 = new ArrayList<>();\n        ArrayList<Long> operand26 = new ArrayList<>();\n\
    \        ArrayList<String> operator\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_4m1m55.java:82: error: ';' expected\n        ArrayList<String>\
    \ operator\n                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        ArrayList<String> operator = new ArrayList<String>(_operator_);\n\
    \        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n        for(int\
    \ i = 0; i < operator.size(); i++) {\n            switch(operator.get(i)) {\n\
    \                case \"+\":\n                    temp = operand2.get(i);\n  \
    \                  result += temp;\n                    break;\n             \
    \   case \"-\":\n                    temp = operand2.get(i);\n               \
    \     result -= temp;\n                    break;\n                case \"*\"\
    :\n                    temp = operand2.get(i);\n                    result *=\
    \ temp;\n                    break;\n                case \"//\":\n          \
    \          temp = operand2.get(i);\n                    result /= temp;\n    \
    \                break;\n                case \"**\":\n                    temp\
    \ = operand2.get(i);\n                    result *= temp;\n                  \
    \  break;\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpceenbpuo.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        boolean isOperand = true;\n        boolean isOperator = false;\n\
    \        for(int i = 0; i < operand.size(); i++) {\n            if(operand.get(i)\
    \ < 0) {\n                isOperand = false;\n                break;\n       \
    \     }\n        }\n        for(int i = 0; i < _operator_.size(); i++) {\n   \
    \         if(_operator_.get(i).equals(\"+\")) {\n                isOperator =\
    \ true;\n            }\n            if(_operator_.get(i).equals(\"-\")) {\n  \
    \              isOperator = true;\n            }\n            if(_operator_.get(i).equals(\"\
    *\")) {\n                isOperator = true;\n            }\n            if(_operator_.get(i).equals(\"\
    /\")) {\n                isOperator = true;\n            }\n            if(_operator_.get(i).equals(\"\
    **\")) {\n                isOperator = true;\n            }\n        }\n     \
    \   if(isOperand == false || isOperator == false) {\n            return 0;\n \
    \       }\n        for(int i = 0; i < operand.size(); i++) {\n            if(isOperand)\
    \ {\n                temp = operand.get(i);\n            }\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                if(isOperator) {\n   \
    \                 if(_operator_.get(j).equals(\"+\")) {\n                    \
    \    result = result + temp;\n                    }\n                    if(_operator_.get(j).equals(\"\
    -\")) {\n                        result = result - temp;\n                   \
    \ }\n                    if(_operator_.get(j).equals(\"*\")) {\n             \
    \           result = result * temp;\n                    }\n                 \
    \   if(_operator_.get(j).equals(\"/\")) {\n                        result = result\
    \ / temp;\n                    }\n                    if(_operator_.get(j).equals(\"\
    **\")) {\n                        result = result ** temp;\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwd1wtcq.java:77: error: illegal start of expression\n        \
    \                result = result ** temp;\n                                  \
    \       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \   }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkdn3g2f.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpfkdn3g2f.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            switch(_operator_.get(i))\
    \ {\n                case \"+\":\n                    temp = operand.get(i);\n\
    \                    result += temp;\n                    break;\n           \
    \     case \"-\":\n                    temp = operand.get(i);\n              \
    \      result -= temp;\n                    break;\n                case \"*\"\
    :\n                    temp = operand.get(i);\n                    result *= temp;\n\
    \                    break;\n                case \"//\":\n                  \
    \  temp = operand.get(i);\n                    result /= temp;\n             \
    \       break;\n                case \"**\":\n                    temp = operand.get(i);\n\
    \                    result **= temp;\n                    break;\n          \
    \      default:\n                    System.out.println(\"Invalid operator\");\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8hbi6__t.java:50: error: illegal start of expression\n        \
    \            result **= temp;\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand1\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand2 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand4 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand5 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand6 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand8 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand9 =\
    \ new ArrayList<Long>(operand);\n        ArrayList<Long> operand10 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand11 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand13\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand14 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand15 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand16 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand17\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand18 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand20 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand21\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand22 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand23 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand24 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand25\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand26 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand27 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand28 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand29\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand30 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand31 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand32 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand33\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand34 = new ArrayList<Long>(operand);\n\
    \        ArrayList<Long> operand35 = new ArrayList<Long>(operand);\n        ArrayList<Long>\
    \ operand36 = new ArrayList<Long>(operand);\n        ArrayList<Long> operand37\
    \ = new ArrayList<Long>(operand);\n        ArrayList<Long> operand38 = new ArrayList<Long>(operand);\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9t5xotti.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operand1 = operand.get(i);\n\
    \            for(int j = 0; j < _operator_.size(); j++) {\n                String\
    \ operator = _operator_.get(j);\n                switch(operator) {\n        \
    \            case \"+\": result += operand1; break;\n                    case\
    \ \"-\": result -= operand1; break;\n                    case \"*\": result *=\
    \ operand1; break;\n                    case \"//\": result /= operand1; break;\n\
    \                    case \"**\": result *= operand1; result /= operand1; break;\n\
    \                    default: throw new IllegalArgumentException(\"Invalid operator:\
    \ \" + operator);\n                }\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpronwrsrq.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            switch(op) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp3gix_3ao.java:30)\n\tat Problem.main(tmp3gix_3ao.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(op) {\n                   \
    \ case \"+\": result = result + operand1; break;\n                    case \"\
    -\": result = result - operand1; break;\n                    case \"*\": result\
    \ = result * operand1; break;\n                    case \"//\": result = result\
    \ / operand1; break;\n                    case \"**\": result = result ** operand1;\
    \ break;\n                }\n            } catch(ArithmeticException e) {\n  \
    \              System.out.println(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8xnkxxt.java:39: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand1; break;\n              \
    \                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long operandValue = operand.get(i);\n\
    \            String operator = _operator_.get(i);\n            switch(operator)\
    \ {\n                case \"+\": result += operandValue; break;\n            \
    \    case \"-\": result -= operandValue; break;\n                case \"*\": result\
    \ *= operandValue; break;\n                case \"//\": result /= operandValue;\
    \ break;\n                case \"**\": result **= operandValue; break;\n     \
    \           default: throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + operator);\n            }\n        }\n        return result;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ar47l2n.java:37: error: illegal start of expression\n        \
    \        case \"**\": result **= operandValue; break;\n                      \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgec8tsdv.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpgec8tsdv.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            long temp = 0;\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\":\n                        temp = temp + operand.get(i);\n\
    \                        break;\n                    case \"-\":\n           \
    \             temp = temp - operand.get(i);\n                        break;\n\
    \                    case \"*\":\n                        temp = temp * operand.get(i);\n\
    \                        break;\n                    case \"//\":\n          \
    \              temp = temp / operand.get(i);\n                        break;\n\
    \                    case \"**\":\n                        temp = temp ** operand.get(i);\n\
    \                        break;\n                }\n            }\n          \
    \  result = result + temp;\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkahlycu7.java:46: error: illegal start of expression\n        \
    \                temp = temp ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand2\
    \ = new ArrayList<Long>(operand);\n        ArrayList<String> operator2 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator3 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator4 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator5 = new ArrayList<String>(operator);\n        ArrayList<String> operator6\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator8 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator9 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator10 = new ArrayList<String>(operator);\n       \
    \ ArrayList<String> operator11 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>(operator);\n        ArrayList<String> operator13\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator14 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator15 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator16 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator17 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator18 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator19 = new ArrayList<String>(operator);\n        ArrayList<String> operator20\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator22 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator23 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator24 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator25 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator26 = new ArrayList<String>(operator);\n        ArrayList<String> operator27\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator28 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator29 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator30 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator31 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator32 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator33 = new ArrayList<String>(operator);\n        ArrayList<String> operator34\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator35 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator36 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator37 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator38 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator39 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>(operator);\n        ArrayList<String> operator41\
    \ = new ArrayList<String>(operator);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpff7vyv8n.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int\
    \ j = 0; j < _operator_.size(); j++) {\n                switch(_operator_.get(j))\
    \ {\n                    case \"+\":\n                        temp = operand.get(i)\
    \ + operand.get(i + 1);\n                        break;\n                    case\
    \ \"-\":\n                        temp = operand.get(i) - operand.get(i + 1);\n\
    \                        break;\n                    case \"*\":\n           \
    \             temp = operand.get(i) * operand.get(i + 1);\n                  \
    \      break;\n                    case \"//\":\n                        temp\
    \ = operand.get(i) / operand.get(i + 1);\n                        break;\n   \
    \                 case \"**\":\n                        temp = operand.get(i)\
    \ ^ operand.get(i + 1);\n                        break;\n                }\n \
    \           }\n            result = result + temp;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmp6oiejyjz.java:46)\n\tat Problem.main(tmp6oiejyjz.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String op = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(op) {\n                case \"+\":\n             \
    \       result += operand1;\n                    break;\n                case\
    \ \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpqocu49iz.java:30)\n\tat Problem.main(tmpqocu49iz.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        ArrayList<String>\
    \ operator = new ArrayList<String>(_operator_);\n        ArrayList<Long> operand2\
    \ = new ArrayList<Long>(operand);\n        ArrayList<String> operator2 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator3 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator4 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator5 = new ArrayList<String>(operator);\n        ArrayList<String> operator6\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator7 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator8 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator9 = new ArrayList<String>(operator);\n    \
    \    ArrayList<String> operator10 = new ArrayList<String>(operator);\n       \
    \ ArrayList<String> operator11 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>(operator);\n        ArrayList<String> operator13\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator14 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator15 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator16 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator17 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator18 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator19 = new ArrayList<String>(operator);\n        ArrayList<String> operator20\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator21 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator22 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator23 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator24 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator25 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator26 = new ArrayList<String>(operator);\n        ArrayList<String> operator27\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator28 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator29 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator30 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator31 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator32 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator33 = new ArrayList<String>(operator);\n        ArrayList<String> operator34\
    \ = new ArrayList<String>(operator);\n        ArrayList<String> operator35 = new\
    \ ArrayList<String>(operator);\n        ArrayList<String> operator36 = new ArrayList<String>(operator);\n\
    \        ArrayList<String> operator37 = new ArrayList<String>(operator);\n   \
    \     ArrayList<String> operator38 = new ArrayList<String>(operator);\n      \
    \  ArrayList<String> operator39 = new ArrayList<String>(operator);\n        ArrayList<String>\
    \ operator40 = new ArrayList<String>(operator);\n        ArrayList<String> operator41\
    \ = new ArrayList<String>(operator);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr915uh_k.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            try {\n                switch(operator) {\n             \
    \       case \"+\": result = result + operand1; break;\n                    case\
    \ \"-\": result = result - operand1; break;\n                    case \"*\": result\
    \ = result * operand1; break;\n                    case \"//\": result = result\
    \ / operand1; break;\n                    case \"**\": result = result ** operand1;\
    \ break;\n                }\n            } catch(ArithmeticException e) {\n  \
    \              System.out.println(\"Invalid operator: \" + operator);\n      \
    \      }\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj5z_ddo6.java:39: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand1; break;\n              \
    \                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n        long temp82\
    \ = 0;\n        long temp83 = 0;\n        long temp84 = 0;\n        long temp85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnyx9e4t.java:114: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpdnyx9e4t.java:114: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ _operator_, ArrayList<Long> operand) {\n        long result = 0;\n        for(int\
    \ i = 0; i < operand.size(); i++) {\n            String operator = _operator_.get(i);\n\
    \            long operand = operand.get(i);\n            switch(operator) {\n\
    \                case \"+\":\n                    result += operand;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand;\n                    break;\n                case \"*\":\n     \
    \               result *= operand;\n                    break;\n             \
    \   case \"//\":\n                    result /= operand;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + operator);\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcq41hff8.java:31: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            long operand\
    \ = operand.get(i);\n                 ^\n/tmp/tmpcq41hff8.java:31: error: long\
    \ cannot be dereferenced\n            long operand = operand.get(i);\n       \
    \                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
