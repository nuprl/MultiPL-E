name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4,\
  \ 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n\
  \    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Long>,\
  \ Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.empty(), 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l, (long)0l)))).equals(Pair.with(Optional.empty(), 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
  \ (long)6l, (long)-2l)))).equals(Pair.with(-2l, 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l,\
  \ (long)7l, (long)-7l)))).equals(Pair.with(-7l, 2l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l,\
  \ (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l, 2l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.empty(), Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.empty(),\
  \ Optional.empty())));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(-1l, Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(-1l, Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: ["        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (long i : lst) {\n            if (min == null || i < min) {\n   \
    \             min = Optional.of(i);\n            }\n            if (max == null\
    \ || i > max) {\n                max = Optional.of(i);\n            }\n      \
    \  }\n        return Pair.of(min, max);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (long i : lst) {\n          \
    \  if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        if (min == null\
    \ && max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        }\n        if (max == null) {\n            return Pair.of(min,\
    \ Optional.empty());\n        }\n        return Pair.of(min, max);\n", "     \
    \   Optional<Long> min = null;\n        Optional<Long> max = null;\n        for\
    \ (long i : lst) {\n            if (min == null || i < min.get()) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max.get()) {\n                max = Optional.of(i);\n            }\n   \
    \     }\n        return Pair.of(min, max);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n        return\
    \ maxNegative.flatMap(x -> minPositive.flatMap(y -> Pair.of(x, y)));\n", "   \
    \     Optional<Long> min = null;\n        Optional<Long> max = null;\n       \
    \ for (long i : lst) {\n            if (min == null || i < min.get()) {\n    \
    \            min = Optional.of(i);\n            }\n            if (max == null\
    \ || i > max.get()) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n", " \
    \       Optional<Long> max = null;\n        Optional<Long> min = null;\n     \
    \   for (long i : lst) {\n            if (max != null && max > i) {\n        \
    \        max = Optional.of(i);\n            } else if (min != null && min < i)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && i\
    \ < 0) {\n                max = Optional.of(i);\n            } else if (min !=\
    \ null && i > 0) {\n                min = Optional.of(i);\n            }\n   \
    \     }\n        return Pair.of(max, min);\n", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).min();\n        return maxNegative.map(maxNegative::get).orElse(minPositive.map(minPositive::get));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min, max);\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 ) {\n                smallest\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(largest,\
    \ smallest);\n", "        Optional<Long> max = null;\n        Optional<Long> min\
    \ = null;\n        for (Long i : lst) {\n            if (max != null && i < 0)\
    \ {\n                max = Optional.of(i);\n            } else if (min != null\
    \ && i > 0) {\n                min = Optional.of(i);\n            }\n        }\n\
    \        if (max != null && min != null) {\n            return Pair.of(max, min);\n\
    \        } else if (max != null) {\n            return Pair.of(max, Optional.empty());\n\
    \        } else if (min != null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        } else {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && max\
    \ > i) {\n                max = Optional.of(i);\n            } else if (min !=\
    \ null && min < i) {\n                min = Optional.of(i);\n            }\n \
    \       }\n        return Pair.of(max, min);\n", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).max();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).min();\n        return maxNegative.map(maxNegative::map).orElse(minPositive.map(minPositive::map));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(Optional.of(maxNegative.get()), Optional.of(minPositive.get()));\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return maxNegative.map(Optional::of).orElse(minPositive.map(Optional::of));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x > 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> maxNegative = Optional.empty();\n\
    \        Optional<Long> minPositive = Optional.empty();\n        for (Long num\
    \ : lst) {\n            if (num < 0) {\n                if (maxNegative.isPresent())\
    \ {\n                    maxNegative = Optional.of(Math.max(maxNegative.get(),\
    \ num));\n                } else {\n                    maxNegative = Optional.of(num);\n\
    \                }\n            } else if (num > 0) {\n                if (minPositive.isPresent())\
    \ {\n                    minPositive = Optional.of(Math.min(minPositive.get(),\
    \ num));\n                } else {\n                    minPositive = Optional.of(num);\n\
    \                }\n            }\n        }\n        return Pair.of(maxNegative,\
    \ minPositive);\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && max\
    \ > i) {\n                max = Optional.of(i);\n            } else if (min !=\
    \ null && min < i) {\n                min = Optional.of(i);\n            }\n \
    \       }\n        return Pair.of(max, min);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for (Long i : lst) {\n            if (i.signum() < 0) {\n            \
    \    largest = Optional.of(i);\n            } else if (i.signum() > 0) {\n   \
    \             smallest = Optional.of(i);\n            }\n        }\n        return\
    \ largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                a\
    \ = Optional.of(i);\n            } else if (i.signum() > 0) {\n              \
    \  b = Optional.of(i);\n            }\n        }\n        return Pair.of(a, b);\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (max != null && i < 0) {\n           \
    \     max = Optional.of(i);\n            } else if (min != null && i > 0) {\n\
    \                min = Optional.of(i);\n            }\n        }\n        if (max\
    \ == null && min == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        return Pair.of(max, min);\n", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (long i : lst) {\n\
    \            if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(Optional.of(maxNegative.get()), Optional.of(minPositive.get()));\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> maxOpt = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> minOpt = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(maxOpt, minOpt);\n", "        Optional<Long> max = null;\n\
    \        Optional<Long> min = null;\n        for (Long i : lst) {\n          \
    \  if (max != null && max > i) {\n                max = Optional.of(i);\n    \
    \        } else if (min != null && min < i) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        if (max == null && min == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (long i : lst) {\n            if (min == null || i\
    \ < min.get()) {\n                min = Optional.of(i);\n            }\n     \
    \       if (max == null || i > max.get()) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ if (min == null) {\n            return Pair.of(max, Optional.empty());\n   \
    \     }\n        if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for(Long i : lst) {\n            if(i.compareTo(largest.orElse(Long.MIN_VALUE))\
    \ < 0) {\n                largest = Optional.of(i);\n            }\n         \
    \   if(i.compareTo(smallest.orElse(Long.MAX_VALUE)) > 0) {\n                smallest\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(largest,\
    \ smallest);\n", "        Optional<Long> min = null;\n        Optional<Long> max\
    \ = null;\n        for (Long i : lst) {\n            if (min == null || i < min)\
    \ {\n                min = Optional.of(i);\n            }\n            if (max\
    \ == null || i > max) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n", " \
    \       Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> a = Optional.empty();\n     \
    \   Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n     \
    \       if (i.signum() < 0) {\n                a = Optional.of(i);\n         \
    \   } else if (i.signum() > 0) {\n                b = Optional.of(i);\n      \
    \      }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for(long i : lst) {\n            if(i<0) {\n                largest =\
    \ Optional.of(i);\n            } else if(i>0) {\n                smallest = Optional.of(i);\n\
    \            }\n        }\n        return largest.map(Pair::of).orElseGet(()->smallest.map(Pair::of));\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (max != null && max > i) {\n         \
    \       max = Optional.of(i);\n            } else if (min != null && min < i)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> maxVal = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> minVal = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(maxVal, minVal);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min, max);\n", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for(Long i : lst) {\n            if(i.signum() < 0) {\n                a =\
    \ Optional.of(i);\n            }\n            else {\n                b = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (long i : lst)\
    \ {\n            if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        if (min == null\
    \ && max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        }\n        if (min ==\
    \ null) {\n            return Pair.of(max, Optional.empty());\n        }\n   \
    \     if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              largest = Optional.of(i);\n            } else if (i == largest.get())\
    \ {\n                smallest = Optional.of(i);\n            }\n        }\n  \
    \      return largest.map(x -> new Pair<>(x, smallest.get()));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              smallest = Optional.of(i);\n            }\n        }\n        return\
    \ Pair.of(largest, smallest);\n", "        Optional<Long> largest = Optional.empty();\n\
    \        Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                largest = Optional.of(i);\n\
    \            } else if (i.signum() > 0) {\n                smallest = Optional.of(i);\n\
    \            }\n        }\n        return largest.map(Pair::of).orElseGet(() ->\
    \ smallest.map(Pair::of).orElseGet(() -> Pair.of(Optional.empty(), Optional.empty())));\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (max != null && max > i) {\n         \
    \       max = Optional.of(i);\n            } else if (min != null && min < i)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> maxNegative = lst.stream().filter(i -> i <\
    \ 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n        return\
    \ maxNegative.map(x -> Pair.of(x, minPositive.orElse(Long.MAX_VALUE))).orElseGet(()\
    \ -> minPositive.map(x -> Pair.of(Long.MAX_VALUE, x)));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.compareTo(largest.orElse(Long.MIN_VALUE))\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if (i.compareTo(smallest.orElse(Long.MAX_VALUE))\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(Pair::of).orElseGet(() -> smallest.map(Pair::of).orElseGet(()\
    \ -> Pair.of(Optional.empty(), Optional.empty())));\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (long i : lst)\
    \ {\n            if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        if (min == null\
    \ && max == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                if (max == null) {\n     \
    \               max = Optional.of(i);\n                } else {\n            \
    \        max = Optional.of(Math.max(max, i));\n                }\n           \
    \ } else {\n                if (min == null) {\n                    min = Optional.of(i);\n\
    \                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        return Pair.of(max,\
    \ min);\n", "        Optional<Long> maxOpt = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> minOpt = lst.stream().min(Comparator.naturalOrder());\n\
    \        return Pair.of(maxOpt, minOpt);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min, max);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(Optional::of).orElse(smallest);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return new Pair<>(maxNegative, minPositive);\n\
    \        }\n        return null;\n", "        Optional<Long> min = null;\n   \
    \     Optional<Long> max = null;\n        for (Long i : lst) {\n            if\
    \ (min == null || i < min) {\n                min = Optional.of(i);\n        \
    \    }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null || max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ return Pair.of(min, max);\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && i\
    \ < 0) {\n                max = Optional.of(i);\n            } else if (min !=\
    \ null && i > 0) {\n                min = Optional.of(i);\n            }\n   \
    \     }\n        if (max != null && min != null) {\n            return Pair.of(max,\
    \ min);\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (long i : lst)\
    \ {\n            if (max != null && max > i) {\n                max = Optional.of(i);\n\
    \            } else if (min != null && min < i) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(Optional::of).orElse(smallest);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n        return\
    \ maxNegative.map(maxNegative::get).orElse(minPositive.map(minPositive::get));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0 && i\
    \ < largest.get()) {\n                largest = Optional.of(i);\n            }\
    \ else if (i == largest.get()) {\n                smallest = Optional.of(i);\n\
    \            }\n        }\n        return largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        return maxNegative.map(Pair::of).orElseGet(() -> minPositive.map(Pair::of));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        return maxNegative.flatMap(x -> minPositive.flatMap(y -> Pair.of(x, y)));\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min, max);\n", "        Optional<Long> min = null;\n \
    \       Optional<Long> max = null;\n        for (Long i : lst) {\n           \
    \ if (min == null || i < min) {\n                min = Optional.of(i);\n     \
    \       }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min, max);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        if (min == null && max\
    \ == null) {\n            return Pair.of(Optional.empty(), Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (max != null && i < 0) {\n                max = Optional.of(i);\n\
    \            } else if (min != null && i > 0) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (long i : lst)\
    \ {\n            if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x >= 0).findFirst();\n        return maxNegative.map(x -> new Pair<>(x, minPositive.orElse(Long.MAX_VALUE))).orElseGet(x\
    \ -> new Pair<>(null, null));\n", "        Optional<Long> max = Optional.empty();\n\
    \        Optional<Long> min = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                max = Optional.of(i);\n  \
    \          } else if (i.signum() > 0) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              smallest = Optional.of(i);\n            }\n        }\n        return\
    \ largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (long i : lst) {\n            if (min == null || i\
    \ < min.get()) {\n                min = Optional.of(i);\n            }\n     \
    \       if (max == null || i > max.get()) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ if (min == null) {\n            return Pair.of(Optional.empty(), max);\n   \
    \     }\n        if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for(Long i : lst) {\n            if(i.signum() < 0) {\n              \
    \  largest = Optional.of(i);\n            } else if(i.signum() > 0) {\n      \
    \          smallest = Optional.of(i);\n            }\n        }\n        return\
    \ Pair.of(largest, smallest);\n", "        Optional<Long> maxOpt = Optional.empty();\n\
    \        Optional<Long> minOpt = Optional.empty();\n        for(Long i : lst)\
    \ {\n            if(i.signum() < 0) {\n                maxOpt = Optional.of(i.signum()\
    \ > maxOpt.orElse(0) ? i : maxOpt);\n            } else {\n                minOpt\
    \ = Optional.of(i.signum() < minOpt.orElse(0) ? i : minOpt);\n            }\n\
    \        }\n        return Pair.of(maxOpt, minOpt);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for(Long i : lst) {\n            if(i.signum()\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if(i.signum()\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(Pair::of).orElseGet(() -> smallest.map(Pair::of).orElseGet(()\
    \ -> Pair.of(Optional.empty(), Optional.empty())));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              smallest = Optional.of(i);\n            }\n        }\n        return\
    \ largest.map(x -> new Pair<>(x, smallest.get()));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     largest = Optional.of(i);\n            } else if (i.signum() > 0) {\n  \
    \              smallest = Optional.of(i);\n            }\n        }\n        return\
    \ Pair.of(largest, smallest);\n", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x > 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (max != null && i < 0) {\n                max = Optional.of(i);\n\
    \            } else if (min != null && i > 0) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ maxVal = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long>\
    \ minVal = lst.stream().min(Comparator.naturalOrder());\n        return Pair.of(maxVal,\
    \ minVal);\n", "        Optional<Long> min = null;\n        Optional<Long> max\
    \ = null;\n        for (Long i : lst) {\n            if (min == null || i < min)\
    \ {\n                min = Optional.of(i);\n            }\n            if (max\
    \ == null || i > max) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(max, Optional.empty());\n        }\n        if (max == null) {\n   \
    \         return Pair.of(min, Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> maxNegative = lst.stream().filter(x -> x <\
    \ 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x > 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        } else\
    \ {\n            return new Pair<>(Optional.empty(), Optional.empty());\n    \
    \    }\n", "        Optional<Long> largest = Optional.empty();\n        Optional<Long>\
    \ smallest = Optional.empty();\n        for (Long i : lst) {\n            if (i\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if (i\
    \ > 0 && i < largest.get()) {\n                smallest = Optional.of(i);\n  \
    \          }\n        }\n        return Pair.of(largest, smallest);\n", "    \
    \    Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> maxNegative = lst.stream().filter(x\
    \ -> x < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(x\
    \ -> x >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return new Pair<>(maxNegative, minPositive);\n        }\n   \
    \     return Pair.of(Optional.empty(), Optional.empty());\n", "        Optional<Long>\
    \ maxVal = Optional.empty();\n        Optional<Long> minVal = Optional.empty();\n\
    \        for (Long val : lst) {\n            if (val < minVal.orElse(Long.MAX_VALUE))\
    \ {\n                minVal = Optional.of(val);\n            } else if (val >\
    \ maxVal.orElse(Long.MIN_VALUE)) {\n                maxVal = Optional.of(val);\n\
    \            }\n        }\n        return Pair.of(maxVal, minVal);\n", "     \
    \   Optional<Long> min = null;\n        Optional<Long> max = null;\n        for\
    \ (Long i : lst) {\n            if (min == null || i < min) {\n              \
    \  min = Optional.of(i);\n            }\n            if (max == null || i > max)\
    \ {\n                max = Optional.of(i);\n            }\n        }\n       \
    \ if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(Optional.empty(), max);\n        }\n        if (max == null) {\n   \
    \         return Pair.of(min, Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> maxNegative = lst.stream().filter(i -> i <\
    \ 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i -> i >=\
    \ 0).min();\n        return Pair.of(maxNegative, minPositive);\n", "        Optional<Long>\
    \ largest = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        return largest.map(x\
    \ -> new Pair<>(x, smallest)).orElseGet(x -> new Pair<>(x, Optional.empty()));\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (max != null && max > i) {\n         \
    \       max = Optional.of(i);\n            } else if (min != null && min < i)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(Optional::of).orElse(smallest);\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (max != null && max > i) {\n                max = Optional.of(i);\n\
    \            }\n            if (min != null && min < i) {\n                min\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(max, min);\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (max != null && i < 0) {\n                max.ifPresent(x\
    \ -> {\n                    if (min == null || x > min) {\n                  \
    \      min = Optional.of(x);\n                    }\n                });\n   \
    \         } else if (min != null && i > 0) {\n                min.ifPresent(x\
    \ -> {\n                    if (max == null || x < max) {\n                  \
    \      max = Optional.of(x);\n                    }\n                });\n   \
    \         }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n      \
    \  for(long i : lst) {\n            if(i<0) {\n                a = Optional.of(i);\n\
    \            }\n            if(i>0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x > 0).findFirst();\n        return maxNegative.flatMap(x\
    \ -> minPositive.map(y -> Pair.of(x, y)));\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ if (min == null) {\n            return Pair.of(max, Optional.empty());\n   \
    \     }\n        if (max == null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        }\n        return Pair.of(min, max);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (long i : lst)\
    \ {\n            if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0){\n \
    \               smallest = Optional.of(i);\n            }\n        }\n       \
    \ return largest.map(x -> new Pair<>(x, smallest));\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        return Pair.of(maxNegative,\
    \ minPositive);\n", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && i\
    \ < 0) {\n                max = Optional.of(i);\n            } else if (min !=\
    \ null && i > 0) {\n                min = Optional.of(i);\n            }\n   \
    \     }\n        return Pair.of(max, min);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        if (min == null && max == null) {\n       \
    \     return Pair.of(Optional.empty(), Optional.empty());\n        }\n       \
    \ if (min == null) {\n            return Pair.of(max, Optional.empty());\n   \
    \     }\n        if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> maxOpt\
    \ = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long> minOpt\
    \ = lst.stream().min(Comparator.naturalOrder());\n        return Pair.of(maxOpt,\
    \ minOpt);\n", "        Optional<Long> maxNegative = Optional.empty();\n     \
    \   Optional<Long> minPositive = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                maxNegative = Optional.of(i);\n\
    \            } else if (i > 0) {\n                minPositive = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(maxNegative, minPositive);\n",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     a = Optional.of(i);\n            } else if (i.signum() > 0) {\n        \
    \        b = Optional.of(i);\n            }\n        }\n        return Pair.of(a,\
    \ b);\n", "        Optional<Long> min = null;\n        Optional<Long> max = null;\n\
    \        for (Long i : lst) {\n            if (min == null || i < min) {\n   \
    \             min = Optional.of(i);\n            }\n            if (max == null\
    \ || i > max) {\n                max = Optional.of(i);\n            }\n      \
    \  }\n        return Pair.of(min, max);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0) {\n\
    \                smallest = Optional.of(i);\n            }\n        }\n      \
    \  return largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n", "     \
    \   Optional<Long> min = null;\n        Optional<Long> max = null;\n        for\
    \ (Long i : lst) {\n            if (min == null || i < min) {\n              \
    \  min = Optional.of(i);\n            }\n            if (max == null || i > max)\
    \ {\n                max = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n        return\
    \ maxNegative.flatMap(maxNegative -> minPositive.flatMap(minPositive -> Pair.of(maxNegative,\
    \ minPositive)));\n", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        return maxNegative.flatMap(maxNegative -> minPositive.flatMap(minPositive\
    \ -> Pair.of(maxNegative, minPositive)));\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              largest = Optional.of(i);\n            } else if (i == largest.get())\
    \ {\n                smallest = Optional.of(i);\n            }\n        }\n  \
    \      return Pair.of(largest, smallest);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for(Long i : lst) {\n            if(i.signum() < 0) {\n              \
    \  largest = Optional.of(i);\n            } else if(i.signum() > 0) {\n      \
    \          smallest = Optional.of(i);\n            }\n        }\n        return\
    \ largest.map(Pair::of).orElseGet(Pair::of);\n", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return new Pair<>(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min, max);\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for(Long num : lst) {\n            if(num < 0) largest = Optional.of(num);\n\
    \            else if(num > 0) smallest = Optional.of(num);\n        }\n      \
    \  if(largest.isPresent() && smallest.isPresent()) return Pair.of(largest, smallest);\n\
    \        else return Pair.of(largest, smallest);\n", "        Optional<Long> max\
    \ = null;\n        Optional<Long> min = null;\n        for (Long i : lst) {\n\
    \            if (max != null && max > i) {\n                max = Optional.of(i);\n\
    \            } else if (min != null && min < i) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (long i : lst)\
    \ {\n            if (max != null && i < 0) {\n                max = Optional.of(i);\n\
    \            } else if (min != null && i > 0) {\n                min = Optional.of(i);\n\
    \            }\n        }\n        if (max != null && min != null) {\n       \
    \     return Pair.of(max, min);\n        } else if (max != null) {\n         \
    \   return Pair.of(max, Optional.empty());\n        } else if (min != null) {\n\
    \            return Pair.of(Optional.empty(), min);\n        } else {\n      \
    \      return Pair.of(Optional.empty(), Optional.empty());\n        }\n", "  \
    \      Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (max == null) {\n                    max = Optional.of(i);\n               \
    \ } else {\n                    max = Optional.of(Math.max(max, i));\n       \
    \         }\n            } else if (i.signum() > 0) {\n                if (min\
    \ == null) {\n                    min = Optional.of(i);\n                } else\
    \ {\n                    min = Optional.of(Math.min(min, i));\n              \
    \  }\n            }\n        }\n        if (max == null && min == null) {\n  \
    \          return Pair.of(Optional.empty(), Optional.empty());\n        } else\
    \ if (max == null) {\n            return Pair.of(min, Optional.empty());\n   \
    \     } else if (min == null) {\n            return Pair.of(Optional.empty(),\
    \ max);\n        } else {\n            return Pair.of(max, min);\n        }\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return Pair.of(maxNegative, minPositive);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n        return\
    \ maxNegative.map(x -> Pair.of(x, minPositive.orElse(Long.MAX_VALUE)));\n", " \
    \       Optional<Long> max = Optional.empty();\n        Optional<Long> min = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i.signum() < 0) {\n           \
    \     max = Optional.of(i);\n            } else if (i.signum() > 0) {\n      \
    \          min = Optional.of(i);\n            }\n        }\n        return Pair.of(max,\
    \ min);\n", "        Optional<Long> min = null;\n        Optional<Long> max =\
    \ null;\n        for (Long i : lst) {\n            if (min == null || i < min)\
    \ {\n                min = Optional.of(i);\n            }\n            if (max\
    \ == null || i > max) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(max, Optional.empty());\n        }\n        if (max == null) {\n   \
    \         return Pair.of(min, Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> maxNegative = lst.stream().filter(i -> i <\
    \ 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i -> i >=\
    \ 0).min();\n        return Pair.of(maxNegative, minPositive);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for(Long i : lst) {\n            if(i.signum()\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if(i.signum()\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(Pair::of).orElseGet(()->smallest.map(Pair::of));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return Pair.of(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0 && i\
    \ < largest.get()) {\n                smallest = Optional.of(i);\n           \
    \ }\n        }\n        return largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).findFirst();\n\
    \        return maxNegative.flatMap(maxNegative -> minPositive.flatMap(minPositive\
    \ -> Pair.of(maxNegative, minPositive)));\n", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(i -> i < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(i -> i >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0) {\n                smallest\
    \ = Optional.of(i);\n            }\n        }\n        return largest.map(x ->\
    \ smallest);\n", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);\n", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(maxNegative, minPositive);\n        }\n      \
    \  return Pair.of(Optional.empty(), Optional.empty());\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (long i : lst)\
    \ {\n            if (i < 0) {\n                if (max == null) {\n          \
    \          max = Optional.of(i);\n                } else {\n                 \
    \   max = Optional.of(Math.max(max, i));\n                }\n            } else\
    \ if (i > 0) {\n                if (min == null) {\n                    min =\
    \ Optional.of(i);\n                } else {\n                    min = Optional.of(Math.min(min,\
    \ i));\n                }\n            }\n        }\n        return Pair.of(max,\
    \ min);\n", "        Optional<Long> maxNegative = lst.stream().filter(i -> i <\
    \ 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i -> i >=\
    \ 0).min();\n        return maxNegative.map(Optional::of).orElse(minPositive.map(Optional::of));\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (i.signum() < 0) {\n                if\
    \ (max == null) {\n                    max = Optional.of(i);\n               \
    \ } else {\n                    max = Optional.of(Math.max(max, i));\n       \
    \         }\n            } else {\n                if (min == null) {\n      \
    \              min = Optional.of(i);\n                } else {\n             \
    \       min = Optional.of(Math.min(min, i));\n                }\n            }\n\
    \        }\n        return Pair.of(max, min);\n", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for(Long i : lst) {\n            if(i.signum() < 0) {\n              \
    \  largest = Optional.of(i);\n            } else if(i.signum() > 0) {\n      \
    \          smallest = Optional.of(i);\n            }\n        }\n        if(largest.isPresent()\
    \ && smallest.isPresent()) {\n            return Pair.of(largest, smallest);\n\
    \        } else {\n            return Pair.of(largest, Optional.empty());\n  \
    \      }\n", "        Optional<Long> largest = Optional.empty();\n        Optional<Long>\
    \ smallest = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(Pair::of).orElseGet(() -> smallest.map(Pair::of).orElseGet(()\
    \ -> Pair.of(Optional.empty(), Optional.empty())));\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              largest = Optional.of(i);\n            } else if (i == largest.get())\
    \ {\n                smallest = Optional.of(i);\n            }\n        }\n  \
    \      return Pair.of(largest, smallest);\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (long i : lst) {\n          \
    \  if (min == null || i < min.get()) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max.get()) {\n            \
    \    max = Optional.of(i);\n            }\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> maxNegative = lst.stream().filter(i -> i <\
    \ 0).findFirst();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).findFirst();\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.of(Optional.of(maxNegative.get()), Optional.of(minPositive.get()));\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min, max);\n", "        Optional<Long> min = null;\n \
    \       Optional<Long> max = null;\n        for (Long i : lst) {\n           \
    \ if (min == null || i < min) {\n                min = Optional.of(i);\n     \
    \       }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for(Long i : lst) {\n            if(i.signum()\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if(i.signum()\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(x -> Pair.of(x, smallest))\n                .orElseGet(x\
    \ -> Pair.of(Optional.empty(), Optional.empty()));\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return new Pair<>(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(x -> x > 0).findFirst();\n        return maxNegative.map(x\
    \ -> new Pair<>(x, minPositive)).orElseGet(() -> minPositive.map(x -> new Pair<>(x,\
    \ maxNegative)));\n", "        Optional<Long> max = null;\n        Optional<Long>\
    \ min = null;\n        for (Long i : lst) {\n            if (max != null && i\
    \ < 0) {\n                max.ifPresent(max -> max = Optional.of(Math.max(max,\
    \ i)));\n            } else if (min != null && i > 0) {\n                min.ifPresent(min\
    \ -> min = Optional.of(Math.min(min, i)));\n            } else {\n           \
    \     max = Optional.of(i);\n                min = Optional.of(i);\n         \
    \   }\n        }\n        return Pair.of(max, min);\n", "        Optional<Long>\
    \ largest = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        return largest.map(Optional::of).orElse(smallest);\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min, max);\n", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).min();\n        return maxNegative.map(Optional::of).orElse(minPositive.map(Optional::of));\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.of(Optional.empty(), max);\n        }\n        if (max == null) {\n   \
    \         return Pair.of(min, Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> largest = Optional.empty();\n        Optional<Long>\
    \ smallest = Optional.empty();\n        for (Long i : lst) {\n            if (i\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if (i\
    \ > 0 ) {\n                smallest = Optional.of(i);\n            }\n       \
    \ }\n        return Pair.of(largest, smallest);\n", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x >= 0).findFirst();\n        return Pair.of(maxNegative,\
    \ minPositive);\n", "        Optional<Long> maxNegative = lst.stream().filter(i\
    \ -> i < 0).max();\n        Optional<Long> minPositive = lst.stream().filter(i\
    \ -> i >= 0).min();\n        return maxNegative.map(Optional::of).orElse(minPositive.map(Optional::of));\n",
  "        Optional<Long> a = Optional.empty();\n        Optional<Long> b = Optional.empty();\n\
    \        for(Long i : lst) {\n            if(i < 0) {\n                a = Optional.of(i);\n\
    \            }\n            if(i == 0) {\n                b = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ max = null;\n        Optional<Long> min = null;\n        for (Long i : lst)\
    \ {\n            if (i.signum() < 0) {\n                if (max == null || i.compareTo(max)\
    \ > 0) {\n                    max = Optional.of(i);\n                }\n     \
    \       } else {\n                if (min == null || i.compareTo(min) < 0) {\n\
    \                    min = Optional.of(i);\n                }\n            }\n\
    \        }\n        if (min == null && max == null) {\n            return Pair.of(Optional.empty(),\
    \ Optional.empty());\n        } else if (min == null) {\n            return Pair.of(max,\
    \ Optional.empty());\n        } else if (max == null) {\n            return Pair.of(Optional.empty(),\
    \ min);\n        } else {\n            return Pair.of(min, max);\n        }\n",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min, max);\n", "        Optional<Long> a = Optional.empty();\n\
    \        Optional<Long> b = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i.signum() < 0) {\n                a = Optional.of(i);\n    \
    \        } else if (i.signum() > 0) {\n                b = Optional.of(i);\n \
    \           }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ maxNegative = lst.stream().filter(i -> i < 0).max();\n        Optional<Long>\
    \ minPositive = lst.stream().filter(i -> i >= 0).min();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(maxNegative, minPositive);\n\
    \        }\n        return Pair.of(Optional.empty(), Optional.empty());\n", " \
    \       Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                largest = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                smallest = Optional.of(i);\n            }\n        }\n\
    \        return largest.map(Pair::of).orElseGet(Pair::of);\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min, max);\n",
  "        Optional<Long> maxNegative = lst.stream().filter(i -> i < 0).max();\n \
    \       Optional<Long> minPositive = lst.stream().filter(i -> i >= 0).min();\n\
    \        return maxNegative.flatMap(maxNegative -> minPositive.flatMap(minPositive\
    \ -> Pair.of(maxNegative, minPositive)));\n", "        Optional<Long> min = null;\n\
    \        Optional<Long> max = null;\n        for (Long i : lst) {\n          \
    \  if (min == null || i < min) {\n                min = Optional.of(i);\n    \
    \        }\n            if (max == null || i > max) {\n                max = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> maxNegative = lst.stream().filter(x -> x < 0).findFirst();\n\
    \        Optional<Long> minPositive = lst.stream().filter(x -> x >= 0).findFirst();\n\
    \        if (maxNegative.isPresent() && minPositive.isPresent()) {\n         \
    \   return new Pair<>(maxNegative, minPositive);\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        }\n        if (min ==\
    \ null) {\n            return Pair.of(Optional.empty(), max);\n        }\n   \
    \     if (max == null) {\n            return Pair.of(min, Optional.empty());\n\
    \        }\n        return Pair.of(min, max);\n", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i < 0) {\n\
    \                largest = Optional.of(i);\n            } else if (i > 0) {\n\
    \                smallest = Optional.of(i);\n            }\n        }\n      \
    \  return Pair.of(largest, smallest);\n", "        Optional<Long> maxNegative\
    \ = lst.stream().filter(x -> x < 0).findFirst();\n        Optional<Long> minPositive\
    \ = lst.stream().filter(x -> x >= 0).findFirst();\n        if (maxNegative.isPresent()\
    \ && minPositive.isPresent()) {\n            return Pair.of(Optional.of(maxNegative.get()),\
    \ Optional.of(minPositive.get()));\n        }\n        return Pair.of(Optional.empty(),\
    \ Optional.empty());\n", "        Optional<Long> a = Optional.empty();\n     \
    \   Optional<Long> b = Optional.empty();\n        for(Long i : lst) {\n      \
    \      if(i.signum() < 0) {\n                a = Optional.of(i);\n           \
    \ }\n            else if(i.signum() > 0) {\n                b = Optional.of(i);\n\
    \            }\n        }\n        return Pair.of(a, b);\n", "        Optional<Long>\
    \ largest = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n\
    \        for(Long i : lst) {\n            if(i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if(i > 0){\n                smallest =\
    \ Optional.of(i);\n            }\n        }\n        return largest.map(Pair::of).orElseGet(Pair::of).map(Pair::of);\n",
  "        Optional<Long> max = null;\n        Optional<Long> min = null;\n      \
    \  for (Long i : lst) {\n            if (max != null && max > i) {\n         \
    \       max = Optional.of(i);\n            } else if (min != null && min < i)\
    \ {\n                min = Optional.of(i);\n            }\n        }\n       \
    \ return Pair.of(max, min);\n", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        if (min == null && max == null) {\n            return\
    \ Pair.of(Optional.empty(), Optional.empty());\n        }\n        return Pair.of(min,\
    \ max);\n", "        Optional<Long> a = Optional.empty();\n        Optional<Long>\
    \ b = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                a = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                b = Optional.of(i);\n            }\n        }\n    \
    \    return Pair.of(a, b);\n", "        Optional<Long> largest = lst.stream().max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        return largest.map(Optional::of).orElse(smallest);\n", "        Optional<Long>\
    \ maxOpt = lst.stream().max(Comparator.naturalOrder());\n        Optional<Long>\
    \ minOpt = lst.stream().min(Comparator.naturalOrder());\n        return Pair.of(maxOpt,\
    \ minOpt);\n", "        Optional<Long> min = null;\n        Optional<Long> max\
    \ = null;\n        for (Long i : lst) {\n            if (min == null || i < min)\
    \ {\n                min = Optional.of(i);\n            }\n            if (max\
    \ == null || i > max) {\n                max = Optional.of(i);\n            }\n\
    \        }\n        return Pair.of(min.orElse(null), max.orElse(null));\n", " \
    \       Optional<Long> min = null;\n        Optional<Long> max = null;\n     \
    \   for (Long i : lst) {\n            if (min == null || i < min) {\n        \
    \        min = Optional.of(i);\n            }\n            if (max == null ||\
    \ i > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min.orElse(null), max.orElse(null));\n", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.of(min.orElse(null),\
    \ max.orElse(null));\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
