name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
  \ 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
  \ ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     for(String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_capital = extension_length\
    \ - 1;\n            int extension_smaller = extension_length - 2;\n          \
    \  int extension_diff = extension_capital - extension_smaller;\n            strength\
    \ += extension_diff;\n        }\n        strength = strength % extensions_sorted.size();\n\
    \        return class_name + \".\" + extensions_sorted.get(strength);\n", "  \
    \      ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.size() - 1;\n        String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int cap_strongest_extension_index = strongest_extension_index - 1;\n\
    \        int sm_strongest_extension_index = cap_strongest_extension_index - 1;\n\
    \        int strength = extensions_sorted.get(cap_strongest_extension_index).length()\
    \ - extensions_sorted.get(sm_strongest_extension_index).length();\n        if\
    \ (strength > 0) {\n            return class_name + \".\" + strongest_extension;\n\
    \        } else {\n            return class_name;\n        }\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for (String extension : extensions)\
    \ {\n            int count = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    count++;\n                }\n            }\n            int\
    \ sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n      \
    \          if (Character.isLowerCase(extension.charAt(i))) {\n               \
    \     sm++;\n                }\n            }\n            int cap = count;\n\
    \            int sm = sm;\n            int strength = cap - sm;\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (int i = 1; i < strengths.size(); i++) {\n            if (strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<Integer>();\n        for (String extension : extensions)\
    \ {\n            int length = extension.length();\n            int cap = length\
    \ / 2;\n            int sm = length - cap;\n            strengths.add(cap - sm);\n\
    \        }\n        Collections.sort(strengths);\n        int index = strengths.size()\
    \ - 1;\n        String extension = extensions.get(index);\n        int strength\
    \ = -1;\n        if (strengths.contains(strength)) {\n            strength = strengths.get(index);\n\
    \        }\n        return class_name + \".\" + extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = 0;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.length();\n            if (extension_strength > max_strength) {\n\
    \                max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int extension_strength\
    \ = extension.charAt(0) - extension.charAt(1);\n            strengths.add(extension_strength);\n\
    \        }\n        int max_strength = Collections.max(strengths);\n        for(Integer\
    \ strength : strengths) {\n            if(strength == max_strength) {\n      \
    \          return class_name + extensions.get(strengths.indexOf(max_strength));\n\
    \            }\n        }\n        return class_name + extensions.get(0);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('S') + 1).length();\n\
    \            double fraction = cap - sm;\n            if (fraction > strength)\
    \ {\n                strength = fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n",
  "        // Your code here\n        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.stream().filter(e -> e.matches(\"[A-Z]+\")).forEach(e\
    \ -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (double) cap - sm;\n                if (strength\
    \ > 0) {\n                    extensions_set.add(e);\n                }\n    \
    \        });\n        });\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (double) cap - sm;\n                if (strength\
    \ > 0) {\n                    extensions_set.add(e);\n                }\n    \
    \        });\n        });\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (double) cap - sm;\n                if (strength\
    \ > 0) {\n                    extensions_set.add(e);\n                }\n    \
    \        });\n        });\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (double) cap - sm;\n                if (strength\
    \ > 0) {\n                    extensions_set.add(e);\n                }\n    \
    \        });\n        });\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (double) cap - sm;\n                if (strength\
    \ > 0) {\n                    extensions_set.add(e);\n                }\n    \
    \        });\n        });\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = (", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength += (cap - sm) /\
    \ cap;\n        }\n        double strength_rounded = Math.ceil(strength * 100.0)\
    \ / 100.0;\n        return class_name + extensions_sorted.get(extensions_sorted.size()\
    \ - 1) + \".\" + extensions_sorted.get(extensions_sorted.size() - 1).substring(0,\
    \ 1) + String.valueOf(strength_rounded);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ - 1, class_name.lastIndexOf('S') + 1).length();\n            double frac = cap\
    \ - sm;\n            if (frac > strength) {\n                strength = frac;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(0);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (fraction > strength) {\n \
    \               strength = fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(0);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int strength\
    \ = extension.matches(\"[A-Z]\").length() - extension.matches(\"[a-z]\").length();\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.length();\n            if (extension_strength > max_strength) {\n\
    \                max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ - 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        for (String extension : extensions_sorted) {\n            int\
    \ extension_strength = extension.length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(strongest_extension);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, 1).toUpperCase().length();\n   \
    \     double sm = class_name.substring(0, 1).toLowerCase().length();\n       \
    \ double strength_diff = strength - cap - sm;\n        if (strength_diff == 0)\
    \ {\n            return class_name;\n        }\n        if (strength_diff < 0)\
    \ {\n            strength_diff = -strength_diff;\n        }\n        double max_strength\
    \ = extensions_sorted.get(0);\n        for (int i = 1; i < extensions_sorted.size();\
    \ i++) {\n            double current_strength = extensions_sorted.get(i);\n  \
    \          if (current_strength > max_strength) {\n                max_strength\
    \ = current_strength;\n            }\n        }\n        return class_name + \"\
    .\" + max_strength;\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int class_length\
    \ = class_name.length();\n            int strength_of_extension = extension_length\
    \ - class_length;\n            if (strength_of_extension > strength) {\n     \
    \           strength = strength_of_extension;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     int max_strength = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;\n",
  "        double strength = 0;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).length();\n            int sm =\
    \ extension.substring(1).length();\n            strength += (cap - sm) / cap;\n\
    \        }\n        double max = Math.max(strength);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm) / cap;\n            if(strength == max) {\n                return\
    \ class_name + \".\" + extension;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double frac = cap - sm;\n\
    \            if (frac > strength) {\n                strength = frac;\n      \
    \      }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            if (fraction > strength)\
    \ {\n                strength = fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = 0;\n\
    \        double max_strength = 0;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double frac = cap - sm;\n            strength +=\
    \ frac;\n            if (frac > max_strength) {\n                max_strength\
    \ = frac;\n            }\n        }\n        if (max_strength > 0) {\n       \
    \     return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        } else {\n            return class_name;\n        }\n", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ - 1, class_name.lastIndexOf('S')).\n                    length();\n        \
    \    double fraction = cap - sm;\n            if (fraction > strength) {\n   \
    \             strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n",
  "        \n        // Your code here\n        \n", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for (String extension : extensions) {\n      \
    \      int strength = extension.charAt(0) - extension.charAt(1);\n           \
    \ strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        if (strengths.size() > 1)\
    \ {\n            for (int i = 1; i < strengths.size(); i++) {\n              \
    \  if (strengths.get(i) == strongest) {\n                    strongest = i;\n\
    \                }\n            }\n        }\n        return class_name + \".\"\
    \ + extensions.get(strongest);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (strongest == -1 || extension_strength > strongest) {\n       \
    \         strongest = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(strongest);\n", "        // Your\
    \ code here\n        \n        \n        \n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        ", "        HashMap<String, Integer> map = new HashMap<>();\n\
    \        for(String ext : extensions) {\n            int strength = ext.replaceAll(\"\
    [^A-Z]\", \"\").length();\n            map.put(ext, strength);\n        }\n  \
    \      Collections.sort(map.values());\n        Integer max = map.get(map.keySet().toArray()[0]);\n\
    \        for(String ext : extensions) {\n            int strength = ext.replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if(strength > max) {\n                max\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + map.get(map.keySet().toArray()[0]);\n",
  "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strengths.add(cap\
    \ - sm);\n        }\n        Collections.sort(strengths);\n        int strongest\
    \ = strengths.get(0);\n        for (String extension : extensions) {\n       \
    \     int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            if (cap - sm == strongest) {\n                return class_name +\
    \ \".\" + extension;\n            }\n        }\n        return class_name;\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (strongest == -1 || extension_strength > strongest) {\n       \
    \         strongest = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for (String extension : extensions) {\n            int extension_strength\
    \ = extension.charAt(0) - extension.charAt(1);\n            strengths.add(extension_strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest_extension\
    \ = strengths.get(0);\n        for (int i = 1; i < strengths.size(); i++) {\n\
    \            if (strengths.get(i) == strongest_extension) {\n                strongest_extension\
    \ = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(strongest_extension);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.size() - 1;\n        String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            return class_name;\n\
    \        }\n        String strongest_extension_class_name = class_name + \".\"\
    \ + strongest_extension;\n        return strongest_extension_class_name;\n", " \
    \       ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).length();\n            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (String extension : extensions)\
    \ {\n            int strength = extension.substring(0, 1).length();\n        \
    \    if (strength == strongest) {\n                return class_name + \".\" +\
    \ extension;\n            }\n        }\n        return class_name;\n", "     \
    \   // Your code here\n        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"\\\\W\", \"\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (strongest == -1 ||\
    \ extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        String strongest_extension_name = \"\";\n        for (String\
    \ extension : extensions_sorted) {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \                strongest_extension_name = extension;\n            }\n      \
    \  }\n        return class_name + \".\" + strongest_extension_name;\n", "    \
    \    // Your code here\n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        ", "        double strength = 0;\n        double\
    \ maxStrength = 0;\n        for(String extension : extensions) {\n           \
    \ int cap = extension.charAt(0).toUpperCase().length();\n            int sm =\
    \ extension.charAt(0).toLowerCase().length();\n            double frac = cap -\
    \ sm;\n            strength += frac;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        double\
    \ maxStrengthInt = Math.ceil(maxStrength);\n        for(String extension : extensions)\
    \ {\n            int cap = extension.charAt(0).toUpperCase().length();\n     \
    \       int sm = extension.charAt(0).toLowerCase().length();\n            double\
    \ frac = cap - sm;\n            strength += frac;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   double maxStrengthDouble = Math.ceil(maxStrength);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.charAt(0).toUpperCase().length();\n\
    \            int sm = extension.charAt(0).toLowerCase().length();\n          \
    \  double frac = cap - sm;\n            strength += frac;\n            if(strength\
    \ > maxStrength) {\n                maxStrength = strength;\n            }\n \
    \       }\n        double maxStrengthLong = Math.ceil(maxStrength);\n        for(String\
    \ extension : extensions) {\n            int cap = extension.charAt(0).toUpperCase().length();\n\
    \            int sm = extension.charAt(0).toLowerCase().length();\n          \
    \  double frac = cap - sm;\n            strength += frac;\n            if(strength\
    \ > maxStrength) {\n                maxStrength = strength;\n            }\n \
    \       }\n        double maxStrengthFloat = Math.ceil(maxStrength);\n       \
    \ for(String extension : extensions) {\n            int cap = extension.charAt(0).toUpperCase().length();\n\
    \            int sm = extension.charAt(0).toLowerCase().length();\n          \
    \  double frac = cap - sm;\n            strength += frac;\n            if(strength\
    \ > maxStrength) {\n                maxStrength = strength;\n            }\n \
    \       }\n        double maxStrengthDouble = Math.ceil(maxStrength);\n      \
    \  for(String extension : extensions) {\n            int cap = extension.charAt(0).toUpperCase().length();\n\
    \            int sm = extension.charAt(0).toLowerCase().length();\n          \
    \  double frac = cap - sm;\n            strength += frac;\n            if(strength\
    \ > maxStrength) {\n                maxStrength = strength;\n            }\n \
    \       }\n        double maxStrengthLong = Math.ceil(maxStrength);\n        ",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for(String extension\
    \ : extensions) {\n            int count = 0;\n            for(int i = 0; i <\
    \ extension.length(); i++) {\n                if(Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    strengths.add(count);\n        }\n        Collections.sort(strengths);\n\
    \        int index = strengths.size() - 1;\n        while(index >= 0) {\n    \
    \        if(strengths.get(index) == strengths.get(index - 1)) {\n            \
    \    index--;\n            } else {\n                return class_name + \".\"\
    \ + extensions.get(index);\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('_') + 1).length();\n\
    \            double fraction = cap - sm;\n            if (fraction > strength)\
    \ {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            strengths.add(strength);\n        }\n  \
    \      Collections.sort(strengths);\n        int strongest = -1;\n        for\
    \ (int i = 0; i < strengths.size(); i++) {\n            if (strengths.get(i) ==\
    \ strongest) {\n                continue;\n            }\n            if (strengths.get(i)\
    \ > strongest) {\n                strongest = strengths.get(i);\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(strengths.get(strengths.size()\
    \ - 1));\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for (String extension : extensions) {\n            int count = 0;\n \
    \           for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (extension.charAt(i) >= 'A' && extension.charAt(i) <= 'Z') {\n             \
    \       count++;\n                }\n            }\n            strengths.add(count);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (Integer strength : strengths) {\n            if (strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        HashMap<Integer, String> extension_map = new HashMap<>();\n        for\
    \ (String extension : extensions) {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            extension_map.put(extension_strength,\
    \ extension);\n        }\n        Collections.sort(extension_map.values());\n\
    \        String strongest_extension = extension_map.get(extension_map.size() -\
    \ 1);\n        return class_name + \".\" + strongest_extension;\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for (String extension : extensions)\
    \ {\n            int strength = extension.substring(extension.indexOf('C') + 1).length()\
    \ - extension.substring(extension.indexOf('S') + 1).length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (Integer strength : strengths) {\n            if (strength == strongest)\
    \ {\n                return class_name + \".\" + extensions.get(0);\n        \
    \    }\n        }\n        return class_name + \".\" + extensions.get(0);\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String extension : extensions) {\n       \
    \     int strength = extension.charAt(0) - extension.charAt(1);\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            if(strength == strongest) {\n          \
    \      return class_name + \".\" + extension;\n            }\n        }\n    \
    \    return class_name;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(0, 1).length();\n\
    \            if (extension_strength > strongest_extension) {\n               \
    \ strongest_extension = extension_strength;\n            }\n        }\n      \
    \  return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n        }\n        if (strength == -1) {\n   \
    \         return class_name;\n        }\n        double strength_fraction = strength\
    \ / extensions_sorted.size();\n        int strongest_extension_index = Collections.binarySearch(extensions_sorted,\
    \ strength_fraction);\n        if (strongest_extension_index < 0) {\n        \
    \    return class_name;\n        }\n        return class_name + \".\" + extensions_sorted.get(strongest_extension_index);\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        ArrayList<Integer> strengths\
    \ = new ArrayList<Integer>();\n        for (String extension : extensions) {\n\
    \            int strength = extension.substring(0, 1).replaceAll(\"\\\\p{Upper}\"\
    , \"\").replaceAll(\"\\\\p{Lower}\", \"\").length() - extension.substring(0, 1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length();\n         \
    \   strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (Integer strength : strengths)\
    \ {\n            if (strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            double extension_strength = extension.matches(\"[A-Z]+\")\n \
    \               ? extension.matches(\"[a-z]+\") ? extension.length() - extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length() : -1\n           \
    \     : -1;\n            if (extension_strength > max_strength) {\n          \
    \      max_strength = extension_strength;\n                strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.size() - 1;\n        String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.length();\n            if\
    \ (extension_strength > strongest_extension) {\n                strongest_extension\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(strongest_extension);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            if (strength == -1 || fraction > strength) {\n                strength\
    \ = fraction;\n            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('S') + 1).length();\n\
    \            double frac = cap - sm;\n            if (frac > strength) {\n   \
    \             strength = frac;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(0);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength += (cap - sm) /\
    \ cap;\n        }\n        if (strength == -1) {\n            return class_name;\n\
    \        }\n        double strength_sorted = strength;\n        Collections.sort(extensions_sorted);\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      if (cap - sm == strength_sorted) {\n                return class_name +\
    \ \".\" + extension;\n            }\n        }\n        return class_name;\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest_extension =\
    \ -1;\n        for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_strength = extension_length\
    \ - extension.substring(extension_length - 1).length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        // Your code here\n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for (String extension : extensions)\
    \ {\n            int length = extension.length();\n            int cap = length\
    \ / 2;\n            int sm = length - cap;\n            strengths.add(cap - sm);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (String extension : extensions) {\n            int length = extension.length();\n\
    \            int cap = length / 2;\n            int sm = length - cap;\n     \
    \       if (cap - sm == strongest) {\n                return class_name + \".\"\
    \ + extension;\n            }\n        }\n        return class_name;\n", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            double extension_strength\
    \ = extension.length();\n            if(extension_strength > strength) {\n   \
    \             strength = extension_strength;\n            }\n        }\n     \
    \   return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, 1).toUpperCase().length();\n   \
    \     double sm = class_name.substring(0, 1).toLowerCase().length();\n       \
    \ double strength_frac = strength / cap;\n        double strength_frac_sorted\
    \ = strength_frac - sm;\n        double strength_frac_sorted_sorted = strength_frac_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted = strength_frac_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted * -1;\n        double\
    \ strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ * -1;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double strength = cap - sm;\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(0,1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length() - extension.substring(0,1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length();\n         \
    \   strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = -1;\n        for(Integer strength : strengths) {\n  \
    \          if(strength > strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (int) Math.ceil(cap - sm);\n            if (strength > 0) {\n\
    \                break;\n            }\n        }\n        if (strength == 0)\
    \ {\n            return class_name;\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(class_name);\n        sb.append('.');\n\
    \        for (int i = 0; i < strength; i++) {\n            sb.append(extensions_sorted.get(i));\n\
    \        }\n        return sb.toString();\n", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String ext : extensions) {\n            int\
    \ cap = ext.length();\n            int sm = ext.toLowerCase().length();\n    \
    \        int strength = cap - sm;\n            strengths.add(strength);\n    \
    \    }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            int strength =\
    \ cap - sm;\n            if(strength == strongest) {\n                return class_name\
    \ + \".\" + ext;\n            }\n        }\n        return class_name;\n", " \
    \       ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(String\
    \ extension : extensions) {\n            int strength = extension.charAt(0) -\
    \ extension.charAt(1);\n            strengths.add(strength);\n        }\n    \
    \    Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                return class_name + \".\" + extensions.get(strength);\n \
    \           }\n        }\n        return class_name;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length / 2;\n            int extension_sm = (extension_length -\
    \ extension_cap) / 2;\n            int strength_extension_cap = extension_cap\
    \ - extension_sm;\n            int strength_extension_sm = extension_sm - extension_cap;\n\
    \            if (strength_extension_cap == strength_extension_sm) {\n        \
    \        strength = extension_length;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.get(strength)));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > max_strength) {\n                max_strength = fraction;\n              \
    \  strength = fraction;\n            }\n        }\n        if (strength == -1)\
    \ {\n            return class_name;\n        }\n        return class_name + \"\
    .\" + extensions_sorted.get(extensions_sorted.size() - 1);\n", "        HashMap<String,\
    \ Integer> extensions_map = new HashMap<>();\n        for(String extension : extensions)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - 1;\n            extensions_map.put(extension, extension_strength);\n\
    \        }\n        \n        Set<String> extensions_set = extensions_map.keySet();\n\
    \        \n        Integer max_strength = extensions_set.stream().max(Comparator.comparingInt(extensions_map::get)).orElse(null);\n\
    \        \n        if(max_strength == null) {\n            return class_name;\n\
    \        }\n        \n        String[] extensions_array = extensions_set.stream().map(extensions_map::get).collect(Collectors.toList()).toArray(new\
    \ String[0]);\n        \n        StringBuilder extension_builder = new StringBuilder();\n\
    \        \n        for(int i = 0; i < extensions_array.length; i++) {\n      \
    \      extension_builder.append(extensions_array[i]);\n            extension_builder.append(extensions_array[i].toUpperCase());\n\
    \        }\n        \n        return class_name + \".\" + extension_builder.toString();\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.length();\n            if (extension_strength > strength) {\n  \
    \              strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (extension_strength > strongest) {\n                strongest =\
    \ extension_strength;\n            }\n        }\n        return class_name + \"\
    .\" + extensions_sorted.get(strongest);\n", "        // Your code here\n     \
    \   Set<String> extensions_set = new HashSet<String>(extensions);\n        double\
    \ max_extension_strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_set) {\n            int extension_strength\
    \ = extension.length();\n            if (extension_strength > max_extension_strength)\
    \ {\n                max_extension_strength = extension_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;\n",
  "        Map<String, Integer> extension_strengths = new HashMap<>();\n        for(String\
    \ extension : extensions) {\n            int strength = extension.substring(extension.length()\
    \ - 1).chars().filter(c -> Character.isUpperCase(c)).count() - extension.substring(extension.length()\
    \ - 1).chars().filter(c -> Character.isLowerCase(c)).count();\n            extension_strengths.put(extension,\
    \ strength);\n        }\n        \n        Optional<Map.Entry<String, Integer>>\
    \ strongest_extension = extension_strengths.entrySet().stream().filter(e -> e.getValue()\
    \ == extension_strengths.values().stream().max(Integer::compareTo).get()).findFirst();\n\
    \        \n        if(strongest_extension.isPresent()) {\n            return class_name\
    \ + \".\" + strongest_extension.get().getKey();\n        } else {\n          \
    \  return class_name;\n        }\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double frac = cap - sm;\n            if (frac >\
    \ strength) {\n                strength = frac;\n            }\n        }\n  \
    \      return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"\\\\W\", \"\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap_strength\
    \ = strength / CAP;\n        double sm_strength = strength - cap_strength * CAP;\n\
    \        double max_strength = cap_strength * SM;\n        double max_index =\
    \ extensions_sorted.size() - 1;\n        double max_extension = extensions_sorted.get(max_index);\n\
    \        double max_extension_strength = max_extension.substring(CAP, SM).replaceAll(\"\
    [^A-Z]\", \"\").length();\n        double max_extension_strength_diff = max_extension_strength\
    \ - max_strength;\n        double max_extension_strength_diff_abs = Math.abs(max_extension_strength_diff);\n\
    \        double max_extension_strength_diff_abs = Math.abs(max_extension_strength_diff_abs);\n\
    \        double max_extension_strength_diff_abs = Math.abs(max_extension_strength_diff_abs);\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".\" + max_extension;\n        }\n\
    \        if (max_extension_strength_diff_abs < SM) {\n            return class_name\
    \ + \".\" + max_extension;\n        }\n        if (max_extension_strength_diff_abs\
    \ < CAP) {\n            return class_name + \".", "        // Your code here\n\
    \        Set<String> extensionSet = new HashSet<>();\n        for(String extension\
    \ : extensions){\n            extensionSet.add(extension);\n        }\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\.\")));\n     \
    \   extensionSet.removeAll(Arrays.asList(class_name.split(\"_\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\
    -\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\":\")));\n   \
    \     extensionSet.removeAll(Arrays.asList(class_name.split(\"-\")));\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\
    \\\\\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\":\"\
    )));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"-\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n   \
    \     extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\\")));\n   \
    \     extensionSet.removeAll(Arrays.asList(class_name.split(\":\")));\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\"-\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\
    /\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\\"\
    )));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\":\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\"-\")));\n   \
    \     extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\\")));\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\":\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\
    -\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\"\\\\\")));\n\
    \        extensionSet.removeAll(Arrays.asList(class_name.split(\":\")));\n   \
    \     extensionSet.removeAll(Arrays.asList(class_name.split(\"-\")));\n      \
    \  extensionSet.removeAll(Arrays.asList(class_name.split(\"/\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\"\
    \\\\\")));\n        extensionSet.removeAll(Arrays.asList(class_name.split(\":\"\
    ))", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.charAt(0) - extension.charAt(1);\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(strength);\n",
  "        double strength = -1;\n        double maxStrength = -1;\n        double\
    \ maxExtension = -1;\n        double maxExtensionStrength = -1;\n        double\
    \ maxExtensionExtension = -1;\n        double maxExtensionExtensionStrength =\
    \ -1;\n        double maxExtensionExtensionExtension = -1;\n        for (String\
    \ extension : extensions) {\n            try {\n                Class<?> c = Class.forName(class_name\
    \ + extension);\n                Method m = c.getMethod(\"main\", String[].class);\n\
    \                String[] args = new String[1];\n                args[0] = class_name;\n\
    \                m.invoke(null, args);\n                strength = extension.length();\n\
    \                maxStrength = Math.max(maxStrength, strength);\n            \
    \    maxExtension = Math.max(maxExtension, extension.length());\n            \
    \    maxExtensionStrength = Math.max(maxExtensionStrength, strength);\n      \
    \          maxExtensionExtension = Math.max(maxExtensionExtension, extension.length());\n\
    \                maxExtensionExtensionStrength = Math.max(maxExtensionExtensionStrength,\
    \ strength);\n                maxExtensionExtensionExtension = Math.max(maxExtensionExtensionExtension,\
    \ extension.length());\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   if (maxStrength == -1) {\n            return class_name;\n        }\n    \
    \    if (maxExtension == -1) {\n            return class_name + maxStrength;\n\
    \        }\n        if (maxExtensionStrength == -1) {\n            return class_name\
    \ + maxStrength + maxExtension;\n        }\n        if (maxExtensionExtension\
    \ == -1) {\n            return class_name + maxStrength + maxExtension + maxExtensionStrength;\n\
    \        }\n        if (maxExtensionExtensionStrength == -1) {\n            return\
    \ class_name + maxStrength + maxExtension + maxExtensionStrength + maxExtensionExtension;\n\
    \        }\n        if (maxExtensionExtensionExtension == -1) {\n            return\
    \ class_name + maxStrength + maxExtension + maxExtensionStrength + maxExtensionExtension\
    \ + maxExtensionExtensionStrength;\n        }\n        return class_name + maxStrength\
    \ + maxExtension + maxExtensionStrength + maxExtensionExtension + maxExtensionExtensionStrength\
    \ + maxExtensionExtensionExtension;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.stream().mapToDouble(s -> s.replaceAll(\"\
    [^A-Z]\", \"\").length() - s.replaceAll(\"[^a-z]\", \"\").length()).max().getAsDouble();\n\
    \        String extension = class_name + \".\" + extensions_sorted.stream().filter(s\
    \ -> s.replaceAll(\"[^A-Z]\", \"\").length() == s.replaceAll(\"[^a-z]\", \"\"\
    ).length()).findFirst().get();\n        return extension;\n", "        HashMap<String,\
    \ Integer> extensions_map = new HashMap<>();\n        for (String extension :\
    \ extensions) {\n            int index = extension.indexOf('_');\n           \
    \ String extension_name = extension.substring(0, index);\n            int extension_strength\
    \ = extension.substring(index + 1);\n            extensions_map.put(extension_name,\
    \ extension_strength);\n        }\n        double max_strength = -1;\n       \
    \ String max_extension = null;\n        for (String extension : extensions_map.keySet())\
    \ {\n            int extension_strength = extensions_map.get(extension);\n   \
    \         if (max_strength < extension_strength) {\n                max_strength\
    \ = extension_strength;\n                max_extension = extension;\n        \
    \    }\n        }\n        return class_name + \".\" + max_extension;\n", "  \
    \      ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            int strength\
    \ = cap - sm;\n            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            int strength = cap - sm;\n\
    \            if (strength == strongest) {\n                return class_name +\
    \ \".\" + extension;\n            }\n        }\n        return class_name;\n",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).chars().filter(Character::isUpperCase).count()\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).chars().filter(Character::isLowerCase).count();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (Integer strength : strengths)\
    \ {\n            if (strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        String[] class_name_array = class_name.split(\"\\\\.\");\n        String\
    \ strongest_extension_name = \"\";\n        for (int i = 0; i < class_name_array.length;\
    \ i++) {\n            if (i != strongest_extension_index) {\n                strongest_extension_name\
    \ += class_name_array[i] + \".\";\n            } else {\n                strongest_extension_name\
    \ += strongest_extension;\n            }\n        }\n        return strongest_extension_name;\n",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionStrength\
    \ = 0;\n        double maxExtensionName = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameStrength = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionName", "        ArrayList<Integer> strengths\
    \ = new ArrayList<Integer>();\n        for (String ext : extensions) {\n     \
    \       int c = ext.length();\n            int sm = ext.replaceAll(\"[^A-Z]\"\
    , \"\").length();\n            int cap = ext.replaceAll(\"[A-Z]\", \"\").length();\n\
    \            int strength = cap - sm;\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        if (strengths.size() > 1) {\n            strongest = strengths.get(1);\n\
    \        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(extensions_sorted.indexOf(extension));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.indexOf(extensions_sorted.get(0));\n        int strongest_extension_strength\
    \ = extensions_sorted.get(strongest_extension_index).length();\n        for (int\
    \ i = 1; i < extensions_sorted.size(); i++) {\n            String extension =\
    \ extensions_sorted.get(i);\n            int extension_strength = extension.length();\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_index = i;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(strongest_extension_index);\n", "        // Your\
    \ code here\n        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").length()/2).sum();\n\
    \        double strength_sorted = extensions_sorted.stream().mapToDouble(s ->\
    \ s.replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").length()).sum();\n\
    \        double strength_total = strength_sorted+strength;\n        double strength_percentage\
    \ = strength_total/extensions_sorted.size();\n        double strength_percentage_sorted\
    \ = strength_percentage*extensions_sorted.size();\n        double strength_percentage_total\
    \ = strength_percentage_sorted+strength;\n        double strength_percentage_percentage\
    \ = strength_percentage_total/extensions_sorted.size();\n        double strength_percentage_percentage_sorted\
    \ = strength_percentage_percentage*extensions_sorted.size();\n        double strength_percentage_percentage_total\
    \ = strength_percentage_percentage_sorted+strength;\n        double strength_percentage_percentage_percentage\
    \ = strength_percentage_percentage_total/extensions_sorted.size();\n        double\
    \ strength_percentage_percentage_percentage_sorted = strength_percentage_percentage_percentage*extensions_sorted.size();\n\
    \        double strength_percentage_percentage_percentage_total = strength_percentage_percentage_percentage_sorted+strength;\n\
    \        double strength_percentage_percentage_percentage_percentage = strength_percentage_percentage_percentage_total/extensions_sorted.size();\n\
    \        double strength_percentage_percentage_percentage_percentage_sorted =\
    \ strength_percentage_percentage_percentage_percentage*extensions_sorted.size();\n\
    \        double strength_percentage_percentage_percentage_percentage_total = strength_percentage_percentage_percentage_percentage_sorted+strength;\n\
    \        double strength_percentage_percentage_percentage_percentage_percentage\
    \ = strength_percentage_percentage_percentage_percentage_total/extensions_sorted.size();\n\
    \        double strength_percentage_percentage_percentage_percentage_percentage_sorted\
    \ = strength_percentage_percentage_percentage_percentage_percentage*extensions_sorted.size();\n\
    \        double strength_percentage_percentage_percentage_percentage_percentage_total\
    \ = strength_percentage_percentage_percentage_percentage_percentage_sorted+strength;\n\
    \        double strength_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = strength_", "        \n        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        \n        int strongest_extension_strength\
    \ = -1;\n        String strongest_extension = null;\n        \n        for (String\
    \ extension : extensions_sorted) {\n            \n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            \n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    \n        return class_name + \".\" + strongest_extension;\n", "        //\
    \ Your code here\n        Set<String> extensions_set = new HashSet<>(extensions);\n\
    \        extensions_set.removeAll(Arrays.asList(class_name.split(\"\\\\.\").toArray(new\
    \ String[0])));\n        double strength = extensions_set.size();\n        double\
    \ cap = class_name.split(\"\\\\.\")[0].length();\n        double sm = class_name.split(\"\
    \\\\.\")[1].length();\n        double strength_frac = strength / cap;\n      \
    \  double strength_frac_2 = strength_frac / sm;\n        double strength_frac_3\
    \ = strength_frac_2 * sm;\n        double strength_frac_4 = strength_frac_3 *\
    \ sm;\n        double strength_frac_5 = strength_frac_4 * sm;\n        double\
    \ strength_frac_6 = strength_frac_5 * sm;\n        double strength_frac_7 = strength_frac_6\
    \ * sm;\n        double strength_frac_8 = strength_frac_7 * sm;\n        double\
    \ strength_frac_9 = strength_frac_8 * sm;\n        double strength_frac_10 = strength_frac_9\
    \ * sm;\n        double strength_frac_11 = strength_frac_10 * sm;\n        double\
    \ strength_frac_12 = strength_frac_11 * sm;\n        double strength_frac_13 =\
    \ strength_frac_12 * sm;\n        double strength_frac_14 = strength_frac_13 *\
    \ sm;\n        double strength_frac_15 = strength_frac_14 * sm;\n        double\
    \ strength_frac_16 = strength_frac_15 * sm;\n        double strength_frac_17 =\
    \ strength_frac_16 * sm;\n        double strength_frac_18 = strength_frac_17 *\
    \ sm;\n        double strength_frac_19 = strength_frac_18 * sm;\n        double\
    \ strength_frac_20 = strength_frac_19 * sm;\n        double strength_frac_21 =\
    \ strength_frac_20 * sm;\n        double strength_frac_22 = strength_frac_21 *\
    \ sm;\n        double strength_frac_23 = strength_frac_22 * sm;\n        double\
    \ strength_frac_24 = strength_frac_23 * sm;\n        double strength_frac_25 =\
    \ strength_frac_24 * sm;\n        double strength_frac_26 = strength_frac_25 *\
    \ sm;\n        double strength_frac_27 = strength_frac_26 * sm;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        return class_name + \".\" + strongest_extension;\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<Integer>();\n        for(String ext : extensions)\
    \ {\n            int s = ext.replaceAll(\"[^A-Z]\", \"\").length();\n        \
    \    strengths.add(s);\n        }\n        Collections.sort(strengths);\n    \
    \    int maxStrength = strengths.get(0);\n        for(String ext : extensions)\
    \ {\n            int s = ext.replaceAll(\"[^A-Z]\", \"\").length();\n        \
    \    if(s > maxStrength) {\n                maxStrength = s;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(0);\n", "     \
    \   double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        for(String extension :\
    \ extensions) {\n            String extensionName = extension.substring(0,1);\n\
    \            String extensionCap = extension.substring(1,2);\n            String\
    \ extensionSm = extension.substring(2,3);\n            strength += (Double.parseDouble(extensionCap)\
    \ - Double.parseDouble(extensionSm));\n        }\n        strength = strength\
    \ / extensions.size();\n        for(String extension : extensions) {\n       \
    \     String extensionName = extension.substring(0,1);\n            String extensionCap\
    \ = extension.substring(1,2);\n            String extensionSm = extension.substring(2,3);\n\
    \            double extensionStrength = (Double.parseDouble(extensionCap) - Double.parseDouble(extensionSm));\n\
    \            if(extensionStrength > strength) {\n                strength = extensionStrength;\n\
    \                maxStrength = strength;\n                maxExtension = extension;\n\
    \                maxExtensionIndex = extensions.indexOf(extension);\n        \
    \    }\n        }\n        return class_name + maxExtension;\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<Integer>();\n        for (String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        int strength = cap - sm;\n            strengths.add(strength);\n    \
    \    }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            int strength = cap - sm;\n            if (strength == strongest)\
    \ {\n                return class_name + \".\" + extension;\n            }\n \
    \       }\n        return class_name;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.length();\n            if\
    \ (extension_strength > strength) {\n                strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(strength);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.toUpperCase().length() - s.toLowerCase().length()).max().getAsDouble();\n\
    \        String extension = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        return extension;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.length();\n            if\
    \ (extension_strength > strength) {\n                strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(strength);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            int strength_extension\
    \ = cap - sm;\n            if (strength_extension > strength) {\n            \
    \    strength = strength_extension;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(strength);\n", "        // Your code\
    \ here\n        double strength = 0;\n        for(String ext : extensions) {\n\
    \            int cap = ext.length();\n            int sm = ext.toLowerCase().length();\n\
    \            strength += (cap - sm) / cap;\n        }\n        double max = Math.max(strength,\
    \ 0);\n        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            strength += (cap\
    \ - sm) / cap;\n            if(strength > max) {\n                max = strength;\n\
    \            }\n        }\n        Collections.sort(extensions);\n        for(String\
    \ ext : extensions) {\n            int cap = ext.length();\n            int sm\
    \ = ext.toLowerCase().length();\n            strength += (cap - sm) / cap;\n \
    \           if(strength == max) {\n                return class_name + \".\" +\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extensions.get(0);\n",
  "        double strength = 0;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).length();\n            int sm =\
    \ extension.substring(0, 1).length();\n            strength += (cap - sm);\n \
    \       }\n        double strength_fraction = strength / extensions.size();\n\
    \        double strength_fraction_rounded = Math.round(strength_fraction * 100.0)\
    \ / 100.0;\n        String extension_strength = class_name + \".\" + extensions.get(0);\n\
    \        for(int i = 1; i < extensions.size(); i++) {\n            extension_strength\
    \ += \".\" + extensions.get(i);\n            double extension_strength_fraction\
    \ = extension_strength.substring(class_name.length() + 1).length() / extensions.size();\n\
    \            double extension_strength_fraction_rounded = Math.round(extension_strength_fraction\
    \ * 100.0) / 100.0;\n            if(extension_strength_fraction_rounded > strength_fraction_rounded)\
    \ {\n                extension_strength = class_name + \".\" + extensions.get(i);\n\
    \                strength_fraction = extension_strength.substring(class_name.length()\
    \ + 1).length() / extensions.size();\n                strength_fraction_rounded\
    \ = Math.round(strength_fraction * 100.0) / 100.0;\n            }\n        }\n\
    \        return extension_strength;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.length();\n            if\
    \ (strongest == -1 || extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(strongest);\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").length();\n   \
    \         if (strongest == -1 || extension_strength > strongest) {\n         \
    \       strongest = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.matches(\"[A-Z]+\")\n                && s.matches(\"[a-z]+\") ? s.length()\
    \ - s.length() % 2 : 0\n                ).max().getAsDouble();\n        double\
    \ strength_sorted = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]+\"\
    )\n                && s.matches(\"[a-z]+\") ? s.length() - s.length() % 2 : 0\n\
    \                ).sorted().max().getAsDouble();\n        double strength_max\
    \ = Math.max(strength, strength_sorted);\n        double strength_max_index =\
    \ extensions_sorted.indexOf(extensions_sorted.stream()\n                .filter(s\
    \ -> s.matches(\"[A-Z]+\") && s.matches(\"[a-z]+\"))\n                .max(Comparator.comparingDouble(s\
    \ -> s.length() - s.length() % 2))\n                .get());\n        String extension_strength\
    \ = extensions_sorted.get(strength_max_index);\n        return class_name + \"\
    .\" + extension_strength;\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).replaceAll(\"\\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length()\
    \ - extension.substring(0, 1).replaceAll(\"\\\\p{Upper}\", \"\").replaceAll(\"\
    \\\\p{Lower}\", \"\").length();\n            strengths.add(strength);\n      \
    \  }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (Integer strength : strengths) {\n            if (strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (int i = 1; i < strengths.size(); i++) {\n            if (strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(0);\n", "     \
    \   ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n     \
    \   Collections.sort(extensions_sorted);\n        int strongest = -1;\n      \
    \  for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for (String extension : extensions)\
    \ {\n            int length = extension.length();\n            int cap = length\
    \ / 2;\n            int sm = length - cap;\n            strengths.add(cap - sm);\n\
    \        }\n        Collections.sort(strengths);\n        int max = strengths.get(0);\n\
    \        for (int i = 1; i < strengths.size(); i++) {\n            if (strengths.get(i)\
    \ == max) {\n                max = strengths.get(i);\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strengths.indexOf(max));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, 1).toUpperCase().length();\n   \
    \     double sm = class_name.substring(0, 1).toLowerCase().length();\n       \
    \ double strength_frac = strength / cap - sm / cap;\n        double strength_frac_rounded\
    \ = Math.round(strength_frac * 100) / 100;\n        String extension_strength\
    \ = class_name + \".\" + extensions_sorted.get(0);\n        if (strength_frac_rounded\
    \ == strength_frac) {\n            return extension_strength;\n        }\n   \
    \     if (strength_frac_rounded > strength_frac) {\n            return StrongestExtension(class_name,\
    \ extensions_sorted.subList(1, extensions_sorted.size()));\n        }\n      \
    \  return StrongestExtension(class_name, extensions_sorted.subList(0, extensions_sorted.size()\
    \ - 1));\n", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.toUpperCase().length() - s.toLowerCase().length()).sum();\n        double\
    \ strength_sorted = extensions_sorted.stream().mapToDouble(s -> s.toUpperCase().length()\
    \ - s.toLowerCase().length()).sorted().findFirst().getAsDouble();\n        if\
    \ (strength_sorted == 0) {\n            return class_name;\n        }\n      \
    \  if (strength_sorted > 0) {\n            return class_name + \".\" + extensions_sorted.get(0);\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n     \
    \   for(String extension : extensions) {\n            int strength = extension.substring(0,1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length() - extension.substring(0,1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length();\n         \
    \   strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = -1;\n        for(Integer strength : strengths) {\n  \
    \          if(strength > strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = cap - sm;\n            if (strength > 0) {\n               \
    \ break;\n            }\n        }\n        if (strength == 0) {\n           \
    \ return class_name;\n        }\n        String extension_strength = class_name\
    \ + \".\" + extensions_sorted.get(0);\n        for (int i = 1; i < extensions_sorted.size();\
    \ i++) {\n            extension_strength = extension_strength + \".\" + extensions_sorted.get(i);\n\
    \        }\n        return extension_strength;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            throw new\
    \ RuntimeException(\"No strongest extension found\");\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.length();\n            if (extension_strength > max_strength) {\n\
    \                max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (Integer strength : strengths) {\n            if (strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1, 2).length();\n   \
    \         double strength_extension = cap - sm;\n            if (strength < strength_extension)\
    \ {\n                strength = strength_extension;\n            }\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        Map<String, Integer> extension_strength = new HashMap<>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).length();\n            extension_strength.put(extension, strength);\n   \
    \     }\n        Collections.sort(extension_strength.values());\n        int max_strength\
    \ = extension_strength.values().get(0);\n        for (String extension : extension_strength.keySet())\
    \ {\n            if (extension_strength.get(extension) == max_strength) {\n  \
    \              return class_name + \".\" + extension;\n            }\n       \
    \ }\n        return class_name;\n", "        HashMap<String, Integer> map = new\
    \ HashMap<String, Integer>();\n        for (String ext : extensions) {\n     \
    \       int index = ext.toLowerCase().indexOf(class_name.substring(class_name.lastIndexOf('.')+1));\n\
    \            if (index != -1) {\n                map.put(ext, map.getOrDefault(ext,\
    \ 0) + 1);\n            }\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        \n        List<Map.Entry<String,\
    \ Integer>> sortedEntries = new ArrayList<Map.Entry<String, Integer>>(entries);\n\
    \        Collections.sort(sortedEntries, new Comparator<Map.Entry<String, Integer>>()\
    \ {\n            @Override\n            public int compare(Map.Entry<String, Integer>\
    \ o1, Map.Entry<String, Integer> o2) {\n                return o2.getValue() -\
    \ o1.getValue();\n            }\n        });\n        \n        Map.Entry<String,\
    \ Integer> entry = sortedEntries.get(0);\n        return class_name + entry.getKey();\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.toUpperCase().length() - s.toLowerCase().length()).max().getAsDouble();\n\
    \        String extension = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        return extension;\n", "        double strength = -1;\n      \
    \  double maxStrength = -1;\n        double maxExtension = -1;\n        for (String\
    \ extension : extensions) {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int extensionStrength = extension.substring(1).toLowerCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if (strength < 0 || strength > extensionStrength)\
    \ {\n                strength = extensionStrength;\n                maxStrength\
    \ = strength;\n                maxExtension = extensionName;\n            }\n\
    \        }\n        return class_name + \".\" + maxExtension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[A-Z]\", \"\").replaceAll(\"\
    [a-z]\", \"\").length();\n            if (extension_strength > max_strength) {\n\
    \                max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<Integer> extension_strength = new\
    \ ArrayList<Integer>();\n        for(String extension : extensions) {\n      \
    \      int extension_strength_int = 0;\n            for(int i = 0; i < extension.length();\
    \ i++) {\n                if(Character.isUpperCase(extension.charAt(i))) {\n \
    \                   extension_strength_int += 1;\n                }\n        \
    \    }\n            extension_strength.add(extension_strength_int);\n        }\n\
    \        Collections.sort(extension_strength);\n        int strongest_extension_strength\
    \ = extension_strength.get(0);\n        for(int i = 1; i < extension_strength.size();\
    \ i++) {\n            if(extension_strength.get(i) == strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(extension_strength.indexOf(strongest_extension_strength));\n",
  "        \n        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        \n        int strongest_extension_index\
    \ = -1;\n        \n        for (int i = 0; i < extensions_sorted.size(); i++)\
    \ {\n            String extension = extensions_sorted.get(i);\n            \n\
    \            int extension_length = extension.length();\n            \n      \
    \      if (extension_length == 0) {\n                continue;\n            }\n\
    \            \n            int extension_strength = extension.charAt(0) - extension.charAt(1);\n\
    \            \n            if (extension_strength > strongest_extension_index)\
    \ {\n                strongest_extension_index = extension_strength;\n       \
    \     }\n        }\n        \n        if (strongest_extension_index == -1) {\n\
    \            return class_name;\n        }\n        \n        return class_name\
    \ + \".\" + extensions_sorted.get(strongest_extension_index);\n", "        double\
    \ strength = -1;\n        double maxStrength = -1;\n        double maxExtensionStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double extensionStrength = (cap - sm) / cap;\n            if(strength\
    \ < 0 || strength > extensionStrength) {\n                strength = extensionStrength;\n\
    \                maxStrength = strength;\n                maxExtensionStrength\
    \ = extensionStrength;\n            }\n        }\n        if(strength > 0) {\n\
    \            return class_name + \".\" + extensions.get(0);\n        }\n     \
    \   return class_name;\n", "        double strength = 0;\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm) / cap;\n        }\n        Collections.sort(extensions);\n      \
    \  for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm) / cap;\n        }\n        double strength_of_extension\
    \ = strength;\n        Collections.sort(extensions);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_of_extension\
    \ += (cap - sm) / cap;\n        }\n        double strength_of_extension_of_extension\
    \ = strength_of_extension;\n        Collections.sort(extensions);\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_of_extension_of_extension\
    \ += (cap - sm) / cap;\n        }\n        double strength_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension;\n        Collections.sort(extensions);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_of_extension_of_extension_of_extension += (cap - sm) / cap;\n\
    \        }\n        double strength_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension;\n        Collections.sort(extensions);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_of_extension_of_extension_of_extension_of_extension += (cap -\
    \ sm) / cap;\n        }\n        double strength_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension;\n        Collections.sort(extensions);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ += (cap - sm) / cap;\n        }\n        double strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = ", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            double extension_strength\
    \ = extension.length();\n            if (extension_strength > strength) {\n  \
    \              strength = extension_strength;\n            }\n        }\n    \
    \    return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(extension.indexOf('C')\
    \ + 1).length() - extension.substring(extension.indexOf('S') + 1).length();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(Integer strength : strengths)\
    \ {\n            if(strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest = -1;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.length();\n            if (strongest == -1 || extension_strength\
    \ > strongest) {\n                strongest = extension_strength;\n          \
    \  }\n        }\n        return class_name + \".\" + extensions_sorted.get(strongest);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('S') + 1).length();\n\
    \            double frac = cap - sm;\n            strength = Math.max(strength,\
    \ frac);\n        }\n        return class_name + \".\" + extensions.get(extensions_sorted.indexOf(strength));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        // Your code here\n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.indexOf(extensions_sorted.get(0));\n\
    \        if (strongest_extension_index == -1) {\n            return class_name;\n\
    \        }\n        int strongest_extension_strength = extensions_sorted.get(strongest_extension_index).length()\
    \ - extensions_sorted.get(0).length();\n        for (int i = 1; i < extensions_sorted.size();\
    \ i++) {\n            String extension = extensions_sorted.get(i);\n         \
    \   int extension_strength = extension.length() - extensions_sorted.get(i).length();\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_index = i;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(strongest_extension_index);\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for(String ext : extensions) {\n   \
    \         int cap = ext.length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            int strength =\
    \ cap - sm;\n            if(strength == strongest) {\n                return class_name\
    \ + \".\" + ext;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions.get(0);\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for (String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            int strength =\
    \ cap - sm;\n            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (String ext : extensions)\
    \ {\n            int cap = ext.length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            if (strength == strongest)\
    \ {\n                return class_name + \".\" + ext;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions.get(0);\n", "        Map<String,\
    \ Integer> extensions_map = new HashMap<>();\n        for (String extension :\
    \ extensions) {\n            int extension_length = extension.length();\n    \
    \        int extension_strength = extension_length / 2;\n            extensions_map.put(extension,\
    \ extension_strength);\n        }\n        Collections.sort(extensions_map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        Integer max_strength =\
    \ extensions_map.get(class_name);\n        if (max_strength == null) {\n     \
    \       return class_name;\n        }\n        StringBuilder sb = new StringBuilder(class_name);\n\
    \        boolean found = false;\n        for (Map.Entry<String, Integer> entry\
    \ : extensions_map.entrySet()) {\n            if (entry.getValue().equals(max_strength))\
    \ {\n                found = true;\n                sb.append(entry.getKey());\n\
    \            }\n        }\n        if (!found) {\n            throw new RuntimeException(\"\
    No extension found with strength \" + max_strength);\n        }\n        return\
    \ sb.toString();\n", "        ArrayList<Integer> extension_strengths = new ArrayList<>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).length();\n            for (int i = 0; i < strength; i++) {\n           \
    \     strength *= 2;\n            }\n            extension_strengths.add(strength);\n\
    \        }\n        int max_strength = Collections.max(extension_strengths);\n\
    \        int max_index = extension_strengths.indexOf(max_strength);\n        return\
    \ class_name + extensions.get(max_index);\n", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for (String extension : extensions) {\n      \
    \      int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            int strength = cap - sm;\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        if (strengths.size() > 1) {\n            int index = Collections.binarySearch(strengths,\
    \ strongest);\n            if (index < 0) {\n                index = -index -\
    \ 1;\n            }\n            strongest = extensions.get(index);\n        }\n\
    \        return class_name + \".\" + strongest;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int strength\
    \ = extension.substring(extension.indexOf('C') + 1).length();\n            if\
    \ (strength > max_strength) {\n                max_strength = strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest) {\n                strongest = extension_strength;\n          \
    \  }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n     \
    \   for(String extension : extensions) {\n            int extension_strength =\
    \ extension.charAt(0) - extension.charAt(1);\n            strengths.add(extension_strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest_strength\
    \ = strengths.get(0);\n        for(String extension : extensions) {\n        \
    \    int extension_strength = extension.charAt(0) - extension.charAt(1);\n   \
    \         if(extension_strength == strongest_strength) {\n                return\
    \ class_name + \".\" + extension;\n            }\n        }\n        return class_name;\n",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int strength = extension.charAt(0) -\
    \ extension.charAt(1);\n            strengths.add(strength);\n        }\n    \
    \    Collections.sort(strengths);\n        int max_strength = strengths.get(0);\n\
    \        for (Integer strength : strengths) {\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n            }\n        }\n    \
    \    return class_name + \".\" + extensions.get(strengths.indexOf(max_strength));\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        Map<String, Integer> extension_strength\
    \ = new HashMap<>();\n        for (String extension : extensions) {\n        \
    \    int extension_strength_counter = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (extension.charAt(i) >= 'A' && extension.charAt(i)\
    \ <= 'Z') {\n                    extension_strength_counter++;\n             \
    \   }\n            }\n            extension_strength.put(extension, extension_strength_counter);\n\
    \        }\n        Collections.sort(extension_strength.values());\n        int\
    \ max_strength = extension_strength.values().get(0);\n        for (String extension\
    \ : extension_strength.keySet()) {\n            if (extension_strength.get(extension)\
    \ == max_strength) {\n                max_strength = extension_strength.get(extension);\n\
    \            }\n        }\n        return class_name + \".\" + max_strength;\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n\
    \            if (strength == -1 || strength > extension_strength) {\n        \
    \        strength = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n",
  "        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double strength = cap - sm;\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        double strongest_extension_strength = -1;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double strength = cap - sm;\n            if(strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(strongest_extension_strength));\n",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int length = extension.length();\n  \
    \          int cap = length / 2;\n            int sm = length - cap;\n       \
    \     strengths.add(cap - sm);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for (String extension : extensions)\
    \ {\n            int length = extension.length();\n            int cap = length\
    \ / 2;\n            int sm = length - cap;\n            if (strongest == cap -\
    \ sm) {\n                return class_name + \".\" + extension;\n            }\n\
    \        }\n        return class_name;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ ext : extensions) {\n            int cap = ext.length();\n            int sm\
    \ = ext.toLowerCase().length();\n            map.put(ext, cap - sm);\n       \
    \ }\n        Collections.sort(map.entrySet());\n        for(Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if(entry.getValue() == 0) {\n\
    \                return class_name + \".\" + entry.getKey();\n            }\n\
    \        }\n        return class_name;\n", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.indexOf(class_name.substring(class_name.lastIndexOf('.')+1));\n\
    \        if (strongest_extension_index == -1) {\n            return \"\";\n  \
    \      }\n        int strongest_extension_strength = extensions_sorted.get(strongest_extension_index).length()\
    \ - class_name.substring(class_name.lastIndexOf('.')+1).length();\n        if\
    \ (strongest_extension_strength == 0) {\n            return \"\";\n        }\n\
    \        int strength = extensions_sorted.indexOf(\"_\" + class_name.substring(class_name.lastIndexOf('.')+1));\n\
    \        if (strength == -1) {\n            return \"\";\n        }\n        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        ArrayList<String> extensions_sorted_with_strength = new ArrayList<>(extensions_sorted);\n\
    \        extensions_sorted_with_strength.remove(strongest_extension_index);\n\
    \        extensions_sorted_with_strength.add(strongest_extension_index, class_name.substring(class_name.lastIndexOf('.')+1)\
    \ + extensions_sorted.get(strength));\n        Collections.sort(extensions_sorted_with_strength);\n\
    \        return extensions_sorted_with_strength.get(0);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length - 1;\n            int extension_sm = 0;\n            for\
    \ (int i = 0; i < extension_cap; i++) {\n                if (extension.charAt(i)\
    \ == extension.charAt(i + 1)) {\n                    extension_sm++;\n       \
    \         }\n            }\n            double strength = (extension_cap - extension_sm)\
    \ / extension_cap;\n            if (strength > strongest) {\n                strongest\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + extensions_sorted.get(strongest);\n",
  "        \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double frac = cap - sm;\n            if (frac >\
    \ strength) {\n                strength = frac;\n            }\n        }\n  \
    \      return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        // Your code here\n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for(String ext : extensions) {\n   \
    \         int cap = ext.length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int index = strengths.size()\
    \ - 1;\n        String strongest = class_name + \".\" + extensions.get(index);\n\
    \        return strongest;\n", "        // Your code here\n        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+\")).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[a-z]+\")).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[a-z]+\")).forEach(s -> extensions_set.add(s));\n     \
    \   extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+\")).forEach(s\
    \ -> extensions_set.add(s));\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+[A-Z]+[a-z]+\")).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+\")).forEach(s -> extensions_set.add(s));\n\
    \        extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+\")).forEach(s -> extensions_set.add(s));\n\
    \        extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+\")).forEach(s -> extensions_set.add(s));\n\
    \        extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+\")).forEach(s -> extensions_set.add(s));\n\
    \        extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+\")).forEach(s -> extensions_set.add(s));\n\
    \        extensions_set.stream().filter(s -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(s -> extensions_set.add(s));\n        extensions_set.stream().filter(s\
    \ -> s.matches(\"[A-Z]+[A-Z]+[A-Z]+", "        ArrayList<Integer> strengths =\
    \ new ArrayList<>();\n        for (String extension : extensions) {\n        \
    \    int strength = extension.substring(0, 1).length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (int i = 1; i < strengths.size(); i++) {\n            if (strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            double extension_strength\
    \ = extension.length();\n            if (extension_strength > strength) {\n  \
    \              strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_capital_count = extension.substring(0,\
    \ extension_length).replaceAll(\"[^A-Z]\", \"\").length();\n            int extension_small_count\
    \ = extension.substring(0, extension_length).replaceAll(\"[^a-z]\", \"\").length();\n\
    \            int extension_strength = extension_capital_count - extension_small_count;\n\
    \            if (strength == -1 || extension_strength > strength) {\n        \
    \        strength = extension_strength;\n                strongest_extension =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n",
  "        double strength = -1;\n        double max_strength = -1;\n        double\
    \ max_index = -1;\n        for(String extension : extensions) {\n            int\
    \ cap = extension.length();\n            int sm = class_name.indexOf(extension.toLowerCase());\n\
    \            double frac = cap - sm;\n            strength += frac;\n        \
    \    if(strength > max_strength) {\n                max_strength = strength;\n\
    \                max_index = extension;\n            }\n        }\n        if(max_strength\
    \ == -1) {\n            return class_name;\n        }\n        return class_name\
    \ + \".\" + max_index;\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int count = 0;\n  \
    \          for(int i = 0; i < extension.length(); i++) {\n                if(Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    strengths.add(count);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = -1;\n        for(int i = 0; i < strengths.size(); i++)\
    \ {\n            if(strengths.get(i) == strongest) {\n                continue;\n\
    \            }\n            if(strengths.get(i) > strongest) {\n             \
    \   strongest = strengths.get(i);\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(strengths.indexOf(strongest));\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            return class_name;\n\
    \        }\n        int strongest_extension_strength_fraction =\n            \
    \    (int) Math.pow((double) strongest_extension_strength, 1.0 / extensions_sorted.size());\n\
    \        String strongest_extension_name =\n                class_name + \".\"\
    \ + extensions_sorted.get(strongest_extension_strength_fraction);\n        return\
    \ strongest_extension_name;\n", "        ArrayList<Integer> extension_strengths\
    \ = new ArrayList<>();\n        for(String extension : extensions) {\n       \
    \     int strength = extension.substring(extension.indexOf('C') + 1).length();\n\
    \            extension_strengths.add(strength);\n        }\n        int max_strength\
    \ = Collections.max(extension_strengths);\n        for(Integer strength : extension_strengths)\
    \ {\n            if(strength == max_strength) {\n                return class_name\
    \ + \".\" + extensions.get(extension_strengths.indexOf(max_strength));\n     \
    \       }\n        }\n        return class_name + \".\" + extensions.get(0);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('S') + 1).length();\n\
    \            double frac = cap - sm;\n            strength = Math.max(strength,\
    \ frac);\n        }\n        return class_name + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        double strength = -1;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double frac = cap - sm;\n            strength += frac;\n        }\n \
    \       Collections.sort(extensions);\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double frac = cap - sm;\n            if(frac > strength) {\n        \
    \        strength = frac;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);\n", "        \n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        \n        double strength = -1;\n        \n        for (String extension\
    \ : extensions_sorted) {\n            \n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      \n            double fraction = cap - sm;\n            \n            if\
    \ (strength == -1 || fraction > strength) {\n                strength = fraction;\n\
    \            }\n        }\n        \n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n     \
    \   for(String ext : extensions) {\n            int cap = ext.toUpperCase().length();\n\
    \            int sm = ext.toLowerCase().length();\n            int strength =\
    \ cap - sm;\n            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(String ext : extensions)\
    \ {\n            int cap = ext.toUpperCase().length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            if(strength == strongest) {\n\
    \                return class_name + \".\" + ext;\n            }\n        }\n\
    \        return class_name;\n", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(0);\n", "     \
    \   // Your code here\n        \n        \n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        ", "        ArrayList<Integer> strengths = new\
    \ ArrayList<Integer>();\n        for(String extension : extensions) {\n      \
    \      int strength = extension.charAt(0) - extension.charAt(1);\n           \
    \ strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(String extension : extensions)\
    \ {\n            int strength = extension.charAt(0) - extension.charAt(1);\n \
    \           if(strength == strongest) {\n                return class_name + \"\
    .\" + extension;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions.get(0);\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            strengths.add(strength);\n        }\n  \
    \      Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(int i = 1; i < strengths.size(); i++) {\n            if(strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);\n", "        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for(String extension : extensions) {\n\
    \            int length = extension.length();\n            int cap = length/2;\n\
    \            int sm = length-cap;\n            strengths.add(cap - sm);\n    \
    \    }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String extension : extensions) {\n            int length = extension.length();\n\
    \            int cap = length/2;\n            int sm = length-cap;\n         \
    \   if(strongest == cap - sm) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_strength = -1;\n        for (String extension\
    \ : extensions_sorted) {\n            int extension_strength = extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.size() - strongest_extension_strength);\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (strength == -1 || strength > extension_strength) {\n        \
    \        strength = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.get(strength)));\n",
  "        double strength = -1;\n        double maxStrength = -1;\n        double\
    \ maxExtension = -1;\n        double minExtension = Double.MAX_VALUE;\n      \
    \  for (String extension : extensions) {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int extensionStrength = extension.substring(1).toLowerCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if (extensionStrength > maxStrength) {\n\
    \                maxStrength = extensionStrength;\n                maxExtension\
    \ = extensionName;\n            }\n            if (extensionStrength < minExtension)\
    \ {\n                minExtension = extensionStrength;\n            }\n      \
    \  }\n        if (maxStrength == -1) {\n            return class_name;\n     \
    \   }\n        double fraction = maxStrength - minExtension;\n        if (fraction\
    \ > 0) {\n            String extension = maxExtension;\n            while (fraction\
    \ > 0) {\n                fraction -= extension.substring(1).toLowerCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n                extension = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            }\n            return class_name + \"\
    .\" + extension;\n        }\n        return class_name;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap_strength\
    \ = strength / CAP;\n        double sm_strength = strength % CAP;\n        double\
    \ strength_diff = cap_strength - sm_strength;\n        double strength_diff_abs\
    \ = Math.abs(strength_diff);\n        String extension_strongest = null;\n   \
    \     if (strength_diff_abs == 0) {\n            extension_strongest = class_name\
    \ + extensions_sorted.get(0);\n        } else if (strength_diff_abs < 0) {\n \
    \           extension_strongest = class_name + extensions_sorted.get(0);\n   \
    \         int i = 0;\n            while (i < extensions_sorted.size() - 1) {\n\
    \                if (strength_diff < 0) {\n                    extension_strongest\
    \ = class_name + extensions_sorted.get(i) + extensions_sorted.get(i + 1);\n  \
    \                  strength_diff += CAP;\n                    strength_diff_abs\
    \ += CAP;\n                } else {\n                    extension_strongest =\
    \ class_name + extensions_sorted.get(i) + extensions_sorted.get(i + 1);\n    \
    \                strength_diff -= CAP;\n                    strength_diff_abs\
    \ -= CAP;\n                }\n                i++;\n            }\n        } else\
    \ {\n            extension_strongest = class_name + extensions_sorted.get(0);\n\
    \        }\n        return extension_strongest;\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double strength_extension = cap - sm;\n            if (strength < strength_extension)\
    \ {\n                strength = strength_extension;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(extensions_sorted.indexOf(extension));\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length - 1;\n\
    \            int extension_sm = 0;\n            for (int i = 0; i < extension_cap;\
    \ i++) {\n                if (extension.charAt(i) == extension.charAt(extension_cap))\
    \ {\n                    extension_sm++;\n                }\n            }\n \
    \           strength += (extension_cap - extension_sm);\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(strength);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.charAt(0).toUpperCase().length();\n\
    \        double sm = class_name.charAt(0).toLowerCase().length();\n        double\
    \ strength_fraction = strength - cap - sm;\n        double strength_fraction2\
    \ = strength_fraction / strength;\n        double strength_fraction3 = strength_fraction2\
    \ / strength;\n        double strength_fraction4 = strength_fraction3 / strength;\n\
    \        double strength_fraction5 = strength_fraction4 / strength;\n        double\
    \ strength_fraction6 = strength_fraction5 / strength;\n        double strength_fraction7\
    \ = strength_fraction6 / strength;\n        double strength_fraction8 = strength_fraction7\
    \ / strength;\n        double strength_fraction9 = strength_fraction8 / strength;\n\
    \        double strength_fraction10 = strength_fraction9 / strength;\n       \
    \ double strength_fraction11 = strength_fraction10 / strength;\n        double\
    \ strength_fraction12 = strength_fraction11 / strength;\n        double strength_fraction13\
    \ = strength_fraction12 / strength;\n        double strength_fraction14 = strength_fraction13\
    \ / strength;\n        double strength_fraction15 = strength_fraction14 / strength;\n\
    \        double strength_fraction16 = strength_fraction15 / strength;\n      \
    \  double strength_fraction17 = strength_fraction16 / strength;\n        double\
    \ strength_fraction18 = strength_fraction17 / strength;\n        double strength_fraction19\
    \ = strength_fraction18 / strength;\n        double strength_fraction20 = strength_fraction19\
    \ / strength;\n        double strength_fraction21 = strength_fraction20 / strength;\n\
    \        double strength_fraction22 = strength_fraction21 / strength;\n      \
    \  double strength_fraction23 = strength_fraction22 / strength;\n        double\
    \ strength_fraction24 = strength_fraction23 / strength;\n        double strength_fraction25\
    \ = strength_fraction24 / strength;\n        double strength_fraction26 = strength_fraction25\
    \ / strength;\n        double strength_fraction27 = strength_fraction26 / strength;\n\
    \        double strength_fraction28 = strength_fraction27 / strength;\n      \
    \  double strength_fraction29 = strength_fraction28 / strength;\n        double\
    \ strength_fraction30 = strength_fraction29 / strength;\n        double strength_fraction31\
    \ = strength_fraction30 / strength;\n        double strength", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            strengths.add(strength);\n        }\n  \
    \      Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            if(strength == strongest) {\n          \
    \      return class_name + \".\" + extension;\n            }\n        }\n    \
    \    return class_name + \".\" + extensions.get(0);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double frac = cap - sm;\n            strength =\
    \ Math.max(strength, frac);\n        }\n        return class_name + extensions_sorted.get(extensions_sorted.size()\
    \ - 1) + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n", "  \
    \      ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ - 1, class_name.lastIndexOf('S') + 1).length();\n            double fraction\
    \ = cap - sm;\n            if (fraction > strength) {\n                strength\
    \ = fraction;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, 1).toUpperCase().length();\n   \
    \     double sm = class_name.substring(0, 1).toLowerCase().length();\n       \
    \ double strength_frac = strength / cap;\n        double strength_frac_sorted\
    \ = strength_frac;\n        double sm = class_name.substring(0, 1).toLowerCase().length();\n\
    \        double sm_sorted = sm;\n        double sm_frac = sm / cap;\n        double\
    \ sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n      \
    \  double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n\
    \        double sm_frac_sorted = sm_frac;\n        double sm_frac_sorted = sm_frac;\n",
  "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(String\
    \ ext : extensions) {\n            int cap = ext.toUpperCase().length();\n   \
    \         int sm = ext.toLowerCase().length();\n            strengths.add(cap\
    \ - sm);\n        }\n        Collections.sort(strengths);\n        int strongest\
    \ = strengths.get(0);\n        for(String ext : extensions) {\n            int\
    \ cap = ext.toUpperCase().length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            if(strength == strongest) {\n\
    \                return class_name + \".\" + ext;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(0);\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            int strength_extension =\
    \ cap - sm;\n            if (strength_extension > strength) {\n              \
    \  strength = strength_extension;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(strength);\n", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for (String extension : extensions) {\n      \
    \      int length = extension.length();\n            int cap = length / 2;\n \
    \           int sm = length - cap;\n            strengths.add(cap - sm);\n   \
    \     }\n        Collections.sort(strengths);\n        int max = strengths.get(0);\n\
    \        for (int i = 0; i < strengths.size(); i++) {\n            if (strengths.get(i)\
    \ == max) {\n                return class_name + \".\" + extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);\n",
  "        \n        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        \n        double strength\
    \ = extensions_sorted.stream().mapToDouble(s -> s.length()).max().getAsDouble();\n\
    \        \n        double cap = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double sm = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        \n        double strength_frac = strength / Math.max(cap, sm);\n    \
    \    \n        String strongest_extension = class_name + extensions_sorted.stream().filter(s\
    \ -> s.length() == strength_frac).findFirst().get();\n        \n        return\
    \ strongest_extension;\n", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     int strongest_extension_index = extensions_sorted.size() - 1;\n        String\
    \ strongest_extension = extensions_sorted.get(strongest_extension_index);\n  \
    \      int cap_strongest_extension_index = strongest_extension_index - 1;\n  \
    \      int sm_strongest_extension_index = cap_strongest_extension_index - 1;\n\
    \        int strongest_extension_strength = extensions_sorted.get(strongest_extension_index).length()\
    \ - extensions_sorted.get(sm_strongest_extension_index).length();\n        if\
    \ (strongest_extension_strength > 0) {\n            return class_name + \".\"\
    \ + strongest_extension;\n        } else {\n            return class_name + \"\
    .\" + extensions_sorted.get(sm_strongest_extension_index);\n        }\n", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String ext :\
    \ extensions) {\n            int cap = ext.length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            map.put(ext, strength);\n \
    \       }\n        Collections.sort(map.entrySet());\n        Integer maxValue\
    \ = Collections.max(map.entrySet());\n        return class_name + \".\" + maxValue.getKey();\n",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        if (strength > 0) {\n            String extension = extensions_sorted.get(0);\n\
    \            int cap = extension.length();\n            int sm = class_name.substring(class_name.indexOf(\"\
    S\") + 1).length();\n            double strength_fraction = cap - sm;\n      \
    \      double strength_fraction_double = strength_fraction * strength_fraction;\n\
    \            double strength_fraction_double2 = Math.sqrt(strength_fraction_double);\n\
    \            double strength_fraction_double3 = strength_fraction - strength_fraction_double2;\n\
    \            double strength_fraction_double4 = strength_fraction - strength_fraction_double3;\n\
    \            double strength_fraction_double5 = Math.sqrt(strength_fraction_double4);\n\
    \            double strength_fraction_double6 = strength_fraction - strength_fraction_double5;\n\
    \            double strength_fraction_double7 = strength_fraction - strength_fraction_double6;\n\
    \            double strength_fraction_double8 = strength_fraction - strength_fraction_double7;\n\
    \            double strength_fraction_double9 = strength_fraction - strength_fraction_double8;\n\
    \            double strength_fraction_double10 = strength_fraction - strength_fraction_double9;\n\
    \            double strength_fraction_double11 = strength_fraction - strength_fraction_double10;\n\
    \            double strength_fraction_double12 = strength_fraction - strength_fraction_double11;\n\
    \            double strength_fraction_double13 = strength_fraction - strength_fraction_double12;\n\
    \            double strength_fraction_double14 = strength_fraction - strength_fraction_double13;\n\
    \            double strength_fraction_double15 = strength_fraction - strength_fraction_double14;\n\
    \            double strength_fraction_double16 = strength_fraction - strength_fraction_double15;\n\
    \            double strength_fraction_double17 = strength_fraction - strength_fraction_double16;\n\
    \            double strength_fraction_double18 = strength_fraction - strength_fraction_double17;\n\
    \            double strength_fraction_double19 = strength_fraction - strength_fraction_double18;\n\
    \            double strength_fraction_double20 = strength_fraction - strength_fraction_double19;\n\
    \            double strength_fraction_double21 = strength_fraction - strength_fraction_double20;\n\
    \            double strength_fraction_double22 = strength_fraction - strength_fraction_double21;\n",
  "        // Your code here\n        HashMap<String, Integer> map = new HashMap<>();\n\
    \        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.replaceAll(\"[^A-Z]\", \"\").length();\n           \
    \ int strength = cap - sm;\n            map.put(ext, strength);\n        }\n \
    \       Collections.sort(map.values());\n        int max = map.values().iterator().next();\n\
    \        for(String ext : extensions) {\n            if(map.get(ext) == max) {\n\
    \                return class_name + \".\" + ext;\n            }\n        }\n\
    \        return null;\n", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            strengths.add(strength);\n        }\n  \
    \      Collections.sort(strengths);\n        int strength = strengths.get(0);\n\
    \        for(int i = 1; i < strengths.size(); i++) {\n            if(strengths.get(i\
    \ - 1) == strength) {\n                strength = strengths.get(i);\n        \
    \    }\n        }\n        return class_name + \".\" + extensions.get(strength);\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
