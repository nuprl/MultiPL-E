name: HumanEval_158_find_max
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     List<String> result = new ArrayList<>();\n        for (String word : map.keySet())\
    \ {\n            if (map.get(word) == map.get(word).max()) {\n               \
    \ result.add(word);\n            }\n        }\n        \n        if (result.size()\
    \ == 0) {\n            return \"\";\n        }\n        \n        Collections.sort(result);\n\
    \        return result.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6pvy8gm.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpq6pvy8gm.java:29: error: method max in\
    \ class Integer cannot be applied to given types;\n            if (map.get(word)\
    \ == map.get(word).max()) {\n                                              ^\n\
    \  required: int,int\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        Integer maxValue =\
    \ keySet.size();\n        \n        if (maxValue == 0) {\n            return \"\
    \";\n        }\n        \n        for (String key : keySet) {\n            Integer\
    \ value = map.get(key);\n            if (value.intValue() > maxValue.intValue())\
    \ {\n                maxValue = value;\n            }\n        }\n        \n \
    \       return maxValue.intValue() == 0 ? \"\" : keySet.get(0);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_w9wdmwe.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp_w9wdmwe.java:42: error: cannot find symbol\n\
    \        return maxValue.intValue() == 0 ? \"\" : keySet.get(0);\n           \
    \                                          ^\n  symbol:   method get(int)\n  location:\
    \ variable keySet of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            int count = map.get(key);\n  \
    \          if (count > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = count;\n            }\n        }\n        return maxKey;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bpphlvy.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03cjktog.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp03cjktog.java:24:\
    \ error: no suitable method found for max(Set<Entry<String,Integer>>)\n      \
    \  Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n         \
    \                                                ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words);\n\
    \        String max = null;\n        for (String word : words) {\n           \
    \ int count = map.get(word);\n            if (count > map.size()) {\n        \
    \        max = word;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqc8z3av.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return \"\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_9swlmc.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpu_9swlmc.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        List<String>\
    \ result = new ArrayList<>();\n        for (String key : keySet) {\n         \
    \   int count = map.get(key);\n            if (count > 1) {\n                result.add(key);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        return \"\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxad4pwx.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        if(keySet.size() > 1) {\n            String maxKey\
    \ = keySet.toArray(new String[keySet.size()])[0];\n            int maxValue =\
    \ map.get(maxKey);\n            \n            for(String key : keySet) {\n   \
    \             if(map.get(key) == maxValue) {\n                    maxKey = key;\n\
    \                }\n            }\n            return maxKey;\n        } else\
    \ {\n            return keySet.toArray(new String[keySet.size()])[0];\n      \
    \  }\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp01o50ma6.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                int count1 = map.get(o1);\n                int count2\
    \ = map.get(o2);\n                return count1 - count2;\n            }\n   \
    \     });\n        return words.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy258l0ne.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdaxepgol.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpdaxepgol.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) > map.size()) {\n     \
    \           max = key;\n            }\n        }\n        return max;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrvxrhmb.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqzgevmt.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpoqzgevmt.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, (a, b) -> map.get(a) - map.get(b));\n        return\
    \ words.get(0);\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx38_kj2c.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n\
    \        String maxKey = null;\n        int maxCount = 0;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxKey = key;\n        \
    \        maxCount = count;\n            }\n        }\n        return maxKey;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwmlpu0dt.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n        return\
    \ maxEntry.getKey();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0d9mvei.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c);\n  \
    \              } else {\n                    map.put(c, count);\n            \
    \    }\n            }\n        }\n        Set<String> keys = map.keySet();\n \
    \       Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2y1un0v2.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, count);\n                        \
    \    ^\n/tmp/tmp2y1un0v2.java:30: error: no suitable method found for sort(Set<String>,<anonymous\
    \ Comparator<String>>)\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n                   ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp2y1un0v2.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        String max = null;\n        while (iterator.hasNext()) {\n          \
    \  String key = iterator.next();\n            int value = map.get(key);\n    \
    \        if (value == 1) {\n                max = key;\n                break;\n\
    \            }\n            if (value > 1) {\n                map.remove(key);\n\
    \            }\n        }\n        if (map.isEmpty()) {\n            return \"\
    \";\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2h7pqsqj.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        String maxWord = null;\n        int maxCount = -1;\n        while (iterator.hasNext())\
    \ {\n            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjv3ivsey.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        for(String key : keySet) {\n            int\
    \ count = map.get(key);\n            if(count > 1) {\n                return key;\n\
    \            }\n        }\n        \n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0eyr0xww.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? \"\" : result.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5wzcyqh8.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp5wzcyqh8.java:26: error: cannot find symbol\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n              ^\n\
    \  symbol:   method sort(Comparator<Object>)\n  location: variable result of type\
    \ Collection<String>\n/tmp/tmp5wzcyqh8.java:27: error: cannot find symbol\n  \
    \      return result.isEmpty() ? \"\" : result.get(0);\n                     \
    \                        ^\n  symbol:   method get(int)\n  location: variable\
    \ result of type Collection<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        if (keySet.size() > 0) {\n            String maxKey\
    \ = iterator.next();\n            int maxValue = map.get(maxKey);\n          \
    \  while (iterator.hasNext()) {\n                String nextKey = iterator.next();\n\
    \                int nextValue = map.get(nextKey);\n                if (nextValue\
    \ > maxValue) {\n                    maxKey = nextKey;\n                    maxValue\
    \ = nextValue;\n                }\n            }\n            return maxKey;\n\
    \        } else {\n            return \"\";\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq05ihikt.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Integer\
    \ maxValue = Collections.max(map.values());\n        String maxKey = null;\n \
    \       for (String key : map.keySet()) {\n            if (maxValue == map.get(key))\
    \ {\n                maxKey = key;\n            }\n        }\n        return maxKey;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp7kym1j2.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkp3alsf3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keys = map.keySet();\n        if (keys.size() == 1) {\n   \
    \         return keys.get(0);\n        }\n        Set<String> maxKeys = new TreeSet<>(keys);\n\
    \        return maxKeys.first();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8unut3a2.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp8unut3a2.java:29: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n/tmp/tmp8unut3a2.java:32:\
    \ error: cannot find symbol\n        return maxKeys.first();\n               \
    \       ^\n  symbol:   method first()\n  location: variable maxKeys of type Set<String>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<Map.Entry<String, Integer>> entrySet\
    \ = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n   \
    \     for (Map.Entry<String, Integer> entry : entrySet) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbmqpapd.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) > map.get(keySet.get(0)))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3c5uymwu.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp3c5uymwu.java:31: error: cannot find symbol\n\
    \            if (map.get(key) > map.get(keySet.get(0))) {\n                  \
    \                           ^\n  symbol:   method get(int)\n  location: variable\
    \ keySet of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        String maxKey = keys.stream().max(Comparator.comparingInt(k -> map.get(k)))\n\
    \                .orElse(\"\");\n        return maxKey;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqzgqkw6.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        int maxCount = keySet.size();\n\
    \        for (String word : keySet) {\n            if (map.get(word) == maxCount)\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7np92bgz.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        \n        Optional<Map.Entry<String, Integer>> maxEntry =\
    \ map.entrySet().stream().max(Map.Entry.comparingByValue());\n        if(maxEntry.isPresent())\
    \ {\n            return maxEntry.get().getKey();\n        }\n        return \"\
    \";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzueomqbw.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp018566bc.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keys = map.keySet();\n        \n        if (keys.size() == 1)\
    \ {\n            return keys.get(0);\n        }\n        \n        int maxCount\
    \ = keys.size();\n        String maxWord = \"\";\n        for (String key : keys)\
    \ {\n            if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \                maxWord = key;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi8pp7ad8.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpi8pp7ad8.java:30: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Integer maxValue = Collections.max(keySet);\n\
    \        String maxKey = keySet.toArray()[maxValue.intValue()];\n        return\
    \ maxKey;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00e1dcrv.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        Integer maxValue = Collections.max(keySet);\n\
    \                                          ^\n    lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n    lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n/tmp/tmp00e1dcrv.java:24: error: incompatible types: Object cannot be converted\
    \ to String\n        String maxKey = keySet.toArray()[maxValue.intValue()];\n\
    \                                        ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) > map.get(key)) {\n   \
    \             return key;\n            }\n        }\n        return \"\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6oy2lzsv.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        if (result.size() == 0) {\n            return \"\";\n        }\n    \
    \    return result.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwoo_aym6.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpwoo_aym6.java:27: error: no suitable method\
    \ found for sort(Collection<String>)\n        Collections.sort(result);\n    \
    \               ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Collection<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n            }\n\
    \        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpd877yjqm.java:22)\n\tat Problem.main(tmpd877yjqm.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return \"\";\n            }\n        }\n\
    \        Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Iterator<Map.Entry<String,\
    \ Integer>> iterator = set.iterator();\n        while (iterator.hasNext()) {\n\
    \            Map.Entry<String, Integer> entry = iterator.next();\n           \
    \ if (entry.getValue() > words.size()) {\n                return entry.getKey();\n\
    \            }\n        }\n        return \"\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0eic0dyg.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp0eic0dyg.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx1ruz2dl.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpx1ruz2dl.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77gs8t26.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmp77gs8t26.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word: words) {\n            int count = map.get(word);\n            if(count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        for(String key: keySet)\
    \ {\n            if(map.get(key) > map.get(keySet.toArray()[0])) {\n         \
    \       return key;\n            }\n        }\n        return \"\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpknruklcy.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5tqk6n70.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp5tqk6n70.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmp5tqk6n70.java:28: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>)\n        Collections.sort(map.entrySet());\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<Entry<String,Integer>>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      \n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   \n        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        \n        if (maxEntry.getValue() == 1) {\n            return maxEntry.getKey();\n\
    \        } else {\n            return \"\";\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt9hmj_y0.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<String, Integer> entry : entries)\
    \ {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60g96mhu.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        Integer maxCount =\
    \ keySet.isEmpty() ? null : Collections.max(keySet);\n        \n        if (maxCount\
    \ == null) {\n            return \"\";\n        }\n        \n        StringBuilder\
    \ result = new StringBuilder();\n        for (String word : keySet) {\n      \
    \      if (maxCount.equals(map.get(word))) {\n                result.append(word);\n\
    \            }\n        }\n        \n        return result.toString();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpal79fty9.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpal79fty9.java:29: error: incompatible types:\
    \ bad type in conditional expression\n        Integer maxCount = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n                                        \
    \                            ^\n    inference variable T has incompatible bounds\n\
    \      lower bounds: Integer,String,Object,Comparable<? super T>\n      lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object,Comparable<?\
    \ super T> declared in method <T>max(Collection<? extends T>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            int value = map.get(key);\n            if\
    \ (value > 1) {\n                return key;\n            }\n        }\n     \
    \   return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw0989qeg.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n    \
    \    Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n       \
    \ return maxEntry.getKey();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaoz_vpyx.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpaoz_vpyx.java:28: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        if (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int maxCount = map.get(key);\n            while (iterator.hasNext())\
    \ {\n                String nextKey = iterator.next();\n                int nextCount\
    \ = map.get(nextKey);\n                if (nextCount > maxCount) {\n         \
    \           maxCount = nextCount;\n                    key = nextKey;\n      \
    \          }\n            }\n            return key;\n        }\n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3bz0f0vu.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) >\
    \ map.get(max)) {\n                max = key;\n            }\n        }\n    \
    \    return max;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm18wgseu.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keys = map.keySet();\n        if (keys.size() == 1) {\n    \
    \        return keys.get(0);\n        }\n        \n        List<String> result\
    \ = new ArrayList<>();\n        for (String key : keys) {\n            int count\
    \ = map.get(key);\n            if (count > result.size()) {\n                result.clear();\n\
    \                result.add(key);\n            } else if (count == result.size())\
    \ {\n                result.add(key);\n            }\n        }\n        \n  \
    \      if (result.size() == 1) {\n            return result.get(0);\n        }\n\
    \        \n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8d1j6l3z.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp8d1j6l3z.java:29: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsw5eov5a.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpsw5eov5a.java:27: error: no suitable method\
    \ found for sort(Collection<String>)\n        Collections.sort(result);\n    \
    \               ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Collection<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpsw5eov5a.java:28: error: cannot find symbol\n        return\
    \ result.isEmpty() ? \"\" : result.get(0);\n                                 \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Collection<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new HashSet<>();\n\
    \        for (String word : keySet) {\n            int count = map.get(word);\n\
    \            if (count > result.size()) {\n                result.clear();\n \
    \               result.add(word);\n            } else if (count == result.size())\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.iterator().next();\n        }\n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6rjo_yr.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (String key : keySet) {\n            int count = map.get(key);\n\
    \            if (count > result.size()) {\n                result.clear();\n \
    \               result.add(key);\n            } else if (count == result.size())\
    \ {\n                result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return \"\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpplb2oj9m.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() > 1) {\n            String maxKey\
    \ = keys.iterator().next();\n            for (String key : keys) {\n         \
    \       if (map.get(key) > map.get(maxKey)) {\n                    maxKey = key;\n\
    \                }\n            }\n            return maxKey;\n        } else\
    \ {\n            return keys.get(0);\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpph1twhek.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpph1twhek.java:36: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdf1zg7z.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpzdf1zg7z.java:27: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        \n        Iterator<String> iterator = keys.iterator();\n \
    \       \n        int maxCount = Integer.MIN_VALUE;\n        String maxWord =\
    \ \"\";\n        \n        while (iterator.hasNext()) {\n            String word\
    \ = iterator.next();\n            int count = map.get(word);\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        \n        return maxWord;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0z17knb8.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp0z17knb8.java:29: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Set<String> keySet = map.keySet();\n        Integer maxCount = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n        if (maxCount != null) {\n       \
    \     String maxWord = map.get(maxCount);\n            int maxCountValue = map.get(maxCount);\n\
    \            int maxCountKey = 0;\n            for (String key : keySet) {\n \
    \               if (map.get(key) == maxCountValue) {\n                    maxCountKey\
    \ = key;\n                }\n            }\n            return maxWord + (maxCountValue\
    \ == maxCountKey ? \"\" : maxCountKey);\n        }\n        return \"\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyu8sneoj.java:27: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n/tmp/tmpyu8sneoj.java:29: error: incompatible types: Integer cannot be\
    \ converted to String\n            String maxWord = map.get(maxCount);\n     \
    \                               ^\n/tmp/tmpyu8sneoj.java:34: error: incompatible\
    \ types: String cannot be converted to int\n                    maxCountKey =\
    \ key;\n                                  ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value == 1) {\n      \
    \          return key;\n            }\n        }\n        return \"\";\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ri2lkma.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        Integer maxCount = null;\n        String maxWord = null;\n        while\
    \ (iterator.hasNext()) {\n            String word = iterator.next();\n       \
    \     Integer count = map.get(word);\n            if (maxCount == null || count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprzi_adfk.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ words.get(0);\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeo0w_lcg.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keys\
    \ = map.keySet();\n        if(keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        \n        Iterator<String> it = keys.iterator();\n       \
    \ while(it.hasNext()) {\n            String key = it.next();\n            int\
    \ count = map.get(key);\n            \n            if(count > 1) {\n         \
    \       it.remove();\n                map.put(key, count - 1);\n            }\n\
    \        }\n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n    }\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7s3u1erw.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp7s3u1erw.java:25:\
    \ error: cannot find symbol\n            return keys.get(0);\n               \
    \        ^\n  symbol:   method get(int)\n  location: variable keys of type Set<String>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (!map.containsKey(c)) {\n                    map.put(c, 1);\n      \
    \          } else {\n                    map.put(c, map.get(c) + 1);\n       \
    \         }\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().filter(e\
    \ -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().orElse(\"\"\
    );\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppt7n5jub.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmppt7n5jub.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmppt7n5jub.java:29: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikjup9_1.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpikjup9_1.java:27: error: no suitable method\
    \ found for sort(Collection<String>)\n        Collections.sort(result);\n    \
    \               ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Collection<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpikjup9_1.java:28: error: cannot find symbol\n        return\
    \ result.isEmpty() ? \"\" : result.get(0);\n                                 \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Collection<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        \n        return maxEntry.getKey();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbh3q2rev.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmpbh3q2rev.java:24:\
    \ error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Set<String> keySet = map.keySet();\n        Iterator<String> iterator\
    \ = keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3snxr9xw.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp3snxr9xw.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppf37cbo3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmppf37cbo3.java:27: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezoe8onp.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpezoe8onp.java:27: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        Integer maxCount =\
    \ keySet.size();\n        String maxWord = null;\n        for (String word : keySet)\
    \ {\n            if (maxCount.equals(map.get(word))) {\n                maxWord\
    \ = word;\n            }\n        }\n        \n        return maxWord;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlzubg2s.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        String max = null;\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value == map.size()) {\n                if (max != null) {\n\
    \                    return max;\n                }\n                max = key;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp309tx37p.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.keySet().stream().findFirst().get().getKey();\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyah_69e4.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpyah_69e4.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpyah_69e4.java:33:\
    \ error: cannot find symbol\n        return map.keySet().stream().findFirst().get().getKey();\n\
    \                                                      ^\n  symbol:   method getKey()\n\
    \  location: class String\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjttpet4.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8q_8a8se.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count);\n                        ^\n/tmp/tmp8q_8a8se.java:27:\
    \ error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<Map.Entry<String, Integer>> set\
    \ = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n   \
    \     for (Map.Entry<String, Integer> entry : set) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzo3wm43u.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        \n        Set<String> keys = map.keySet();\n        \n   \
    \     for(String key : keys) {\n            if(map.get(key) > map.get(keys.get(1)))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptcmi4b_y.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count);\n                        ^\n/tmp/tmptcmi4b_y.java:31:\
    \ error: cannot find symbol\n            if(map.get(key) > map.get(keys.get(1)))\
    \ {\n                                          ^\n  symbol:   method get(int)\n\
    \  location: variable keys of type Set<String>\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        int maxCount\
    \ = keySet.size();\n        for (String word : keySet) {\n            if (map.get(word)\
    \ > maxCount) {\n                maxCount = map.get(word);\n            }\n  \
    \      }\n        return keySet.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ax_aknh.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp_ax_aknh.java:37: error: cannot find symbol\n\
    \        return keySet.get(0);\n                     ^\n  symbol:   method get(int)\n\
    \  location: variable keySet of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        \n        Map.Entry<String, Integer>\
    \ maxEntry = null;\n        \n        for(Map.Entry<String, Integer> entry : set)\
    \ {\n            if(maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        \n \
    \       return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3e4czy0.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpv3e4czy0.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprwu29xjs.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmprwu29xjs.java:27: error: no suitable method\
    \ found for max(Set<Entry<String,Integer>>)\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n                                     \
    \                    ^\n    method Collections.<T#1>max(Collection<? extends T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       lower bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Collections.sort(keys);\n        String maxKey\
    \ = keys.get(0);\n        int maxCount = map.get(maxKey);\n        for (String\
    \ key : keys) {\n            if (map.get(key) == maxCount) {\n               \
    \ maxKey = key;\n                maxCount = map.get(key);\n            }\n   \
    \     }\n        return maxKey;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ym28o6d.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp8ym28o6d.java:27: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keys);\n             \
    \      ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n    \
    \  (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp8ym28o6d.java:28: error: cannot find symbol\n        String\
    \ maxKey = keys.get(0);\n                            ^\n  symbol:   method get(int)\n\
    \  location: variable keys of type Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        Set<String>\
    \ result = new TreeSet<>();\n        for (String key : keySet) {\n           \
    \ int count = map.get(key);\n            if (count > 1) {\n                result.add(key);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.iterator().next();\n        }\n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpopkjeuc3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        String max = null;\n        while (iterator.hasNext()) {\n          \
    \  String key = iterator.next();\n            int value = map.get(key);\n    \
    \        if (value == map.get(max)) {\n                max = key;\n          \
    \  }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc_0vgetz.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().orElse(\"\
    \");\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk4sma5ad.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpk4sma5ad.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n  \
    \      return keySet.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlfhuaip.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmptlfhuaip.java:30: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keySet);\n           \
    \        ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n  \
    \    (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n     \
    \   return words.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbcircs6s.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        \n        Map.Entry<String, Integer>\
    \ maxEntry = set.stream().max(Comparator.comparing(Map.Entry::getValue)).get();\n\
    \        \n        return maxEntry.getKey();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_i4ut89y.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keys\
    \ = map.keySet();\n        \n        Optional<String> maxKey = keys.stream().max(Comparator.comparingInt(String::length));\n\
    \        \n        if(maxKey.isPresent()) {\n            return maxKey.get();\n\
    \        }\n        \n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmwc4zyxm.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Integer maxCount = keySet.isEmpty() ? null :\
    \ Collections.max(keySet);\n        String maxWord = maxCount == null ? \"\" :\
    \ maxCount.toString();\n        for (String word : keySet) {\n            if (maxCount\
    \ == null || maxCount < map.get(word)) {\n                maxCount = map.get(word);\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz3cehu90.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpz3cehu90.java:27: error: incompatible types:\
    \ bad type in conditional expression\n        Integer maxCount = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n                                        \
    \                            ^\n    inference variable T has incompatible bounds\n\
    \      lower bounds: Integer,String,Object,Comparable<? super T>\n      lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object,Comparable<?\
    \ super T> declared in method <T>max(Collection<? extends T>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keys = map.keySet();\n        \n        Optional<String> maxKey\
    \ = keys.stream().max(Comparator.comparing(s -> map.get(s)));\n        \n    \
    \    if (maxKey.isPresent()) {\n            return maxKey.get();\n        } else\
    \ {\n            return \"\";\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhrrm25g.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Set<String> result = new HashSet<>();\n        for (String\
    \ key : keys) {\n            int count = map.get(key);\n            if (count\
    \ > result.size()) {\n                result.add(key);\n            }\n      \
    \  }\n        if (result.size() == 1) {\n            return result.get(0);\n \
    \       }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppo9rkzzf.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmppo9rkzzf.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n/tmp/tmppo9rkzzf.java:38:\
    \ error: cannot find symbol\n            return result.get(0);\n             \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new HashSet<>();\n\
    \        for (String key : keySet) {\n            int count = map.get(key);\n\
    \            if (count > result.size()) {\n                result.clear();\n \
    \               result.add(key);\n            } else if (count == result.size())\
    \ {\n                result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.iterator().next();\n        }\n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3dsu2qnt.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            map.put(word, count);\n        }\n   \
    \     \n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n \
    \       Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        \n        for(Map.Entry<String, Integer> entry : entrySet) {\n      \
    \      if(entry.getValue() == maxEntry.getValue()) {\n                return entry.getKey();\n\
    \            }\n        }\n        \n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vnh7y9z.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        int maxCount = keys.size();\n        for (String key : keys)\
    \ {\n            if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return keys.get(0);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpar9f2rbf.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpar9f2rbf.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n/tmp/tmpar9f2rbf.java:36:\
    \ error: cannot find symbol\n        return keys.get(0);\n                   ^\n\
    \  symbol:   method get(int)\n  location: variable keys of type Set<String>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n      \
    \  Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2kv8olc.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpf2kv8olc.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n     \
    \   return words.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp28dshs53.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                int count1 = map.get(o1);\n                int count2\
    \ = map.get(o2);\n                if (count1 == count2) {\n                  \
    \  return o1.compareTo(o2);\n                } else {\n                    return\
    \ count1 - count2;\n                }\n            }\n        });\n        return\
    \ words.get(0);\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2vbyf_3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n\
    \        \n        Iterator<String> iterator = keySet.iterator();\n        \n\
    \        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            \n            if (value ==\
    \ 1) {\n                return key;\n            }\n        }\n        \n    \
    \    return \"\";\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1lvn1_l.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<String, Integer> entry : set)\
    \ {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpff7y2adh.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keys\
    \ = map.keySet();\n        \n        if(keys.size() == 1) {\n            return\
    \ keys.get(0);\n        }\n        \n        int maxCount = keys.size();\n   \
    \     \n        for(String key : keys) {\n            int count = map.get(key);\n\
    \            if(count > maxCount) {\n                maxCount = count;\n     \
    \       }\n        }\n        \n        for(String key : keys) {\n           \
    \ int count = map.get(key);\n            if(count == maxCount) {\n           \
    \     return key;\n            }\n        }\n        \n        return \"\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptezxcm2k.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmptezxcm2k.java:26:\
    \ error: cannot find symbol\n            return keys.get(0);\n               \
    \        ^\n  symbol:   method get(int)\n  location: variable keys of type Set<String>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Integer maxCount = Collections.max(map.values());\n        Iterator<String>\
    \ it = map.keySet().iterator();\n        while (it.hasNext()) {\n            String\
    \ key = it.next();\n            if (maxCount == map.get(key)) {\n            \
    \    return key;\n            }\n        }\n        return \"\";\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy2kfokw.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        Integer maxCount = null;\n        String maxWord = null;\n        while\
    \ (iterator.hasNext()) {\n            String word = iterator.next();\n       \
    \     int count = map.get(word);\n            if (maxCount == null || count >\
    \ maxCount) {\n                maxCount = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5125xpvp.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            if(count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     List<String> result = new ArrayList<>();\n        for(String word : map.keySet())\
    \ {\n            if(map.get(word) == map.get(word).max()) {\n                result.add(word);\n\
    \            }\n        }\n        \n        if(result.size() == 1) {\n      \
    \      return result.get(0);\n        } else {\n            return \"\";\n   \
    \     }\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95cd70eh.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp95cd70eh.java:29: error: method max in\
    \ class Integer cannot be applied to given types;\n            if(map.get(word)\
    \ == map.get(word).max()) {\n                                             ^\n\
    \  required: int,int\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        Iterator<String> iterator = keys.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key).equals(map.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dgzfz4f.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        Map.Entry<String, Integer> maxEntry\
    \ = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n       \
    \ return maxEntry.getKey();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxxfnriue.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpxxfnriue.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keys\
    \ = map.keySet();\n        if(keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        \n        Set<String> result = new HashSet<>();\n        for(String\
    \ key : keys) {\n            int count = map.get(key);\n            if(count >\
    \ result.size()) {\n                result.clear();\n                result.add(key);\n\
    \            }\n            else if(count == result.size()) {\n              \
    \  result.add(key);\n            }\n        }\n        \n        if(result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        \n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6nxxtvls.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp6nxxtvls.java:25:\
    \ error: cannot find symbol\n            return keys.get(0);\n               \
    \        ^\n  symbol:   method get(int)\n  location: variable keys of type Set<String>\n\
    /tmp/tmp6nxxtvls.java:41: error: cannot find symbol\n            return result.get(0);\n\
    \                         ^\n  symbol:   method get(int)\n  location: variable\
    \ result of type Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8bikmb0.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpc8bikmb0.java:33: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ Iterator<String> iterator = keySet.iterator();\n        String max = null;\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key) > map.get(max)) {\n                max = key;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpolpfm4cg.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new TreeSet<>();\n\
    \        for (String key : keySet) {\n            int count = map.get(key);\n\
    \            if (count > 1) {\n                result.add(key);\n            }\n\
    \        }\n        if (result.size() == 1) {\n            return result.iterator().next();\n\
    \        }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4yzjvzkk.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n        return result.isEmpty() ? \"\" : result.get(0);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzr9gbwg8.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpzr9gbwg8.java:27: error: cannot find symbol\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n              ^\n\
    \  symbol:   method sort(Comparator<Object>)\n  location: variable result of type\
    \ Collection<String>\n/tmp/tmpzr9gbwg8.java:28: error: cannot find symbol\n  \
    \      return result.isEmpty() ? \"\" : result.get(0);\n                     \
    \                        ^\n  symbol:   method get(int)\n  location: variable\
    \ result of type Collection<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        int maxCount\
    \ = 0;\n        String maxWord = \"\";\n        for (String word : keySet) {\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp02kry6k8.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzp63t0aw.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return \"\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8bb37std.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp8bb37std.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n  \
    \      return keySet.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_qiix70q.java:26: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(keySet);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        if (keySet.size()\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        \n\
    \        List<String> sortedKeys = new ArrayList<>(keySet);\n        Collections.sort(sortedKeys);\n\
    \        \n        return sortedKeys.iterator().next();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplixdgj2g.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n        \n   \
    \     if(maxEntry.getValue() == 1) {\n            return maxEntry.getKey();\n\
    \        }\n        \n        for(Map.Entry<String, Integer> entry : entrySet)\
    \ {\n            if(entry.getValue() == maxEntry.getValue()) {\n             \
    \   return entry.getKey();\n            }\n        }\n        \n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7406n8i.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        String max = null;\n        while (iterator.hasNext()) {\n          \
    \  String key = iterator.next();\n            int value = map.get(key);\n    \
    \        if (max != null && value > map.get(max)) {\n                max = key;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx1spz7_h.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        for(String word\
    \ : map.keySet()) {\n            if(map.get(word) == words.stream().filter(w ->\
    \ w.equals(word)).count()) {\n                return word;\n            }\n  \
    \      }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfrjeros5.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3v8t61t.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key).equals(Collections.max(map.values()))) {\n     \
    \           return key;\n            }\n        }\n        return \"\";\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnke3xm8l.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() == words.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2sy7rqd.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpd2sy7rqd.java:39: error: incompatible types: Collection<String> cannot\
    \ be converted to ArrayList<String>\n            return findMax(result);\n   \
    \                        ^\n/tmp/tmpd2sy7rqd.java:41: error: cannot find symbol\n\
    \            return result.get(0);\n                         ^\n  symbol:   method\
    \ get(int)\n  location: variable result of type Collection<String>\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Set<String> keys = map.keySet();\n        if (keys.size() == 1) {\n        \
    \    return keys.get(0);\n        }\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ keys.get(0);\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjy7yuwgn.java:28: error: cannot find symbol\n            return\
    \ keys.get(0);\n                       ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n/tmp/tmpjy7yuwgn.java:30: error: no suitable\
    \ method found for sort(Set<String>,<anonymous Comparator<String>>)\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpjy7yuwgn.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        \n        List<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rbh7maw.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<String, Integer> entry : set)\
    \ {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggwyghq1.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, count);\n          \
    \      }\n            }\n        }\n        Collections.sort(words, Comparator.comparing(s\
    \ -> map.get(s)));\n        return words.get(0);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8f44izqm.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, count);\n                        \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fhdj0jv.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new TreeSet<>();\n\
    \        for (String key : keySet) {\n            Integer count = map.get(key);\n\
    \            if (count != null) {\n                result.add(key + \": \" + count);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.iterator().next();\n        }\n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x4rgxbt.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() > 1) {\n\
    \            String maxKey = keySet.toArray()[0];\n            for (String key\
    \ : keySet) {\n                if (map.get(key) > map.get(maxKey)) {\n       \
    \             maxKey = key;\n                }\n            }\n            return\
    \ maxKey;\n        } else {\n            return keySet.toArray()[0];\n       \
    \ }\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_es5x2s.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmps_es5x2s.java:29: error: incompatible types:\
    \ Object cannot be converted to String\n            String maxKey = keySet.toArray()[0];\n\
    \                                            ^\n/tmp/tmps_es5x2s.java:37: error:\
    \ incompatible types: Object cannot be converted to String\n            return\
    \ keySet.toArray()[0];\n                                   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word: words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Optional<String> maxKey = keySet.stream().max(Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        if(maxKey.isPresent()) {\n            return\
    \ maxKey.get();\n        }\n        \n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7m956s7n.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        return map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplinoi6vc.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<Map.Entry<String, Integer>> set\
    \ = map.entrySet();\n        Iterator<Map.Entry<String, Integer>> iterator = set.iterator();\n\
    \        Map.Entry<String, Integer> entry = iterator.next();\n        while (iterator.hasNext())\
    \ {\n            entry = iterator.next();\n            if (entry.getValue() >\
    \ entry.getKey().length()) {\n                return entry.getKey();\n       \
    \     }\n        }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1ar3jib.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.values().stream().findFirst().orElse(\"\");\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnnvid3k.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmphnnvid3k.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmphnnvid3k.java:32:\
    \ error: incompatible types: String cannot be converted to Integer\n        return\
    \ map.values().stream().findFirst().orElse(\"\");\n                          \
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        Iterator<String> iterator = keys.iterator();\n\
    \        String max = null;\n        while (iterator.hasNext()) {\n          \
    \  String key = iterator.next();\n            int count = map.get(key);\n    \
    \        if (count > map.get(max)) {\n                max = key;\n           \
    \ }\n        }\n        return max;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezeeyn9w.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfc1q6t5u.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (String word : map.keySet()) {\n            if (map.get(word) ==\
    \ map.size()) {\n                result.add(word);\n            }\n        }\n\
    \        if (result.size() == 0) {\n            return \"\";\n        }\n    \
    \    if (result.size() > 1) {\n            return findMax(result);\n        }\n\
    \        return result.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40dye9l6.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp40dye9l6.java:35: error: incompatible types:\
    \ Collection<String> cannot be converted to ArrayList<String>\n            return\
    \ findMax(result);\n                           ^\n/tmp/tmp40dye9l6.java:37: error:\
    \ cannot find symbol\n        return result.get(0);\n                     ^\n\
    \  symbol:   method get(int)\n  location: variable result of type Collection<String>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        if(keys.size() == 1) {\n            return keys.get(0);\n \
    \       }\n        \n        Collections.sort(keys, new Comparator<String>() {\n\
    \            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        \n\
    \        return keys.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmp8lpzbn.java:26: error: cannot find symbol\n            return\
    \ keys.get(0);\n                       ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n/tmp/tmpmp8lpzbn.java:29: error: no suitable\
    \ method found for sort(Set<String>,<anonymous Comparator<String>>)\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpmp8lpzbn.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfgvo4pvd.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprz1ib_en.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o2) - map.get(o1);\n            }\n        });\n        return words.get(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpifv08uzw.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      String max = null;\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            int value = map.get(key);\n            if\
    \ (value == map.size()) {\n                max = key;\n            } else if (value\
    \ > map.size()) {\n                max = key;\n            }\n        }\n    \
    \    return max;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpchi2nyl1.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        \n        for(Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if(entry.getValue() == words.size())\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  \n        return \"\";\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnfes033.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmpdnfes033.java:23:\
    \ error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Object>)\n\
    \        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpdnfes033.java:23:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                              \
    \                               ^\n    (argument mismatch; invalid method reference\n\
    \      method getValue in interface Entry<K,V> cannot be applied to given types\n\
    \        required: no arguments\n        found:    Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,K,V are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    K extends Object declared in interface Entry\n  \
    \  V extends Object declared in interface Entry\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ + 1 : 1;\n            map.put(word, count);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        if (iterator.hasNext()) {\n            String maxKey = iterator.next();\n\
    \            int maxValue = map.get(maxKey);\n            for (String key : keySet)\
    \ {\n                if (map.get(key) > maxValue) {\n                    maxKey\
    \ = key;\n                    maxValue = map.get(key);\n                }\n  \
    \          }\n            return maxKey;\n        } else {\n            return\
    \ \"\";\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zq04un6.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            map.put(word, count + 1);\n        }\n      \
    \  Collection<String> maxWords = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\
    \        if (maxWords.size() > 1) {\n            return maxWords.get(0);\n   \
    \     }\n        return \"\";\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvkcxi92.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpkvkcxi92.java:34: error: cannot find symbol\n            return maxWords.get(0);\n\
    \                           ^\n  symbol:   method get(int)\n  location: variable\
    \ maxWords of type Collection<String>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o2) - map.get(o1);\n\
    \            }\n        });\n        return words.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawrjdevs.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new TreeSet<>();\n\
    \        for (String key : keySet) {\n            int count = map.get(key);\n\
    \            if (count > result.size()) {\n                result.add(key);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.iterator().next();\n        }\n        return \"\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptkdn4rsf.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? \"\" : result.get(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxt9e9sk9.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpxt9e9sk9.java:33: error: no suitable method found for sort(Collection<String>)\n\
    \        Collections.sort(result);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Collection<String> cannot be converted to List<T#1>))\n    method\
    \ Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpxt9e9sk9.java:34:\
    \ error: cannot find symbol\n        return result.isEmpty() ? \"\" : result.get(0);\n\
    \                                             ^\n  symbol:   method get(int)\n\
    \  location: variable result of type Collection<String>\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : entrySet) {\n     \
    \       if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n  \
    \              maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0jqsxbef.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            if(count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      \n        Set<String> keySet = map.keySet();\n        \n        Iterator<String>\
    \ iterator = keySet.iterator();\n        \n        while(iterator.hasNext()) {\n\
    \            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if(value > 1) {\n                iterator.remove();\n           \
    \ }\n        }\n        \n        Iterator<String> iterator = keySet.iterator();\n\
    \        \n        while(iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if(value == 1) {\n       \
    \         return key;\n            }\n        }\n        \n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpldzwm0wm.java:20: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpldzwm0wm.java:40: error: variable iterator\
    \ is already defined in method findMax(ArrayList<String>)\n        Iterator<String>\
    \ iterator = keySet.iterator();\n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Set<String> result = new TreeSet<>();\n        for (String\
    \ key : keys) {\n            if (map.get(key).equals(keys.size())) {\n       \
    \         result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return \"\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnsmt8kbe.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpnsmt8kbe.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n/tmp/tmpnsmt8kbe.java:37:\
    \ error: cannot find symbol\n            return result.get(0);\n             \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        \n        Set<String>\
    \ keySet = map.keySet();\n        \n        Integer maxValue = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n        \n        if (maxValue != null) {\n\
    \            String maxKey = maxValue.toString();\n            \n            String\
    \ result = \"\";\n            \n            for (String word : words) {\n    \
    \            if (word.equals(maxKey)) {\n                    result = word;\n\
    \                    break;\n                }\n            }\n            \n\
    \            return result;\n        }\n        \n        return \"\";\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_83otdlk.java:25: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        for (String key : keySet) {\n         \
    \   if (map.get(key) > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = map.get(key);\n            }\n        }\n        return maxKey;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn2cd2g5z.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        Collections.sort(keys);\n        return keys.get(0);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf79cpnym.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpf79cpnym.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Collection<String>\n/tmp/tmpf79cpnym.java:30:\
    \ error: no suitable method found for sort(Collection<String>)\n        Collections.sort(keys);\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Collection<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpf79cpnym.java:31: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Collection<String>\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(b).compareTo(map.get(a)));\n        return words.get(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_w9bapg9.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Collections.sort(words);\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                return\
    \ word;\n            }\n            if (count > map.size()) {\n              \
    \  return word;\n            }\n        }\n        return \"\";\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzmkfbfm_.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keys = map.keySet();\n        if (keys.size() == 1) {\n   \
    \         return keys.get(0);\n        }\n        int maxCount = 1;\n        String\
    \ maxWord = \"\";\n        for (String key : keys) {\n            if (map.get(key)\
    \ > maxCount) {\n                maxCount = map.get(key);\n                maxWord\
    \ = key;\n            }\n        }\n        return maxWord;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwcyl6iu.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpgwcyl6iu.java:29: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        List<String> result\
    \ = new ArrayList<>();\n        for(String word : map.keySet()) {\n          \
    \  int count = map.get(word);\n            if(count == map.size()) {\n       \
    \         result.add(word);\n            }\n        }\n        \n        if(result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        \n        Collections.sort(result);\n\
    \        \n        return result.size() == 1 ? result.get(0) : \"\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvd747dfy.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        \n        Set<String>\
    \ keySet = map.keySet();\n        \n        Integer maxValue = keySet.isEmpty()\
    \ ? null : keySet.stream().max(Comparator.comparingInt(Integer::intValue)).get();\n\
    \        \n        return maxValue == null ? \"\" : maxValue.equals(map.get(maxValue))\
    \ ? \"\" : maxValue;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5kw53la5.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        Integer maxValue = keySet.isEmpty() ? null\
    \ : keySet.stream().max(Comparator.comparingInt(Integer::intValue)).get();\n \
    \                                                                   ^\n    lower\
    \ bounds: Integer,Object\n    lower bounds: String\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>comparingInt(ToIntFunction<? super\
    \ T>)\n/tmp/tmp5kw53la5.java:27: error: incompatible types: bad type in conditional\
    \ expression\n        return maxValue == null ? \"\" : maxValue.equals(map.get(maxValue))\
    \ ? \"\" : maxValue;\n                                                       \
    \                          ^\n    bad type in conditional expression\n      Integer\
    \ cannot be converted to String\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        int maxCount\
    \ = keySet.size();\n        for (String key : keySet) {\n            if (map.get(key)\
    \ > maxCount) {\n                maxCount = map.get(key);\n            }\n   \
    \     }\n        return keySet.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0xcs4ag.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpb0xcs4ag.java:37: error: cannot find symbol\n\
    \        return keySet.get(0);\n                     ^\n  symbol:   method get(int)\n\
    \  location: variable keySet of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n  \
    \      return keySet.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnh11nwp9.java:26: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(keySet);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpnh11nwp9.java:27: error: cannot find symbol\n        return\
    \ keySet.get(0);\n                     ^\n  symbol:   method get(int)\n  location:\
    \ variable keySet of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : entrySet) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppq3tg3iu.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmppq3tg3iu.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            int value = map.get(key);\n            if (value > map.get(iterator.next()))\
    \ {\n                return key;\n            }\n        }\n        return \"\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmploxcpysb.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) ==\
    \ map.size()) {\n                return key;\n            }\n        }\n     \
    \   return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcdn13q9z.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                count += map.getOrDefault(String.valueOf(c), 0);\n      \
    \          map.put(String.valueOf(c), count + 1);\n            }\n        }\n\
    \        Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        Collections.sort(keySet);\n\
    \        return keySet.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpareai7j6.java:29: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(keySet);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            int count = map.get(key);\n  \
    \          if (count > maxCount) {\n                maxKey = key;\n          \
    \      maxCount = count;\n            }\n        }\n        return maxKey;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpafh3jt2j.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words);\n        for (String\
    \ word : words) {\n            if (map.get(word) == words.size()) {\n        \
    \        return word;\n            }\n        }\n        return \"\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6uk4zq3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keySet = map.keySet();\n        \n        Iterator<String> iterator\
    \ = keySet.iterator();\n        \n        while(iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > 1) {\n                return key;\n            }\n  \
    \      }\n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6gqfe7vy.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Collection<String> keys = map.keySet();\n        if (keys.size() == 1) {\n \
    \           return keys.get(0);\n        }\n        Collections.sort(keys, Comparator.comparing(s\
    \ -> map.get(s)));\n        return keys.get(0);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj3wd_kys.java:28: error: cannot find symbol\n            return\
    \ keys.get(0);\n                       ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Collection<String>\n/tmp/tmpj3wd_kys.java:30: error: no\
    \ suitable method found for sort(Collection<String>,Comparator<Object>)\n    \
    \    Collections.sort(keys, Comparator.comparing(s -> map.get(s)));\n        \
    \           ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Collection<String> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpj3wd_kys.java:31:\
    \ error: cannot find symbol\n        return keys.get(0);\n                   ^\n\
    \  symbol:   method get(int)\n  location: variable keys of type Collection<String>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n     \
    \   return words.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7wfadcy.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words, Comparator.comparing(s -> map.get(s)));\n     \
    \   return words.get(0);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31jm90qc.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        List<String> result = new ArrayList<>();\n        for (String\
    \ key : keys) {\n            if (map.get(key) == map.get(keys.get(1))) {\n   \
    \             result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return \"\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bycy02m.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp7bycy02m.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n/tmp/tmp7bycy02m.java:32:\
    \ error: cannot find symbol\n            if (map.get(key) == map.get(keys.get(1)))\
    \ {\n                                            ^\n  symbol:   method get(int)\n\
    \  location: variable keys of type Set<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return \"\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwcolygr.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpfwcolygr.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Integer maxValue = Collections.max(map.values());\n        String maxKey = null;\n\
    \        for (String key : map.keySet()) {\n            if (maxValue == map.get(key))\
    \ {\n                maxKey = key;\n            }\n        }\n        return maxKey;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjm3r8o0n.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25bd9rex.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp25bd9rex.java:23:\
    \ error: no suitable method found for max(Set<Entry<String,Integer>>)\n      \
    \  Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n         \
    \                                                ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmd0m7eia.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpmd0m7eia.java:33: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return \"\";\n            }\n        }\n\
    \        return map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgw7k36gf.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpgw7k36gf.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word: words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(a) > map.get(b) ? 1 : -1);\n        return words.get(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp600lfw20.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        \n   \
    \     Set<String> keys = map.keySet();\n        if (keys.size() > 0) {\n     \
    \       String maxKey = keys.iterator().next();\n            for (String key :\
    \ keys) {\n                if (map.get(key) > map.get(maxKey)) {\n           \
    \         maxKey = key;\n                }\n            }\n            return\
    \ maxKey;\n        } else {\n            return \"\";\n        }\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbatni1w5.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 0;\n            }\n            map.put(word,\
    \ count + 1);\n        }\n        Collections.sort(words);\n        String maxWord\
    \ = words.get(0);\n        for (String word : words) {\n            if (map.get(word)\
    \ > map.get(maxWord)) {\n                maxWord = word;\n            }\n    \
    \    }\n        return maxWord;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8bwrl88y.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        Iterator<String> iterator =\
    \ keySet.iterator();\n        while (iterator.hasNext()) {\n            String\
    \ key = iterator.next();\n            if (map.get(key) == keySet.size()) {\n \
    \               return key;\n            }\n        }\n        return \"\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaks13gtj.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        int maxCount = keySet.size();\n\
    \        for (String word : keySet) {\n            if (map.get(word) == maxCount)\
    \ {\n                return word;\n            }\n        }\n        return \"\
    \";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_6k6wird.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Iterator<String> iterator = keySet.iterator();\n\
    \        int maxCount = 1;\n        String maxWord = null;\n        while (iterator.hasNext())\
    \ {\n            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0c7c331e.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        String maxWord = maxValue == null ? \"\" : maxValue.toString();\n   \
    \     for(String word : words) {\n            int count = map.get(word);\n   \
    \         if(count != maxValue) {\n                maxValue = count;\n       \
    \         maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4kf9jo9i.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp4kf9jo9i.java:23:\
    \ error: incompatible types: bad type in conditional expression\n        Integer\
    \ maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n            \
    \                                                        ^\n    inference variable\
    \ T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        List<String> sortedKeys = new\
    \ ArrayList<>(keySet);\n        Collections.sort(sortedKeys);\n        return\
    \ sortedKeys.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaoueciow.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n        return maxEntry.getKey();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17rdn45l.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp17rdn45l.java:28: error: no suitable method\
    \ found for max(Set<Entry<String,Integer>>)\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n                                     \
    \                    ^\n    method Collections.<T#1>max(Collection<? extends T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       lower bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new TreeSet<>();\n\
    \        for (String key : keySet) {\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                result.add(key);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.iterator().next();\n        }\n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmx49da10.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ \n        Set<String> keySet = map.keySet();\n        if (keySet.size() == 1)\
    \ {\n            return keySet.iterator().next();\n        }\n        \n     \
    \   List<String> sortedKeys = new ArrayList<>(keySet);\n        Collections.sort(sortedKeys);\n\
    \        \n        int maxCount = 0;\n        String maxWord = \"\";\n       \
    \ for (String word : sortedKeys) {\n            int count = map.get(word);\n \
    \           if (count > maxCount) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4r96pha2.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        int maxCount = keys.size();\n        String maxWord\
    \ = \"\";\n        for (String key : keys) {\n            if (map.get(key) ==\
    \ maxCount) {\n                maxWord = key;\n            }\n        }\n    \
    \    return maxWord;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygpyzjb3.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Integer maxValue = keySet.isEmpty() ? null\
    \ : Collections.max(keySet);\n        \n        for(String word : keySet) {\n\
    \            if(maxValue == null || maxValue < map.get(word)) {\n            \
    \    maxValue = map.get(word);\n            }\n        }\n        \n        return\
    \ maxValue == null ? \"\" : maxValue.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4c21189k.java:20: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp4c21189k.java:25:\
    \ error: incompatible types: bad type in conditional expression\n        Integer\
    \ maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n            \
    \                                                        ^\n    inference variable\
    \ T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                }\n                map.put(c, count);\n            }\n\
    \        }\n        \n        List<String> result = new ArrayList<>();\n     \
    \   for(String word : words) {\n            int maxCount = -1;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              if(maxCount < map.get(c)) {\n                        maxCount =\
    \ map.get(c);\n                    }\n                }\n            }\n     \
    \       if(maxCount > -1) {\n                result.add(word);\n            }\n\
    \        }\n        \n        if(result.size() > 1) {\n            return result.get(0);\n\
    \        }\n        \n        return \"\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0a6fou8u.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, count);\n                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      \n        Set<String> uniqueWords = new HashSet<>();\n        for (String\
    \ word : map.keySet()) {\n            uniqueWords.add(word);\n        }\n    \
    \    \n        Collections.sort(uniqueWords);\n        \n        return uniqueWords.isEmpty()\
    \ ? \"\" : uniqueWords.iterator().next();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx28pguwt.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpx28pguwt.java:33: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(uniqueWords);\n      \
    \             ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Set<String> keySet = map.keySet();\n        if (keySet.size() == 1) {\n\
    \            return keySet.iterator().next();\n        }\n        int maxCount\
    \ = keySet.size();\n        for (String word : keySet) {\n            if (map.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     return \"\";\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbta6hrn.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? \"\" : result.get(0);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7j7aspj.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpb7j7aspj.java:27: error: no suitable method\
    \ found for sort(Collection<String>)\n        Collections.sort(result);\n    \
    \               ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Collection<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpb7j7aspj.java:28: error: cannot find symbol\n        return\
    \ result.isEmpty() ? \"\" : result.get(0);\n                                 \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Collection<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            Integer count = map.get(word);\n            if\
    \ (count == null) {\n                map.put(word, 1);\n            } else {\n\
    \                map.put(word, count + 1);\n            }\n        }\n       \
    \ Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zmt2myh.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(map.entrySet());\n        Map.Entry<String, Integer> maxEntry\
    \ = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n       \
    \ return maxEntry.getKey();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcfe6hkh.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpjcfe6hkh.java:27: error: no suitable method\
    \ found for sort(Set<Entry<String,Integer>>)\n        Collections.sort(map.entrySet());\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<Entry<String,Integer>>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        iterator.next();\n\
    \        String maxKey = iterator.next();\n        int maxCount = map.get(maxKey);\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key) > maxCount) {\n                maxKey = key;\n \
    \               maxCount = map.get(key);\n            }\n        }\n        return\
    \ maxKey;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbt9rx6p.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        int maxCount = keySet.size();\n        while (iterator.hasNext()) {\n\
    \            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \        }\n        }\n        if (maxCount == 0) {\n            return \"\";\n\
    \        }\n        Iterator<String> iterator = keySet.iterator();\n        while\
    \ (iterator.hasNext()) {\n            String key = iterator.next();\n        \
    \    int count = map.get(key);\n            if (count > maxCount) {\n        \
    \        return key;\n            }\n        }\n        return \"\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqvt_dgp.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpxqvt_dgp.java:39: error: variable iterator\
    \ is already defined in method findMax(ArrayList<String>)\n        Iterator<String>\
    \ iterator = keySet.iterator();\n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        if (keySet.size() == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> result = new HashSet<>();\n\
    \        for (String word : keySet) {\n            int count = map.get(word);\n\
    \            if (count > result.size()) {\n                result.clear();\n \
    \               result.add(word);\n            } else if (count == result.size())\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.iterator().next();\n        }\n        return\
    \ \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fqdr2bs.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.containsKey(word) ? map.get(word)\
    \ : 0;\n            map.put(word, count + 1);\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            String key = iterator.next();\n\
    \            if (map.get(key).equals(keySet.size())) {\n                return\
    \ key;\n            }\n        }\n        return \"\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qc8ltpv.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        int maxCount = keys.size();\n        String maxWord = \"\"\
    ;\n        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxWord = key;\n            }\n        }\n        return\
    \ maxWord;\n\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp56g1w5wj.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp56g1w5wj.java:28: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Set<String>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<String> keys = map.keySet();\n\
    \        if (keys.size() > 1) {\n            String maxKey = keys.stream().max(Comparator.comparing(k\
    \ -> map.get(k))).get();\n            return maxKey;\n        } else {\n     \
    \       return keys.get(0);\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgj2wl6kt.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpgj2wl6kt.java:37: error: cannot find symbol\n            return keys.get(0);\n\
    \                       ^\n  symbol:   method get(int)\n  location: variable keys\
    \ of type Collection<String>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(a).compareTo(map.get(b)));\n        return words.get(0);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7l_7n1j2.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuq7yyuwb.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuq7yyuwb.java:31: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = map.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        }\n  \
    \      Collections.sort(words);\n        String maxWord = words.get(0);\n    \
    \    int maxCount = map.get(maxWord);\n        for (int i = 1; i < words.size();\
    \ i++) {\n            String word = words.get(i);\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9x1i6ro1.java:20: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                char c = word.charAt(i);\n          \
    \      if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvfqpy2x_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpvfqpy2x_.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#1>))\n  \
    \  method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String>\
    \ words) {\n        Map<String, Integer> map = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            map.put(word,\
    \ count);\n        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().filter(e -> e.getValue() == map.size()).map(Map.Entry::getKey).findFirst().get();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jmzyhv7.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp4jmzyhv7.java:24: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmp4jmzyhv7.java:30: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
