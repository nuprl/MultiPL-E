name: HumanEval_44_change_base
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = result % base;\n        long quotient = result / base;\n       \
    \ long quotient2 = quotient % base;\n        long quotient3 = quotient2 / base;\n\
    \        long quotient4 = quotient3 / base;\n        long quotient5 = quotient4\
    \ / base;\n        long quotient6 = quotient5 / base;\n        long quotient7\
    \ = quotient6 / base;\n        long quotient8 = quotient7 / base;\n        long\
    \ quotient9 = quotient8 / base;\n        long quotient10 = quotient9 / base;\n\
    \        long quotient11 = quotient10 / base;\n        long quotient12 = quotient11\
    \ / base;\n        long quotient13 = quotient12 / base;\n        long quotient14\
    \ = quotient13 / base;\n        long quotient15 = quotient14 / base;\n       \
    \ long quotient16 = quotient15 / base;\n        long quotient17 = quotient16 /\
    \ base;\n        long quotient18 = quotient17 / base;\n        long quotient19\
    \ = quotient18 / base;\n        long quotient20 = quotient19 / base;\n       \
    \ long quotient21 = quotient20 / base;\n        long quotient22 = quotient21 /\
    \ base;\n        long quotient23 = quotient22 / base;\n        long quotient24\
    \ = quotient23 / base;\n        long quotient25 = quotient24 / base;\n       \
    \ long quotient26 = quotient25 / base;\n        long quotient27 = quotient26 /\
    \ base;\n        long quotient28 = quotient27 / base;\n        long quotient29\
    \ = quotient28 / base;\n        long quotient30 = quotient29 / base;\n       \
    \ long quotient31 = quotient30 / base;\n        long quotient32 = quotient31 /\
    \ base;\n        long quotient33 = quotient32 / base;\n        long quotient34\
    \ = quotient33 / base;\n        long quotient35 = quotient34 / base;\n       \
    \ long quotient36 = quotient35 / base;\n        long quotient37 = quotient36 /\
    \ base;\n        long quotient38 = quotient37 / base;\n        long quotient39\
    \ = quotient38 / base;\n        long quotient40 = quoti\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ikecylk.java:60: error: ';' expected\n        long quotient40\
    \ = quoti\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = 0;\n        long quotient = 0;\n        while (quotient != 0) {\n\
    \            quotient = result / base;\n            result = result % base;\n\
    \            remainder = remainder + quotient;\n        }\n        return String.valueOf(remainder);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparu1pp7m.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = 0;\n        long quotient = 0;\n        long temp = 0;\n       \
    \ while (quotient != 0) {\n            quotient = result / base;\n           \
    \ result = result % base;\n            temp = quotient;\n            quotient\
    \ = temp;\n        }\n        if (result == 0) {\n            return String.valueOf(x);\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        while (result\
    \ != 0) {\n            temp = result % base;\n            sb.append(temp);\n \
    \           result = result / base;\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbmnddn3o.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 0;\n        while\
    \ (x > 0) {\n            long digit = x % base;\n            result += digit *\
    \ Math.pow(base, digit);\n            x /= base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxojdaeir.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 0;\n        while (temp > 0) {\n            long remainder = temp %\
    \ base;\n            temp = temp / base;\n            result = result + (remainder\
    \ < 10 ? remainder : String.valueOf(remainder));\n        }\n        return String.valueOf(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxp4tp5i.java:24: error: bad operand types for binary operator\
    \ '+'\n            result = result + (remainder < 10 ? remainder : String.valueOf(remainder));\n\
    \                            ^\n  first type:  long\n  second type: INT#1\n  where\
    \ INT#1,INT#2 are intersection types:\n    INT#1 extends Object,Serializable,Comparable<?\
    \ extends INT#2>,Constable,ConstantDesc\n    INT#2 extends Object,Serializable,Comparable<?>,Constable,ConstantDesc\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        String result = \"\";\n        do {\n            remainder\
    \ = x % base;\n            quotient = x / base;\n            result += String.valueOf(quotient);\n\
    \            x = remainder;\n        } while (x != 0);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp != 0) {\n            long remainder = temp\
    \ % base;\n            temp = temp / base;\n            result = result * base\
    \ + remainder;\n        }\n        return Long.toString(result);\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2gm4k0j.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = 0;\n        while (result > 0) {\n            remainder = result\
    \ % base;\n            result /= base;\n            String s = Long.toString(remainder);\n\
    \            String result = s.substring(0, s.length() - 1) + result;\n      \
    \  }\n        return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64sc1k4x.java:25: error: variable result is already defined in\
    \ method changeBase(long,long)\n            String result = s.substring(0, s.length()\
    \ - 1) + result;\n                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dmlh4_n.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74p0uczt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res = (res * base) + temp\
    \ % base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpug0u01aw.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            long remainder = temp %\
    \ base;\n            temp = temp / base;\n            result = result * base +\
    \ remainder;\n        }\n        return Long.toString(result);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vyebj7z.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy43f37sv.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx87qlc9d.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            long digit = temp % base;\n\
    \            res = (res * base) + digit;\n            temp /= base;\n        }\n\
    \        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpia4zjbob.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long result = 1;\n        while (temp != 0) {\n            temp = temp\
    \ / base;\n            result = result * base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4ay8yf0.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    long temp;\n        temp = x;\n        while (temp > 0) {\n            int\
    \ digit = temp % base;\n            temp = temp / base;\n            result =\
    \ digit + result;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgudv1sm.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = temp % base;\n                   \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n > 0) {\n            long r = n % base;\n            n\
    \ /= base;\n            d *= base;\n            if (r != 0) {\n              \
    \  d += r;\n            }\n        }\n        return Long.toString(d);\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolgwyejc.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        long temp;\n        String result = \"\";\n        do {\n\
    \            quotient = x / base;\n            remainder = x % base;\n       \
    \     temp = quotient;\n            quotient = remainder;\n            remainder\
    \ = temp;\n            result += String.valueOf(quotient);\n            x /= base;\n\
    \        } while (remainder != 0);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmna3s3hh.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res = res * base + (temp\
    \ % base);\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowculojp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n != 0) {\n            long r = n % base;\n           \
    \ n /= base;\n            d *= base;\n            if (r != 0) {\n            \
    \    d += r;\n            }\n        }\n        return Long.toString(d);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9yzsd8r.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 0;\n        long\
    \ remainder;\n        do {\n            remainder = x % base;\n            result\
    \ += (base - remainder) * Math.pow(base, remainder);\n            x /= base;\n\
    \        } while (x != 0);\n        return Long.toString(result);\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyggyfg0.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res = res * base + (temp %\
    \ base);\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobxb8qbj.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        long\
    \ res = 0;\n        while (x > 0) {\n            res = (res * base) + tmp % base;\n\
    \            tmp = tmp / base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 1;\n        while\
    \ (x > 0) {\n            long remainder = x % base;\n            result *= base;\n\
    \            result += remainder;\n            x /= base;\n        }\n       \
    \ return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvo4c7mfu.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        long temp;\n        long result = 0;\n        long baseNum;\n\
    \        long baseNum2;\n        long baseNum3;\n        long baseNum4;\n    \
    \    long baseNum5;\n        long baseNum6;\n        long baseNum7;\n        long\
    \ baseNum8;\n        long baseNum9;\n        long baseNum10;\n        long baseNum11;\n\
    \        long baseNum12;\n        long baseNum13;\n        long baseNum14;\n \
    \       long baseNum15;\n        long baseNum16;\n        long baseNum17;\n  \
    \      long baseNum18;\n        long baseNum19;\n        long baseNum20;\n   \
    \     long baseNum21;\n        long baseNum22;\n        long baseNum23;\n    \
    \    long baseNum24;\n        long baseNum25;\n        long baseNum26;\n     \
    \   long baseNum27;\n        long baseNum28;\n        long baseNum29;\n      \
    \  long baseNum30;\n        long baseNum31;\n        long baseNum32;\n       \
    \ long baseNum33;\n        long baseNum34;\n        long baseNum35;\n        long\
    \ baseNum36;\n        long baseNum37;\n        long baseNum38;\n        long baseNum39;\n\
    \        long baseNum40;\n        long baseNum41;\n        long baseNum42;\n \
    \       long baseNum43;\n        long baseNum44;\n        long baseNum45;\n  \
    \      long baseNum46;\n        long baseNum47;\n        long baseNum48;\n   \
    \     long baseNum49;\n        long baseNum50;\n        long baseNum51;\n    \
    \    long baseNum52;\n        long baseNum53;\n        long baseNum54;\n     \
    \   long baseNum55;\n        long baseNum56;\n        long baseNum57;\n      \
    \  long baseNum58;\n        long baseNum59;\n        long baseNum60;\n       \
    \ long baseNum61;\n        long baseNum62;\n        long baseNum63;\n        long\
    \ baseNum64;\n        long baseNum65;\n        long baseNum66;\n        long baseNum67;\n\
    \        long baseNum68;\n        long baseNum69;\n        long baseNum70;\n \
    \       long baseNum71;\n        long baseNum72;\n        long baseNum73;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0lstcb9.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_9yz1l8j.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long m = 1;\n        while (n > 0) {\n            long tmp = n\
    \ % base;\n            n /= base;\n            r *= base;\n            r += tmp;\n\
    \        }\n        return Long.toString(r);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0iilr7v.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        long r = 1;\n        long p = 0;\n        long q = 0;\n      \
    \  long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n\
    \        long y = 0;\n        long z = 0;\n        long A = 0;\n        long B\
    \ = 0;\n        long C = 0;\n        long D = 0;\n        long E = 0;\n      \
    \  long F = 0;\n        long G = 0;\n        long H = 0;\n        long I = 0;\n\
    \        long J = 0;\n        long K = 0;\n        long L = 0;\n        long M\
    \ = 0;\n        long N = 0;\n        long O = 0;\n        long P = 0;\n      \
    \  long Q = 0;\n        long R = 0;\n        long S = 0;\n        long T = 0;\n\
    \        long U = 0;\n        long V = 0;\n        long W = 0;\n        long X\
    \ = 0;\n        long Y = 0;\n        long Z = 0;\n        long AA = 0;\n     \
    \   long BB = 0;\n        long CC = 0;\n        long DD = 0;\n        long EE\
    \ = 0;\n        long FF = 0;\n        long GG = 0;\n        long HH = 0;\n   \
    \     long II = 0;\n        long JJ = 0;\n        long KK = 0;\n        long LL\
    \ = 0;\n        long MM = 0;\n        long NN = 0;\n        long OO = 0;\n   \
    \     long PP = 0;\n        long QQ = 0;\n        long RR = 0;\n        long SS\
    \ = 0;\n        long TT = 0;\n        long UU = 0;\n        long VV = 0;\n   \
    \     long WW = 0;\n        long XX = 0;\n        long YY = 0;\n        long ZZ\
    \ = 0;\n        long AAA = 0;\n        long BBB = 0;\n        long CCC = 0;\n\
    \        long DDD = 0;\n        long EEE = 0;\n        long FFF = 0;\n       \
    \ long GGG = 0;\n        long HHH = 0;\n        long III = 0;\n        long JJJ\
    \ = 0;\n        long KKK = 0;\n        long LLL = 0;\n        long MMM = 0;\n\
    \        long NNN = 0;\n        long OOO = 0;\n        long PPP = 0;\n       \
    \ long QQQ = 0;\n        long RRR = 0;\n        long SSS = 0;\n        long TTT\
    \ = 0;\n        long UUU = 0;\n        long VVV = 0;\n        long WWW = 0;\n\
    \        long XXX = 0;\n        long YYY = 0;\n        long ZZZ = 0;\n       \
    \ long AAAA = 0;\n        long BBBB = 0;\n        long CCCC = 0;\n        long\
    \ DDDD = 0;\n        long EEEE = 0;\n        long FFFF = 0;\n        long GGGG\
    \ = 0;\n        long HH\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5h1g792.java:115: error: ';' expected\n        long HH\n     \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 0;\n        while (temp > 0) {\n            long digit = temp % base;\n\
    \            result += digit * base;\n            temp /= base;\n        }\n \
    \       return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsixc0bhl.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        long result = 0;\n\
    \        while (temp != 0) {\n            result = result + (temp % base);\n \
    \           temp = temp / base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4i__sq9h.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder = 0;\n      \
    \  long result = 0;\n        while (x > 0) {\n            remainder = x % base;\n\
    \            result += remainder;\n            x /= base;\n        }\n       \
    \ return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61yfwjr4.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String s = Long.toString(x);\n\
    \        StringBuilder sb = new StringBuilder(s.length());\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n           \
    \ if (c >= '0' && c <= '9') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(String.valueOf(base));\n            }\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ljjbdd9.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String s = Long.toString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        long l = Long.parseLong(s);\n\
    \        long r = l / base;\n        long d = l % base;\n        long m = r;\n\
    \        do {\n            String m = Long.toString(r);\n            sb.append(m);\n\
    \            long r = r / base;\n            long d = r % base;\n            long\
    \ m = r;\n        } while (d != 0);\n        return sb.toString();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1hcpgaz.java:26: error: variable m is already defined in method\
    \ changeBase(long,long)\n            String m = Long.toString(r);\n          \
    \         ^\n/tmp/tmpt1hcpgaz.java:28: error: variable r is already defined in\
    \ method changeBase(long,long)\n            long r = r / base;\n             \
    \    ^\n/tmp/tmpt1hcpgaz.java:29: error: variable d is already defined in method\
    \ changeBase(long,long)\n            long d = r % base;\n                 ^\n\
    /tmp/tmpt1hcpgaz.java:30: error: variable m is already defined in method changeBase(long,long)\n\
    \            long m = r;\n                 ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res = res * base + temp %\
    \ base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3bqb0jb.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ temp = 0;\n        long mult = 1;\n        while (x > 0) {\n            temp\
    \ = (x % base);\n            res += temp * mult;\n            mult = mult * base;\n\
    \            x = x / base;\n        }\n        return Long.toString(res);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqjk81240.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    while (x > 0) {\n            int digit = x % base;\n            result +=\
    \ digit;\n            x /= base;\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbz4_51sl.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = x % base;\n                      \
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b3j6ds4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp != 0) {\n            temp = temp / base;\n\
    \            result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ojxti39.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjd39uj10.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8hsi72s.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ div = 1;\n        while (x > 0) {\n            res = (res * base) + x;\n   \
    \         x /= base;\n            div *= base;\n        }\n        return Long.toString(res/div);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5yn2nnp.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2aamch5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        long temp;\n        String result = \"\";\n        quotient\
    \ = x / base;\n        remainder = x % base;\n        temp = quotient;\n     \
    \   while (quotient > 0) {\n            temp = quotient * base + remainder;\n\
    \            remainder = temp % base;\n            quotient = temp / base;\n \
    \           result += String.valueOf(quotient);\n        }\n        result +=\
    \ String.valueOf(remainder);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp * base;\n        temp = temp / base;\n        temp = temp\
    \ % base;\n        return Long.toString(temp);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi37t_bl5.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv69xahd1.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp -= result / base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhb0d_6v.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkxh8ea5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuboaocky.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0sg80ckz.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long temp85;\n        long temp86;\n        long temp87;\n\
    \        long temp88;\n        long temp89\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsubb8qrr.java:107: error: ';' expected\n        long temp89\n \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res += (temp % base);\n  \
    \          temp /= base;\n        }\n        return Long.toString(res);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u9j9ht3.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res += (temp % base);\n  \
    \          temp /= base;\n        }\n        return Long.toString(res);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxrwsq77.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiosvr281.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        long\
    \ res = 0;\n        while (x > 0) {\n            tmp = x / base;\n           \
    \ res = res * base + tmp;\n            x = tmp;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtmh4yov.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long result = 0;\n        while (temp > 0) {\n            long rem =\
    \ temp % base;\n            result += rem;\n            temp /= base;\n      \
    \  }\n        return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp10d29wya.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        String result = \"\";\n        while (x > 0) {\n        \
    \    remainder = x % base;\n            quotient = x / base;\n            result\
    \ += String.valueOf(quotient);\n            x = remainder;\n        }\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x\
    \ / base;\n        long remainder = x % base;\n        StringBuilder sb = new\
    \ StringBuilder();\n        while (temp != 0) {\n            temp = temp / base;\n\
    \            sb.insert(0, (char) ('0' + remainder));\n            remainder =\
    \ remainder % base;\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjm58ufdn.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x\
    \ / base;\n        long remainder = x % base;\n        if (temp > 0) {\n     \
    \       return String.valueOf(temp) + changeBase(remainder, base);\n        }\
    \ else {\n            return String.valueOf(remainder);\n        }\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xnr77kf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwb3pl_uu.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n      \
    \  long r = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n\
    \        long r = 1;\n        long m = 1;\n        long r = 1;\n        long m\
    \ = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n      \
    \  long m = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n\
    \        long m = 1;\n        long r = 1;\n        long m = 1;\n        long r\
    \ = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n      \
    \  long r = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n\
    \        long r = 1;\n        long m = 1;\n        long r = 1;\n        long m\
    \ = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n      \
    \  long m = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n\
    \        long m = 1;\n        long r = 1;\n        long m = 1;\n        long r\
    \ = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n      \
    \  long r = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n\
    \        long r = 1;\n        long m = 1;\n        long r = 1;\n        long m\
    \ = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n      \
    \  long m = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n\
    \        long m = 1;\n        long r = 1;\n        long m = 1;\n        long r\
    \ = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n      \
    \  long r = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n\
    \        long r = 1;\n        long m = 1;\n        long r = 1;\n        long m\
    \ = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n      \
    \  long m = 1;\n        long r = 1;\n        long m = 1;\n        long r = 1;\n\
    \        long m = 1;\n        long r = 1;\n        long m = 1;\n        long r\
    \ = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n      \
    \  long r = 1;\n        long m = 1;\n        long r = 1;\n        long m = 1;\n\
    \        long r = 1;\n        long m = 1;\n        long r = 1;\n        long m\
    \ = 1;\n        long r = 1;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwgmiygg3.java:121: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpwgmiygg3.java:121: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res += (temp % base);\n  \
    \          temp /= base;\n        }\n        return Long.toString(res);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn721volz.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long m = 1;\n        while (n > 0) {\n            long r = r *\
    \ base;\n            long m = m * base;\n            n /= base;\n        }\n \
    \       return Long.toString(r) + Long.toString(m);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph32dh5x7.java:23: error: variable r is already defined in method\
    \ changeBase(long,long)\n            long r = r * base;\n                 ^\n\
    /tmp/tmph32dh5x7.java:24: error: variable m is already defined in method changeBase(long,long)\n\
    \            long m = m * base;\n                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjo7d_wwp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n != 0) {\n            long r = n % base;\n           \
    \ n /= base;\n            d *= base;\n            if (r > 0) {\n             \
    \   d += r;\n            }\n        }\n        return Long.toString(d);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpodbaxiwn.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        String result = \"\";\n        while (quotient\
    \ > 0) {\n            result += String.valueOf(quotient);\n            quotient\
    \ = quotient % base;\n        }\n        if (rem > 0) {\n            result +=\
    \ String.valueOf(rem);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20niv0ky.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1k0cpkg.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res += x % base;\n            x /= base;\n        }\n\
    \        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmec_j40.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rc1_l5k.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp964on1u5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        String result\
    \ = \"\";\n        temp = x % base;\n        while (temp != 0) {\n           \
    \ result += temp % 10;\n            temp /= 10;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzi09u_4i.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        String result = \"\";\n        do {\n            quotient\
    \ = x / base;\n            remainder = x % base;\n            result += String.valueOf(quotient);\n\
    \            x = remainder;\n        } while (x != 0);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        String\
    \ result = \"\";\n        do {\n            remainder = x % base;\n          \
    \  result += String.valueOf(remainder);\n            x /= base;\n        } while\
    \ (x != 0);\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqclojvf.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        if (rem == 0) {\n            return Long.toString(quotient);\n\
    \        } else {\n            return Long.toString(quotient) + changeBase(rem,\
    \ base);\n        }\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.Long.toString(Long.java:490)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\tat Problem.changeBase(tmp1qxtcx3x.java:24)\n\
    \tat Problem.changeBase(tmp1qxtcx3x.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long d = 0;\n        long t = 0;\n        long u = 0;\n      \
    \  long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n\
    \        long z = 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n      \
    \  long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n\
    \        long k = 0;\n        long l = 0;\n        long m = 0;\n        long n\
    \ = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n      \
    \  long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n\
    \        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long a = 0;\n        long b = 0;\n      \
    \  long c = 0;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n\
    \        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j\
    \ = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n      \
    \  long n = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n\
    \        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u\
    \ = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n      \
    \  long y = 0;\n        long z = 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 0;\n        long d = 0;\n        long e = 0;\n        long f\
    \ = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n      \
    \  long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n\
    \        long n = 0;\n        long o = 0;\n        long p = 0;\n        long q\
    \ = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n      \
    \  long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n\
    \        long y = 0;\n        long z = 0;\n        long a = 0;\n        long b\
    \ = 0;\n        long c = 0;\n        long d = 0;\n        long e = 0;\n      \
    \  long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n\
    \        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m\
    \ = 0;\n        long n = 0;\n        long o = 0;\n        long p = 0;\n      \
    \  long \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1wslh1q.java:123: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpr1wslh1q.java:123: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res = (res * base) + x;\n            x /= base;\n   \
    \     }\n        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpje86v3ip.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        String\
    \ s = \"\";\n        while (n > 0) {\n            long rem = n % base;\n     \
    \       s += (char)('0' + rem);\n            n /= base;\n        }\n        return\
    \ s;\n\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5c5zyzau.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long m = 1;\n        while (n > 0) {\n            long temp =\
    \ n % base;\n            r *= base;\n            r += temp;\n            n /=\
    \ base;\n            m *= base;\n        }\n        return Long.toString(r);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcah8im_s.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n        long temp85;\n        long temp86;\n\
    \        long temp87;\n        long temp88;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9nieax0j.java:109: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long baseN = base;\n        long baseR = 1;\n        long baseR2\
    \ = 1;\n        long baseR3 = 1;\n        long baseR4 = 1;\n        long baseR5\
    \ = 1;\n        long baseR6 = 1;\n        long baseR7 = 1;\n        long baseR8\
    \ = 1;\n        long baseR9 = 1;\n        long baseR10 = 1;\n        long baseR11\
    \ = 1;\n        long baseR12 = 1;\n        long baseR13 = 1;\n        long baseR14\
    \ = 1;\n        long baseR15 = 1;\n        long baseR16 = 1;\n        long baseR17\
    \ = 1;\n        long baseR18 = 1;\n        long baseR19 = 1;\n        long baseR20\
    \ = 1;\n        long baseR21 = 1;\n        long baseR22 = 1;\n        long baseR23\
    \ = 1;\n        long baseR24 = 1;\n        long baseR25 = 1;\n        long baseR26\
    \ = 1;\n        long baseR27 = 1;\n        long baseR28 = 1;\n        long baseR29\
    \ = 1;\n        long baseR30 = 1;\n        long baseR31 = 1;\n        long baseR32\
    \ = 1;\n        long baseR33 = 1;\n        long baseR34 = 1;\n        long baseR35\
    \ = 1;\n        long baseR36 = 1;\n        long baseR37 = 1;\n        long baseR38\
    \ = 1;\n        long baseR39 = 1;\n        long baseR40 = 1;\n        long baseR41\
    \ = 1;\n        long baseR42 = 1;\n        long baseR43 = 1;\n        long baseR44\
    \ = 1;\n        long baseR45 = 1;\n        long baseR46 = 1;\n        long baseR47\
    \ = 1;\n        long baseR48 = 1;\n        long baseR49 = 1;\n        long baseR50\
    \ = 1;\n        long baseR51 = 1;\n        long baseR52 = 1;\n        long baseR53\
    \ = 1;\n        long baseR54 = 1;\n        long baseR55 = 1;\n        long baseR56\
    \ = 1;\n        long baseR57 = 1;\n        long baseR58 = 1;\n        long baseR59\
    \ = 1;\n        long baseR60 = 1;\n        long baseR61 = 1;\n        long baseR62\
    \ = 1;\n        long baseR63 = 1;\n        long baseR64 = 1;\n        long baseR65\
    \ = 1;\n        long baseR66 = 1;\n        long baseR67 = 1;\n        long baseR68\
    \ = 1;\n        long baseR69 = 1;\n        long baseR70 = 1;\n        long base\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffxddlvp.java:92: error: ';' expected\n        long base\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        long m = 1;\n        while (n > 0) {\n            long temp =\
    \ n % base;\n            n /= base;\n            r *= base;\n            r +=\
    \ temp;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwk28_j0.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = 0;\n        temp\
    \ = x % base;\n        if (temp == 0)\n            return Long.toString(x);\n\
    \        else\n            return Long.toString(temp) + changeBase(x / base, base);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5cr_myw.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    long remainder;\n        long quotient;\n        long temp;\n        long\
    \ temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n    \
    \    long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n        long temp85;\n        long temp86;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_4k4yal.java:109: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res += (temp % base);\n \
    \           temp /= base;\n        }\n        return Long.toString(res);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7441wj6y.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        long res = 0;\n        while (n > 0) {\n            long r = n\
    \ % base;\n            n /= base;\n            res += d * r;\n            d *=\
    \ base;\n        }\n        return Long.toString(res);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_55th12.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0lffvn9n.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String s = Long.toString(x,\
    \ base);\n        return s.substring(s.length() - 1);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2lq0v1n.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        String s = Long.toString(x, base);\n             \
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long temp85;\n        long temp86;\n        long temp87;\n\
    \        long temp88;\n        long temp89\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wzwrs6e.java:107: error: ';' expected\n        long temp89\n \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (tmp != 0) {\n            int digit\
    \ = tmp % base;\n            sb.append(digit);\n            tmp /= base;\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2my21f0y.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = tmp % base;\n                    \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = temp;\n        long temp3 = temp;\n        long temp4 = temp;\n    \
    \    long temp5 = temp;\n        long temp6 = temp;\n        long temp7 = temp;\n\
    \        long temp8 = temp;\n        long temp9 = temp;\n        long temp10 =\
    \ temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long\
    \ temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n \
    \       long temp16 = temp;\n        long temp17 = temp;\n        long temp18\
    \ = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n        long\
    \ temp21 = temp;\n        long temp22 = temp;\n        long temp23 = temp;\n \
    \       long temp24 = temp;\n        long temp25 = temp;\n        long temp26\
    \ = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n        long\
    \ temp29 = temp;\n        long temp30 = temp;\n        long temp31 = temp;\n \
    \       long temp32 = temp;\n        long temp33 = temp;\n        long temp34\
    \ = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long\
    \ temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n \
    \       long temp40 = temp;\n        long temp41 = temp;\n        long temp42\
    \ = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n        long\
    \ temp45 = temp;\n        long temp46 = temp;\n        long temp47 = temp;\n \
    \       long temp48 = temp;\n        long temp49 = temp;\n        long temp50\
    \ = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n        long\
    \ temp53 = temp;\n        long temp54 = temp;\n        long temp55 = temp;\n \
    \       long temp56 = temp;\n        long temp57 = temp;\n        long temp58\
    \ = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n        long\
    \ temp61 = temp;\n        long temp62 = temp;\n        long temp63 = temp;\n \
    \       long temp64 = temp;\n        long temp65 = temp;\n        long temp66\
    \ = temp\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbii3ib8.java:84: error: ';' expected\n        long temp66 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ temp = x;\n        while (temp > 0) {\n            res += (temp % base);\n \
    \           temp /= base;\n        }\n        return Long.toString(res);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp59e4gsmu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (tmp != 0) {\n            int digit\
    \ = tmp % base;\n            sb.append(digit);\n            tmp /= base;\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvkx7k2hk.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = tmp % base;\n                    \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = 0;\n        temp\
    \ = x / (long) base;\n        long temp2 = temp % base;\n        long temp3 =\
    \ temp / base;\n        long temp4 = temp % base;\n        long temp5 = temp /\
    \ base;\n        long temp6 = temp % base;\n        long temp7 = temp / base;\n\
    \        long temp8 = temp % base;\n        long temp9 = temp / base;\n      \
    \  long temp10 = temp % base;\n        long temp11 = temp / base;\n        long\
    \ temp12 = temp % base;\n        long temp13 = temp / base;\n        long temp14\
    \ = temp % base;\n        long temp15 = temp / base;\n        long temp16 = temp\
    \ % base;\n        long temp17 = temp / base;\n        long temp18 = temp % base;\n\
    \        long temp19 = temp / base;\n        long temp20 = temp % base;\n    \
    \    long temp21 = temp / base;\n        long temp22 = temp % base;\n        long\
    \ temp23 = temp / base;\n        long temp24 = temp % base;\n        long temp25\
    \ = temp / base;\n        long temp26 = temp % base;\n        long temp27 = temp\
    \ / base;\n        long temp28 = temp % base;\n        long temp29 = temp / base;\n\
    \        long temp30 = temp % base;\n        long temp31 = temp / base;\n    \
    \    long temp32 = temp % base;\n        long temp33 = temp / base;\n        long\
    \ temp34 = temp % base;\n        long temp35 = temp / base;\n        long temp36\
    \ = temp % base;\n        long temp37 = temp / base;\n        long temp38 = temp\
    \ % base;\n        long temp39 = temp / base;\n        long temp40 = temp % base;\n\
    \        long temp41 = temp / base;\n        long temp42 = temp % base;\n    \
    \    long temp43 = temp / base;\n        long temp44 = temp % base;\n        long\
    \ temp45 = temp / base;\n        long temp46 = temp % base;\n        long temp47\
    \ = temp / base;\n        long temp48 = temp % base;\n        long temp49 = temp\
    \ / base;\n        long temp50 = temp % base;\n        long temp51 = temp / base;\n\
    \        long temp52 = temp % base;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv25t_hu8.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        return String.valueOf(quotient) + String.valueOf(rem);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe80fmo03.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        long r = 1;\n        long m = 1;\n        long temp = 0;\n   \
    \     long base10 = 1;\n        long base100 = 1;\n        long base1000 = 1;\n\
    \        long base10000 = 1;\n        long base100000 = 1;\n        long base1000000\
    \ = 1;\n        long base100000001 = 1;\n        long base1000000001 = 1;\n  \
    \      long base10000000001 = 1;\n        long base100000000001 = 1;\n       \
    \ long base1000000000001 = 1;\n        long base10000000000001 = 1;\n        long\
    \ base100000000000001 = 1;\n        long base1000000000000001 = 1;\n        long\
    \ base10000000000000001 = 1;\n        long base100000000000000001 = 1;\n     \
    \   long base1000000000000000001 = 1;\n        long base10000000000000000001 =\
    \ 1;\n        long base100000000000000000001 = 1;\n        long base1000000000000000000001\
    \ = 1;\n        long base10000000000000000000001 = 1;\n        long base100000000000000000000001\
    \ = 1;\n        long base1000000000000000000000001 = 1;\n        long base10000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000001 = 1;\n        long base1000000000000000000000000001\
    \ = 1;\n        long base10000000000000000000000000001 = 1;\n        long base100000000000000000000000000001\
    \ = 1;\n        long base1000000000000000000000000000001 = 1;\n        long base10000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000000001 = 1;\n        long\
    \ base1000000000000000000000000000000001 = 1;\n        long base10000000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000000000001 = 1;\n        long\
    \ base1000000000000000000000000000000000001 = 1;\n        long base10000000000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000000000000001 = 1;\n      \
    \  long base1000000000000000000000000000000000000001 = 1;\n        long base10000000000000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000000000000000001 = 1;\n   \
    \     long base1000000000000000000000000000000000000000001 = 1;\n        long\
    \ base10000000000000000000000000000000000000000001 = 1;\n        long base100000000000000000000000000000000000000000001\
    \ = 1;\n        long base1000000000000000000000000000000000000000000001 = 1;\n\
    \        long base10000000000000000000000000000000000000000000001 = 1;\n     \
    \   long base100000000000000000000000000000000000000000000001 = 1;\n        long\
    \ base1000000000000000000000000000000000000000000000001 = 1;\n        long base10000000000000000000000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000000000000000000000000001 =\
    \ 1;\n        long base1000000000000000000000000000000000000000000000000001 =\
    \ 1;\n        long base10000000000000000000000000000000000000000000000000001 =\
    \ 1;\n        long base100000000000000000000000000000000000000000000000000001\
    \ = 1;\n        long base1000000000000000000000000000000000000000000000000000001\
    \ = 1;\n        long base10000000000000000000000000000000000000000000000000000001\
    \ = 1;\n        long base100000000000000000000000000\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmputwo6jfa.java:78: error: ';' expected\n        long base100000000000000000000000000\n\
    \                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qmhr4b4.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res += (temp % base);\n \
    \           temp /= base;\n        }\n        return Long.toString(res);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_juke7o0.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    long remainder;\n        long quotient;\n        long temp;\n        while\
    \ (x > 0) {\n            quotient = x / base;\n            remainder = x % base;\n\
    \            temp = quotient;\n            quotient = remainder;\n           \
    \ remainder = temp;\n            result += String.valueOf(quotient);\n       \
    \     result += String.valueOf(remainder);\n            x /= base;\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6t4jhdr.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            long remainder = temp %\
    \ base;\n            temp = temp / base;\n            result = result * base +\
    \ remainder;\n        }\n        return Long.toString(result);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pf5nk_p.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8r0x9nn.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long result = 0;\n        while (temp != 0) {\n\
    \            temp = temp / base;\n            result += rem;\n            rem\
    \ = temp % base;\n        }\n        return Long.toString(result);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxn5ji4r.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8l9w3u00.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        if (rem > 0)\n            return changeBase(quotient,\
    \ base) + String.valueOf(rem);\n        else\n            return String.valueOf(quotient);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvml0cmt.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ tmp = x;\n        do {\n            res = res * base + tmp % base;\n       \
    \     tmp = tmp / base;\n        } while (tmp != 0);\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6l28a0s.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res = (res * base) + temp\
    \ % base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqz4sygi.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = temp;\n        long temp3 = temp;\n        long temp4 = temp;\n    \
    \    long temp5 = temp;\n        long temp6 = temp;\n        long temp7 = temp;\n\
    \        long temp8 = temp;\n        long temp9 = temp;\n        long temp10 =\
    \ temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long\
    \ temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n \
    \       long temp16 = temp;\n        long temp17 = temp;\n        long temp18\
    \ = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n        long\
    \ temp21 = temp;\n        long temp22 = temp;\n        long temp23 = temp;\n \
    \       long temp24 = temp;\n        long temp25 = temp;\n        long temp26\
    \ = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n        long\
    \ temp29 = temp;\n        long temp30 = temp;\n        long temp31 = temp;\n \
    \       long temp32 = temp;\n        long temp33 = temp;\n        long temp34\
    \ = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long\
    \ temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n \
    \       long temp40 = temp;\n        long temp41 = temp;\n        long temp42\
    \ = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n        long\
    \ temp45 = temp;\n        long temp46 = temp;\n        long temp47 = temp;\n \
    \       long temp48 = temp;\n        long temp49 = temp;\n        long temp50\
    \ = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n        long\
    \ temp53 = temp;\n        long temp54 = temp;\n        long temp55 = temp;\n \
    \       long temp56 = temp;\n        long temp57 = temp;\n        long temp58\
    \ = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n        long\
    \ temp61 = temp;\n        long temp62 = temp;\n        long temp63 = temp;\n \
    \       long temp64 = temp;\n        long temp65 = temp;\n        long temp66\
    \ = temp\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4k6v6vvf.java:84: error: ';' expected\n        long temp66 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder = x % base;\n\
    \        long quotient = x / base;\n        long quotient1 = quotient % base;\n\
    \        long quotient2 = quotient / base;\n        long quotient3 = quotient1\
    \ % base;\n        long quotient4 = quotient1 / base;\n        long quotient5\
    \ = quotient2 % base;\n        long quotient6 = quotient2 / base;\n        long\
    \ quotient7 = quotient3 % base;\n        long quotient8 = quotient3 / base;\n\
    \        long quotient9 = quotient4 % base;\n        long quotient10 = quotient4\
    \ / base;\n        long quotient11 = quotient5 % base;\n        long quotient12\
    \ = quotient5 / base;\n        long quotient13 = quotient6 % base;\n        long\
    \ quotient14 = quotient6 / base;\n        long quotient15 = quotient7 % base;\n\
    \        long quotient16 = quotient7 / base;\n        long quotient17 = quotient8\
    \ % base;\n        long quotient18 = quotient8 / base;\n        long quotient19\
    \ = quotient9 % base;\n        long quotient20 = quotient9 / base;\n        long\
    \ quotient21 = quotient10 % base;\n        long quotient22 = quotient10 / base;\n\
    \        long quotient23 = quotient11 % base;\n        long quotient24 = quotient11\
    \ / base;\n        long quotient25 = quotient12 % base;\n        long quotient26\
    \ = quotient12 / base;\n        long quotient27 = quotient13 % base;\n       \
    \ long quotient28 = quotient13 / base;\n        long quotient29 = quotient14 %\
    \ base;\n        long quotient30 = quotient14 / base;\n        long quotient31\
    \ = quotient15 % base;\n        long quotient32 = quotient15 / base;\n       \
    \ long quotient33 = quotient16 % base;\n        long quotient34 = quotient16 /\
    \ base;\n        long quotient35 = quotient17 % base;\n        long quotient36\
    \ = quotient17 / base;\n        long quotient37 = quotient18 % base;\n       \
    \ long quotient38 = quotient18 / base;\n        long quotient39 = quotient19 %\
    \ base;\n        long quotient\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0cu0w15k.java:60: error: ';' expected\n        long quotient\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1brwfkbg.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        long r = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 1;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpirbn6pga.java:121: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpirbn6pga.java:121: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder;\n        do {\n            remainder = result % base;\n         \
    \   result /= base;\n        } while (remainder != 0);\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqv2dwwt.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        String result = \"\";\n        do {\n            remainder\
    \ = x % base;\n            quotient = x / base;\n            result += String.valueOf(quotient);\n\
    \            x = remainder;\n        } while (remainder != 0);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n != 0) {\n            long r = n % base;\n           \
    \ n /= base;\n            d *= base;\n            d += r;\n        }\n       \
    \ return Long.toString(d);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6yfufrhz.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long result = 0;\n        while (temp != 0) {\n\
    \            temp = temp / base;\n            result += rem;\n            rem\
    \ = temp % base;\n        }\n        return Long.toString(result);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpedazjx2x.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n > 0) {\n            long r = n % base;\n            n\
    \ /= base;\n            d *= base;\n            d += r;\n        }\n        return\
    \ Long.toString(d);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph96tk46a.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_gvbd84.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    long remainder;\n        long quotient;\n        long temp;\n        long\
    \ digit;\n        long temp2;\n        long temp3;\n        long temp4;\n    \
    \    long temp5;\n        long temp6;\n        long temp7;\n        long temp8;\n\
    \        long temp9;\n        long temp10;\n        long temp11;\n        long\
    \ temp12;\n        long temp13;\n        long temp14;\n        long temp15;\n\
    \        long temp16;\n        long temp17;\n        long temp18;\n        long\
    \ temp19;\n        long temp20;\n        long temp21;\n        long temp22;\n\
    \        long temp23;\n        long temp24;\n        long temp25;\n        long\
    \ temp26;\n        long temp27;\n        long temp28;\n        long temp29;\n\
    \        long temp30;\n        long temp31;\n        long temp32;\n        long\
    \ temp33;\n        long temp34;\n        long temp35;\n        long temp36;\n\
    \        long temp37;\n        long temp38;\n        long temp39;\n        long\
    \ temp40;\n        long temp41;\n        long temp42;\n        long temp43;\n\
    \        long temp44;\n        long temp45;\n        long temp46;\n        long\
    \ temp47;\n        long temp48;\n        long temp49;\n        long temp50;\n\
    \        long temp51;\n        long temp52;\n        long temp53;\n        long\
    \ temp54;\n        long temp55;\n        long temp56;\n        long temp57;\n\
    \        long temp58;\n        long temp59;\n        long temp60;\n        long\
    \ temp61;\n        long temp62;\n        long temp63;\n        long temp64;\n\
    \        long temp65;\n        long temp66;\n        long temp67;\n        long\
    \ temp68;\n        long temp69;\n        long temp70;\n        long temp71;\n\
    \        long temp72;\n        long temp73;\n        long temp74;\n        long\
    \ temp75;\n        long temp76;\n        long temp77;\n        long temp78;\n\
    \        long temp79;\n        long temp80;\n        long temp81;\n        long\
    \ temp82;\n        long temp83;\n        long temp84;\n        long temp85;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjzvdc730.java:109: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 0;\n        while\
    \ (x > 0) {\n            result += (x % base);\n            x /= base;\n     \
    \   }\n        return Long.toString(result);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkmrj3b5.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long quotient = temp / base;\n        if (rem ==\
    \ 0) {\n            return Long.toString(quotient);\n        } else {\n      \
    \      return Long.toString(quotient + 1) + changeBase(rem, base);\n        }\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.Long.getChars(Long.java:540)\n\
    \tat java.base/java.lang.Long.toString(Long.java:493)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n\tat Problem.changeBase(tmppzqytqs_.java:25)\n\
    \tat Problem.changeBase(tmppzqytqs_.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqc1242xc.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long quotient = temp / base;\n        long reminder\
    \ = rem % base;\n        long quotient1 = quotient / base;\n        long quotient2\
    \ = quotient1 % base;\n        long quotient3 = quotient2 % base;\n        long\
    \ quotient4 = quotient3 % base;\n        long quotient5 = quotient4 % base;\n\
    \        long quotient6 = quotient5 % base;\n        long quotient7 = quotient6\
    \ % base;\n        long quotient8 = quotient7 % base;\n        long quotient9\
    \ = quotient8 % base;\n        long quotient10 = quotient9 % base;\n        long\
    \ quotient11 = quotient10 % base;\n        long quotient12 = quotient11 % base;\n\
    \        long quotient13 = quotient12 % base;\n        long quotient14 = quotient13\
    \ % base;\n        long quotient15 = quotient14 % base;\n        long quotient16\
    \ = quotient15 % base;\n        long quotient17 = quotient16 % base;\n       \
    \ long quotient18 = quotient17 % base;\n        long quotient19 = quotient18 %\
    \ base;\n        long quotient20 = quotient19 % base;\n        long quotient21\
    \ = quotient20 % base;\n        long quotient22 = quotient21 % base;\n       \
    \ long quotient23 = quotient22 % base;\n        long quotient24 = quotient23 %\
    \ base;\n        long quotient25 = quotient24 % base;\n        long quotient26\
    \ = quotient25 % base;\n        long quotient27 = quotient26 % base;\n       \
    \ long quotient28 = quotient27 % base;\n        long quotient29 = quotient28 %\
    \ base;\n        long quotient30 = quotient29 % base;\n        long quotient31\
    \ = quotient30 % base;\n        long quotient32 = quotient31 % base;\n       \
    \ long quotient33 = quotient32 % base;\n        long quotient34 = quotient33 %\
    \ base;\n        long quotient35 = quotient34 % base;\n        long quotient36\
    \ = quotient35 % base;\n        long quotient37 = quotient36 % base;\n       \
    \ long quotient38 = quotient37 % base\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5ebc3wg.java:60: error: ';' expected\n        long quotient38\
    \ = quotient37 % base\n                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdz_5pnr6.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res = (res * base) + x;\n            x /= base;\n   \
    \     }\n        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy7eofi3t.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res += (temp % base);\n  \
    \          temp /= base;\n        }\n        return Long.toString(res);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpus861jl7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rdi12g2.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long temp2 = temp;\n        long temp3 = temp;\n        long temp4 =\
    \ temp;\n        long temp5 = temp;\n        long temp6 = temp;\n        long\
    \ temp7 = temp;\n        long temp8 = temp;\n        long temp9 = temp;\n    \
    \    long temp10 = temp;\n        long temp11 = temp;\n        long temp12 = temp;\n\
    \        long temp13 = temp;\n        long temp14 = temp;\n        long temp15\
    \ = temp;\n        long temp16 = temp;\n        long temp17 = temp;\n        long\
    \ temp18 = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n \
    \       long temp21 = temp;\n        long temp22 = temp;\n        long temp23\
    \ = temp;\n        long temp24 = temp;\n        long temp25 = temp;\n        long\
    \ temp26 = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n \
    \       long temp29 = temp;\n        long temp30 = temp;\n        long temp31\
    \ = temp;\n        long temp32 = temp;\n        long temp33 = temp;\n        long\
    \ temp34 = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n \
    \       long temp37 = temp;\n        long temp38 = temp;\n        long temp39\
    \ = temp;\n        long temp40 = temp;\n        long temp41 = temp;\n        long\
    \ temp42 = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n \
    \       long temp45 = temp;\n        long temp46 = temp;\n        long temp47\
    \ = temp;\n        long temp48 = temp;\n        long temp49 = temp;\n        long\
    \ temp50 = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n \
    \       long temp53 = temp;\n        long temp54 = temp;\n        long temp55\
    \ = temp;\n        long temp56 = temp;\n        long temp57 = temp;\n        long\
    \ temp58 = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n \
    \       long temp61 = temp;\n        long temp62 = temp;\n        long temp63\
    \ = temp;\n        long temp64 = temp;\n        long temp65 = temp;\n        long\
    \ \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkq6cz0ve.java:85: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpkq6cz0ve.java:85: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        long\
    \ rem = tmp % base;\n        tmp = tmp / base;\n        long tmp2 = tmp;\n   \
    \     long rem2 = tmp2 % base;\n        tmp = tmp2 / base;\n        long tmp3\
    \ = tmp;\n        long rem3 = tmp3 % base;\n        tmp = tmp3 / base;\n     \
    \   long tmp4 = tmp;\n        long rem4 = tmp4 % base;\n        tmp = tmp4 / base;\n\
    \        long tmp5 = tmp;\n        long rem5 = tmp5 % base;\n        tmp = tmp5\
    \ / base;\n        long tmp6 = tmp;\n        long rem6 = tmp6 % base;\n      \
    \  tmp = tmp6 / base;\n        long tmp7 = tmp;\n        long rem7 = tmp7 % base;\n\
    \        tmp = tmp7 / base;\n        long tmp8 = tmp;\n        long rem8 = tmp8\
    \ % base;\n        tmp = tmp8 / base;\n        long tmp9 = tmp;\n        long\
    \ rem9 = tmp9 % base;\n        tmp = tmp9 / base;\n        long tmp10 = tmp;\n\
    \        long rem10 = tmp10 % base;\n        tmp = tmp10 / base;\n        long\
    \ tmp11 = tmp;\n        long rem11 = tmp11 % base;\n        tmp = tmp11 / base;\n\
    \        long tmp12 = tmp;\n        long rem12 = tmp12 % base;\n        tmp =\
    \ tmp12 / base;\n        long tmp13 = tmp;\n        long rem13 = tmp13 % base;\n\
    \        tmp = tmp13 / base;\n        long tmp14 = tmp;\n        long rem14 =\
    \ tmp14 % base;\n        tmp = tmp14 / base;\n        long tmp15 = tmp;\n    \
    \    long rem15 = tmp15 % base;\n        tmp = tmp15 / base;\n        long tmp16\
    \ = tmp;\n        long rem16 = tmp16 % base;\n        tmp = tmp16 / base;\n  \
    \      long tmp17 = tmp;\n        long rem17 = tmp17 % base;\n        tmp = tmp17\
    \ / base;\n        long tmp18 = tmp;\n        long rem18 = tmp18 % base;\n   \
    \     tmp = tmp18 / base;\n        long tmp19 = tmp;\n        long rem19 = tmp19\
    \ % base;\n        tmp = tmp19 / base;\n        long tmp20 = tmp;\n        long\
    \ rem20 = tmp20 % base;\n        tmp = tmp20 / base;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96rysx3q.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 1;\n        while\
    \ (x > 0) {\n            long remainder = x % base;\n            result *= base;\n\
    \            result += remainder;\n            x /= base;\n        }\n       \
    \ return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzxezmko.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long res = 0;\n        while (temp != 0) {\n            res = res * base\
    \ + temp % base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50hbmle2.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 0;\n        while\
    \ (x > 0) {\n            long remainder = x % base;\n            result += remainder;\n\
    \            x /= base;\n        }\n        return Long.toString(result);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd0zhijei.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    long remainder;\n        long quotient;\n        long quotient2;\n      \
    \  long quotient3;\n        long quotient4;\n        long quotient5;\n       \
    \ long quotient6;\n        long quotient7;\n        long quotient8;\n        long\
    \ quotient9;\n        long quotient10;\n        long quotient11;\n        long\
    \ quotient12;\n        long quotient13;\n        long quotient14;\n        long\
    \ quotient15;\n        long quotient16;\n        long quotient17;\n        long\
    \ quotient18;\n        long quotient19;\n        long quotient20;\n        long\
    \ quotient21;\n        long quotient22;\n        long quotient23;\n        long\
    \ quotient24;\n        long quotient25;\n        long quotient26;\n        long\
    \ quotient27;\n        long quotient28;\n        long quotient29;\n        long\
    \ quotient30;\n        long quotient31;\n        long quotient32;\n        long\
    \ quotient33;\n        long quotient34;\n        long quotient35;\n        long\
    \ quotient36;\n        long quotient37;\n        long quotient38;\n        long\
    \ quotient39;\n        long quotient40;\n        long quotient41;\n        long\
    \ quotient42;\n        long quotient43;\n        long quotient44;\n        long\
    \ quotient45;\n        long quotient46;\n        long quotient47;\n        long\
    \ quotient48;\n        long quotient49;\n        long quotient50;\n        long\
    \ quotient51;\n        long quotient52;\n        long quotient53;\n        long\
    \ quotient54;\n        long quotient55;\n        long quotient56;\n        long\
    \ quotient57;\n        long quotient58;\n        long quotient59;\n        long\
    \ quotient60;\n        long quotient61;\n        long quotient62;\n        long\
    \ quotient63;\n        long quotient64;\n        long quotient65;\n        long\
    \ quotient66;\n        long quotient67;\n        long quotient68;\n        long\
    \ quotient69;\n        long quotient70;\n        long quotient71;\n        long\
    \ quotient72;\n        long quotient73;\n        long quotient74;\n        long\
    \ quotient\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7itex24d.java:95: error: ';' expected\n        long quotient\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawa_jvfc.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 0;\n        while (temp > 0) {\n            long digit = temp % base;\n\
    \            result += digit * Math.pow(base, digit);\n            temp /= base;\n\
    \        }\n        return Long.toString(result);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoyj8uq6.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long temp2;\n        temp2 = temp % base;\n        temp = temp / base;\n\
    \        long temp3;\n        temp3 = temp % base;\n        temp = temp / base;\n\
    \        long temp4;\n        temp4 = temp % base;\n        temp = temp / base;\n\
    \        long temp5;\n        temp5 = temp % base;\n        temp = temp / base;\n\
    \        long temp6;\n        temp6 = temp % base;\n        temp = temp / base;\n\
    \        long temp7;\n        temp7 = temp % base;\n        temp = temp / base;\n\
    \        long temp8;\n        temp8 = temp % base;\n        temp = temp / base;\n\
    \        long temp9;\n        temp9 = temp % base;\n        temp = temp / base;\n\
    \        long temp10;\n        temp10 = temp % base;\n        temp = temp / base;\n\
    \        long temp11;\n        temp11 = temp % base;\n        temp = temp / base;\n\
    \        long temp12;\n        temp12 = temp % base;\n        temp = temp / base;\n\
    \        long temp13;\n        temp13 = temp % base;\n        temp = temp / base;\n\
    \        long temp14;\n        temp14 = temp % base;\n        temp = temp / base;\n\
    \        long temp15;\n        temp15 = temp % base;\n        temp = temp / base;\n\
    \        long temp16;\n        temp16 = temp % base;\n        temp = temp / base;\n\
    \        long temp17;\n        temp17 = temp % base;\n        temp = temp / base;\n\
    \        long temp18;\n        temp18 = temp % base;\n        temp = temp / base;\n\
    \        long temp19;\n        temp19 = temp % base;\n        temp = temp / base;\n\
    \        long temp20;\n        temp20 = temp % base;\n        temp = temp / base;\n\
    \        long temp21;\n        temp21 = temp % base;\n        temp = temp / base;\n\
    \        long temp22;\n        temp22 = temp % base;\n        temp = temp / base;\n\
    \        long temp23;\n        temp23 = temp % base;\n        temp = temp / base;\n\
    \        long temp24;\n        temp24 = temp % base;\n        temp = temp / base;\n\
    \        long temp25;\n        temp25 = temp % base;\n        temp = temp / base;\n\
    \        long temp26;\n        temp26 = temp % base;\n        temp = temp / base;\n\
    \        long temp27;\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6xbv13e.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5fg32ng.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            long digit = temp % base;\n\
    \            temp = temp / base;\n            result = result * base + digit;\n\
    \        }\n        return Long.toString(result);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpalf46fob.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        String\
    \ result = \"\";\n        while (x > 0) {\n            remainder = x % base;\n\
    \            result += Integer.toString(remainder);\n            x /= base;\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_75ntby2.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result += Integer.toString(remainder);\n     \
    \                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            long remainder = temp %\
    \ base;\n            temp = temp / base;\n            result = result * base +\
    \ remainder;\n        }\n        return Long.toString(result);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2zjb_sj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        String result = \"\";\n        if (rem\
    \ == 0) {\n            result = Long.toString(quotient);\n        } else {\n \
    \           result = Long.toString(quotient) + changeBase(rem, base);\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.Long.stringSize(Long.java:595)\n\
    \tat java.base/java.lang.Long.toString(Long.java:490)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n\tat Problem.changeBase(tmple09ujin.java:25)\n\
    \tat Problem.changeBase(tmple09ujin.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptj9we361.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = temp;\n        long temp3 = temp;\n        long temp4 = temp;\n    \
    \    long temp5 = temp;\n        long temp6 = temp;\n        long temp7 = temp;\n\
    \        long temp8 = temp;\n        long temp9 = temp;\n        long temp10 =\
    \ temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long\
    \ temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n \
    \       long temp16 = temp;\n        long temp17 = temp;\n        long temp18\
    \ = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n        long\
    \ temp21 = temp;\n        long temp22 = temp;\n        long temp23 = temp;\n \
    \       long temp24 = temp;\n        long temp25 = temp;\n        long temp26\
    \ = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n        long\
    \ temp29 = temp;\n        long temp30 = temp;\n        long temp31 = temp;\n \
    \       long temp32 = temp;\n        long temp33 = temp;\n        long temp34\
    \ = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long\
    \ temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n \
    \       long temp40 = temp;\n        long temp41 = temp;\n        long temp42\
    \ = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n        long\
    \ temp45 = temp;\n        long temp46 = temp;\n        long temp47 = temp;\n \
    \       long temp48 = temp;\n        long temp49 = temp;\n        long temp50\
    \ = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n        long\
    \ temp53 = temp;\n        long temp54 = temp;\n        long temp55 = temp;\n \
    \       long temp56 = temp;\n        long temp57 = temp;\n        long temp58\
    \ = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n        long\
    \ temp61 = temp;\n        long temp62 = temp;\n        long temp63 = temp;\n \
    \       long temp64 = temp;\n        long temp65 = temp;\n        long temp66\
    \ = temp\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8xokp3q.java:84: error: ';' expected\n        long temp66 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res = (res * base) + x;\n            x /= base;\n   \
    \     }\n        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6rdyx8x3.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String s = Long.toString(x);\n\
    \        long r = Long.parseLong(s, base);\n        return Long.toString(r);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiupj62lr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long r = Long.parseLong(s, base);\n              \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 0;\n        while (temp > 0) {\n            result += (temp % base);\n\
    \            temp /= base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50q28d61.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaf5ogxqa.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp % base;\n        return Long.toString(temp);\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbtkxited.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp * base;\n        temp = temp / base;\n        temp = temp\
    \ % base;\n        temp = temp + \"\";\n        return temp;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwcq7i1uk.java:24: error: incompatible types: String cannot be converted\
    \ to long\n        temp = temp + \"\";\n                    ^\n/tmp/tmpwcq7i1uk.java:25:\
    \ error: incompatible types: long cannot be converted to String\n        return\
    \ temp;\n               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        String result = \"\";\n    \
    \    while (x > 0) {\n            long remainder = x % base;\n            result\
    \ += remainder + \"\";\n            x /= base;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v68e1rn.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ temp = 0;\n        while (x > 0) {\n            temp = x % base;\n         \
    \   res = res * base + temp;\n            x = x / base;\n        }\n        return\
    \ Long.toString(res);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkd4u93k.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res += temp % base;\n   \
    \         temp /= base;\n        }\n        return Long.toString(res);\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmproqg7v7p.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        long result = quotient * base;\n      \
    \  if (rem != 0) {\n            result += rem;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdhw9s9y.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x\
    \ / base;\n        long remainder = x % base;\n        long result = (temp * base)\
    \ + remainder;\n        return Long.toString(result);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxdabbscj.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjphcmwo.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        long temp;\n        long result = 1;\n        long baseNum\
    \ = x;\n        long baseTen = base;\n        long baseOne = baseNum / baseTen;\n\
    \        long baseTwo = baseNum % baseTen;\n        long baseThree = baseTwo /\
    \ baseTen;\n        long baseFour = baseTwo % baseTen;\n        long baseFive\
    \ = baseThree / baseTen;\n        long baseSix = baseThree % baseTen;\n      \
    \  long baseSeven = baseFour / baseTen;\n        long baseEight = baseFour % baseTen;\n\
    \        long baseNine = baseFive / baseTen;\n        long baseTen = baseFive\
    \ % baseTen;\n        long baseEleven = baseSix / baseTen;\n        long baseTwelve\
    \ = baseSix % baseTen;\n        long baseThirteen = baseSeven / baseTen;\n   \
    \     long baseFourteen = baseSeven % baseTen;\n        long baseFifteen = baseEight\
    \ / baseTen;\n        long baseSixteen = baseEight % baseTen;\n        long baseSeventeen\
    \ = baseNine / baseTen;\n        long baseEighteen = baseNine % baseTen;\n   \
    \     long baseNineteen = baseEleven / baseTen;\n        long baseTwenty = baseEleven\
    \ % baseTen;\n        long baseThirty = baseTwelve / baseTen;\n        long baseForty\
    \ = baseTwelve % baseTen;\n        long baseFifty = baseThirty / baseTen;\n  \
    \      long baseSixty = baseThirty % baseTen;\n        long baseSeventy = baseForty\
    \ / baseTen;\n        long baseEighty = baseForty % baseTen;\n        long baseNinety\
    \ = baseFifty / baseTen;\n        long baseTwentyOne = baseFifty % baseTen;\n\
    \        long baseTwentyTwo = baseSixty / baseTen;\n        long baseTwentyThree\
    \ = baseSixty % baseTen;\n        long baseTwentyFour = baseSeventy / baseTen;\n\
    \        long baseTwentyFive = baseSeventy % baseTen;\n        long baseTwentySix\
    \ = base\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp802ip5c9.java:57: error: ';' expected\n        long baseTwentySix\
    \ = base\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp % base;\n        temp = temp / base;\n        temp\
    \ = temp * base;\n        temp = temp + x;\n        temp = temp % base;\n    \
    \    return Long.toString(temp);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jqr29nn.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = 0;\n        while\
    \ (x > 0) {\n            long remainder = x % base;\n            result += remainder;\n\
    \            x /= base;\n        }\n        return Long.toString(result);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2pp7e_o.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkcpd_g1f.java:96: error: ';' expected\n        temp = temp\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        while (n > 0) {\n            long r = n % base;\n            n\
    \ /= base;\n            d *= base;\n            if (r > 0) {\n               \
    \ d += r;\n            }\n        }\n        return Long.toString(d);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2oqmsmq.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long temp85;\n        long temp86;\n        long temp87;\n\
    \        long temp88;\n        long temp89\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp85jky3i8.java:107: error: ';' expected\n        long temp89\n \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = x;\n        long quotient = 1;\n        while (quotient < base)\
    \ {\n            remainder *= base;\n            quotient += 1;\n        }\n \
    \       while (remainder > 0) {\n            result /= base;\n            remainder\
    \ -= 1;\n        }\n        return Long.toString(result);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99lsmf27.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptq4ijdt5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        long result\
    \ = temp;\n        if (rem != 0) {\n            result = result + base;\n    \
    \    }\n        return Long.toString(result);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2y7fwcwu.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = temp;\n        long temp3 = temp;\n        long temp4 = temp;\n    \
    \    long temp5 = temp;\n        long temp6 = temp;\n        long temp7 = temp;\n\
    \        long temp8 = temp;\n        long temp9 = temp;\n        long temp10 =\
    \ temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long\
    \ temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n \
    \       long temp16 = temp;\n        long temp17 = temp;\n        long temp18\
    \ = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n        long\
    \ temp21 = temp;\n        long temp22 = temp;\n        long temp23 = temp;\n \
    \       long temp24 = temp;\n        long temp25 = temp;\n        long temp26\
    \ = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n        long\
    \ temp29 = temp;\n        long temp30 = temp;\n        long temp31 = temp;\n \
    \       long temp32 = temp;\n        long temp33 = temp;\n        long temp34\
    \ = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long\
    \ temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n \
    \       long temp40 = temp;\n        long temp41 = temp;\n        long temp42\
    \ = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n        long\
    \ temp45 = temp;\n        long temp46 = temp;\n        long temp47 = temp;\n \
    \       long temp48 = temp;\n        long temp49 = temp;\n        long temp50\
    \ = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n        long\
    \ temp53 = temp;\n        long temp54 = temp;\n        long temp55 = temp;\n \
    \       long temp56 = temp;\n        long temp57 = temp;\n        long temp58\
    \ = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n        long\
    \ temp61 = temp;\n        long temp62 = temp;\n        long temp63 = temp;\n \
    \       long temp64 = temp;\n        long temp65 = temp;\n        long temp66\
    \ = temp\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprnrxywwu.java:84: error: ';' expected\n        long temp66 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long result = temp / base;\n        long temp2 =\
    \ result;\n        long temp3 = temp2;\n        long temp4 = temp3;\n        long\
    \ temp5 = temp4;\n        long temp6 = temp5;\n        long temp7 = temp6;\n \
    \       long temp8 = temp7;\n        long temp9 = temp8;\n        long temp10\
    \ = temp9;\n        long temp11 = temp10;\n        long temp12 = temp11;\n   \
    \     long temp13 = temp12;\n        long temp14 = temp13;\n        long temp15\
    \ = temp14;\n        long temp16 = temp15;\n        long temp17 = temp16;\n  \
    \      long temp18 = temp17;\n        long temp19 = temp18;\n        long temp20\
    \ = temp19;\n        long temp21 = temp20;\n        long temp22 = temp21;\n  \
    \      long temp23 = temp22;\n        long temp24 = temp23;\n        long temp25\
    \ = temp24;\n        long temp26 = temp25;\n        long temp27 = temp26;\n  \
    \      long temp28 = temp27;\n        long temp29 = temp28;\n        long temp30\
    \ = temp29;\n        long temp31 = temp30;\n        long temp32 = temp31;\n  \
    \      long temp33 = temp32;\n        long temp34 = temp33;\n        long temp35\
    \ = temp34;\n        long temp36 = temp35;\n        long temp37 = temp36;\n  \
    \      long temp38 = temp37;\n        long temp39 = temp38;\n        long temp40\
    \ = temp39;\n        long temp41 = temp40;\n        long temp42 = temp41;\n  \
    \      long temp43 = temp42;\n        long temp44 = temp43;\n        long temp45\
    \ = temp44;\n        long temp46 = temp45;\n        long temp47 = temp46;\n  \
    \      long temp48 = temp47;\n        long temp49 = temp48;\n        long temp50\
    \ = temp49;\n        long temp51 = temp50;\n        long temp52 = temp51;\n  \
    \      long temp53 = temp52;\n        long temp54 = temp53;\n        long temp55\
    \ = temp54;\n        long temp56 = temp55;\n        long temp57 = temp56;\n  \
    \      long temp58 = temp57;\n        long temp59 = temp58;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_5ij_yp0.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgmlior5j.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res = res * base + (temp %\
    \ base);\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1hzcmuog.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        long\
    \ quotient;\n        long temp;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x >= base) {\n            quotient = x / base;\n            remainder\
    \ = x % base;\n            temp = quotient;\n            while (temp > 0) {\n\
    \                sb.insert(0, (char) ('0' + remainder % base));\n            \
    \    remainder = (remainder / base);\n                temp--;\n            }\n\
    \            x = quotient;\n        }\n        sb.insert(0, (char) ('0' + remainder\
    \ % base));\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2oapjndp.java:34: error: variable remainder might not have been\
    \ initialized\n        sb.insert(0, (char) ('0' + remainder % base));\n      \
    \                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            result *= base;\n     \
    \       temp /= base;\n        }\n        return Long.toString(result);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwcnt_g0.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = base;\n        long temp3 = temp / temp2;\n        long temp4 = temp\
    \ % temp2;\n        long temp5 = temp3 / temp2;\n        long temp6 = temp3 %\
    \ temp2;\n        long temp7 = temp4 / temp2;\n        long temp8 = temp4 % temp2;\n\
    \        long temp9 = temp5 / temp2;\n        long temp10 = temp5 % temp2;\n \
    \       long temp11 = temp6 / temp2;\n        long temp12 = temp6 % temp2;\n \
    \       long temp13 = temp7 / temp2;\n        long temp14 = temp7 % temp2;\n \
    \       long temp15 = temp8 / temp2;\n        long temp16 = temp8 % temp2;\n \
    \       long temp17 = temp9 / temp2;\n        long temp18 = temp9 % temp2;\n \
    \       long temp19 = temp10 / temp2;\n        long temp20 = temp10 % temp2;\n\
    \        long temp21 = temp11 / temp2;\n        long temp22 = temp11 % temp2;\n\
    \        long temp23 = temp12 / temp2;\n        long temp24 = temp12 % temp2;\n\
    \        long temp25 = temp13 / temp2;\n        long temp26 = temp13 % temp2;\n\
    \        long temp27 = temp14 / temp2;\n        long temp28 = temp14 % temp2;\n\
    \        long temp29 = temp15 / temp2;\n        long temp30 = temp15 % temp2;\n\
    \        long temp31 = temp16 / temp2;\n        long temp32 = temp16 % temp2;\n\
    \        long temp33 = temp17 / temp2;\n        long temp34 = temp17 % temp2;\n\
    \        long temp35 = temp18 / temp2;\n        long temp36 = temp18 % temp2;\n\
    \        long temp37 = temp19 / temp2;\n        long temp38 = temp19 % temp2;\n\
    \        long temp39 = temp20 / temp2;\n        long temp40 = temp20 % temp2;\n\
    \        long temp41 = temp21 / temp2;\n        long temp42 = temp21 % temp2;\n\
    \        long temp43 = temp22 / temp2;\n        long temp44 = temp22 % temp2;\n\
    \        long temp45 = temp23 / temp2;\n        long temp46 = temp23 % temp2;\n\
    \        long temp47 = temp24 / temp2;\n        long temp48 = temp24 % temp2;\n\
    \        long temp49 = temp\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph71lws7s.java:67: error: ';' expected\n        long temp49 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res = (res * base) + x;\n            x /= base;\n   \
    \     }\n        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqouvvr9x.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        long result = 0;\n\
    \        while (temp > 0) {\n            result = result + (temp % base);\n  \
    \          temp = temp / base;\n        }\n        if (rem != 0) {\n         \
    \   result = result + rem;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7sx0h_9y.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long tmp = x;\n        long\
    \ res = 0;\n        while (base > 0) {\n            tmp = tmp / base;\n      \
    \      res = res * base + tmp;\n            base--;\n        }\n        return\
    \ Long.toString(res);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvwoibji.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long result = 0;\n        while (temp != 0) {\n\
    \            temp = temp / base;\n            result = result + (temp % base);\n\
    \        }\n        return Long.toString(result) + Long.toString(rem);\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9m7geff1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = result;\n        long quotient = result;\n        long temp;\n \
    \       long digit;\n        long remainder2;\n        long quotient2;\n     \
    \   long temp2;\n        long digit2;\n        long remainder3;\n        long\
    \ quotient3;\n        long temp3;\n        long digit3;\n        long remainder4;\n\
    \        long quotient4;\n        long temp4;\n        long digit4;\n        long\
    \ remainder5;\n        long quotient5;\n        long temp5;\n        long digit5;\n\
    \        long remainder6;\n        long quotient6;\n        long temp6;\n    \
    \    long digit6;\n        long remainder7;\n        long quotient7;\n       \
    \ long temp7;\n        long digit7;\n        long remainder8;\n        long quotient8;\n\
    \        long temp8;\n        long digit8;\n        long remainder9;\n       \
    \ long quotient9;\n        long temp9;\n        long digit9;\n        long remainder10;\n\
    \        long quotient10;\n        long temp10;\n        long digit10;\n     \
    \   long remainder11;\n        long quotient11;\n        long temp11;\n      \
    \  long digit11;\n        long remainder12;\n        long quotient12;\n      \
    \  long temp12;\n        long digit12;\n        long remainder13;\n        long\
    \ quotient13;\n        long temp13;\n        long digit13;\n        long remainder14;\n\
    \        long quotient14;\n        long temp14;\n        long digit14;\n     \
    \   long remainder15;\n        long quotient15;\n        long temp15;\n      \
    \  long digit15;\n        long remainder16;\n        long quotient16;\n      \
    \  long temp16;\n        long digit16;\n        long remainder17;\n        long\
    \ quotient17;\n        long temp17;\n        long digit17;\n        long remainder18;\n\
    \        long quotient18;\n        long temp18;\n        long digit18;\n     \
    \   long remainder19;\n        long quotient19;\n        long temp19;\n      \
    \  long digit19;\n        long remainder20;\n        long quotient20;\n      \
    \  long temp20;\n        long digit20;\n        long remainder21;\n        long\
    \ quotient21;\n        long temp21;\n        long digit21;\n        long remainder22;\n\
    \        long quotient22;\n        long temp22;\n        long digit22;\n     \
    \   long \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kt9xixz.java:108: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_kt9xixz.java:108: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        String\
    \ s = \"\";\n        while (n > 0) {\n            long r = n % base;\n       \
    \     s = String.valueOf(r) + s;\n            n = n / base;\n        }\n     \
    \   return s;\n\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ rem = temp % base;\n        long quotient = temp / base;\n        long quotient2\
    \ = quotient / base;\n        long quotient3 = quotient2 / base;\n        long\
    \ quotient4 = quotient3 / base;\n        long quotient5 = quotient4 / base;\n\
    \        long quotient6 = quotient5 / base;\n        long quotient7 = quotient6\
    \ / base;\n        long quotient8 = quotient7 / base;\n        long quotient9\
    \ = quotient8 / base;\n        long quotient10 = quotient9 / base;\n        long\
    \ quotient11 = quotient10 / base;\n        long quotient12 = quotient11 / base;\n\
    \        long quotient13 = quotient12 / base;\n        long quotient14 = quotient13\
    \ / base;\n        long quotient15 = quotient14 / base;\n        long quotient16\
    \ = quotient15 / base;\n        long quotient17 = quotient16 / base;\n       \
    \ long quotient18 = quotient17 / base;\n        long quotient19 = quotient18 /\
    \ base;\n        long quotient20 = quotient19 / base;\n        long quotient21\
    \ = quotient20 / base;\n        long quotient22 = quotient21 / base;\n       \
    \ long quotient23 = quotient22 / base;\n        long quotient24 = quotient23 /\
    \ base;\n        long quotient25 = quotient24 / base;\n        long quotient26\
    \ = quotient25 / base;\n        long quotient27 = quotient26 / base;\n       \
    \ long quotient28 = quotient27 / base;\n        long quotient29 = quotient28 /\
    \ base;\n        long quotient30 = quotient29 / base;\n        long quotient31\
    \ = quotient30 / base;\n        long quotient32 = quotient31 / base;\n       \
    \ long quotient33 = quotient32 / base;\n        long quotient34 = quotient33 /\
    \ base;\n        long quotient35 = quotient34 / base;\n        long quotient36\
    \ = quotient35 / base;\n        long quotient37 = quotient36 / base;\n       \
    \ long quotient38 = quotient37 / base;\n        long quotient39 = quotient38 /\
    \ base;\n        long quotient40 = quoti\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5laldgp.java:60: error: ';' expected\n        long quotient40\
    \ = quoti\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 1;\n        while (temp > 0) {\n            temp = temp / base;\n \
    \           result = (result * base) + temp;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0awtciil.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder = x % base;\n\
    \        long quotient = x / base;\n        String result = \"\";\n        if\
    \ (remainder == 0) {\n            result = String.valueOf(quotient);\n       \
    \ } else {\n            result = String.valueOf(quotient) + String.valueOf(remainder);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0r6mtfx.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = temp;\n        long temp3 = temp;\n        long temp4 = temp;\n    \
    \    long temp5 = temp;\n        long temp6 = temp;\n        long temp7 = temp;\n\
    \        long temp8 = temp;\n        long temp9 = temp;\n        long temp10 =\
    \ temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long\
    \ temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n \
    \       long temp16 = temp;\n        long temp17 = temp;\n        long temp18\
    \ = temp;\n        long temp19 = temp;\n        long temp20 = temp;\n        long\
    \ temp21 = temp;\n        long temp22 = temp;\n        long temp23 = temp;\n \
    \       long temp24 = temp;\n        long temp25 = temp;\n        long temp26\
    \ = temp;\n        long temp27 = temp;\n        long temp28 = temp;\n        long\
    \ temp29 = temp;\n        long temp30 = temp;\n        long temp31 = temp;\n \
    \       long temp32 = temp;\n        long temp33 = temp;\n        long temp34\
    \ = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long\
    \ temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n \
    \       long temp40 = temp;\n        long temp41 = temp;\n        long temp42\
    \ = temp;\n        long temp43 = temp;\n        long temp44 = temp;\n        long\
    \ temp45 = temp;\n        long temp46 = temp;\n        long temp47 = temp;\n \
    \       long temp48 = temp;\n        long temp49 = temp;\n        long temp50\
    \ = temp;\n        long temp51 = temp;\n        long temp52 = temp;\n        long\
    \ temp53 = temp;\n        long temp54 = temp;\n        long temp55 = temp;\n \
    \       long temp56 = temp;\n        long temp57 = temp;\n        long temp58\
    \ = temp;\n        long temp59 = temp;\n        long temp60 = temp;\n        long\
    \ temp61 = temp;\n        long temp62 = temp;\n        long temp63 = temp;\n \
    \       long temp64 = temp;\n        long temp65 = temp;\n        long temp66\
    \ = temp\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp28n6urri.java:84: error: ';' expected\n        long temp66 = temp\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        while\
    \ (result > 0) {\n            result /= base;\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgc1oqn3n.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long rem = x % base;\n     \
    \   long quotient = x / base;\n        long result = quotient * base;\n      \
    \  if (rem > 0)\n            result += rem;\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zturxqt.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        long result\
    \ = temp;\n        while(temp != 0) {\n            temp = temp / base;\n     \
    \       result = result * base + rem;\n            rem = temp % base;\n      \
    \  }\n        return Long.toString(result);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu3k43c9g.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        long\
    \ temp = x;\n        while (temp > 0) {\n            res = (res * base) + temp\
    \ % base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1jw9oti.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res += x % base;\n            x /= base;\n        }\n\
    \        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkptog3aj.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp != 0) {\n            res = res * base + temp %\
    \ base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8ubu_b7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res += (temp % base);\n  \
    \          temp /= base;\n        }\n        return Long.toString(res);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprt81az2i.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long result = x;\n        long\
    \ remainder = 0;\n        while (result != 0) {\n            remainder = result\
    \ % base;\n            result = result / base;\n        }\n        return Long.toString(remainder);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgmz3gjv.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ temp2 = x;\n        long temp3 = x;\n        long temp4 = x;\n        long temp5\
    \ = x;\n        long temp6 = x;\n        long temp7 = x;\n        long temp8 =\
    \ x;\n        long temp9 = x;\n        long temp10 = x;\n        long temp11 =\
    \ x;\n        long temp12 = x;\n        long temp13 = x;\n        long temp14\
    \ = x;\n        long temp15 = x;\n        long temp16 = x;\n        long temp17\
    \ = x;\n        long temp18 = x;\n        long temp19 = x;\n        long temp20\
    \ = x;\n        long temp21 = x;\n        long temp22 = x;\n        long temp23\
    \ = x;\n        long temp24 = x;\n        long temp25 = x;\n        long temp26\
    \ = x;\n        long temp27 = x;\n        long temp28 = x;\n        long temp29\
    \ = x;\n        long temp30 = x;\n        long temp31 = x;\n        long temp32\
    \ = x;\n        long temp33 = x;\n        long temp34 = x;\n        long temp35\
    \ = x;\n        long temp36 = x;\n        long temp37 = x;\n        long temp38\
    \ = x;\n        long temp39 = x;\n        long temp40 = x;\n        long temp41\
    \ = x;\n        long temp42 = x;\n        long temp43 = x;\n        long temp44\
    \ = x;\n        long temp45 = x;\n        long temp46 = x;\n        long temp47\
    \ = x;\n        long temp48 = x;\n        long temp49 = x;\n        long temp50\
    \ = x;\n        long temp51 = x;\n        long temp52 = x;\n        long temp53\
    \ = x;\n        long temp54 = x;\n        long temp55 = x;\n        long temp56\
    \ = x;\n        long temp57 = x;\n        long temp58 = x;\n        long temp59\
    \ = x;\n        long temp60 = x;\n        long temp61 = x;\n        long temp62\
    \ = x;\n        long temp63 = x;\n        long temp64 = x;\n        long temp65\
    \ = x;\n        long temp66 = x;\n        long temp67 = x;\n        long temp68\
    \ = x;\n        long temp69 = x;\n        long temp70 = x;\n        long temp71\
    \ = x;\n        long temp72 = x;\n        long temp73 = x;\n        long temp74\
    \ = x;\n        long temp75 = x;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfsfjnhiw.java:95: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphb7va_31.java:96: error: ';' expected\n        temp = temp\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long d\
    \ = 1;\n        long r = 1;\n        long t = 1;\n        long m = 1;\n      \
    \  long basePower = 1;\n        long basePower2 = 1;\n        long basePower3\
    \ = 1;\n        long basePower4 = 1;\n        long basePower5 = 1;\n        long\
    \ basePower6 = 0;\n        long basePower7 = 0;\n        long basePower8 = 0;\n\
    \        long basePower9 = 0;\n        long basePower10 = 0;\n        long basePower11\
    \ = 0;\n        long basePower12 = 0;\n        long basePower13 = 0;\n       \
    \ long basePower14 = 0;\n        long basePower15 = 0;\n        long basePower16\
    \ = 0;\n        long basePower17 = 0;\n        long basePower18 = 0;\n       \
    \ long basePower19 = 0;\n        long basePower20 = 0;\n        long basePower21\
    \ = 0;\n        long basePower22 = 0;\n        long basePower23 = 0;\n       \
    \ long basePower24 = 0;\n        long basePower25 = 0;\n        long basePower26\
    \ = 0;\n        long basePower27 = 0;\n        long basePower28 = 0;\n       \
    \ long basePower29 = 0;\n        long basePower30 = 0;\n        long basePower31\
    \ = 0;\n        long basePower32 = 0;\n        long basePower33 = 0;\n       \
    \ long basePower34 = 0;\n        long basePower35 = 0;\n        long basePower36\
    \ = 0;\n        long basePower37 = 0;\n        long basePower38 = 0;\n       \
    \ long basePower39 = 0;\n        long basePower40 = 0;\n        long basePower41\
    \ = 0;\n        long basePower42 = 0;\n        long basePower43 = 0;\n       \
    \ long basePower44 = 0;\n        long basePower45 = 0;\n        long basePower46\
    \ = 0;\n        long basePower47 = 0;\n        long basePower48 = 0;\n       \
    \ long basePower49 = 0;\n        long basePower50 = 0;\n        long basePower51\
    \ = 0;\n        long basePower52 = 0;\n        long basePower53 = 0;\n       \
    \ long basePower54 = 0;\n        long basePower55 = 0;\n        long basePower56\
    \ = 0;\n        long basePower57 = 0;\n        long basePower58 = 0;\n       \
    \ long basePower59 = 0;\n        long basePower60 = 0;\n        long basePower61\
    \ = 0;\n        long basePower62 = 0;\n        long basePower63 = 0;\n       \
    \ long basePower64 = 0;\n        long basePower65 = 0;\n        long basePower66\
    \ = 0;\n        long basePower67 = 0;\n        long basePower68 = 0;\n       \
    \ long basePower69 = 0;\n        long basePower70\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1u3f8qse.java:93: error: ';' expected\n        long basePower70\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res = (res * base) + temp\
    \ % base;\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnl6ad89x.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        long r\
    \ = 1;\n        while (n > 0) {\n            r = r * base;\n            n = n\
    \ / base;\n        }\n        return Long.toString(r);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqnq75a5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long temp2;\n        temp2 = temp / base;\n        long temp3;\n    \
    \    temp3 = temp % base;\n        long temp4;\n        temp4 = temp2 / base;\n\
    \        long temp5;\n        temp5 = temp2 % base;\n        long temp6;\n   \
    \     temp6 = temp3 / base;\n        long temp7;\n        temp7 = temp3 % base;\n\
    \        long temp8;\n        temp8 = temp4 / base;\n        long temp9;\n   \
    \     temp9 = temp4 % base;\n        long temp10;\n        temp10 = temp5 / base;\n\
    \        long temp11;\n        temp11 = temp5 % base;\n        long temp12;\n\
    \        temp12 = temp6 / base;\n        long temp13;\n        temp13 = temp6\
    \ % base;\n        long temp14;\n        temp14 = temp7 / base;\n        long\
    \ temp15;\n        temp15 = temp7 % base;\n        long temp16;\n        temp16\
    \ = temp8 / base;\n        long temp17;\n        temp17 = temp8 % base;\n    \
    \    long temp18;\n        temp18 = temp9 / base;\n        long temp19;\n    \
    \    temp19 = temp9 % base;\n        long temp20;\n        temp20 = temp10 / base;\n\
    \        long temp21;\n        temp21 = temp10 % base;\n        long temp22;\n\
    \        temp22 = temp11 / base;\n        long temp23;\n        temp23 = temp11\
    \ % base;\n        long temp24;\n        temp24 = temp12 / base;\n        long\
    \ temp25;\n        temp25 = temp12 % base;\n        long temp26;\n        temp26\
    \ = temp13 / base;\n        long temp27;\n        temp27 = temp13 % base;\n  \
    \      long temp28;\n        temp28 = temp14 / base;\n        long temp29;\n \
    \       temp29 = temp14 % base;\n        long temp30;\n        temp30 = temp15\
    \ / base;\n        long temp31;\n        temp31 = temp15 % base;\n        long\
    \ temp32;\n        temp32 = temp16 / base;\n        long temp33;\n        temp33\
    \ = temp16 % base;\n        long temp34;\n        temp34 = temp17 / base;\n  \
    \      long temp35;\n        temp35 = temp17 % base;\n        long temp36;\n \
    \       temp36 = temp18 / base;\n        long temp37;\n        temp37 = \n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkpe3v4l0.java:93: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        long result = 0;\n        while (temp > 0) {\n            temp = temp\
    \ / base;\n            result = result + (temp % base);\n        }\n        return\
    \ Long.toString(result);\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bj1d197.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp;\n        temp = x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n\
    \        temp = temp + x;\n        temp = temp / base;\n        temp = temp *\
    \ base;\n        temp = temp + x;\n        temp = temp / base;\n        temp =\
    \ temp * base;\n        temp = temp + x;\n        temp = temp / base;\n      \
    \  temp = temp * base;\n        temp = temp + x;\n        temp = temp / base;\n\
    \        temp = temp * base;\n        temp = temp + x;\n        temp = temp /\
    \ base;\n        temp = temp * base;\n        temp = temp + x;\n        temp =\
    \ temp / base;\n        temp = temp * base;\n        temp = temp + x;\n      \
    \  temp = temp / base;\n        temp = temp * base;\n        temp = temp + x;\n\
    \        temp = temp / base;\n        temp = temp * base;\n        temp = temp\
    \ + x;\n        temp = temp / base;\n        temp = temp * base;\n        temp\
    \ = temp + x;\n        temp = temp / base;\n        temp = temp * base;\n    \
    \    temp = temp + x;\n        temp = temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dx5on5f.java:96: error: ';' expected\n        temp = temp\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long n = x;\n        String\
    \ s = \"\";\n        while (n > 0) {\n            long r = n % base;\n       \
    \     n = n / base;\n            s = String.valueOf(r) + s;\n        }\n     \
    \   return s;\n\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long res = 0;\n        while\
    \ (x > 0) {\n            res = (res * base) + x;\n            x /= base;\n   \
    \     }\n        return Long.toString(res);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprg92bacs.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ res = 0;\n        while (temp > 0) {\n            res = res * base + (temp %\
    \ base);\n            temp /= base;\n        }\n        return Long.toString(res);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdu89c61.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long temp = x;\n        long\
    \ result = 0;\n        while (temp > 0) {\n            long digit = temp % base;\n\
    \            temp = temp / base;\n            result = result + (digit < 10 ?\
    \ digit + '0' : digit - 10 + 'a');\n        }\n        return Long.toString(result);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppftsap94.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
    \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
    \ String changeBase(long x, long base) {\n        long remainder;\n        String\
    \ result = \"\";\n        do {\n            remainder = x % base;\n          \
    \  result += String.valueOf(remainder);\n            x /= base;\n        } while\
    \ (x != 0);\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoa4y487l.java:31)\n"
  exit_code: 1
  status: Exception
